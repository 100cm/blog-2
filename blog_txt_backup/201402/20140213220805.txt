PostgreSQL research

PostgreSQL string store bug? not enforce check with correct characterSET/encoding

2014-02-13 22:08:05   查看原文>>

在PostgreSQL中, 除了sql_ascii字符集编码不检查编码的合法性, 其他字符集都是会检查编码合法性的.
这个在PostgreSQL手册中有明确的说明:
参考
http://www.postgresql.org/docs/9.3/static/multibyte.html
http://blog.163.com/digoal@126/blog/static/163877040201211281407682/
http://blog.163.com/digoal@126/blog/static/16387704020132150381348/
http://blog.163.com/digoal@126/blog/static/1638770402011718112210516/
例如我们数据库服务端使用的是UTF8字符集, 那么在存储的时候, 数据库会检查是否符合UTF8的协定, 如果不符合则会报错.
例如 : 

ERROR:  invalid byte sequence for encoding "UTF8": 0xee 0xc1 0x22


这样看来不合法的字符应该不会存储到数据库中, 但是最近在做一些数据迁移时发现了这样的问题, 两个数据库在两台服务器上, 操作系统中的LANG一致, 都是UTF8, 数据库的字符集也都是UTF8, 但是数据导出后倒入到另一个库, 有些数据就是报这样的错误, 因此无法正常的迁移某些数据.
从现象上看, 应该是数据库中存储了非法的字符. 那么既然有检查, 又是怎么存储进去的呢?
我这里使用convert_from这个函数来还原这个现象.

我们看到, 除了sql_ascii都会进行字符集的转换.
postgres=# select t,t::bytea from convert_from('\xeec1','gbk') as g(t);
 t  |    t     
----+----------
 盍 | \xe79b8d
(1 row)
postgres=# select t,t::bytea from convert_from('\xeec1','utf8') as g(t);
ERROR:  invalid byte sequence for encoding "UTF8": 0xee 0xc1
但是使用sql_ascii是如实存储字节流, 不进行任何转换的.
postgres=# select t,t::bytea from convert_from('\xeec1','sql_ascii') as g(t);
 t |   t    
---+--------
   | \xeec1
(1 row)
使用这种方法, 可以把非法的字节流存入数据库中.
postgres=# create table test(info text);
CREATE TABLE
postgres=# insert into test values (convert_from('\xeec1','sql_ascii'));
INSERT 0 1
postgres=# select info,info::bytea from test;
 info |  info  
------+--------
      | \xeec1
(1 row)


这条记录备份出来的话, 是无法恢复的, 如下 : 

postgres@db-192-168-173-55-> pg_dump -t test -a|psql -f -
SET
SET
SET
SET
SET
SET
psql:<stdin>:19: ERROR:  invalid byte sequence for encoding "UTF8": 0xee 0xc1
CONTEXT:  COPY test, line 1



只能在数据库中直接使用, 例如 : 

postgres=# insert into test select * from test;
INSERT 0 1
postgres=# select info,info::bytea from test;
 info |  info  
------+--------
      | \xeec1
      | \xeec1
(2 rows)



这个问题使得数据的备份还原成为一个麻烦事.
可能还有其他的方式会把非法的数据存入数据库中, 这就造成了现在的情况.
如果要跨库导入这些数据, 目前可通过DBLINK或者外部表来导入, 使用备份还原的方式都会发生字符非法的问题.
原因是COPY命令中使用的是pg_any_to_server来校验编码合法性的, 如果改成存在问题的pg_do_encoding_conversion则可以解决导入非法的报错. 如下 : 

vi src/backend/commands/copy.c
修改以下代码
                cvt = pg_any_to_server(cstate->line_buf.data,
                                                           cstate->line_buf.len,
                                                           cstate->file_encoding);
改成
                cvt = pg_do_encoding_conversion(cstate->line_buf.data,
                                                           cstate->line_buf.len,
                                                           GetDatabaseEncoding(), cstate->file_encoding);


编译后重启数据库即可

gmake;gmake install
pg_ctl restart -m fast
digoal=# copy tbl to '/home/pg931/tbl.txt';
digoal=# truncate tbl;
TRUNCATE TABLE
digoal=# copy tbl from '/home/pg931/tbl.txt';
COPY 8
digoal=# select info,info::bytea from tbl;
 info  |     info     
-------+--------------
       | \xee
 \x01  | \x01
 hello | \x68656c6c6f
       | \xeec1
       | \xee
 \x01  | \x01
 hello | \x68656c6c6f
       | \xeec1
(8 rows)


非法数据可以成功导入. 但是这些非法始终在里面是个不定时炸弹. 建议尽快修复数据.  导入成功后把代码改回去编译重启.

我在pgsql-bug中报告了这个BUG, Tom Lane的回复 : 

Hm, yeah.  Normal input to the database goes through pg_any_to_server(),
which will apply a validation step if the source encoding is SQL_ASCII
and the destination encoding is something else.  However, pg_convert and
some other places call pg_do_encoding_conversion() directly, and that
function will just quietly do nothing if either encoding is SQL_ASCII.

The minimum-refactoring solution to this would be to tweak
pg_do_encoding_conversion() so that if the src_encoding is SQL_ASCII but
the dest_encoding isn't, it does pg_verify_mbstr() rather than nothing.

I'm not sure if this would break anything we need to have work,
though.  Thoughts?  Do we want to back-patch such a change?

                        regards, tom lane


http://www.postgresql.org/message-id/flat/20127.1392324548@sss.pgh.pa.us#20127.1392324548@sss.pgh.pa.us
补丁
http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=769065c1b2471f484bb48bb58a8bdcf1d12a419c

因为数据库中存在有两种数据入入函数, 一种是会检查字符集合法性的, 使用pg_any_to_server();
而另一种函数则使用pg_do_encoding_conversion(), 这个函数只有客户端或者服务端有一方使用sql_ascii编码则不检查编码合法性. tom lane考虑未来通过修改pg_do_encoding_conversion来解决这个校验问题.
我这边修改并编译后, 确实可行. 如下 : 

vi src/backend/utils/mb/mbutils.c
unsigned char *
pg_do_encoding_conversion(unsigned char *src, int len,
                                                  int src_encoding, int dest_encoding)
{
...
// 将以下两行改成后面的.
        // if (src_encoding == PG_SQL_ASCII || dest_encoding == PG_SQL_ASCII)
        //              return src;

        if (dest_encoding == PG_SQL_ASCII)
                return src;

        if (src_encoding == PG_SQL_ASCII)
                /*
                 * No conversion is needed, but we must still validate the data.
                 */
                (void) pg_verify_mbstr(DatabaseEncoding->encoding, src, len, false);
                // return (char *) src;
                return src;


改完后重新编译, 重启数据库即可.

gmake
gmake install
pg_ctl restart -m fast


这时插入就会报错了.

digoal=# \set VERBOSITY verbose
digoal=# insert into tbl select convert_from('\xeec1','sql_ascii');
ERROR:  22021: invalid byte sequence for encoding "UTF8": 0xee 0xc1
LOCATION:  report_invalid_encoding, wchar.c:2020



[参考]
1. src/backend/utils/mb/mbutils.c
2. src/backend/utils/mb/wchar.c
3. postgres=# \df convert*

                              List of functions
   Schema   |     Name     | Result data type | Argument data types |  Type  
------------+--------------+------------------+---------------------+--------
 pg_catalog | convert      | bytea            | bytea, name, name   | normal
 pg_catalog | convert_from | text             | bytea, name         | normal
 pg_catalog | convert_to   | bytea            | text, name          | normal
(3 rows)


4. 使用python 的unicode函数测试是否为UTF8, 找出非法值.

#!/usr/bin/python

import sys
import re

def isUTF8(text):
    try:
        text = unicode(text, 'UTF-8', 'strict')
        return True
    except UnicodeDecodeError:
        return False

COPY = re.compile('^COPY .+ FROM stdin;$')
ENDCOPY = re.compile('\\\.')
SEARCHPATH = re.compile('^SET search_path')

incopy = 0
linenum = 0
copyline = ''
badtables = []

for line in sys.stdin:
        if COPY.match(line):
                incopy = 1
                copyline = line

        elif ENDCOPY.match(line):
                if linenum > 0:
                        sys.stdout.write("\.\n\n")
                        linenum = 0
                        incopy = 0

        elif SEARCHPATH.match(line):
                searchpath = line
                
        if not isUTF8(line):
                linenum += 1
                if linenum == 1:
                        sys.stdout.write(searchpath)
                        sys.stdout.write(copyline)
                        schema = re.sub(r'SET search_path = (.*), .*$', r'\1', searchpath.replace('\n', '') )
                        table = re.sub(r'^COPY ("?[\w/_-]+"?) .+ FROM stdin;$', r'\1', copyline.replace('\n', '') )
                        fqtable = schema + '.' + table
                        badtables.append(fqtable)
                sys.stdout.write(line)

sys.stderr.write("pg_dump --schema-only")
for mytable in badtables:
        sys.stderr.write(" --table " + mytable)


评论

Cutis_Dow - 2015-01-30 14:51:18

我安装的pg是.run文件，没有源码。安装了集群后相当于集群完全接管了数据库，我可否在postgres-xl的源码里修改copy.c实现你上面所说的。另外你说pg_do_encoding_conversion存在问题，请问这个命令有哪些问题，因为集群是线上的，每次修改重启成本很大，需要慎重考虑

德哥@Digoal 回复 Cutis_Dow - 2015-01-30 14:51:18

HI,有些情况下是可以将非法字符存入的,但是取出来再存储进去走COPY协议的话,是需要检测的,所以遇到已经录入的非法字符要导入的话,可以通过禁用检测的方式入库.

byfei163 - 2014-02-17 10:22:48

pg9.2.4 hot standby 遭遇"WAL contains references to invalid pages"碰到过没

2014-02-17 01:11:53.428 GMT,,,27597,,53015278.6bcd,7,,2014-02-17 00:06:16 GMT,1/0,0,WARNING,01000,"page 2285 of relation pg_tblspc/16385/PG_9.2_201204301/12788/76024 is uninitialized",,,,,"xlog redo delete: index 16385/12788/76033; iblk 387, heap 16385/12788/76024;",,,,""
2014-02-17 01:11:53.428 GMT,,,27597,,53015278.6bcd,8,,2014-02-17 00:06:16 GMT,1/0,0,PANIC,XX000,"WAL contains references to invalid pages",,,,,"xlog redo delete: index 16385/12788/76033; iblk 387, heap 16385/12788/76024;",,,,""
2014-02-17 01:11:53.870 GMT,,,27595,,53015277.6bcb,2,,2014-02-17 00:06:15 GMT,,0,LOG,00000,"startup process (PID 27597) was terminated by signal 6: Aborted",,,,,,,,,""
2014-02-17 01:11:53.870 GMT,,,27595,,53015277.6bcb,3,,2014-02-17 00:06:15 GMT,,0,LOG,00000,"terminating any other active server processes",,,,,,,,,""

德哥@Digoal 回复 byfei163 - 2014-02-17 10:22:48

你可能关闭了full_page_writes, 数据库或系统异常崩溃后DATA FILE和WAL记录的片段不一致. 你这个案例应该是索引页在checkpoint后未flush到disk, 而wal已经记录了对应页的变更.

byfei163 回复德哥@Digoal - 2014-02-17 10:22:48

恩，非常感谢你的回复，full_page_writes=on，关闭的时候先stop smart，关闭不了后才-m fast

德哥@Digoal 回复 byfei163 - 2014-02-17 10:22:48

-m fast停库不需要recovery.
