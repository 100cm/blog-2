PostgreSQL research

PostgreSQL 9.4 new feature: Replication slots

2014-02-04 17:05:04   查看原文>>

PostgreSQL 9.4 新增的一个特写, replication slot, 
1. 可以被流复制的sender节点用于自动识别它xlog中的数据在下面的standby中是否还需要(例如, standby断开连接后, 还未接收到的XLOG), 如果还需要的话, 那么这些XLOG将不会被删除.
2. 对于tuples, 如果standby 配置了hot_standby_feedback=on, 那么发生冲突的tuples将不会在sender端被vacuum回收. 用于规避冲突.
配置比较简单, 需要在sender端使用函数创建slot, 在receiver端配置对应的slot name即可.

Introduce replication slots.
author  Robert Haas <rhaas@postgresql.org>
        Sat, 1 Feb 2014 03:45:17 +0000 (22:45 -0500)
committer       Robert Haas <rhaas@postgresql.org>
        Sat, 1 Feb 2014 03:45:36 +0000 (22:45 -0500)
commit  858ec11858a914d4c380971985709b6d6b7dd6fc
tree    59eb508185cd8544c3485919a25dee15f3818c21        tree | snapshot
parent  5bdef38b8917cfbe206d14969c61a5d38fc822b6        commit | diff
Introduce replication slots.

Replication slots are a crash-safe data structure which can be created
on either a master or a standby to prevent premature removal of
write-ahead log segments needed by a standby, as well as (with
hot_standby_feedback=on) pruning of tuples whose removal would cause
replication conflicts.  Slots have some advantages over existing
techniques, as explained in the documentation.

In a few places, we refer to the type of replication slots introduced
by this patch as "physical" slots, because forthcoming patches for
logical decoding will also have slots, but with somewhat different
properties.

Andres Freund and Robert Haas



功能介绍请参考 : 
http://www.postgresql.org/docs/devel/static/warm-standby.html#STREAMING-REPLICATION-SLOTS
相关参数
postgresql.conf  - sender server config
max_replication_slots (integer)

    Specifies the maximum number of replication slots (see Section 25.2.6 that the server can support. The default is zero. This parameter can only be set at server start. wal_level must be set to archive or higher to allow replication slots to be used. Setting it to a lower value than the number of currently existing
    replication slots will prevent the server from starting.

    recovery.conf
    +# If set, the PostgreSQL server will use the specified replication slot when
    +# connecting to the primary via streaming replication to control resource
    +# removal on the upstream node. This setting has no effect if primary_conninfo
    +# is not set.
    +#
    +#primary_slotname = ''

    相关函数, 视图

    Table 9-67. Replication SQL Functions

    ┌─────────────────────────────────────────────────────────┬─────────────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
    │                        Function                         │           Return Type           │                                                                                                         Description                                                                                                         │
    ├─────────────────────────────────────────────────────────┼─────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
    │pg_create_physical_replication_slot                      │(slotname text,xlog_positiontext)│Creates a new physical replication slot named slotname. Streaming changes from a physical slot is only possible with the walsender protocol - see Section 48.3. Corresponds to the walsender protocol                        │
    │(slotnametext, plugin text)                              │                                 │command CREATE_REPLICATION_SLOT ... PHYSICAL.                                                                                                                                                                                │
    ├─────────────────────────────────────────────────────────┼─────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
    │pg_drop_replication_slot(slotname text)                  │(slotname text)                  │Drops the physical or logical replication slot named slotname. Same as walsender protocol command DROP_REPLICATION_SLOT.                                                                                                     │
    └─────────────────────────────────────────────────────────┴─────────────────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

    You can create a replication slot like this:

    postgres=# SELECT * FROM pg_create_physical_replication_slot('node_a_slot');
      slotname   | xlog_position
    -------------+---------------
     node_a_slot |

    postgres=# SELECT * FROM pg_replication_slots;
      slot_name  | slot_type | datoid | database | active | xmin | restart_lsn
    -------------+-----------+--------+----------+--------+------+-------------
     node_a_slot | physical  |      0 |          | f      |      |
    (1 row)

    To configure the standby to use this slot, primary_slotname should be configured in the standby's recovery.conf. Here is a simple example:

    standby_mode = 'on'
    primary_conninfo = 'host=192.168.1.50 port=5432 user=foo password=foopass'
    primary_slotname = 'node_a_slot'

    流复制协议也做了相应的改进 : 

    使用slot的好处 : 
    1. 在没有replication slot这个特性以前, 有两种方法来保持standby需要的xlog, wal keep或者归档, 因为主节点不知道standby到底需要哪些XLOG信息, 配置一般需要较大的余量. slot可以解决这个浪费sender端存储wal空间的问题, 因为sender可以做到保留更精准的wal信息.
    2. 配合standby节点的feedback使用, 可以避免vacuum带来的冲突.

    [参考]
    1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=858ec11858a914d4c380971985709b6d6b7dd6fc
    2. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=0753bdb352270a03dec52bc959418fa82e9b07cc
    3. http://www.postgresql.org/docs/devel/static/runtime-config-replication.html#RUNTIME-CONFIG-REPLICATION-SENDER
    4. http://www.postgresql.org/docs/devel/static/warm-standby.html#STREAMING-REPLICATION-SLOTS
    5. http://www.postgresql.org/docs/devel/static/protocol-replication.html
    6. http://www.postgresql.org/docs/devel/static/functions-admin.html#FUNCTIONS-REPLICATION
    7. http://www.postgresql.org/docs/devel/static/hot-standby.html#HOT-STANDBY-CONFLICT
