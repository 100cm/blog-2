PostgreSQL research

PostgreSQL xidVacLimit, xidWarnLimit, xidStopLimit, xidWrapLimit, MaxTransactionId

2014-02-22 22:46:48   查看原文>>

今天兄弟部门的数据库遇到无法正常申请事务号的错误, 原因是某些库由于年龄太老, 已经到达允许的xid上限(xidStopLimit = xidWrapLimit - 1000000), 数据库预留了100万的事务作为维护用, 所以此时不允许任何会话申请新的事务号.
这样的话就必须进入单用户模式做vacuum freeze处理, 将年龄降下来.
另一种情况是警告, 如果在到达(xidWarnLimit = xidStopLimit - 10000000)的年龄后, 数据库会给出提示, 尽快执行vacuum freeze将数据库的年龄降下来, 避免达到xidStopLimit , 那个时候就必须进单用户处理了.
总的来说数据库有几个参数来防止数据库到达xidStopLimit .
1. vacuum_freeze_table_age
2. autovacuum_freeze_max_age

我先来说一下避免发生数据库年龄到达xidStopLimit的几种方法, 然后再说一下如何进单用户, 如何处理这种情况, 以及比较快速且变态的做法等 : 
避免发生数据库年龄到达xidStopLimit 的几种方法 : 
1. 
合理的设置vacuum_freeze_table_age, 这个参数决定了表的年龄到达这个值以来还未发生过全表数据块的vacuum的话, 那么这个vacuum或autovacuum操作就会扫描全表, 并且触发freeze, 从而降低表的年龄. 所以这个值不能太大, 这样的话数据库有足够多的机会降低表的年龄, 但是也不能太小, 太小的话, 会频繁的触发全表扫, 带来IO开销.
2. 
合理的设置autovacuum_freeze_max_age. 这个参数即使在没有开启autovacuum的情况下, 只要年龄到达这个值也会触发autovacuum.

src/backend/access/transam/varsup.c
        /*
         * We'll start trying to force autovacuums when oldest_datfrozenxid gets
         * to be more than autovacuum_freeze_max_age transactions old.
         *
         * Note: guc.c ensures that autovacuum_freeze_max_age is in a sane range,
         * so that xidVacLimit will be well before xidWarnLimit.
         *
         * Note: autovacuum_freeze_max_age is a PGC_POSTMASTER parameter so that
         * we don't have to worry about dealing with on-the-fly changes in its
         * value.  It doesn't look practical to update shared state from a GUC
         * assign hook (too many processes would try to execute the hook,
         * resulting in race conditions as well as crashes of those not connected
         * to shared memory).  Perhaps this can be improved someday.
         */
        xidVacLimit = oldest_datfrozenxid + autovacuum_freeze_max_age;


这个值是一个比较好的保护值, 最大是20亿, 但是不建议这么大, 应该预留足够的值防止到达xidStopLimit和xidWarnLimit阶段.
预留多少合适呢?
例如完成全库扫描要1天, 并且一天会产生1亿个事务的话, 那么预留最少要1亿比较好. 
这样的话就设置成19亿.
3.
数据库的使用要合理, 例如对于长事务, 并且事务隔离级别是repeatable read或SERIALIZABLE 的话, 会影响vacuum freeze降低对象的年龄, 将本文后面的测试. 
同样要避免和逻辑备份的时间点冲突, 逻辑备份使用的是repeatable read隔离级别, 并且备份时间长.
参见 : 
http://blog.163.com/digoal@126/blog/static/163877040201241134721101/
http://blog.163.com/digoal@126/blog/static/163877040201322510519547/
或pg_dump的代码.
4. 
控制单表的大小, 因为太大的话, 会增加单次扫描的负担, 如果未能降低年龄, 重复扫描更加浪费.
5. 
提升存储IO能力, 这样也能提升VACUUM FREEZE的速率.
6.
必要的情况下, 进行分库(严格来说是分集群, 不要放在一个集群下面, 因为xid是整个集群统一分配的).
7. 
加大maintenance_work_mem, 也能一定程度上提升vacuum 速率.

接下来讲一下进数据库单用户模式处理数据库到达xidStopLimit场景的方法 : 

首先关闭数据库
然后进入单用户, 进入指定的数据库名.
postgres --single -E $dbname
backend> 
为了最快的降低数据库的年龄, 其实没有必要做全库的vacuum freeze, 数据库的年龄由数据库中年龄最大的表决定.
所以只要把年龄最大的表年龄降下来, 数据库的年龄就会变成年龄次大的表的年龄, 以此类推.
那么我们进入单用户后, 首先要按年龄排序, 查出年龄大的表.
select b.nspname,a.relname,a.relfrozenxid,age(a.relfrozenxid) from pg_class a, pg_namespace b where a.relnamespace=b.oid and a.relkind='r' order by a.relfrozenxid::text::int8 limit 10;
根据查到的表做vacuum freeze.
vacuum freeze tbl;
做完以后, 查询一下数据库的年龄是否降了, 降到合理范围后. (建议降到)
select datname,datfrozenxid,age(datfrozenxid) from pg_database;
然后就可以启动数据库了, 启动后建议做全库的vacuum freeze, 彻底降低年龄, 同时定制空闲时间的vacuum freeze.



接下来说一下比较变态的做法.
如果要vacuum freeze的表非常大, 那么freeze的时间可能会很久, 但是业务又不允许停很久的话, 可以有变态的方法吗?
其实可以修改pg_database的datfrozenxid, 以及pg_class的relfrozenxid. 这样的话对于那些非常老的tuple, 可能会发生disappear的现象. 如果业务允许这么做, 那么这是最快的方法.
改完后在不影响业务的情况下, 尽快对这些表执行vacuum freeze. 
disappear原理参考 : 
http://blog.163.com/digoal@126/blog/static/163877040201183043153622/
例子 : 
假设postgres数据库的xid到达了xidStopLimit, 必须进单用户处理.

1. 关闭数据库
pg93@db-172-16-3-150-> pg_ctl stop -m fast
waiting for server to shut down.... done
server stopped
2. 单用户启动数据库, 连接到postgres库.
pg93@db-172-16-3-150-> postgres --single -E postgres
PostgreSQL stand-alone backend 9.3.1
查看当前数据库的datfrozenxid 
backend> select datname,datfrozenxid from pg_database where datname=current_database();
statement: select datname,datfrozenxid from pg_database where datname=current_database();

         1: datname     (typeid = 19, len = 64, typmod = -1, byval = f)
         2: datfrozenxid        (typeid = 28, len = 4, typmod = -1, byval = t)
        ----
         1: datname = "postgres"        (typeid = 19, len = 64, typmod = -1, byval = f)
         2: datfrozenxid = "316732855"  (typeid = 28, len = 4, typmod = -1, byval = t)
        ----
查看表的datfrozenxid , 排序输出
backend> select a.oid,b.nspname,a.relname,a.relfrozenxid,age(a.relfrozenxid) from pg_class a, pg_namespace b where a.relnamespace=b.oid and a.relkind='r' order by a.relfrozenxid::text::int8 limit 3;
statement: select a.oid,b.nspname,a.relname,a.relfrozenxid,age(a.relfrozenxid) from pg_class a, pg_namespace b where a.relnamespace=b.oid and a.relkind='r' order by a.relfrozenxid::text::int8 limit 3;

         1: oid (typeid = 26, len = 4, typmod = -1, byval = t)
         2: nspname     (typeid = 19, len = 64, typmod = -1, byval = f)
         3: relname     (typeid = 19, len = 64, typmod = -1, byval = f)
         4: relfrozenxid        (typeid = 28, len = 4, typmod = -1, byval = t)
         5: age (typeid = 23, len = 4, typmod = -1, byval = t)
        ----
         1: oid = "126133"      (typeid = 26, len = 4, typmod = -1, byval = t)
         2: nspname = "postgres"        (typeid = 19, len = 64, typmod = -1, byval = f)
         3: relname = "a"       (typeid = 19, len = 64, typmod = -1, byval = f)
         4: relfrozenxid = "316732855"  (typeid = 28, len = 4, typmod = -1, byval = t)
         5: age = "12261206"    (typeid = 23, len = 4, typmod = -1, byval = t)
        ----
         1: oid = "126136"      (typeid = 26, len = 4, typmod = -1, byval = t)
         2: nspname = "postgres"        (typeid = 19, len = 64, typmod = -1, byval = f)
         3: relname = "abc"     (typeid = 19, len = 64, typmod = -1, byval = f)
         4: relfrozenxid = "316732857"  (typeid = 28, len = 4, typmod = -1, byval = t)
         5: age = "12261204"    (typeid = 23, len = 4, typmod = -1, byval = t)
        ----
         1: oid = "126139"      (typeid = 26, len = 4, typmod = -1, byval = t)
         2: nspname = "postgres"        (typeid = 19, len = 64, typmod = -1, byval = f)
         3: relname = "p1"      (typeid = 19, len = 64, typmod = -1, byval = f)
         4: relfrozenxid = "316732859"  (typeid = 28, len = 4, typmod = -1, byval = t)
         5: age = "12261202"    (typeid = 23, len = 4, typmod = -1, byval = t)
        ----
我们看到a表的datfrozenxid 最小, 和数据库的datfrozenxid 一致, 所以把这个表的datfrozenxid 改大, 数据库的datfrozenxid 也改大 .
改之前把表的数据, hash sum记录一下, 以便后面比对数据
backend> select count(*) from a;
statement: select count(*) from a;

         1: count       (typeid = 20, len = 8, typmod = -1, byval = t)
        ----
         1: count = "100000"    (typeid = 20, len = 8, typmod = -1, byval = t)
        ----
backend> select sum(hashtext(a.*::text)) from a;
statement: select sum(hashtext(a.*::text)) from a;

         1: sum (typeid = 20, len = 8, typmod = -1, byval = t)
        ----
         1: sum = "-678752174844"       (typeid = 20, len = 8, typmod = -1, byval = t)
        ----
更新pg_class和pg_database的对应条目
backend> update pg_class set relfrozenxid=316732857::text::xid where oid=126133;
statement: update pg_class set relfrozenxid=316732857::text::xid where oid=126133;

backend> update pg_database set datfrozenxid=316732857::text::xid where datname=current_database();
statement: update pg_database set datfrozenxid=316732857::text::xid where datname=current_database();
检查点
backend> checkpoint;
statement: checkpoint;
LOG:  00000: checkpoint starting: immediate force wait
LOCATION:  LogCheckpointStart, xlog.c:6651
STATEMENT:  checkpoint;

LOG:  00000: checkpoint complete: wrote 0 buffers (0.0%); 0 transaction log file(s) added, 0 removed, 1 recycled; write=0.000 s, sync=0.000 s, total=0.003 s; sync files=0, longest=0.000 s, average=0.000 s
LOCATION:  LogCheckpointEnd, xlog.c:6746
STATEMENT:  checkpoint;
退出单用户
CTRL+D
直接更新pg_class和pg_database争取到了时间, 正常启动数据库后业务可以连过来, 不会报不允许请求新的 xid的错误
pg93@db-172-16-3-150-> pg_ctl start
pg93@db-172-16-3-150-> psql postgres postgres
psql (9.3.1)
Type "help" for help.
查询表的hash sum
postgres=# select sum(hashtext(a.*::text)) from a;
      sum      
---------------
 -678752174844
(1 row)
vacuum freeze a表
postgres=# vacuum freeze a;
VACUUM
查看表的hash sum , 正常
postgres=# select sum(hashtext(a.*::text)) from a;
      sum      
---------------
 -678752174844
(1 row)



接下来讲一下,2种事务隔离级别对vacuum freeze的影响讲解 : 
如果数据库提示无法执行任何事务, 建议进入stand-alone模式, 执行vacuum freeze的话, 这个时候已经无法执行事务了, 所以必须以单用户模式启动数据库, 执行vacuum freeze, 将年龄最老的表freeze掉来降低数据库的年龄.
具体介绍参见 : 
http://www.postgresql.org/docs/9.3/static/routine-vacuuming.html

ERROR:  database is not accepting commands to avoid wraparound data loss in database "mydb"
HINT:  Stop the postmaster and use a standalone backend to VACUUM in "mydb".


当freeze执行前, 数据库中存在活动的SERIALIZABLE 或 REPEATABLE READ 隔离级别的事务时, 且在freeze执行完后, 这个事务还未结束, 那么freeze将无法降低对象的年龄. 
例如 : 

SESSION A : 
digoal=# select relname,relfrozenxid,age(relfrozenxid) from pg_class where relname='a';
 relname | relfrozenxid | age 
---------+--------------+-----
 a       |         2035 |   3
(1 row)

digoal=# vacuum freeze a;
VACUUM
digoal=# select relname,relfrozenxid,age(relfrozenxid) from pg_class where relname='a';
 relname | relfrozenxid | age 
---------+--------------+-----
 a       |         2038 |   0
(1 row)

SESSION B : 
digoal=# begin ISOLATION LEVEL REPEATABLE READ;
BEGIN
digoal=# select * from b limit 1;
 id |               info               
----+----------------------------------
  5 | 77aadc6b569830d7c468c489e503055c
(1 row)

SESSION A : 
digoal=# select txid_current();
 txid_current 
--------------
         2038
(1 row)

digoal=# select txid_current();
 txid_current 
--------------
         2039
(1 row)

digoal=# select txid_current();
 txid_current 
--------------
         2040
(1 row)

digoal=# vacuum freeze a;
VACUUM
digoal=# select relname,relfrozenxid,age(relfrozenxid) from pg_class where relname='a';
 relname | relfrozenxid | age 
---------+--------------+-----
 a       |         2038 |   3
(1 row)



由于会话B的ISOLATION LEVEL REPEATABLE READ事务没有结束, 所以vacuum freeze无法正常的降低对象的年龄.
当SESSION B的事务结束后, 重新vacuum freeze的话, 可以降低年龄.
对于执行vacuum freeze过程中发起的ISOLATION LEVEL REPEATABLE READ事务, 不会影响vacuum freeze减低对象的年龄.

后期建议的预防措施 : 
1. 监控数据库年龄, 建议将这个监控加入nagios.
2. 自定义空闲时间的vacuum freeze.
修改pg_hba.conf

vi $PGDATA/pg_hba.conf
local   all  postgres trust
pg_ctl reload
vi $PGDATA/postgresql.conf  -- 以下这个可以不改, 后面的脚本连接正确的sock目录即可.
unix_socket_directory = '.'


脚本, 检索数据库中年龄大于1亿, 并且表的大小大于800MB(当BLOCKSIZE=8K时)的前2000个表. 
进行vacuum freeze操作.

vi /home/postgres/script/vacuumdb.sh

#!/bin/bash
# 环境变量
export PGPORT=5432
export PGDATA=/pgdata/pg_root
export LANG=en_US.utf8
export PGHOME=/opt/pgsql
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
export DATE=`date +"%Y%m%d%H%M"`
export PATH=$PGHOME/bin:$PATH:.

# 配置项
TODAY=`date +%Y%m%d`
AGE="500000000"
PAGES="102400"
LIMIT="5000"

HOST=$PGDATA
PORT=$PGPORT
ROLE="postgres"
QUERY1="select t2.nspname||'.'||t1.relname from pg_class t1 join pg_namespace t2 on (t1.relnamespace=t2.oid and t1.relkind='r' and age(t1.relfrozenxid)>$AGE and t1.relpages>$PAGES) order by age(relfrozenxid) desc limit 1;"

for ((i=1;i<$LIMIT;i++)) do
for DB in `psql -A -q -t -h $HOST -p $PORT -U $ROLE postgres -c "select datname from pg_database where datname not in ('postgres','template0','template1') and age(datfrozenxid)>(select setting::int from pg_settings where name='vacuum_freeze_table_age') order by age(datfrozenxid) desc"`
do
  for RELNAME in `psql -A -q -t -h $HOST -p $PORT -U $ROLE $DB -c "$QUERY1"`
  do
psql -h $HOST -p $PORT -U $ROLE $DB <<EOF
set synchronous_commit = off;
set work_mem = '2048MB';
set maintenance_work_mem = '2048MB';
vacuum freeze $RELNAME;
EOF
  done
done
done

chmod 500 vacuumdb.sh


执行计划, 挑选一个空闲时间段, 例如每周日的中午12点开始.

crontab -e
# vacuumdb
1 12 * * 1 /home/postgres/script/vacuumdb.sh >/dev/null 2>&1



[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201382495753521/
2. http://blog.163.com/digoal@126/blog/static/163877040201183043153622/
3. http://blog.163.com/digoal@126/blog/static/163877040201251911813661/
4. http://blog.163.com/digoal@126/blog/static/163877040201241134721101/
5. http://blog.163.com/digoal@126/blog/static/163877040201322510519547/
6. http://www.postgresql.org/docs/9.3/static/routine-vacuuming.html
7. src/backend/access/transam/varsup.c

         * Check to see if it's safe to assign another XID.  This protects against
         * catastrophic data loss due to XID wraparound.  The basic rules are:
         *
         * If we're past xidVacLimit, start trying to force autovacuum cycles.
         * If we're past xidWarnLimit, start issuing warnings.
         * If we're past xidStopLimit, refuse to execute transactions, unless
         * we are running in a standalone backend (which gives an escape hatch
         * to the DBA who somehow got past the earlier defenses).
         *
         * Note that this coding also appears in GetNewMultiXactId.


...
100万

        /*
         * We'll refuse to continue assigning XIDs in interactive mode once we get
         * within 1M transactions of data loss.  This leaves lots of room for the
         * DBA to fool around fixing things in a standalone backend, while not
         * being significant compared to total XID space. (Note that since
         * vacuuming requires one transaction per table cleaned, we had better be
         * sure there's lots of XIDs left...)
         */
        xidStopLimit = xidWrapLimit - 1000000;
        if (xidStopLimit < FirstNormalTransactionId)
                xidStopLimit -= FirstNormalTransactionId;



8. src/include/access/transam.h

/*
 * VariableCache is a data structure in shared memory that is used to track
 * OID and XID assignment state.  For largely historical reasons, there is
 * just one struct with different fields that are protected by different
 * LWLocks.
 *
 * Note: xidWrapLimit and oldestXidDB are not "active" values, but are
 * used just to generate useful messages when xidWarnLimit or xidStopLimit
 * are exceeded.
 */
typedef struct VariableCacheData
{
        /*
         * These fields are protected by OidGenLock.
         */
        Oid                     nextOid;                /* next OID to assign */
        uint32          oidCount;               /* OIDs available before must do XLOG work */

        /*
         * These fields are protected by XidGenLock.
         */
        TransactionId nextXid;          /* next XID to assign */

        TransactionId oldestXid;        /* cluster-wide minimum datfrozenxid */
        TransactionId xidVacLimit;      /* start forcing autovacuums here */
        TransactionId xidWarnLimit; /* start complaining here */
        TransactionId xidStopLimit; /* refuse to advance nextXid beyond here */
        TransactionId xidWrapLimit; /* where the world ends */
        Oid                     oldestXidDB;    /* database with minimum datfrozenxid */

        /*
         * These fields are protected by ProcArrayLock.
         */
        TransactionId latestCompletedXid;       /* newest XID that has committed or
                                                                                 * aborted */
} VariableCacheData;


9. 如何dump出ShmemVariableCache的内容?
首先确保数据库编译时开启了dtrace和debug.

pg93@db-172-16-3-150-> pg_config --configure
'--prefix=/home/pg93/pgsql9.3.1' '--with-pgport=1921' '--with-perl' '--with-tcl' '--with-python' '--with-openssl' '--with-pam' '--without-ldap' '--with-libxml' '--with-libxslt' '--enable-thread-safety' '--with-wal-blocksize=16' '--enable-dtrace' '--enable-debug'


然后参考src/include/access/transam.h头文件我们知道要DUMP的变量ShmemVariableCache的结构VariableCacheData, 
找到合适的跟踪点, 例如src/backend/access/transam/varsup.c的GetNewTransactionId函数, 每次申请XID的时候会调用, 并且可以输出当时的ShmemVariableCache变量的值.
使用stap跟踪如下 : 

[root@db-172-16-3-150 postgresql-9.3.2]# stap --vp 10000 -e '
probe process("/home/pg93/pgsql/bin/postgres").function("GetNewTransactionId@src/backend/access/transam/varsup.c")  
{
printf("%s\n", $ShmemVariableCache$$)              
}'
Pass 1: parsed user script and 96 library script(s) using 152020virt/25216res/2104shr/23928data kb, in 230usr/20sys/251real ms.


然后开启一个psql会话, 执行txid_current()申请一个新的xid.

digoal=# select txid_current();
 txid_current 
--------------
    328994069
(1 row)


stap的输出如下 : 

{.nextOid=130852, .oidCount=0, .nextXid=328994069, .oldestXid=1800, .xidVacLimit=1900001800, .xidWarnLimit=2136485447, .xidStopLimit=2146485447, .xidWrapLimit=2147485447, .oldestXidDB=1, .latestCompletedXid=328994068}


从结果我们得知几个重要的变量的值 xidVacLimit, xidWarnLimit, xidStopLimit, xidWrapLimit.
这几个变量的值是在SetTransactionIdLimit函数中设置的. 具体的算法请参考SetTransactionIdLimit函数.

1. xidVacLimit = autovacuum_freeze_max_age + oldestXid = 1900001800;
digoal=# show autovacuum_freeze_max_age;
 autovacuum_freeze_max_age 
---------------------------
 1900000000
(1 row)

2. xidWrapLimit = oldest_datfrozenxid + (MaxTransactionId >> 1); = 1800+2^31-1 = 2147485447
src/include/access/transam.h:#define MaxTransactionId                   ((TransactionId) 0xFFFFFFFF)

3. xidStopLimit = xidWrapLimit - 1000000; = 2146485447

4. xidWarnLimit = xidStopLimit - 10000000; = 2136485447



Flag Counter
