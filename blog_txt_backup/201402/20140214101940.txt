PostgreSQL research

greenplum plan bug when function called with insert?

2014-02-14 10:19:40   查看原文>>

在greenplum中调用函数时发现有这样的问题, 直接调用的话, 取到的是所有节点的总和, 但是放在insert语句中, 就变成单节点的值了.
例如 : 

warehouse=# create table t_test(dt date,sz int8) distributed by (dt);
CREATE TABLE


直接查询数据库的SIZE, 返回的是所有节点的总和.

warehouse=# select current_date,pg_database_size('gpperfmon');
    date    | pg_database_size 
------------+------------------
 2014-02-14 |      24165154728
(1 row)


但是如果把它写在insert语句中, pg_database_size居然只有一个节点的值.

warehouse=# insert into t_test select current_date,pg_database_size('gpperfmon');
INSERT 0 1
warehouse=# select * from t_test;
     dt     |    sz     
------------+-----------
 2014-02-14 | 729950888
(1 row)


通过查询执行计划, 发现问题出现在   (slice1)    Executor memory: 2181K bytes (seg28). 这个节点是pg_database_size执行的节点.    (slice0)    Executor memory: 115K bytes avg x 32 workers, 130K bytes max (seg10). 是插入的节点.

warehouse=# explain analyze select current_date-1,pg_database_size('gpperfmon');
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..0.02 rows=1 width=0)
   Rows out:  1 rows with 119 ms to end, start offset by 0.026 ms.
 Slice statistics:
   (slice0)    Executor memory: 63K bytes.
 Settings:  effective_cache_size=1250000MB; gp_segments_for_planner=0; random_page_cost=2; work_mem=192MB
 Total runtime: 119.220 ms
(6 rows)

warehouse=# explain analyze insert into t_test select current_date-1,pg_database_size('gpperfmon');
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Redistribute Motion 1:32  (slice1)  (cost=0.00..0.02 rows=1 width=0)
   Hash Key: dt
   Rows out:  1 rows at destination (seg10) with 5.411 ms to first row, 5.412 ms to end, start offset by -176 ms.
   ->  Result  (cost=0.00..0.02 rows=1 width=0)
         Rows out:  1 rows with 1.916 ms to end, start offset by -137 ms.
 Slice statistics:
   (slice0)    Executor memory: 115K bytes avg x 32 workers, 130K bytes max (seg10).
   (slice1)    Executor memory: 2181K bytes (seg28).
 Settings:  effective_cache_size=1250000MB; gp_segments_for_planner=0; random_page_cost=2; work_mem=192MB
 Total runtime: 36.934 ms
(10 rows)



这个问题同样适用于pg_relation_size这种函数.

pg-xc中则不会存在这个问题. 参考 : 
http://blog.163.com/digoal@126/blog/static/16387704020134222140958/
