PostgreSQL research

about PostgreSQL hot standby query conflict with XLOG replay

2015-03-25 11:00:14   查看原文>>

在hot standby执行查询时, 有可能这些未结束的查询会和将要发生的WAL apply发生冲突, 当发生冲突时, hot standby的startup进程(即恢复进程) 需要处理这样的冲突, 怎么处理呢?
有两个参数 : 

max_standby_archive_delay (integer)

    When Hot Standby is active, this parameter determines how long the standby server should wait before canceling standby queries that conflict with about-to-be-applied WAL entries, as described in Section 25.5.2. max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not
    current). The default is 30 seconds. Units are milliseconds if not specified. A value of -1 allows the standby to wait forever for conflicting queries to complete. This parameter can only be set in the postgresql.conf file or on the server command line.

    Note that max_standby_archive_delay is not the same as the maximum length of time a query can run before cancellation; rather it is the maximum total time allowed to apply any one WAL segment's data. Thus, if one query has resulted in significant delay earlier in the WAL segment, subsequent conflicting queries
    will have much less grace time.

max_standby_streaming_delay (integer)

    When Hot Standby is active, this parameter determines how long the standby server should wait before canceling standby queries that conflict with about-to-be-applied WAL entries, as described in Section 25.5.2. max_standby_streaming_delay applies when WAL data is being received via streaming replication. The
    default is 30 seconds. Units are milliseconds if not specified. A value of -1 allows the standby to wait forever for conflicting queries to complete. This parameter can only be set in the postgresql.conf file or on the server command line.

    Note that max_standby_streaming_delay is not the same as the maximum length of time a query can run before cancellation; rather it is the maximum total time allowed to apply WAL data once it has been received from the primary server. Thus, if one query has resulted in significant delay, subsequent conflicting
    queries will have much less grace time until the standby server has caught up again.

    以上两个参数决定了startup遇到冲突时的等待时间.

    等待时间的计算方法对应源码 : 
    src/backend/storage/ipc/standby.c

    /*
     * Determine the cutoff time at which we want to start canceling conflicting
     * transactions.  Returns zero (a time safely in the past) if we are willing
     * to wait forever.
     */
    static TimestampTz
    GetStandbyLimitTime(void)
    {
            TimestampTz rtime;
            bool            fromStream;

            /*
             * The cutoff time is the last WAL data receipt time plus the appropriate
             * delay variable.  Delay of -1 means wait forever.
             */
            GetXLogReceiptTime(&rtime, &fromStream);
            if (fromStream)
            {
                    if (max_standby_streaming_delay < 0)
                            return 0;                       /* wait forever */
                    return TimestampTzPlusMilliseconds(rtime, max_standby_streaming_delay);
            }
            else
            {
                    if (max_standby_archive_delay < 0)
                            return 0;                       /* wait forever */
                    return TimestampTzPlusMilliseconds(rtime, max_standby_archive_delay);
            }
    }



    发生冲突的原因有几个, 信号定义如下 : 
    有锁冲突, 表空间, 数据库冲突, 快照(MVCC)冲突, bufferpin冲突等.
    src/include/storage/procsignal.h

    /*
     * Reasons for signalling a Postgres child process (a backend or an auxiliary
     * process, like checkpointer).  We can cope with concurrent signals for different
     * reasons.  However, if the same reason is signaled multiple times in quick
     * succession, the process is likely to observe only one notification of it.
     * This is okay for the present uses.
     *
     * Also, because of race conditions, it's important that all the signals be
     * defined so that no harm is done if a process mistakenly receives one.
     */
    typedef enum
    {
            PROCSIG_CATCHUP_INTERRUPT,      /* sinval catchup interrupt */
            PROCSIG_NOTIFY_INTERRUPT,       /* listen/notify interrupt */

            /* Recovery conflict reasons */
            PROCSIG_RECOVERY_CONFLICT_DATABASE,
            PROCSIG_RECOVERY_CONFLICT_TABLESPACE,
            PROCSIG_RECOVERY_CONFLICT_LOCK,
            PROCSIG_RECOVERY_CONFLICT_SNAPSHOT,
            PROCSIG_RECOVERY_CONFLICT_BUFFERPIN,
            PROCSIG_RECOVERY_CONFLICT_STARTUP_DEADLOCK,

            NUM_PROCSIGNALS                         /* Must be last! */
    } ProcSignalReason;



    发生冲突导致Cancel query in hot standby的时候输出的错误日志 : 
    src/backend/tcop/postgres.c

    /*
     * errdetail_recovery_conflict
     *
     * Add an errdetail() line showing conflict source.
     */
    static int
    errdetail_recovery_conflict(void)
    {
            switch (RecoveryConflictReason)
            {
                    case PROCSIG_RECOVERY_CONFLICT_BUFFERPIN:
                            errdetail("User was holding shared buffer pin for too long.");
                            break;
                    case PROCSIG_RECOVERY_CONFLICT_LOCK:
                            errdetail("User was holding a relation lock for too long.");
                            break;
                    case PROCSIG_RECOVERY_CONFLICT_TABLESPACE:
                            errdetail("User was or might have been using tablespace that must be dropped.");
                            break;
                    case PROCSIG_RECOVERY_CONFLICT_SNAPSHOT:
                            errdetail("User query might have needed to see row versions that must be removed.");
                            break;
                    case PROCSIG_RECOVERY_CONFLICT_STARTUP_DEADLOCK:
                            errdetail("User transaction caused buffer deadlock with recovery.");
                            break;
                    case PROCSIG_RECOVERY_CONFLICT_DATABASE:
                            errdetail("User was connected to a database that must be dropped.");
                            break;
                    default:
                            break;
                            /* no errdetail */
            }

            return 0;
    }



    如何检查冲突
    src/backend/storage/ipc/procsignal.c

    /*
     * CheckProcSignal - check to see if a particular reason has been
     * signaled, and clear the signal flag.  Should be called after receiving
     * SIGUSR1.
     */
    static bool
    CheckProcSignal(ProcSignalReason reason)
    {
            volatile ProcSignalSlot *slot = MyProcSignalSlot;

            if (slot != NULL)
            {
                    /* Careful here --- don't clear flag if we haven't seen it set */
                    if (slot->pss_signalFlags[reason])
                    {
                            slot->pss_signalFlags[reason] = false;
                            return true;
                    }
            }

            return false;
    }

    /*
     * procsignal_sigusr1_handler - handle SIGUSR1 signal.
     */
    void
    procsignal_sigusr1_handler(SIGNAL_ARGS)
    {
            int                     save_errno = errno;

            if (CheckProcSignal(PROCSIG_CATCHUP_INTERRUPT))
                    HandleCatchupInterrupt();

            if (CheckProcSignal(PROCSIG_NOTIFY_INTERRUPT))
                    HandleNotifyInterrupt();

            if (CheckProcSignal(PROCSIG_RECOVERY_CONFLICT_DATABASE))
                    RecoveryConflictInterrupt(PROCSIG_RECOVERY_CONFLICT_DATABASE);

            if (CheckProcSignal(PROCSIG_RECOVERY_CONFLICT_TABLESPACE))
                    RecoveryConflictInterrupt(PROCSIG_RECOVERY_CONFLICT_TABLESPACE);

            if (CheckProcSignal(PROCSIG_RECOVERY_CONFLICT_LOCK))
                    RecoveryConflictInterrupt(PROCSIG_RECOVERY_CONFLICT_LOCK);

            if (CheckProcSignal(PROCSIG_RECOVERY_CONFLICT_SNAPSHOT))
                    RecoveryConflictInterrupt(PROCSIG_RECOVERY_CONFLICT_SNAPSHOT);

            if (CheckProcSignal(PROCSIG_RECOVERY_CONFLICT_STARTUP_DEADLOCK))
                    RecoveryConflictInterrupt(PROCSIG_RECOVERY_CONFLICT_STARTUP_DEADLOCK);

            if (CheckProcSignal(PROCSIG_RECOVERY_CONFLICT_BUFFERPIN))
                    RecoveryConflictInterrupt(PROCSIG_RECOVERY_CONFLICT_BUFFERPIN);

            if (set_latch_on_sigusr1 && MyProc != NULL)
                    SetLatch(&MyProc->procLatch);

            latch_sigusr1_handler();

            errno = save_errno;
    }



    冲突达到预设时间后的处理方法 : 

    /*
     * ProcessInterrupts: out-of-line portion of CHECK_FOR_INTERRUPTS() macro
     *
     * If an interrupt condition is pending, and it's safe to service it,
     * then clear the flag and accept the interrupt.  Called only when
     * InterruptPending is true.
     */
    void
    ProcessInterrupts(void)
    {
            /* OK to accept any interrupts now? */
            if (InterruptHoldoffCount != 0 || CritSectionCount != 0)
                    return;
            InterruptPending = false;

            if (ProcDiePending)
            {
                    ProcDiePending = false;
                    QueryCancelPending = false;             /* ProcDie trumps QueryCancel */
                    ImmediateInterruptOK = false;   /* not idle anymore */
                    LockErrorCleanup();
                    DisableNotifyInterrupt();
                    DisableCatchupInterrupt();
                    /* As in quickdie, don't risk sending to client during auth */
                    if (ClientAuthInProgress && whereToSendOutput == DestRemote)
                            whereToSendOutput = DestNone;
                    if (IsAutoVacuumWorkerProcess())
                            ereport(FATAL,
                                            (errcode(ERRCODE_ADMIN_SHUTDOWN),
                                             errmsg("terminating autovacuum process due to administrator command")));
                    else if (RecoveryConflictPending && RecoveryConflictRetryable)
                    {
                            pgstat_report_recovery_conflict(RecoveryConflictReason);
                            ereport(FATAL,
                                            (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
                              errmsg("terminating connection due to conflict with recovery"),
                                             errdetail_recovery_conflict()));
                    }
                    else if (RecoveryConflictPending)
                    {
                            /* Currently there is only one non-retryable recovery conflict */
                            Assert(RecoveryConflictReason == PROCSIG_RECOVERY_CONFLICT_DATABASE);
                            pgstat_report_recovery_conflict(RecoveryConflictReason);
                            ereport(FATAL,
                                            (errcode(ERRCODE_DATABASE_DROPPED),
                              errmsg("terminating connection due to conflict with recovery"),
                                             errdetail_recovery_conflict()));
                    }
    .....



    各种冲突的处理方法
    src/backend/storage/ipc/standby.c
    src/include/storage/standby.h


    static void ResolveRecoveryConflictWithVirtualXIDs(VirtualTransactionId *waitlist,
                                                                               ProcSignalReason reason);
    static void ResolveRecoveryConflictWithLock(Oid dbOid, Oid relOid);
    extern void ResolveRecoveryConflictWithSnapshot(TransactionId latestRemovedXid,
                                                                            RelFileNode node);
    extern void ResolveRecoveryConflictWithTablespace(Oid tsid);
    extern void ResolveRecoveryConflictWithDatabase(Oid dbid);

    extern void ResolveRecoveryConflictWithBufferPin(void);

    void
    ResolveRecoveryConflictWithDatabase(Oid dbid)
    {
            /*
             * We don't do ResolveRecoveryConflictWithVirtualXIDs() here since that
             * only waits for transactions and completely idle sessions would block
             * us. This is rare enough that we do this as simply as possible: no wait,
             * just force them off immediately.
             *
             * No locking is required here because we already acquired
             * AccessExclusiveLock. Anybody trying to connect while we do this will
             * block during InitPostgres() and then disconnect when they see the
             * database has been removed.
             */
            while (CountDBBackends(dbid) > 0)
            {
                    CancelDBBackends(dbid, PROCSIG_RECOVERY_CONFLICT_DATABASE, true);

                    /*
                     * Wait awhile for them to die so that we avoid flooding an
                     * unresponsive backend when system is heavily loaded.
                     */
                    pg_usleep(10000);
            }
    }

    static void
    ResolveRecoveryConflictWithLock(Oid dbOid, Oid relOid)
    {
            VirtualTransactionId *backends;
            bool            lock_acquired = false;
            int                     num_attempts = 0;
            LOCKTAG         locktag;

            SET_LOCKTAG_RELATION(locktag, dbOid, relOid);

            /*
             * If blowing away everybody with conflicting locks doesn't work, after
             * the first two attempts then we just start blowing everybody away until
             * it does work. We do this because its likely that we either have too
             * many locks and we just can't get one at all, or that there are many
             * people crowding for the same table. Recovery must win; the end
             * justifies the means.
             */
            while (!lock_acquired)
            {
                    if (++num_attempts < 3)
                            backends = GetLockConflicts(&locktag, AccessExclusiveLock);
                    else
                            backends = GetConflictingVirtualXIDs(InvalidTransactionId,
                                                                                                     InvalidOid);

                    ResolveRecoveryConflictWithVirtualXIDs(backends,
                                                                                             PROCSIG_RECOVERY_CONFLICT_LOCK);

                    if (LockAcquireExtended(&locktag, AccessExclusiveLock, true, true, false)
                            != LOCKACQUIRE_NOT_AVAIL)
                            lock_acquired = true;
            }
    }

    ........


    注意, 在恢复模式中, startup进程负责恢复(即wal apply), 所以锁冲突检测很容易理解.
    startup进程作为原始锁OWNER的代理, 并且只跟踪AccessExclusiveLocks锁, 其他锁不关心, 所以在standby中的QUERY, 只有当其获得的锁和未来startup 进程从WAL解析到的对应数据库和对象的AccessExclusiveLocks锁发生冲突时, 才会出现apply等待的情况.

    /*
     * -----------------------------------------------------
     * Locking in Recovery Mode
     * -----------------------------------------------------
     *
     * All locks are held by the Startup process using a single virtual
     * transaction. This implementation is both simpler and in some senses,
     * more correct. The locks held mean "some original transaction held
     * this lock, so query access is not allowed at this time". So the Startup
     * process is the proxy by which the original locks are implemented.
     *
     * We only keep track of AccessExclusiveLocks, which are only ever held by
     * one transaction on one relation, and don't worry about lock queuing.
     *
     * We keep a single dynamically expandible list of locks in local memory,
     * RelationLockList, so we can keep track of the various entries made by
     * the Startup process's virtual xid in the shared lock table.
     *
     * We record the lock against the top-level xid, rather than individual
     * subtransaction xids. This means AccessExclusiveLocks held by aborted
     * subtransactions are not released as early as possible on standbys.
     *
     * List elements use type xl_rel_lock, since the WAL record type exactly
     * matches the information that we need to keep track of.
     *
     * We use session locks rather than normal locks so we don't need
     * ResourceOwners.
     */

    void
    StandbyAcquireAccessExclusiveLock(TransactionId xid, Oid dbOid, Oid relOid)
    {
            xl_standby_lock *newlock;
            LOCKTAG         locktag;

            /* Already processed? */
            if (!TransactionIdIsValid(xid) ||
                    TransactionIdDidCommit(xid) ||
                    TransactionIdDidAbort(xid))
                    return;

            elog(trace_recovery(DEBUG4),
                     "adding recovery lock: db %u rel %u", dbOid, relOid);

            /* dbOid is InvalidOid when we are locking a shared relation. */
            Assert(OidIsValid(relOid));

            newlock = palloc(sizeof(xl_standby_lock));
            newlock->xid = xid;
            newlock->dbOid = dbOid;
            newlock->relOid = relOid;
            RecoveryLockList = lappend(RecoveryLockList, newlock);

            /*
             * Attempt to acquire the lock as requested, if not resolve conflict
             */
            SET_LOCKTAG_RELATION(locktag, newlock->dbOid, newlock->relOid);

            if (LockAcquireExtended(&locktag, AccessExclusiveLock, true, true, false)
                    == LOCKACQUIRE_NOT_AVAIL)
                    ResolveRecoveryConflictWithLock(newlock->dbOid, newlock->relOid);
    }



    Flag Counter
