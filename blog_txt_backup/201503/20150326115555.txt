PostgreSQL research

PostgreSQL 9.5 separate trigger Checkpoint & recycle xlogs

2015-03-26 11:55:55   查看原文>>

PostgreSQL 9.5 以前的版本, 通过checkpoint_segments 来触发基于XLOG个数的检查点, 
通过 " (2 + checkpoint_completion_target) * checkpoint_segments + 1 " 这个公式来技术保留的XLOG个数.

PostgreSQL 9.5 将废弃checkpoint_segments 参数, 并引入max_wal_size 和 min_wal_size 参数, 通过max_wal_size和checkpoint_completion_target 参数来控制产生多少个XLOG后触发检查点, 通过min_wal_size和max_wal_size参数来控制哪些XLOG可以循环使用.

那么PostgreSQL 9.5如何计算什么时候触发检查点呢?
通过CalculateCheckpointSegments函数来计算, 依赖max_wal_size和CheckPointCompletionTarget
target = (double ) max_wal_size / (2.0 + CheckPointCompletionTarget);
http://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/access/transam/xlog.c;h=a28155f977d67bac2fe8fe05461c730ea93cbca1;hp=f68f82b255c0608d7a7f958865a2abe3d179911c;hb=88e982302684;hpb=0fec000365c25fd89ea583673de226e816dba60f
Replace checkpoint_segments with min_wal_size and max_wal_size.

Instead of having a single knob (checkpoint_segments) that both triggers
checkpoints, and determines how many checkpoints to recycle, they are now
separate concerns. There is still an internal variable called
CheckpointSegments, which triggers checkpoints. But it no longer determines
how many segments to recycle at a checkpoint. That is now auto-tuned by
keeping a moving average of the distance between checkpoints (in bytes),
and trying to keep that many segments in reserve. The advantage of this is
that you can set max_wal_size very high, but the system won't actually
consume that much space if there isn't any need for it. The min_wal_size
sets a floor for that; you can effectively disable the auto-tuning behavior
by setting min_wal_size equal to max_wal_size.

The max_wal_size setting is now the actual target size of WAL at which a
new checkpoint is triggered, instead of the distance between checkpoints.
Previously, you could calculate the actual WAL usage with the formula
"(2 + checkpoint_completion_target) * checkpoint_segments + 1". With this
patch, you set the desired WAL usage with max_wal_size, and the system
calculates the appropriate CheckpointSegments with the reverse of that
formula. That's a lot more intuitive for administrators to set.

Reviewed by Amit Kapila and Venkata Balaji N.


src/backend/access/transam/xlog.c

+ * Calculate CheckPointSegments based on max_wal_size and
+ * checkpoint_completion_target.
+ */
+static void
+CalculateCheckpointSegments(void)
+{
+   double      target;
+
+   /*-------
+    * Calculate the distance at which to trigger a checkpoint, to avoid
+    * exceeding max_wal_size. This is based on two assumptions:
+    *
+    * a) we keep WAL for two checkpoint cycles, back to the "prev" checkpoint.
+    * b) during checkpoint, we consume checkpoint_completion_target *
+    *    number of segments consumed between checkpoints.
+    *-------
+    */
+   target = (double ) max_wal_size / (2.0 + CheckPointCompletionTarget);
+
+   /* round down */
+   CheckPointSegments = (int) target;
+
+   if (CheckPointSegments < 1)
+       CheckPointSegments = 1;
+}



计算哪些旧的XLOG可以循环使用(不删除, 直接INIT).

+/*
+ * At a checkpoint, how many WAL segments to recycle as preallocated future
+ * XLOG segments? Returns the highest segment that should be preallocated.
+ */
+static XLogSegNo
+XLOGfileslop(XLogRecPtr PriorRedoPtr)
+{
+   XLogSegNo   minSegNo;
+   XLogSegNo   maxSegNo;
+   double      distance;
+   XLogSegNo   recycleSegNo;
+
+   /*
+    * Calculate the segment numbers that min_wal_size and max_wal_size
+    * correspond to. Always recycle enough segments to meet the minimum, and
+    * remove enough segments to stay below the maximum.
+    */
+   minSegNo = PriorRedoPtr / XLOG_SEG_SIZE + min_wal_size - 1;
+   maxSegNo =  PriorRedoPtr / XLOG_SEG_SIZE + max_wal_size - 1;
+
+   /*
+    * Between those limits, recycle enough segments to get us through to the
+    * estimated end of next checkpoint.
+    *
+    * To estimate where the next checkpoint will finish, assume that the
+    * system runs steadily consuming CheckPointDistanceEstimate
+    * bytes between every checkpoint.
+    *
+    * The reason this calculation is done from the prior checkpoint, not the
+    * one that just finished, is that this behaves better if some checkpoint
+    * cycles are abnormally short, like if you perform a manual checkpoint
+    * right after a timed one. The manual checkpoint will make almost a full
+    * cycle's worth of WAL segments available for recycling, because the
+    * segments from the prior's prior, fully-sized checkpoint cycle are no
+    * longer needed. However, the next checkpoint will make only few segments
+    * available for recycling, the ones generated between the timed
+    * checkpoint and the manual one right after that. If at the manual
+    * checkpoint we only retained enough segments to get us to the next timed
+    * one, and removed the rest, then at the next checkpoint we would not
+    * have enough segments around for recycling, to get us to the checkpoint
+    * after that. Basing the calculations on the distance from the prior redo
+    * pointer largely fixes that problem.
+    */
+   distance = (2.0 + CheckPointCompletionTarget) * CheckPointDistanceEstimate;
+   /* add 10% for good measure. */
+   distance *= 1.10;
+
+   recycleSegNo = (XLogSegNo) ceil(((double) PriorRedoPtr + distance) / XLOG_SEG_SIZE);
+
+   if (recycleSegNo < minSegNo)
+       recycleSegNo = minSegNo;
+   if (recycleSegNo > maxSegNo)
+       recycleSegNo = maxSegNo;
+
+   return recycleSegNo;
+}



参数解释 : 

http://www.postgresql.org/docs/devel/static/runtime-config-wal.html

min_wal_size (integer)

    As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default is 80 MB. This parameter can
    only be set in the postgresql.conf file or on the server command line.

max_wal_size (integer)

    Maximum size to let the WAL grow to between automatic WAL checkpoints. This is a soft limit; WAL size can exceed max_wal_size under special circumstances, like under heavy load, a failing archive_command, or a high wal_keep_segments setting. The default is 1 GB. Increasing this parameter can increase the amount of
    time needed for crash recovery. This parameter can only be set in the postgresql.conf file or on the server command line.

    Flag Counter
