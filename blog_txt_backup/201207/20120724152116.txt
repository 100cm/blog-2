PostgreSQL research

AccessShareLock followed by AccessExclusiveLock and followed by other lock request waiting forever

2012-07-24 15:21:16   查看原文>>

今天一位网友反映的一个很奇特的问题, 数据库中有一些进程处于idle in transaction的状态, 并且其他的进程显现出来的是在等待这些 idle in transaction 进程的锁释放. 奇特不是奇特在idle in transaction, 而是奇特在下面. 请不要把关注重点放在idle in transaction. 往下看.

这些idle in transaction进程持有的锁是AccessShareLock, 等待锁的进程中有一些是请求与idle in transaction 那些进程持有的同表的AccessShareLock 锁的. 我们知道AccessShareLock和AccessShareLock锁是不冲突的. 但是为什么会出现这样的情况呢?

原因查明是这样的 : 

session 1 : 
begin;
AccessShareLock granted
idle in transaction

session 2 : 
AccessExclusiveLock waiting
(注意, session 2 未获得 AccessExclusiveLock 锁, 它只是在请求这个锁)

session others : 
any lock request, waiting session 2.
(奇特在这个地方, 请求任何锁都会处于等待状态, 包括AccessShareLock)


这里不分析为什么会有大量的idle in transaction事务存在, 这个要从应用程序着手查找原因, 这里只讨论一下PostgreSQL 的锁释放和冲突与其他数据库不一样的地方.

接下来重现一下, 大家在设计程序和维护数据库的时候要避免这种情况发生, 如果使用autocommit则不会出现这种情况.
SESSION 1 : 

postgres=# begin;
BEGIN
postgres=# select * from t1;
 id 
----
  1
  2
(2 rows)



SESSION 2 : 
-- 查看锁信息

postgres=# select * from lockview1;
  pid  |  vxid   | lock_type |    lock_mode    | granted | xid_lock | relname 
-------+---------+-----------+-----------------+---------+----------+---------
 13053 | 10/4513 | relation  | AccessShareLock | t       |          | t1
(1 row)



SESSION 3 : 

postgres=# vacuum full t1;


-- 处于等待状态

SESSION 2 : 
-- 查看锁信息

postgres=# select * from lockview1;
  pid  |   vxid   | lock_type |      lock_mode      | granted | xid_lock | relname 
-------+----------+-----------+---------------------+---------+----------+---------
 13053 | 10/4513  | relation  | AccessShareLock     | t       |          | t1
 13135 | 12/17353 | relation  | AccessExclusiveLock | f       |          | t1
(2 rows)



SESSION 4 : 

postgres=# select * from t1;


-- 处于等待状态

SESSION 2 : 
-- 查看锁信息

postgres=# select * from lockview1;
  pid  |   vxid   | lock_type |      lock_mode      | granted | xid_lock | relname 
-------+----------+-----------+---------------------+---------+----------+---------
 13053 | 10/4513  | relation  | AccessShareLock     | t       |          | t1
 13135 | 12/17353 | relation  | AccessExclusiveLock | f       |          | t1
 13172 | 13/18637 | relation  | AccessShareLock     | f       |          | t1



【锁信息大全】
src/include/storage/lock.h

/* NoLock is not a lock mode, but a flag value meaning "don't get a lock" */
#define NoLock                                  0

#define AccessShareLock                 1               /* SELECT */
#define RowShareLock                    2               /* SELECT FOR UPDATE/FOR SHARE */
#define RowExclusiveLock                3               /* INSERT, UPDATE, DELETE */
#define ShareUpdateExclusiveLock 4              /* VACUUM (non-FULL),ANALYZE, CREATE
                                                                                 * INDEX CONCURRENTLY */
#define ShareLock                               5               /* CREATE INDEX (WITHOUT CONCURRENTLY) */
#define ShareRowExclusiveLock   6               /* like EXCLUSIVE MODE, but allows ROW
                                                                                 * SHARE */
#define ExclusiveLock                   7               /* blocks ROW SHARE/SELECT...FOR
                                                                                 * UPDATE */
#define AccessExclusiveLock             8               /* ALTER TABLE, DROP TABLE, VACUUM
                                                                                 * FULL, and unqualified LOCK TABLE */



【查看锁的视图】

-- 1. 
CREATE VIEW lockview AS
SELECT pid, virtualtransaction AS vxid, locktype AS lock_type,
mode AS lock_mode, granted,
CASE
WHEN virtualxid IS NOT NULL AND transactionid IS NOT NULL
THEN virtualxid || ' ' || transactionid
WHEN virtualxid::text IS NOT NULL
THEN virtualxid
ELSE transactionid::text
END AS xid_lock, relname,
page, tuple, classid, objid, objsubid
FROM pg_locks LEFT OUTER JOIN pg_class ON (pg_locks.relation = pg_class.oid)
WHERE -- do not show our view's locks
pid != pg_backend_pid() AND
-- no need to show self-vxid locks
virtualtransaction IS DISTINCT FROM virtualxid
-- granted is ordered earlier
ORDER BY 1, 2, 5 DESC, 6, 3, 4, 7;

-- 2. 
CREATE VIEW lockview1 AS
SELECT pid, vxid, lock_type, lock_mode, granted, xid_lock, relname
FROM lockview
-- granted is ordered earlier
ORDER BY 1, 2, 5 DESC, 6, 3, 4, 7;

-- 3.
CREATE VIEW lockview2 AS
SELECT pid, vxid, lock_type, page, tuple, classid, objid, objsubid
FROM lockview
-- granted is first
-- add non-display columns to match ordering of lockview
ORDER BY 1, 2, granted DESC, vxid, xid_lock::text, 3, 4, 5, 6, 7, 8;


【小结】
PostgreSQL 为什么在事务中SQL结束后还持有AccessShareLock锁 , 这个和它的锁机制有关系, PostgreSQL锁释放是放在事务结束的时候统一释放的. 当然这样做有弊端也有好处, 包括可以回滚DDL在内是它的好处之一.
问题的关键点, 这也是PostgreSQL 与其他数据库不一样的地方. : 
1. 事务中的 PostgreSQL 隐性锁AccessShareLock不会在SQL结束后释放, 要等到事务结束后释放.
2. 等待中的锁也会和后来请求的锁发生冲突, 看起来像个锁队列.

下面在Oracle中模拟一下,
第一种情况在Oracle中不存在 : 

SESSION 1 : 
SQL> select * from test;
        ID
----------
         1
         2

SESSION 2 : 
SQL> alter table test add c1 int;
Table altered.
(无需等待)



第二种情况在Oracle中不存在 : 

SESSION 1 : 
SQL> select * from test where id=1 for update;

        ID         C1
---------- ----------
         1

SESSION 2 : 
SQL> alter table test add c2 int;
alter table test add c2 int
*
ERROR at line 1:
ORA-00054: resource busy and acquire with NOWAIT specified
(SESSION 2将直接返回资源繁忙的错误.)


评论

Cutis_Dow - 2015-04-15 19:57:05

pg锁的第一个问题：select 后无法释放AccessShareLock 能否在select 后加 nolock 或者commit?


德哥@Digoal 回复 Cutis_Dow - 2015-04-15 19:57:05

任何显锁都是在事务结束释放的, 只要锁了就要等到事务结束.

francs - 2012-07-24 15:50:18

”idle in transaction“说明程序没提交也没回滚，如果程序有很多"idle in transaction"的进程，显然是不合理的，占有的资料没有释放。
