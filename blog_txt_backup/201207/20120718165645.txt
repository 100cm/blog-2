PostgreSQL research

PostgreSQL src/backend/utils/cache 热门元数据缓存

2012-07-18 16:56:45   查看原文>>

PostgreSQL为了加快元数据(如pg_class, pg_index, pg_proc等, 需要预加载的元数据配置在syscache.c的cacheinfo[]数组中.)的检索速度, 需要将元数据加载到内存. 

/*---------------------------------------------------------------------------

        Adding system caches:

        Add your new cache to the list in include/utils/syscache.h.
        Keep the list sorted alphabetically.

        Add your entry to the cacheinfo[] array below. All cache lists are
        alphabetical, so add it in the proper place.  Specify the relation OID,
        index OID, number of keys, key attribute numbers, and initial number of
        hash buckets.

        The number of hash buckets must be a power of 2.  It's reasonable to
        set this to the number of entries that might be in the particular cache
        in a medium-size database.

        There must be a unique index underlying each syscache (ie, an index
        whose key is the same as that of the cache).  If there is not one
        already, add definitions for it to include/catalog/indexing.h: you need
        to add a DECLARE_UNIQUE_INDEX macro and a #define for the index OID.
        (Adding an index requires a catversion.h update, while simply
        adding/deleting caches only requires a recompile.)

        Finally, any place your relation gets heap_insert() or
        heap_update() calls, make sure there is a CatalogUpdateIndexes() or
        similar call.  The heap_* calls do not update indexes.

        bjm 1999/11/22

*---------------------------------------------------------------------------
*/



在src/backend/utils/cache/syscache.c中可以看到.
存储cache信息的数据结构 : 

/*
 *              struct cachedesc: information defining a single syscache
 */
struct cachedesc
{
        Oid                     reloid;                 /* OID of the relation being cached */
        Oid                     indoid;                 /* OID of index relation for this cache */
        int                     nkeys;                  /* # of keys needed for cache lookup */
        int                     key[4];                 /* attribute numbers of key attrs */
        int                     nbuckets;               /* number of hash buckets for this cache */
};


例如 : 

{AggregateRelationId,           /* AGGFNOID */
                AggregateFnoidIndexId,
                1,
                {
                        Anum_pg_aggregate_aggfnoid,
                        0,
                        0,
                        0
                },
                32
        }


PostgreSQL通过以下函数来进行初始化syscache.

/*
 * InitCatalogCache - initialize the caches
 *
 * Note that no database access is done here; we only allocate memory
 * and initialize the cache structure.  Interrogation of the database
 * to complete initialization of a cache happens upon first use
 * of that cache.
 */
void
InitCatalogCache(void)
{
        int                     cacheId;

        Assert(!CacheInitialized);

        MemSet(SysCache, 0, sizeof(SysCache));

        for (cacheId = 0; cacheId < SysCacheSize; cacheId++)
        {
                SysCache[cacheId] = InitCatCache(cacheId,
                                                                                 cacheinfo[cacheId].reloid,
                                                                                 cacheinfo[cacheId].indoid,
                                                                                 cacheinfo[cacheId].nkeys,
                                                                                 cacheinfo[cacheId].key,
                                                                                 cacheinfo[cacheId].nbuckets);
                if (!PointerIsValid(SysCache[cacheId]))
                        elog(ERROR, "could not initialize cache %u (%d)",
                                 cacheinfo[cacheId].reloid, cacheId);
        }
        CacheInitialized = true;
}
/*
 * InitCatalogCachePhase2 - finish initializing the caches
 *
 * Finish initializing all the caches, including necessary database
 * access.
 *
 * This is *not* essential; normally we allow syscaches to be initialized
 * on first use.  However, it is useful as a mechanism to preload the
 * relcache with entries for the most-commonly-used system catalogs.
 * Therefore, we invoke this routine when we need to write a new relcache
 * init file.
 */
void
InitCatalogCachePhase2(void)
{
        int                     cacheId;

        Assert(CacheInitialized);

        for (cacheId = 0; cacheId < SysCacheSize; cacheId++)
                InitCatCachePhase2(SysCache[cacheId], true);
}



/*
 * InitCatCachePhase2 -- external interface for CatalogCacheInitializeCache
 *
 * One reason to call this routine is to ensure that the relcache has
 * created entries for all the catalogs and indexes referenced by catcaches.
 * Therefore, provide an option to open the index as well as fixing the
 * cache itself.  An exception is the indexes on pg_am, which we don't use
 * (cf. IndexScanOK).
 */
void
InitCatCachePhase2(CatCache *cache, bool touch_index)
{
        if (cache->cc_tupdesc == NULL)
                CatalogCacheInitializeCache(cache);

        if (touch_index &&
                cache->id != AMOID &&
                cache->id != AMNAME)
        {
                Relation        idesc;

                /*
                 * We must lock the underlying catalog before opening the index to
                 * avoid deadlock, since index_open could possibly result in reading
                 * this same catalog, and if anyone else is exclusive-locking this
                 * catalog and index they'll be doing it in that order.
                 */
                LockRelationOid(cache->cc_reloid, AccessShareLock);
                idesc = index_open(cache->cc_indexoid, AccessShareLock);
                index_close(idesc, AccessShareLock);
                UnlockRelationOid(cache->cc_reloid, AccessShareLock);
        }
}



检索则是通过以下函数 : 

/*
 * SearchSysCache
 *
 *      A layer on top of SearchCatCache that does the initialization and
 *      key-setting for you.
 *
 *      Returns the cache copy of the tuple if one is found, NULL if not.
 *      The tuple is the 'cache' copy and must NOT be modified!
 *
 *      When the caller is done using the tuple, call ReleaseSysCache()
 *      to release the reference count grabbed by SearchSysCache().  If this
 *      is not done, the tuple will remain locked in cache until end of
 *      transaction, which is tolerable but not desirable.
 *
 *      CAUTION: The tuple that is returned must NOT be freed by the caller!
 */
HeapTuple
SearchSysCache(int cacheId,
                           Datum key1,
                           Datum key2,
                           Datum key3,
                           Datum key4)
{
        if (cacheId < 0 || cacheId >= SysCacheSize ||
                !PointerIsValid(SysCache[cacheId]))
                elog(ERROR, "invalid cache ID: %d", cacheId);

        return SearchCatCache(SysCache[cacheId], key1, key2, key3, key4);
}


如果调整了syscache.c, 则需要重新编译源码 : 

        {AttributeRelationId,           /* ATTNAME */
                AttributeRelidNameIndexId,
                2,
                {
                        Anum_pg_attribute_attrelid,
                        Anum_pg_attribute_attname,
                        0,
                        0
                },
                2048 /* modify to 33554432 */
        },
        {AttributeRelationId,           /* ATTNUM */
                AttributeRelidNumIndexId,
                2,
                {
                        Anum_pg_attribute_attrelid,
                        Anum_pg_attribute_attnum,
                        0,
                        0
                },
                2048 /* modify to 33554432 */
        },
        {DatabaseRelationId,            /* DATABASEOID */
                DatabaseOidIndexId,
                1,
                {
                        ObjectIdAttributeNumber,
                        0,
                        0,
                        0
                },
                4 /* modify to 8192 */
        },
        {ForeignTableRelationId,        /* FOREIGNTABLEREL */
                ForeignTableRelidIndexId,
                1,
                {
                        Anum_pg_foreign_table_ftrelid,
                        0,
                        0,
                        0
                },
                128 /* modify to 16384 */
        },
        {IndexRelationId,                       /* INDEXRELID */
                IndexRelidIndexId,
                1,
                {
                        Anum_pg_index_indexrelid,
                        0,
                        0,
                        0
                },
                1024 /* modify to 33554432 */
        },
        {NamespaceRelationId,           /* NAMESPACENAME */
                NamespaceNameIndexId,
                1,
                {
                        Anum_pg_namespace_nspname,
                        0,
                        0,
                        0
                },
                256 /* modify to 8192 */
        },
        {NamespaceRelationId,           /* NAMESPACEOID */
                NamespaceOidIndexId,
                1,
                {
                        ObjectIdAttributeNumber,
                        0,
                        0,
                        0
                },
                256 /* modify to 8192 */
        },
        {OperatorRelationId,            /* OPERNAMENSP */
                OperatorNameNspIndexId,
                4,
                {
                        Anum_pg_operator_oprname,
                        Anum_pg_operator_oprleft,
                        Anum_pg_operator_oprright,
                        Anum_pg_operator_oprnamespace
                },
                1024 /* modify to 16384 */
        },
        {OperatorRelationId,            /* OPEROID */
                OperatorOidIndexId,
                1,
                {
                        ObjectIdAttributeNumber,
                        0,
                        0,
                        0
                },
                1024 /* modify to 16384 */
        },
        {OperatorFamilyRelationId,      /* OPFAMILYAMNAMENSP */
                OpfamilyAmNameNspIndexId,
                3,
                {
                        Anum_pg_opfamily_opfmethod,
                        Anum_pg_opfamily_opfname,
                        Anum_pg_opfamily_opfnamespace,
                        0
                },
                64 /* modify to 2048 */
        },
        {OperatorFamilyRelationId,      /* OPFAMILYOID */
                OpfamilyOidIndexId,
                1,
                {
                        ObjectIdAttributeNumber,
                        0,
                        0,
                        0
                },
                64 /* modify to 2048 */
        },
 {ProcedureRelationId,           /* PROCNAMEARGSNSP */
                ProcedureNameArgsNspIndexId,
                3,
                {
                        Anum_pg_proc_proname,
                        Anum_pg_proc_proargtypes,
                        Anum_pg_proc_pronamespace,
                        0
                },
                2048 /* modify to 16384 */
        },
        {ProcedureRelationId,           /* PROCOID */
                ProcedureOidIndexId,
                1,
                {
                        ObjectIdAttributeNumber,
                        0,
                        0,
                        0
                },
                2048 /* modify to 16384 */
        },
        {RelationRelationId,            /* RELNAMENSP */
                ClassNameNspIndexId,
                2,
                {
                        Anum_pg_class_relname,
                        Anum_pg_class_relnamespace,
                        0,
                        0
                },
                1024 /* modify to 4194304 */
        },
        {RelationRelationId,            /* RELOID */
                ClassOidIndexId,
                1,
                {
                        ObjectIdAttributeNumber,
                        0,
                        0,
                        0
                },
                1024 /* modify to 4194304 */
        }


测试 : 

create role digoal nosuperuser login encrypted password 'digoal';
create database digoal with owner digoal;
\c digoal digoal
create schema digoal authorization digoal;
create or replace function crt_table(i_prefix varchar(15), i_mid int, i_min int, i_max int) returns int as $$
declare
begin
for i in i_min..i_max loop
  execute 'create table '||i_prefix||'_'||i_mid||'_'||i||' (like '||i_prefix||' including all)';
end loop;
return 0;
end;
$$ language plpgsql;



测试用shell脚本 : 

#!/bin/bash
PREFIX1=a
PREFIX2=b
PREFIX3=c
PREFIX4=d

func()
{
s=5000
for i in $(seq 1 200)
do
  SQL="select 1 from crt_table('$1', $i, 0, $s);"
  echo -e $SQL|psql digoal digoal -f -
done
}

for i in $PREFIX1 $PREFIX2 $PREFIX3 $PREFIX4
do
  psql digoal digoal -c "create table $i (id int primary key,username varchar(256) unique, info text, crt_time timestamp(0), modify_time timestamp(0));"
done

func $PREFIX1 &
func $PREFIX2 &
func $PREFIX3 &
func $PREFIX4 &



【参考】
1. src/backend/utils/cache/syscache.c

2. src/backend/utils/cache/relcache.c

/*
 *              RelationCacheInitializePhase3
 *
 *              This is called as soon as the catcache and transaction system
 *              are functional and we have determined MyDatabaseId.  At this point
 *              we can actually read data from the database's system catalogs.
 *              We first try to read pre-computed relcache entries from the local
 *              relcache init file.  If that's missing or broken, make phony entries
 *              for the minimum set of nailed-in-cache relations.  Then (unless
 *              bootstrapping) make sure we have entries for the critical system
 *              indexes.  Once we've done all this, we have enough infrastructure to
 *              open any system catalog or use any catcache.  The last step is to
 *              rewrite the cache files if needed.
 */
void
RelationCacheInitializePhase3(void)
{
略
        /*
         * Lastly, write out new relcache cache files if needed.  We don't bother
         * to distinguish cases where only one of the two needs an update.
         */
        if (needNewCacheFile)
        {
                /*
                 * Force all the catcaches to finish initializing and thereby open the
                 * catalogs and indexes they use.  This will preload the relcache with
                 * entries for all the most important system catalogs and indexes, so
                 * that the init files will be most useful for future backends.
                 */
                InitCatalogCachePhase2();

                /* reset initFileRelationIds list; we'll fill it during write */
                initFileRelationIds = NIL;

                /* now write the files */
                write_relcache_init_file(true);
                write_relcache_init_file(false);
        }



3. nbuckets 介绍在

src/backend/utils/cache/catcache.c
CatCache *
InitCatCache(int id,
                         Oid reloid,
                         Oid indexoid,
                         int nkeys,
                         const int *key,
                         int nbuckets)
{
        CatCache   *cp;
        MemoryContext oldcxt;
        int                     i;

        /*
         * nbuckets is the number of hash buckets to use in this catcache.
         * Currently we just use a hard-wired estimate of an appropriate size for
         * each cache; maybe later make them dynamically resizable?
         *
         * nbuckets must be a power of two.  We check this via Assert rather than
         * a full runtime check because the values will be coming from constant
         * tables.
         *
         * If you're confused by the power-of-two check, see comments in
         * bitmapset.c for an explanation.
         */
        Assert(nbuckets > 0 && (nbuckets & -nbuckets) == nbuckets);

        /*
         * first switch to the cache context so our allocations do not vanish at
         * the end of a transaction
         */
        if (!CacheMemoryContext)
                CreateCacheMemoryContext();

        oldcxt = MemoryContextSwitchTo(CacheMemoryContext);

        /*
         * if first time through, initialize the cache group header
         */
        if (CacheHdr == NULL)
        {
                CacheHdr = (CatCacheHeader *) palloc(sizeof(CatCacheHeader));
                CacheHdr->ch_caches = NULL;
                CacheHdr->ch_ntup = 0;
#ifdef CATCACHE_STATS
                /* set up to dump stats at backend exit */
                on_proc_exit(CatCachePrintStats, 0);
#endif
        }

        /*
         * allocate a new cache structure
         *
         * Note: we assume zeroing initializes the Dllist headers correctly
         */
        cp = (CatCache *) palloc0(sizeof(CatCache) + nbuckets * sizeof(Dllist));

        /*
         * initialize the cache's relation information for the relation
         * corresponding to this cache, and initialize some of the new cache's
         * other internal fields.  But don't open the relation yet.
         */
        cp->id = id;
        cp->cc_relname = "(not known yet)";
        cp->cc_reloid = reloid;
        cp->cc_indexoid = indexoid;
        cp->cc_relisshared = false; /* temporary */
        cp->cc_tupdesc = (TupleDesc) NULL;
        cp->cc_ntup = 0;
        cp->cc_nbuckets = nbuckets;
        cp->cc_nkeys = nkeys;
        for (i = 0; i < nkeys; ++i)
                cp->cc_key[i] = key[i];

        /*
         * new cache is initialized as far as we can go for now. print some
         * debugging information, if appropriate.
         */
        InitCatCache_DEBUG2;
       
        /*
         * add completed cache to top of group header's list
         */
        cp->cc_next = CacheHdr->ch_caches;
        CacheHdr->ch_caches = cp;

        /*
         * back to the old context before we return...
         */
        MemoryContextSwitchTo(oldcxt);

        return cp;
}



4. 在init阶段也有加载缓存的动作 : 

src/backend/utils/init/postinit.c
/* --------------------------------
 * InitPostgres
 *              Initialize POSTGRES.
 *
 * The database can be specified by name, using the in_dbname parameter, or by
 * OID, using the dboid parameter.      In the latter case, the actual database
 * name can be returned to the caller in out_dbname.  If out_dbname isn't
 * NULL, it must point to a buffer of size NAMEDATALEN.
 *
 * In bootstrap mode no parameters are used.  The autovacuum launcher process
 * doesn't use any parameters either, because it only goes far enough to be
 * able to read pg_database; it doesn't connect to any particular database.
 * In walsender mode only username is used.
 *
 * As of PostgreSQL 8.2, we expect InitProcess() was already called, so we
 * already have a PGPROC struct ... but it's not completely filled in yet.
 *
 * Note:
 *              Be very careful with the order of calls in the InitPostgres function.
 * --------------------------------
 */
void
InitPostgres(const char *in_dbname, Oid dboid, const char *username,
                         char *out_dbname)
{
略
        /*
         * Initialize the relation cache and the system catalog caches.  Note that
         * no catalog access happens here; we only set up the hashtable structure.
         * We must do this before starting a transaction because transaction abort
         * would try to touch these hashtables.
         */
        RelationCacheInitialize();
        InitCatalogCache();
        InitPlanCache();


