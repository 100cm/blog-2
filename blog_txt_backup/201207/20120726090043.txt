PostgreSQL research

Notice : PostgreSQL 9.2 must escape colon in PGPASSFILE password field but 9.1, 9.0, 8.x must not need

2012-07-26 9:00:43   查看原文>>

PostgreSQL 9.2 在密码文件读取密码时, 有一个改变(参考后面的参考部分, PasswordFromFile函数多了一个de-escape逻辑. ),  当你的密码中包含冒号时, 会造成你以前使用的密码文件无效. 原因是冒号需要转义.
而早期的版本如9.1, 9.0, 8.x 都不需要转义冒号.

例如 : 
首先修改回环地址连接验证方法为md5, 默认可能是trust, 无法达到本例验证的目的.

vi $PGDATA/pg_hba.conf
host    all             all             127.0.0.1/32            md5
pg_ctl reload



9.2测试结果 : 
-- 创建用户, 密码中包含冒号

su - pg92
pg92@db-172-16-3-150-> psql -h 127.0.0.1 postgres postgres
Password for user postgres: 
psql (9.2beta2)
Type "help" for help.

postgres=# create role digoal nosuperuser login encrypted password 'digoal:1';
CREATE ROLE
postgres=# \q



-- 使用密码登陆正常

pg92@db-172-16-3-150-> psql -h 127.0.0.1 -U digoal postgres
Password for user digoal: 
psql (9.2beta2)
Type "help" for help.

postgres=> \q



-- 使用密码文件登陆, 冒号不转义则密码校验失败

su - pg92
vi ~/.pgpass
127.0.0.1:*:*:digoal:digoal:1
chmod 400 ~/.pgpass
pg92@db-172-16-3-150-> psql -h 127.0.0.1 -U digoal postgres
psql: FATAL:  password authentication failed for user "digoal"
password retrieved from file "/home/pg92/.pgpass"



-- 使用密码文件登陆, 冒号转义则密码校验通过

su - pg92
vi ~/.pgpass
127.0.0.1:*:*:digoal:digoal\:1
pg92@db-172-16-3-150-> psql -h 127.0.0.1 -U digoal postgres
psql (9.2beta2)
Type "help" for help.

postgres=> 




9.1测试结果 : 
-- 创建用户, 密码中包含冒号

su - pg91
pg91@db-172-16-3-150-> psql 127.0.0.1 postgres postgres
psql (9.1.3)
Type "help" for help.

postgres=# create role digoal nosuperuser login encrypted password 'digoal:1';
CREATE ROLE
postgres=# \q



-- 使用密码登陆正常

pg91@db-172-16-3-150-> psql -h 127.0.0.1 -U digoal postgres
Password for user digoal: 
psql (9.1.3)
Type "help" for help.

postgres=> \q



-- 使用密码文件登陆, 冒号不转义则密码校验通过, 与pg92 相反.

su - pg91
vi ~/.pgpass
127.0.0.1:*:*:digoal:digoal:1
chmod 400 ~/.pgpass
pg91@db-172-16-3-150-> psql -h 127.0.0.1 -U digoal postgres
psql (9.1.3)
Type "help" for help.

postgres=> \q



-- 使用密码文件登陆, 冒号转义则密码校验失败, 与pg92 相反.

su - pg91
vi ~/.pgpass
127.0.0.1:*:*:digoal:digoal\:1
pg91@db-172-16-3-150-> psql -h 127.0.0.1 -U digoal postgres
psql: FATAL:  password authentication failed for user "digoal"
password retrieved from file "/home/pg91/.pgpass"



【参考】
src/interfaces/libpq/fe-connect.c
9.2和9.1的 PasswordFromFile 函数比较, 原因就在此 : 

9.2 : 

/* Get a password from the password file. Return value is malloc'd. */
static char *
PasswordFromFile(char *hostname, char *port, char *dbname, char *username)
{
        FILE       *fp;
        char            pgpassfile[MAXPGPATH];
        struct stat stat_buf;

#define LINELEN NAMEDATALEN*5
        char            buf[LINELEN];

        if (dbname == NULL || strlen(dbname) == 0)
                return NULL;

        if (username == NULL || strlen(username) == 0)
                return NULL;

        /* 'localhost' matches pghost of '' or the default socket directory */
        if (hostname == NULL)
                hostname = DefaultHost;
        else if (is_absolute_path(hostname))

                /*
                 * We should probably use canonicalize_path(), but then we have to
                 * bring path.c into libpq, and it doesn't seem worth it.
                 */
                if (strcmp(hostname, DEFAULT_PGSOCKET_DIR) == 0)
                        hostname = DefaultHost;

        if (port == NULL)
                port = DEF_PGPORT_STR;

        if (!getPgPassFilename(pgpassfile))
                return NULL;

        /* If password file cannot be opened, ignore it. */
        if (stat(pgpassfile, &stat_buf) != 0)
                return NULL;
#ifndef WIN32
        if (!S_ISREG(stat_buf.st_mode))
        {
                fprintf(stderr,
                libpq_gettext("WARNING: password file \"%s\" is not a plain file\n"),
                                pgpassfile);
                return NULL;
        }

        /* If password file is insecure, alert the user and ignore it. */
        if (stat_buf.st_mode & (S_IRWXG | S_IRWXO))
        {
                fprintf(stderr,
                                libpq_gettext("WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less\n"),
                                pgpassfile);
                return NULL;
        }
#else

        /*
         * On Win32, the directory is protected, so we don't have to check the
         * file.
         */
#endif

        fp = fopen(pgpassfile, "r");
        if (fp == NULL)
                return NULL;

        while (!feof(fp) && !ferror(fp))
        {
                char       *t = buf,
                                   *ret,
                                   *p1,
                                   *p2;
                int                     len;

                if (fgets(buf, sizeof(buf), fp) == NULL)
                        break;

                len = strlen(buf);
                if (len == 0)
                        continue;

                /* Remove trailing newline */
                if (buf[len - 1] == '\n')
                        buf[len - 1] = 0;

                if ((t = pwdfMatchesString(t, hostname)) == NULL ||
                        (t = pwdfMatchesString(t, port)) == NULL ||
                        (t = pwdfMatchesString(t, dbname)) == NULL ||
                        (t = pwdfMatchesString(t, username)) == NULL)
                        continue;
                ret = strdup(t);
                fclose(fp);

                /* De-escape password. */
                for (p1 = p2 = ret; *p1 != ':' && *p1 != '\0'; ++p1, ++p2)
                {
                        if (*p1 == '\\' && p1[1] != '\0')
                                ++p1;
                        *p2 = *p1;
                }
                *p2 = '\0';

                return ret;
        }

        fclose(fp);
        return NULL;

#undef LINELEN
}



9.1 : 

/* Get a password from the password file. Return value is malloc'd. */
static char *
PasswordFromFile(char *hostname, char *port, char *dbname, char *username)
{
        FILE       *fp;
        char            pgpassfile[MAXPGPATH];
        struct stat stat_buf;

#define LINELEN NAMEDATALEN*5
        char            buf[LINELEN];

        if (dbname == NULL || strlen(dbname) == 0)
                return NULL;

        if (username == NULL || strlen(username) == 0)
                return NULL;

        /* 'localhost' matches pghost of '' or the default socket directory */
        if (hostname == NULL)
                hostname = DefaultHost;
        else if (is_absolute_path(hostname))

                /*
                 * We should probably use canonicalize_path(), but then we have to
                 * bring path.c into libpq, and it doesn't seem worth it.
                 */
                if (strcmp(hostname, DEFAULT_PGSOCKET_DIR) == 0)
                        hostname = DefaultHost;

        if (port == NULL)
                port = DEF_PGPORT_STR;

        if (!getPgPassFilename(pgpassfile))
                return NULL;

        /* If password file cannot be opened, ignore it. */
        if (stat(pgpassfile, &stat_buf) != 0)
                return NULL;

#ifndef WIN32
        if (!S_ISREG(stat_buf.st_mode))
        {
                fprintf(stderr,
                libpq_gettext("WARNING: password file \"%s\" is not a plain file\n"),
                                pgpassfile);
                return NULL;
        }

        /* If password file is insecure, alert the user and ignore it. */
        if (stat_buf.st_mode & (S_IRWXG | S_IRWXO))
        {
                fprintf(stderr,
                                libpq_gettext("WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less\n"),
                                pgpassfile);
                return NULL;
        }
#else

        /*
         * On Win32, the directory is protected, so we don't have to check the
         * file.
         */
#endif

        fp = fopen(pgpassfile, "r");
        if (fp == NULL)
                return NULL;

        while (!feof(fp) && !ferror(fp))
        {
                char       *t = buf,
                                   *ret;
                int                     len;

                if (fgets(buf, sizeof(buf), fp) == NULL)
                        break;

                len = strlen(buf);
                if (len == 0)
                        continue;

                /* Remove trailing newline */
                if (buf[len - 1] == '\n')
                        buf[len - 1] = 0;

                if ((t = pwdfMatchesString(t, hostname)) == NULL ||
                        (t = pwdfMatchesString(t, port)) == NULL ||
                        (t = pwdfMatchesString(t, dbname)) == NULL ||
                        (t = pwdfMatchesString(t, username)) == NULL)
                        continue;
                ret = strdup(t);
                fclose(fp);
                return ret;
        }

        fclose(fp);
        return NULL;

#undef LINELEN
}


