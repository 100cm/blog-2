PostgreSQL research

PostgreSQL set tablespace bug? zombie files

2013-11-13 11:03:26   查看原文>>

为了监控各个表空间的健康状态, 曾经使用过一个函数来做这块的监测, 
https://raw.github.com/digoal/sky_postgresql_cluster/a58aab3e8c324c9afc9611b79331f051f2d6100e/INSTALL.txt
函数如下 : 

-- 创建测试函数, 用于测试数据库是否正常, 包括所有表空间的测试.
create or replace function cluster_keepalive_test() returns void as $$
  declare 
    v_tbs name;
  begin
    if ( pg_is_in_recovery() ) then
      raise notice 'this is standby node.';
      return;
    end if;
    for v_tbs in select spcname from pg_tablespace where spcname <> 'pg_global' loop
      execute 'alter table cluster_status set tablespace '||v_tbs;
      update cluster_status set last_alive=now();
    end loop;
  end;
$$ language plpgsql strict;


使用以上函数, 当表空间出现问题, 或者表空间所在的文件系统出现问题后, 函数执行则会报错.
每间隔2秒运行一次, 以达到监控的目的.
期间做过重命名表空间目录来验证监控有效性, 做过多次数据库主备切换.
后来发现在一些表空间中存在一些0KB的文件, 以及一些有size的但是未引用的文件, 来自监控库.

/data05/pgdata/charge/tbs_rop/PG_9.3_201306121/16408:
total 80K
-rw------- 1 postgres postgres 8.0K Nov 13 09:43 1188414
-rw------- 1 postgres postgres  24K Nov 13 09:38 1188414_fsm
-rw------- 1 postgres postgres 8.0K Nov 13 09:33 1188414_vm
-rw------- 1 postgres postgres    0 Nov  8 08:01 279480
-rw------- 1 postgres postgres    0 Nov  8 08:01 279487
-rw------- 1 postgres postgres    0 Nov  8 08:01 279494
-rw------- 1 postgres postgres    0 Nov  8 08:01 279501
-rw------- 1 postgres postgres    0 Nov  8 08:01 279508
-rw------- 1 postgres postgres    0 Nov  8 08:01 279531
-rw------- 1 postgres postgres    0 Nov  8 08:01 279538
-rw------- 1 postgres postgres 8.0K Nov  8 08:01 279545
-rw------- 1 postgres postgres  24K Nov  8 08:01 279545_fsm
-rw------- 1 postgres postgres 8.0K Nov  8 08:01 279545_vm


16408 为监控库oid : 

sky_pg_cluster=# select datname from pg_database where oid=16408;
    datname     
----------------
 sky_pg_cluster
(1 row)


这里面除了1188414, 其他的都是已经没有被引用的垃圾文件.

sky_pg_cluster=# select oid,* from pg_tablespace where spcname='tbs_rop';
  oid  | spcname | spcowner |                spcacl                | spcoptions 
-------+---------+----------+--------------------------------------+------------
 16402 | tbs_rop |       10 | {postgres=C/postgres,rop=C/postgres} | 
(1 row)
sky_pg_cluster=# select relname,relfilenode from pg_class where reltablespace =16402;
  relname  | relfilenode 
-----------+-------------
 t_tbs_rop |     1188414
(1 row)


这些文件会带来一些问题, 因为没有被sky_pg_cluster()这个库引用, 所以要删除这个表空间的话, 仅仅删除t_tbs_rop表是没用的, 这些文件会变成僵尸文件在里面, 导致无法执行drop tablespace tbs_rop;
使用以上监控方法还有一个弊端是, 会产生大量的xlog.
所以在执行drop tablespace tbs_rop;之前, 需要手动删除这些僵尸文件. 
或者使用drop database sky_pg_cluster, 因为drop database时会调用remove_dbtablespaces(db_id); 移除所有表空间下的该数据库的子目录. 
例如本文的/data05/pgdata/charge/tbs_rop/PG_9.3_201306121/16408目录.
详见src/backend/commands/dbcommands.c

现在这个监控函数改成这样 : 
不需要在各个表空间之间移动表, 产生更少的xlog.

create or replace function cluster_keepalive_test() returns void as $$
declare
  v_spcname text;
  v_spcoid oid;
  v_nspname name := 'sky_pg_cluster';
begin
  if ( pg_is_in_recovery() ) then
      raise notice 'this is standby node.';
      return;
    end if;
  update cluster_status set last_alive=now();
  FOR v_spcname,v_spcoid IN 
    select spcname,oid from pg_tablespace where 
      oid <> (select dattablespace from pg_database where datname=current_database())
      and spcname <> 'pg_global' 
  LOOP
    perform 1 from pg_class where 
      reltablespace=v_spcoid 
      and relname='t_'||v_spcname 
      and relkind='r' 
      and relnamespace=(select oid from pg_namespace where nspname=v_nspname)
      limit 1;
    if not found then
      execute 'create table '||v_nspname||'.t_'||v_spcname||' (crt_time timestamp) tablespace '||v_spcname;
      execute 'insert into '||v_nspname||'.t_'||v_spcname||' values ('''||now()||''')';
    else
      execute 'update '||v_nspname||'.t_'||v_spcname||' set crt_time='||''''||now()||'''';
    end if;
    perform pg_stat_file(pg_relation_filepath(v_nspname||'.t_'||v_spcname));
  END LOOP;
  select spcname into v_spcname from pg_tablespace where 
    oid = (select dattablespace from pg_database where datname=current_database());
  perform 1 from pg_class where 
    reltablespace=0 
    and relname='t_'||v_spcname 
    and relkind='r' 
    and relnamespace=(select oid from pg_namespace where nspname=v_nspname)
    limit 1;
  if not found then
    execute 'create table '||v_nspname||'.t_'||v_spcname||' (crt_time timestamp) tablespace '||v_spcname;
    execute 'insert into '||v_nspname||'.t_'||v_spcname||' values ('''||now()||''')';
  else
    execute 'update '||v_nspname||'.t_'||v_spcname||' set crt_time='||''''||now()||'''';
  end if;
  perform pg_stat_file(pg_relation_filepath(v_nspname||'.t_'||v_spcname));
end;
$$ language plpgsql strict;



使用set tablespace时, 原来的数据文件会变成0kb的一个文件, 如下 : 

pg93@db-172-16-3-150-> cd 16384/
pg93@db-172-16-3-150-> ll
total 24K
-rw------- 1 pg93 pg93 8.0K Nov 11 10:21 66570
-rw------- 1 pg93 pg93 8.0K Nov 11 10:21 66579
-rw------- 1 pg93 pg93 8.0K Nov 11 15:43 66591

digoal=# alter table t_tbs_idx set tablespace pg_default ;
ALTER TABLE


再次查看该目录, 66579文件的size变0了.

pg93@db-172-16-3-150-> ll
total 16K
-rw------- 1 pg93 pg93 8.0K Nov 11 10:21 66570
-rw------- 1 pg93 pg93    0 Nov 13 11:28 66579
-rw------- 1 pg93 pg93 8.0K Nov 11 15:43 66591


执行完checkpoint, 这个文件才会被清除掉.

digoal=# checkpoint;
CHECKPOINT
pg93@db-172-16-3-150-> ll
total 16K
-rw------- 1 pg93 pg93 8.0K Nov 11 10:21 66570
-rw------- 1 pg93 pg93 8.0K Nov 11 15:43 66591



remove_dbtablespaces和dropdb函数代码 : 
src/backend/commands/dbcommands.c

/*
 * Remove tablespace directories
 *
 * We don't know what tablespaces db_id is using, so iterate through all
 * tablespaces removing <tablespace>/db_id
 */
static void
remove_dbtablespaces(Oid db_id)
{
        Relation        rel;
        HeapScanDesc scan;
        HeapTuple       tuple;
        Snapshot        snapshot;

        /*
         * As in createdb(), we'd better use an MVCC snapshot here, since this
         * scan can run for a long time.  Duplicate visits to tablespaces would be
         * harmless, but missing a tablespace could result in permanently leaked
         * files.
         *
         * XXX change this when a generic fix for SnapshotNow races is implemented
         */
        snapshot = RegisterSnapshot(GetLatestSnapshot());

        rel = heap_open(TableSpaceRelationId, AccessShareLock);
        scan = heap_beginscan(rel, snapshot, 0, NULL);
        while ((tuple = heap_getnext(scan, ForwardScanDirection)) != NULL)
        {
                Oid                     dsttablespace = HeapTupleGetOid(tuple);
                char       *dstpath;
                struct stat st;

                /* Don't mess with the global tablespace */
                if (dsttablespace == GLOBALTABLESPACE_OID)
                        continue;

                dstpath = GetDatabasePath(db_id, dsttablespace);
                if (lstat(dstpath, &st) < 0 || !S_ISDIR(st.st_mode))
                {
                        /* Assume we can ignore it */
                        pfree(dstpath);
                        continue;
                }

                if (!rmtree(dstpath, true))
                        ereport(WARNING,
                                        (errmsg("some useless files may be left behind in old database directory \"%s\"",
                                                        dstpath)));

                /* Record the filesystem change in XLOG */
                {
                        xl_dbase_drop_rec xlrec;
                        XLogRecData rdata[1];

                        xlrec.db_id = db_id;
                        xlrec.tablespace_id = dsttablespace;

                        rdata[0].data = (char *) &xlrec;
                        rdata[0].len = sizeof(xl_dbase_drop_rec);
                        rdata[0].buffer = InvalidBuffer;
                        rdata[0].next = NULL;

                        (void) XLogInsert(RM_DBASE_ID, XLOG_DBASE_DROP, rdata);
                }

                pfree(dstpath);
        }

        heap_endscan(scan);
        heap_close(rel, AccessShareLock);
        UnregisterSnapshot(snapshot);
}
........
/*
 * DROP DATABASE
 */
void
dropdb(const char *dbname, bool missing_ok)
{
        Oid                     db_id;
        bool            db_istemplate;
        Relation        pgdbrel;
        HeapTuple       tup;
        int                     notherbackends;
        int                     npreparedxacts;

        /*
         * Look up the target database's OID, and get exclusive lock on it. We
         * need this to ensure that no new backend starts up in the target
         * database while we are deleting it (see postinit.c), and that no one is
         * using it as a CREATE DATABASE template or trying to delete it for
         * themselves.
         */
        pgdbrel = heap_open(DatabaseRelationId, RowExclusiveLock);

        if (!get_db_info(dbname, AccessExclusiveLock, &db_id, NULL, NULL,
                                   &db_istemplate, NULL, NULL, NULL, NULL, NULL, NULL, NULL))
        {
                if (!missing_ok)
                {
                        ereport(ERROR,
                                        (errcode(ERRCODE_UNDEFINED_DATABASE),
                                         errmsg("database \"%s\" does not exist", dbname)));
                }
                else
                {
                        /* Close pg_database, release the lock, since we changed nothing */
                        heap_close(pgdbrel, RowExclusiveLock);
                        ereport(NOTICE,
                                        (errmsg("database \"%s\" does not exist, skipping",
                                                        dbname)));
                        return;
                }
        }

        /*
         * Permission checks
         */
        if (!pg_database_ownercheck(db_id, GetUserId()))
                aclcheck_error(ACLCHECK_NOT_OWNER, ACL_KIND_DATABASE,
                                           dbname);

        /* DROP hook for the database being removed */
        InvokeObjectDropHook(DatabaseRelationId, db_id, 0);

        /*
         * Disallow dropping a DB that is marked istemplate.  This is just to
         * prevent people from accidentally dropping template0 or template1; they
         * can do so if they're really determined ...
         */
        if (db_istemplate)
                ereport(ERROR,
                                (errcode(ERRCODE_WRONG_OBJECT_TYPE),
                                 errmsg("cannot drop a template database")));

        /* Obviously can't drop my own database */
        if (db_id == MyDatabaseId)
                ereport(ERROR,
                                (errcode(ERRCODE_OBJECT_IN_USE),
                                 errmsg("cannot drop the currently open database")));

        /*
         * Check for other backends in the target database.  (Because we hold the
         * database lock, no new ones can start after this.)
         *
         * As in CREATE DATABASE, check this after other error conditions.
         */
        if (CountOtherDBBackends(db_id, &notherbackends, &npreparedxacts))
                ereport(ERROR,
                                (errcode(ERRCODE_OBJECT_IN_USE),
                                 errmsg("database \"%s\" is being accessed by other users",
                                                dbname),
                                 errdetail_busy_db(notherbackends, npreparedxacts)));

        /*
         * Remove the database's tuple from pg_database.
         */
        tup = SearchSysCache1(DATABASEOID, ObjectIdGetDatum(db_id));
        if (!HeapTupleIsValid(tup))
                elog(ERROR, "cache lookup failed for database %u", db_id);

        simple_heap_delete(pgdbrel, &tup->t_self);

        ReleaseSysCache(tup);

        /*
         * Delete any comments or security labels associated with the database.
         */
        DeleteSharedComments(db_id, DatabaseRelationId);
        DeleteSharedSecurityLabel(db_id, DatabaseRelationId);

        /*
         * Remove settings associated with this database
         */
        DropSetting(db_id, InvalidOid);

        /*
         * Remove shared dependency references for the database.
         */
        dropDatabaseDependencies(db_id);

        /*
         * Drop pages for this database that are in the shared buffer cache. This
         * is important to ensure that no remaining backend tries to write out a
         * dirty buffer to the dead database later...
         */
        DropDatabaseBuffers(db_id);

        /*
         * Tell the stats collector to forget it immediately, too.
         */
        pgstat_drop_database(db_id);

        /*
         * Tell checkpointer to forget any pending fsync and unlink requests for
         * files in the database; else the fsyncs will fail at next checkpoint, or
         * worse, it will delete files that belong to a newly created database
         * with the same OID.
         */
        ForgetDatabaseFsyncRequests(db_id);

        /*
         * Force a checkpoint to make sure the checkpointer has received the
         * message sent by ForgetDatabaseFsyncRequests. On Windows, this also
         * ensures that background procs don't hold any open files, which would
         * cause rmdir() to fail.
         */
        RequestCheckpoint(CHECKPOINT_IMMEDIATE | CHECKPOINT_FORCE | CHECKPOINT_WAIT);

        /*
         * Remove all tablespace subdirs belonging to the database.
         */
        remove_dbtablespaces(db_id);

        /*
         * Close pg_database, but keep lock till commit.
         */
        heap_close(pgdbrel, NoLock);

        /*
         * Force synchronous commit, thus minimizing the window between removal of
         * the database files and commital of the transaction. If we crash before
         * committing, we'll have a DB that's gone on disk but still there
         * according to pg_database, which is not good.
         */
        ForceSyncCommit();
}



[参考]
1. src/backend/commands/dbcommands.c
2. https://github.com/digoal/sky_postgresql_cluster

