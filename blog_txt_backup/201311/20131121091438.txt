PostgreSQL research

About PostgreSQL AIO

2013-11-21 9:14:38   查看原文>>

http://grokbase.com/t/postgresql/pgsql-hackers/984pzfvztr/hackers-async-io-description
When using aio for file or raw device access the following functions
have to be used (from sys/aio.h):
int aio_read(int, struct aiocb *);
int aio_write(int, struct aiocb *);
int aio_cancel(int, struct aiocb *);
int aio_suspend(int, struct aiocb *[]);

The main advantage is not read ahead or the like (read ahead can be
accomplished with other means, e.g. separate reader and writer
processes).
The main advantage is, that a process that calls these for IO will
not
be suspended by the OPsys, and can therefore do other work
until the data is available. On fast disks the data will be
available
before the process time slice (20 - 50 ms) is over !
A process using normal read or write will have to wait until
all other processes have consumed their time slice.

I think the first step should be separate global IO processes,
these could then in a second step use aio.

Andreas
RESPONSE : 
This will limit us to operating systems that support POSIX aio. This
mean Linux (in the future), Solaris (anso in the future) and
presumably FreeBSD. Developing the support for AIO before we have a
place to test is could lead to trouble. We should also have an
alternative for those systems that don't (or won't) support POSIX aio.

One solution to this might be to write a group of AIO macros for
postgres. If done correctly, they could be implemented as calls ot
the POSIX AIO functions on POSIX systems that support this, and could
call the normal I/O functions on non POSIX AIO systems.

Also, in order to make the most effective use of AIO, the program will
have to undergo a major rewrite. Just a short example to ponder (get
me flamed :)

Suppose we are doing a search with a btree index. We read in the
first page and find that we will need to read in four of its "child"
pages. We issue an aio_read for each page and aio_suspend until one
of them comes in. Then you have to figure out which one is ready, go
work on that page, etc.

Lastly, aio reads and writes require memory copying, which can slow
things down. memory mapping doesn't have this problem -- what you
write is copied directly to the disk without being copied to another
buffer.

Well enough rambling for one day.

Ocie

<从源码的角度对比Postgres与MySQL>
http://blog.sina.com.cn/s/blog_742eb90201010yul.html
MySQL具有AIO(异步)的功能，而Postgres没有。MySQL的异步IO有两种实现方式，一是使用linux自带的AIO功能，二是自己通过线程模拟的。
http://www.mysqlops.com/2012/05/22/mysql-innodb-aio.html
在Linux系统上，MySQL数据库InnoDB存储引擎除了可以使用Linux自带的libaio之外，其内部还实现了一种称之为Simulated aio功能，用以模拟系统AIO实现(其实，Simulated aio要早于linux native aio使用在innodb中，可参考网文[16])。前面的章节，已经分析了InnoDB存储引擎对于Linux原生AIO的使用，此处，再简单分析一下 Innodb simulated aio的实现
方式。
以下一段话摘自Transactions on InnoDB网站[16]，简单说明了simulated aio在innodb中的处理方式。
… The query thread simply queues the request in an array and then returns to the normal working. One of the IO helper thread, which is a background thread, then takes the request from the queue and issues a synchronous IO call (pread/pwrite) meaning it blocks on the IO call. Once it returns from the pread/pwrite
call, this helper thread then calls the IO completion routine on the block in question …
Linux simulated aio，实现简单，基本采用的仍旧是同步IO的方式。相对于Linux native aio，simulated aio最大的问题在于：每个I/O请求，最终都会调用一次pread/pwrite进行处理(除非可以进行相邻page的合并)，而Linux native aio，对于一个array，进行一次异步I/O处理即可。


<Mysql VS PostgreSQL>
http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL

Asynchronous I/O

PostgreSQL supports a full fledged asynchronous API for use by client applications. It is reported to increase performance by up to 40% in some cases. MySQL supports Native Asynchronous I/O for Linux with libaio userspace library since version 5.5 (AIO in InnoDB ).

http://www.postgresql.org/docs/devel/static/libpq-async.html

<man aio_write>
http://linux.die.net/man/3/aio_write
Flag Counter
