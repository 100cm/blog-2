PostgreSQL research

PostgreSQL column based storage extension - IMCS

2014-10-30 16:55:27   查看原文>>

IMCS是PostgreSQL的一个列存储扩展插件, 它并没有改变PostgreSQL的核心代码.
IMCS使用共享内存来存储数据, 所以使用IMCS后, 数据量受到内存大小的限制.
IMCS不能使用普通的SQL操作列存储的数据, 只能使用imcs定义好的函数, 或者你自己写扩展函数.
IMCS允许某些查询使用多核, 所以对某些查询的效率非常高.
因为使用低级的MVCC, 所以IMCS的并发能力相比PG普通的表操作差很多.
优缺点 : 

Advantages and disadvantages of IMCS approach:

+ Fast execution based on vector operations
+ Parallel execution of query (for some operations)
+ No changes in PostgreSQL core (just standard extension)
+ No MVCC overhead (MURSIW isolation level)
+ No disk IO (in-memory store)
+ Optimized for timeseries (massive operations with time slices)

- Requires special queries (standard SQL queries can not be executed for IMCS data)
- Need to reload data on server restart
- Size of database is limited by size of RAM
- Maintaining alternative representation of data requires extra memory and CPU.
- Less level of concurrency for execution of multiple queries (it is not possible for example to append and query some table at the same time)
- Not able to perform joins, index searches (only by timestamp)
- Supports only fixed size string types



测试 : 

[root@db-172-16-3-221 ~]# git clone https://github.com/knizhnik/imcs
[root@db-172-16-3-221 ~]# cd imcs/
[root@db-172-16-3-221 imcs]# ll
total 1000
-rw-r--r-- 1 root root   7836 Oct 30 16:08 about.txt
-rw-r--r-- 1 root root  54094 Oct 30 16:08 btree.c
-rw-r--r-- 1 root root   3367 Oct 30 16:08 btree.h
-rw-r--r-- 1 root root   2219 Oct 30 16:08 CHANGES
-rw-r--r-- 1 root root   9411 Oct 30 16:08 disk.c
-rw-r--r-- 1 root root   2689 Oct 30 16:08 disk.h
-rw-r--r-- 1 root root   4062 Oct 30 16:08 example.sql
drwxr-xr-x 2 root root   4096 Oct 30 16:08 expected
-rw-r--r-- 1 root root   2886 Oct 30 16:08 fileio.c
-rw-r--r-- 1 root root    526 Oct 30 16:08 fileio.h
-rw-r--r-- 1 root root 419943 Oct 30 16:08 func.c
-rw-r--r-- 1 root root  15988 Oct 30 16:08 func.h
-rw-r--r-- 1 root root  78159 Oct 30 16:08 imcs--1.1.sql
-rw-r--r-- 1 root root 201930 Oct 30 16:08 imcs.c
-rw-r--r-- 1 root root    130 Oct 30 16:08 imcs.control
-rw-r--r-- 1 root root  10221 Oct 30 16:08 imcs.h
-rw-r--r-- 1 root root    154 Oct 30 16:08 INSTALL
-rwxr-xr-x 1 root root    220 Oct 30 16:08 install.sh
-rw-r--r-- 1 root root  11325 Oct 30 16:08 LICENSE
-rw-r--r-- 1 root root   1201 Oct 30 16:08 Makefile
-rw-r--r-- 1 root root   1499 Oct 30 16:08 META.json
-rw-r--r-- 1 root root     61 Oct 30 16:08 README.md
-rw-r--r-- 1 root root  10613 Oct 30 16:08 smp.c
-rw-r--r-- 1 root root   1919 Oct 30 16:08 smp.h
drwxr-xr-x 2 root root   4096 Oct 30 16:08 sql
-rw-r--r-- 1 root root   1249 Oct 30 16:08 sysv_shmem.patch
-rw-r--r-- 1 root root   3565 Oct 30 16:08 threadpool.c
-rw-r--r-- 1 root root 112010 Oct 30 16:08 user_guide.html

[root@db-172-16-3-221 imcs]# cd ..
[root@db-172-16-3-221 ~]# mv imcs /opt/soft_bak/postgresql-9.3.5/contrib/
[root@db-172-16-3-221 ~]# cd /opt/soft_bak/postgresql-9.3.5/contrib/
[root@db-172-16-3-221 contrib]# cd imcs

[root@db-172-16-3-221 imcs]# which pg_config
/opt/pgsql/bin/pg_config
[root@db-172-16-3-221 imcs]# psql -V
psql (PostgreSQL) 9.3.5



安装, 需要修改一下install.sh的PATH, 指向正确的pg_config.

[root@db-172-16-3-221 imcs]# vi install.sh 
# Use -O3 instead of default for PostgreSQL -O2 to enable loop and vectorization optiomizations in GCC.
PATH=/opt/pgsql/bin:$PATH make USE_PGXS=1 CFLAGS="-O3 -Wall -Wno-format-security"  LDFLAGS="-pthread" install

[root@db-172-16-3-221 imcs]# ./install.sh 
gcc -O3 -Wall -Wno-format-security -fpic -I. -I. -I/opt/pgsql9.3.5/include/server -I/opt/pgsql9.3.5/include/internal -D_GNU_SOURCE -I/usr/include/libxml2   -c -o imcs.o imcs.c
gcc -O3 -Wall -Wno-format-security -fpic -I. -I. -I/opt/pgsql9.3.5/include/server -I/opt/pgsql9.3.5/include/internal -D_GNU_SOURCE -I/usr/include/libxml2   -c -o func.o func.c
gcc -O3 -Wall -Wno-format-security -fpic -I. -I. -I/opt/pgsql9.3.5/include/server -I/opt/pgsql9.3.5/include/internal -D_GNU_SOURCE -I/usr/include/libxml2   -c -o smp.o smp.c
gcc -O3 -Wall -Wno-format-security -fpic -I. -I. -I/opt/pgsql9.3.5/include/server -I/opt/pgsql9.3.5/include/internal -D_GNU_SOURCE -I/usr/include/libxml2   -c -o btree.o btree.c
gcc -O3 -Wall -Wno-format-security -fpic -I. -I. -I/opt/pgsql9.3.5/include/server -I/opt/pgsql9.3.5/include/internal -D_GNU_SOURCE -I/usr/include/libxml2   -c -o threadpool.o threadpool.c
gcc -O3 -Wall -Wno-format-security -fpic -shared -o imcs.so imcs.o func.o smp.o btree.o threadpool.o -pthread  -lm 
/bin/mkdir -p '/opt/pgsql9.3.5/lib'
/bin/mkdir -p '/opt/pgsql9.3.5/share/extension'
/bin/mkdir -p '/opt/pgsql9.3.5/share/extension'
/usr/bin/install -c -m 755  imcs.so '/opt/pgsql9.3.5/lib/imcs.so'
/usr/bin/install -c -m 644 ./imcs.control '/opt/pgsql9.3.5/share/extension/'
/usr/bin/install -c -m 644 ./imcs--1.1.sql  '/opt/pgsql9.3.5/share/extension/'

[root@db-172-16-3-221 imcs]# cd /opt/pgsql/
[root@db-172-16-3-221 pgsql]# cd share/extension/
[root@db-172-16-3-221 extension]# ll -rt
total 992
-rw-r--r-- 1 root root   130 Oct 30 16:19 imcs.control
-rw-r--r-- 1 root root 78159 Oct 30 16:19 imcs--1.1.sql


会创建一些类型, 函数. 具体内容详见imcs--1.1.sql

修改postgresql.conf重启数据库

cd $PGDATA
vi postgresql.conf
shared_preload_libraries='imcs'
postgres@db-172-16-3-221-> pg_ctl restart -m fast
waiting for server to shut down.... done
server stopped
server starting
postgres@db-172-16-3-221-> LOG:  00000: loaded library "imcs"
LOCATION:  load_libraries, miscinit.c:1296
LOG:  00000: redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".
LOCATION:  SysLogger_Start, syslogger.c:638
postgres@db-172-16-3-221-> psql
psql (9.3.5)
Type "help" for help.



创建extension.

postgres@db-172-16-3-221-> psql
psql (9.3.5)
Type "help" for help.
digoal=# create extension imcs;
CREATE EXTENSION
digoal=# \dT
           List of data types
 Schema |      Name       | Description 
--------+-----------------+-------------
 public | cs_agg_result   | 
 public | cs_elem_type    | 
 public | cs_profile_item | 
 public | cs_sort_order   | 
 public | timeseries      | 
(5 rows)



性能测试, 可以参考imcs提供的example.sql

下载测试数据 : 

[root@db-172-16-3-221 ~]# su - postgres
postgres@db-172-16-3-221-> wget http://www.garret.ru/NYSE_2003_2013.csv.gz
postgres@db-172-16-3-221-> gunzip NYSE_2003_2013.csv.gz 
postgres@db-172-16-3-221-> ll
total 264M
-rw-r--r--  1 postgres postgres 264M Oct 30 16:38 NYSE_2003_2013.csv
postgres@db-172-16-3-221-> less NYSE_2003_2013.csv 
Symbol,Date,Open,High,Low,Close,Volume
A,01-Jan-2003,17.96,17.96,17.96,17.96,0
AA,01-Jan-2003,22.78,22.78,22.78,22.78,0
AAP,01-Jan-2003,16.308,16.308,16.308,16.308,0
ABB,01-Jan-2003,2.3,2.3,2.3,2.3,0
ABC,01-Jan-2003,13.5775,13.5775,13.5775,13.5775,0
ABG,01-Jan-2003,8.41,8.41,8.41,8.41,0
ABM,01-Jan-2003,15.5,15.5,15.5,15.5,0
ABT,01-Jan-2003,40,40,40,40,0
ABV,01-Jan-2003,3.112,3.112,3.112,3.112,0
ABV.C,01-Jan-2003,2.166,2.166,2.166,2.166,0
....



测试example.sql

[root@db-172-16-3-221 ~]# cd /opt/soft_bak/postgresql-9.3.5/contrib/imcs
[root@db-172-16-3-221 imcs]# cat example.sql 
\timing

-- Table with quotes. Do not use index to make inserts faster
create table Quote (Symbol char(10), Day date, Open real, High real, Low real, Close real, Volume integer);

-- Load NYSE data for ten year (can be obtained from http://www.garret.ru/NYSE_2003_2013.csv.gz)
\copy Quote from 'NYSE_2003_2013.csv' with csv header;
-- 2m31.435s
-- with triggers: 6m30.939s

-- This table should actually contain more information about companies, but for this example we need just symbol name
create table Securities (Symbol char(10));

-- It is certainly not efficient way of populating Securities table, usually information about all used symbols is available
insert into Securities select distinct Symbol from Quote;

/* 
digoal=# \df cs_create
                                                                      List of functions
 Schema |   Name    | Result data type |                                             Argument data types                            
                 |  Type  
--------+-----------+------------------+--------------------------------------------------------------------------------------------
-----------------+--------
 public | cs_create | void             | table_name text, timestamp_id text, timeseries_id text DEFAULT NULL::text, autoupdate boole
an DEFAULT false | normal
(1 row)
*/
-- Generate timeseries functions 
select cs_create('Quote', 'Day', 'Symbol');

/*
digoal=# \df Quote_load
                                                   List of functions
 Schema |    Name    | Result data type |                         Argument data types                          |  Type  
--------+------------+------------------+----------------------------------------------------------------------+--------
 public | quote_load | bigint           | already_sorted boolean DEFAULT false, filter text DEFAULT NULL::text | normal
(1 row)
*/
-- 加载到内存
select Quote_load(); 
/* 
 quote_load 
------------
    6101167
(1 row)
*/ 
--- Time: 10222.079 ms

-- We will use this view to perform queries for all quotes for symbols
--create view SecurityQuotes as select * from Quote_get(array(select Symbol from Securities));
create view SecurityQuotes as select (Quote_get(Symbol)).* from Securities;


-- Calculate VWAP (volume-weighted average price) for each symbol
-- 这条查询会用到多核
select Symbol,cs_sum(Close*Volume) / cs_sum(Volume) as VWAP from SecurityQuotes;
--- Time: 386.528 ms
/*
digoal=# select count(*) from (select Symbol,cs_sum(Close*Volume) / cs_sum(Volume) as VWAP from SecurityQuotes) t;
 count 
-------
  3274
(1 row)

Time: 0.817 ms
*/

-- Show growth days for symbol ABB during first quoter of 2010 
select (Quote_project(abb.*,cs_top_max_pos(Close, 10))).* from Quote_get('ABB', date('01-Jan-2010'), date('31-Mar-2010')) abb;
/*
 symbol |    day     | open  | high  |  low  | close | volume  
--------+------------+-------+-------+-------+-------+---------
 ABB    | 2010-03-31 | 21.72 | 21.96 | 21.62 | 21.84 | 1658500
 ABB    | 2010-03-23 | 21.56 | 21.79 | 21.52 | 21.79 | 2004500
 ABB    | 2010-03-30 | 21.67 | 21.72 | 21.48 | 21.64 | 1131800
 ABB    | 2010-03-18 | 21.51 | 21.59 | 21.33 | 21.59 | 1430000
 ABB    | 2010-03-17 | 21.61 | 21.74 | 21.51 | 21.56 | 1614200
 ABB    | 2010-03-26 | 21.51 |  21.7 | 21.27 | 21.49 | 1877100
 ABB    | 2010-03-29 | 21.45 | 21.52 |  21.3 | 21.49 | 1356500
 ABB    | 2010-03-24 | 21.37 |  21.5 | 21.29 | 21.38 | 1453400
 ABB    | 2010-03-16 | 21.11 |  21.4 | 21.07 | 21.36 | 1731300
 ABB    | 2010-03-22 | 20.88 | 21.42 | 20.87 | 21.35 | 2588000
(10 rows)

Time: 2.969 ms
*/
select (Quote_project(abb.*,cs_filter_pos(Close>Open*1.01))).* from Quote_get('ABB', date('01-Jan-2010'), date('31-Mar-2010')) abb;
/*
 symbol |    day     | open  | high  |  low  | close | volume  
--------+------------+-------+-------+-------+-------+---------
 ABB    | 2010-01-08 | 20.23 | 20.81 | 20.18 | 20.74 | 4832900
 ABB    | 2010-01-19 | 19.46 | 19.85 | 19.43 | 19.83 | 4019300
 ABB    | 2010-02-02 | 18.74 | 19.01 | 18.66 | 18.95 | 2635100
 ABB    | 2010-02-11 | 17.92 | 18.19 | 17.71 | 18.19 | 3116900
 ABB    | 2010-02-12 |  17.6 | 17.95 | 17.54 | 17.87 | 2351600
 ABB    | 2010-02-16 | 17.82 | 18.35 | 17.81 | 18.31 | 2327000
 ABB    | 2010-02-18 | 19.39 | 19.96 | 19.35 | 19.91 | 6326800
 ABB    | 2010-02-25 | 19.61 | 20.18 | 19.56 | 20.15 | 2367700
 ABB    | 2010-02-26 | 19.99 | 20.28 |  19.8 | 20.26 | 1782500
 ABB    | 2010-03-05 | 20.86 | 21.13 | 20.82 | 21.11 | 2602200
 ABB    | 2010-03-09 | 20.76 | 21.09 | 20.75 |    21 | 2425500
 ABB    | 2010-03-16 | 21.11 |  21.4 | 21.07 | 21.36 | 1731300
 ABB    | 2010-03-22 | 20.88 | 21.42 | 20.87 | 21.35 | 2588000
 ABB    | 2010-03-23 | 21.56 | 21.79 | 21.52 | 21.79 | 2004500
(14 rows)

Time: 1.639 ms
*/

select cs_count(cs_filter_pos(Close>Open*1.01))  from Quote_get('ABB');
/*
 cs_count 
----------
      534
(1 row)

Time: 3.933 ms
*/
-- Now calculate VWAP using standard Postgress aggregates.
select Symbol,sum(Close*Volume)/sum(Volume) as VWAP from Quote group by Symbol;
--- Time: 2184.646 ms
/*
digoal=# select count(*) from (select Symbol,sum(Close*Volume)/sum(Volume) as VWAP from Quote group by Symbol) t;
 count 
-------
  3274
(1 row)

Time: 4200.106 ms
*/

select Symbol,cs_sum(Close*Volume) / cs_sum(Volume) as VWAP from Quote_get('ABB');
--- Time: 0.506 ms
/*
 symbol |       vwap       
--------+------------------
 ABB    | 18.8058676363441
(1 row)

Time: 5.479 ms
*/

select Symbol,sum(Close*Volume)/sum(Volume) as VWAP from Quote group by Symbol having Symbol='ABB';
--- Time: 2.818 ms
/*
   symbol   |       vwap       
------------+------------------
 ABB        | 18.8058676263111
(1 row)

Time: 1231.209 ms
*/

select cs_sum(Close) from Quote_concat(array(select Symbol from Securities));
--- Time: 76.167 ms
/*
      cs_sum      
------------------
 450031829.244867
(1 row)

Time: 138.147 ms
*/

--- Average True Range (ATR) indicator with 14 days period for last quarter of ABB
select cs_window_atr(cs_maxof(High-Low,0|||cs_maxof(cs_abs((High<<1) - Close), cs_abs((Low<<1) - Close))), 14) << 13 from Quote_get('ABB', date('01-Jan-2010'), date('31-Mar-2010'));
/*
 float8:{0.257856777736119,0.288009750599764,0.310294795661904,0.316702283009645,0.326223603004631,0.330779152575519,0.3450091259127
59,0.358222808822241,0.350492608192081,0.350457449140484,0.346853291134775,0.35993524795697,0.387797015960043,0.38581155841658,0.403
967832075999,0.403684388251304,0.409135606917994,0.409197338381859,0.379968957068869,0.391399811244475,0.383442730915977,0.399625300
350759,0.398937735300594,0.382585045371547,0.392400431970985,0.390086022758981,0.406508509650011,0.41175800535965,0.405918142384393,
0.394781132214079,0.388725298908958,0.377387744860913,0.372574296366732,0.360247615407641,0.358801368063373,0.351029841773132,0.3409
5621625167,0.328030761334558,0.332457091928407,0.332281579912524,0.32497572007851,0.320334613564462,0.324596503175232,0.340696698452
754,0.335646966974963,0.326672118224798,0.331909796818046,0.338916261700741,0.330422330200912,0.323963575980715,0.325108909499183}
(1 row)

Time: 1.509 ms
*/

--- Relative Strength Index (RSI) indicator with 14 days period for last quarter of ABB
select 100-(100/(1+cs_window_ema(cs_maxof(cs_diff(Close), 0), 14)/cs_window_ema(cs_maxof(-cs_diff(Close), 0), 14))) from Quote_get('ABB', date('01-Jan-2010'), date('31-Mar-2010'));
/*
 float8:{-nan,100,100,100,100,100,81.0050021300039,60.5785874200606,62.7464222862852,64.9691804755226,55.4291774948804,55.4291774948
804,45.9889174578991,27.023178278228,21.3373568059468,15.3806633696472,31.2468069552894,32.464425840207,43.2004159705009,32.18957646
43253,30.1345542340998,42.1249241675097,52.0435717778121,46.3840719698246,35.2502498227066,31.0141700715262,28.0926808760699,43.3672
794025951,39.0785526057631,49.1383286652419,43.9815087175945,43.9815087175945,53.0091179978955,56.6713413607401,73.4093634793448,70.
4917502153137,73.0578703192237,64.2263814314996,67.0806363506567,69.9658440366047,71.2962859494959,73.9583756960014,75.0506064926819
,76.5629100698097,77.4816148977032,81.6348543203112,82.7861694271446,72.3231122226793,73.2109786195316,65.0271130697741,70.973353080
4915,61.5775451557452,70.5689006029185,73.9219586741707,74.42624897266,55.1485998854667,60.8713002878127,69.4698944221917,56.1930452
665804,55.5950534472502,58.8773912204727,58.8773912204727,...}
(1 row)

Time: 1.864 ms
*/

--- Now place all quotes in single timeseries (no symbol)
drop view securityquotes ;
select Quote_drop();
select cs_create('Quote', 'Day');

select Quote_load();
--- Time: 7658.043 ms

--- Calculate VWAP for the whole timeseries with ~6 millions elments
select cs_sum(Close*Volume) / cs_sum(Volume) as VWAP from Quote_get();
--- Time: 7.616 ms

--- Yet another way of calculating VWAP using cs_wavg
select Volume//Close as VWAP from Quote_get();
--- Time: 6.501 ms

--- The same query using standard Postgress aggregates
select sum(Close*Volume)/sum(Volume) as VWAP from Quote;
--- Time: 1078.843 ms

--- Select top 5 symbols with largest average prices
select cs_project(q, cs_top_max_pos((q).avg, 5)) from (select cs_hash_avg(Close, Symbol) q from Quote_get() offset 0) s;
--- Time: 76.214 ms

--- The same using standard SQL
select avg(Close) ac,Symbol from Quote group by Symbol order by ac desc limit 5;
--- Time: 1621.042 ms

--- Find longest periods when NYSE is not working
select cs_map(Day, cs_top_max_pos(cs_diff(Day), 5)),cs_top_max(cs_diff(Day), 5) from Quote_get();
--- Time: 38.448 ms

--- Number of unique values of close prices for 10 years
select cs_count(cs_unique(cs_sort(Close))) from Quote_get();
--- Time: 866.869 ms

select cs_quantile(Close,5) from Quote_get();
--- Time: 810.362 ms

--- Delete all records
select StackOptions_delete();
select sum(Quote_delete(Symbol)) from Securities;



[参考]
1. https://github.com/knizhnik/imcs
2. IMCS介绍

[root@db-172-16-3-221 imcs]# cat about.txt 
In-Memory Columnar Store for PostgreSQL

Columnar store manager stores data tables as sections of columns of data rather than as rows of data.
Most of traditional DBMS-es  store data in rows ("horizontally"): all record attributes are stored together.
Such approach allows to load the whole record using one read operation which usually leads to better performance for OLTP 
queries (which access or update single records). But OLAP queries are mostly performing operations on individual columns, 
for example calculating sum or average of some column. In this case vertical data representation, when data for each column 
is stored independently, is more efficient. There are several DBMS-es in marker which are based on vertical model: Vertica, 
SciDB,... Also most of mainstream commercial databases also provide OLAP extensions based on vertical storage:
Blue Acceleration for DB2, Oracle Database In-Memory Option, Microsoft SQL server column store...

Columnar store or vertical representation of data allows to achieve better performance in comparison with classical horizontal representation due to three factors:
* Reducing size of fetched data: only columns involved in query are accessed.
* Vector operations. Applying an operator to set of values (tile) makes it possible to minimize interpretation cost.
Also SIMD instructions of modern processors accelerate execution of vector operations.
* Compression of data. Certainly compression can also be used for all the records, but independent compression of each column can give much better results without significant extra CPU overhead. For example such simple compression algorithm like RLE 
(run-length-encoding) allows not only to reduce used space, but also minimize number of performed operations.

Modern servers usually have large amount of operating memory. Server with terabyte of RAM is not something very exotic now, 
especially in financial world. So volumes of RAM which few years ago are available only at supercomputers can now met in configurations 
of standard  servers... Certainly there are databases which requires petabyte and more memory, which still can not fit in RAM.
But size of most databases is comparable with size of available RAM, which allows to keep all data in memory.
It requires special algorithms for main-memory databases. For example it is possible to configure size of buffers (disk cache) 
in traditional database to be large enough to fit the complete database in memory. But still algorithms oriented on work with disk 
and optimized to reduce number of IO operations will be inefficient for in-memory data and have to do a lot of redundant work.

IMCS provides columnar store for PostgreSQL.
There is some specific of PostgreSQL which affects design of IMCS:

* PostgreSQL is not able to parallelize execution of an individual query. It may be normal for OLTP where larger number of simples
queries are usually executed concurrently. For for OLAP situation is quite opposite: there is small number of queries but execution of 
each query may take significant amount of time.
* PostgreSQL has multiversion concurrency control (MVCC). It allows to execute larger number of queries concurrently,
but adds significant space and CPU overhead. As it was mentioned above, in case of OLAP we rarely need concurrent execution of multiple queries, but it is important to make execution of single complex query as fast as possible and so minimize locking overhead.
* MVCC nature of PostgreSQL makes it difficult to work with large updatable objects (because MVCC requires cloning of an object 
for each update). So it is not possible to efficiently work with columnar store data using standard PostgreSQL data model.

Taken in account all above we decided to 
* Store MVCC data in PostgreSQL shared memory (to allow access to it from all PostgreSQL server processes).
* Provide own executor for columnar store functions allowing to use vector operations and execute them concurrently by multiple thread.
* Do not touch standard PostgreSQL query executor and optimizer.

So IMCS is implemented as standard PostgreSQL extension, providing set of special functions and operators for columnar data.
Some of these functions and operators are analog of standard SQL operators. For example binary and unary arithmetic operators,
comparisons, match string operations, sorting, aggregation, inserting/deleting data.
But there are a number of sophisticated analytic operators, for example finding extremum, crosses with zero, building histogram, 
calculating ranks, percentiles, ... IMCS provides extended set of aggregates which are required for financial application, 
like calculation of split-adjusted price, volume-weighted average price, moving average... All this aggregates can be calculated in parallel, utilizing all available CPU cores.

IMCS is first of all oriented on work with timeseries. Timeseries is sequence of usually small fixed size elements ordered by some 
timestamp. Operations with timeseries rarely access some particular timeseries element, instead of it them operate either with whole 
timeseries either with some time interval. Such specific of timeseries operation requires special index for timeseries, 
which is different from traditional database indexes.  Such index should not provide efficient way of locating arbitrary timeseries 
element. Instead of it this index should be able to efficiently extract range of timeseries elements. 

Our experiments show that IMCS provides 10-100 times improvement in performance comparing with standard SQL queries.
The larger size of manipulated data is, the large is advantage in performance. If for timeseries with thousands elements improvement
is about ten times, for timeseries with millions elements advantage in performance is more than 100 times.

IMCS is integrated with standard SQL model, providing functions to switch from horizontal to vertical representation and vice versa.
So IMCS usage pattern is the following: 

* You should first of all choose which tables in your database requires vertical representation. If you wan to have vertical representation only for subset of table columns, then create a view.
* IMCS generates PL/pgSQL functions to work with vertical representation of this table.
* Data is loaded in PostgreSQL table in standard way (imported from CSV file, inserted using SQL,...).
* Either automatically using trigger, either explicitly calling IMCS load function, this data is inserted in columnar store.
* You query this data using IMCS functions and operators. Result of such query can be a tuple with timeseries. Or alternatively it is 
possible to flip this result back to horizontal representation, so you will get standard SQL set of tuples. In the last case it is possible
to continue processing of results using standard SQL queries. Also you can convert timeseries to PostgreSQL array which may be useful
to deal with timeseries from programming languages which API already supports arrays.

Advantages and disadvantages of IMCS approach:

+ Fast execution based on vector operations
+ Parallel execution of query (for some operations)
+ No changes in PostgreSQL core (just standard extension)
+ No MVCC overhead (MURSIW isolation level)
+ No disk IO (in-memory store)
+ Optimized for timeseries (massive operations with time slices)

- Requires special queries (standard SQL queries can not be executed for IMCS data)
- Need to reload data on server restart
- Size of database is limited by size of RAM
- Maintaining alternative representation of data requires extra memory and CPU.
- Less level of concurrency for execution of multiple queries (it is not possible for example to append and query some table at the same time)
- Not able to perform joins, index searches (only by timestamp)
- Supports only fixed size string types



Flag Counter
