PostgreSQL research

subquery & function & func's volatile state & constraint_exclusion

2014-10-29 11:44:21   查看原文>>

群里的兄弟问到的一个问题, 用子查询时无法获得良好的执行计划, 不能通过约束排除某些子表的扫描.
因为使用约束排除扫描表是在optimizer->plan阶段处理的, 见src/backend/optimizer/util/plancat.c
而子查询在plan后处理, 所以无法用子查询的值来进行optimizer. 
如果一定要用的话, 可以考虑把子查询封装成一个函数, 同时设置函数为immutable的, immutable函数将在plan前被评估, 所以可以获得良好的执行计划.
对执行计划和函数稳定性感兴趣的朋友可以去了解一下 : 
10. 性能优化培训 - 函数的三种稳定性状态对优化器的影响分解讲解 
http://www.tudou.com/programs/view/p6E3oQEsZv0/
8. 性能优化培训 - 执行计划缓存管理, 绑定变量接口
http://www.tudou.com/programs/view/kwmilXD7JEw/

例子 : 
创建测试表, 以及约束.

digoal=# create table c(id int, crt_time date);
CREATE TABLE
digoal=# create table c1(like c including all) inherits(c);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "crt_time" with inherited definition
CREATE TABLE
digoal=# create table c2(like c including all) inherits(c);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "crt_time" with inherited definition
CREATE TABLE
digoal=# create table c3(like c including all) inherits(c);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "crt_time" with inherited definition
CREATE TABLE
digoal=# create table c4(like c including all) inherits(c);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "crt_time" with inherited definition
CREATE TABLE
digoal=# create table c5(like c including all) inherits(c);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "crt_time" with inherited definition
CREATE TABLE
digoal=# create table c6(like c including all) inherits(c);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "crt_time" with inherited definition
CREATE TABLE
digoal=# alter table c1 add constraint ck check(crt_time='2014-01-01');
ALTER TABLE
digoal=# alter table c2 add constraint ck check(crt_time='2014-01-02');
ALTER TABLE
digoal=# alter table c3 add constraint ck check(crt_time='2014-01-03');
ALTER TABLE
digoal=# alter table c4 add constraint ck check(crt_time='2014-01-04');
ALTER TABLE
digoal=# alter table c5 add constraint ck check(crt_time='2014-01-05');
ALTER TABLE
digoal=# alter table c6 add constraint ck check(crt_time='2014-01-06');
ALTER TABLE
digoal=# show constraint_exclusion;
 constraint_exclusion
----------------------
 partition
(1 row)


测试SQL, 使用常量作为条件, 可以排除不符合约束的子表扫描 : 

digoal=# explain select * from c where crt_time in ('2014-01-01','2014-01-02');
                              QUERY PLAN                              
----------------------------------------------------------------------
 Append  (cost=0.00..235.25 rows=173 width=8)
   ->  Seq Scan on c  (cost=0.00..0.00 rows=1 width=8)
         Filter: (crt_time = ANY ('{2014-01-01,2014-01-02}'::date[]))
   ->  Seq Scan on c1  (cost=0.00..117.62 rows=86 width=8)
         Filter: (crt_time = ANY ('{2014-01-01,2014-01-02}'::date[]))
   ->  Seq Scan on c2  (cost=0.00..117.62 rows=86 width=8)
         Filter: (crt_time = ANY ('{2014-01-01,2014-01-02}'::date[]))
(7 rows)



使用子查询, 同样是这两天, 但是无法排除某些子表的扫描 : 

digoal=# explain select * from c where crt_time in (select generate_series('2014-01-01'::timestamp,'2014-01-02'::timestamp,interval '1 day')::date);
                                                                                    QUERY PLAN                                      
                                              
------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------
 Hash Join  (cost=22.01..1308.95 rows=25830 width=8)
   Hash Cond: (c.crt_time = ((generate_series('2014-01-01 00:00:00'::timestamp without time zone, '2014-01-02 00:00:00'::timestamp w
ithout time zone, '1 day'::interval))::date))
   ->  Append  (cost=0.00..576.60 rows=51661 width=8)
         ->  Seq Scan on c  (cost=0.00..0.00 rows=1 width=8)
         ->  Seq Scan on c1  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c2  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c3  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c4  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c5  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c6  (cost=0.00..96.10 rows=8610 width=8)
   ->  Hash  (cost=19.51..19.51 rows=200 width=4)
         ->  HashAggregate  (cost=17.51..19.51 rows=200 width=4)
               ->  Result  (cost=0.00..5.01 rows=1000 width=0)
(13 rows)


另一个简单的子查询亦如此, 原因在开头已经分析过了 : 

digoal=# explain select * from c where crt_time in (select '2014-01-01'::date);
                            QUERY PLAN                            
------------------------------------------------------------------
 Hash Join  (cost=0.04..772.95 rows=25830 width=8)
   Hash Cond: (c.crt_time = ('2014-01-01'::date))
   ->  Append  (cost=0.00..576.60 rows=51661 width=8)
         ->  Seq Scan on c  (cost=0.00..0.00 rows=1 width=8)
         ->  Seq Scan on c1  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c2  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c3  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c4  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c5  (cost=0.00..96.10 rows=8610 width=8)
         ->  Seq Scan on c6  (cost=0.00..96.10 rows=8610 width=8)
   ->  Hash  (cost=0.03..0.03 rows=1 width=4)
         ->  HashAggregate  (cost=0.02..0.03 rows=1 width=4)
               ->  Result  (cost=0.00..0.01 rows=1 width=0)
(13 rows)


接下来, 创建一个immutable函数, 返回一个数组(即你需要的条件).

digoal=# create or replace function f(t1 timestamp, t2 timestamp) returns  date[] as $$
declare 
  res date[];
begin
  select array_agg(x) into res from (select generate_series(t1,t2,interval '1 day')::date) as t(x); 
  return res;
end;
$$ language plpgsql strict immutable;
CREATE FUNCTION

digoal=# select f('2014-01-01','2014-01-02');
            f            
-------------------------
 {2014-01-01,2014-01-02}
(1 row)


使用这个函数, 我们看到, 可以很好的过滤不符合约束的子表 : 

digoal=# explain select * from c where crt_time = any (f('2014-01-01','2014-01-02'));
                              QUERY PLAN                              
----------------------------------------------------------------------
 Append  (cost=0.00..235.25 rows=173 width=8)
   ->  Seq Scan on c  (cost=0.00..0.00 rows=1 width=8)
         Filter: (crt_time = ANY ('{2014-01-01,2014-01-02}'::date[]))
   ->  Seq Scan on c1  (cost=0.00..117.62 rows=86 width=8)
         Filter: (crt_time = ANY ('{2014-01-01,2014-01-02}'::date[]))
   ->  Seq Scan on c2  (cost=0.00..117.62 rows=86 width=8)
         Filter: (crt_time = ANY ('{2014-01-01,2014-01-02}'::date[]))
(7 rows)


如果改为stable或volatile的话, 当然是不能排除约束的, 原因在开始已经分析过了, 和函数的稳定性有关.

digoal=# alter function f(timestamp, timestamp) stable;
ALTER FUNCTION
digoal=# explain select * from c where crt_time = any (f('2014-01-01','2014-01-02'));
                                                                  QUERY PLAN                                                        
          
------------------------------------------------------------------------------------------------------------------------------------
----------
 Append  (cost=0.00..14137.35 rows=517 width=8)
   ->  Seq Scan on c  (cost=0.00..0.00 rows=1 width=8)
         Filter: (crt_time = ANY (f('2014-01-01 00:00:00'::timestamp without time zone, '2014-01-02 00:00:00'::timestamp without tim
e zone)))
   ->  Seq Scan on c1  (cost=0.00..2356.23 rows=86 width=8)
         Filter: (crt_time = ANY (f('2014-01-01 00:00:00'::timestamp without time zone, '2014-01-02 00:00:00'::timestamp without tim
e zone)))
   ->  Seq Scan on c2  (cost=0.00..2356.23 rows=86 width=8)
         Filter: (crt_time = ANY (f('2014-01-01 00:00:00'::timestamp without time zone, '2014-01-02 00:00:00'::timestamp without tim
e zone)))
   ->  Seq Scan on c3  (cost=0.00..2356.23 rows=86 width=8)
         Filter: (crt_time = ANY (f('2014-01-01 00:00:00'::timestamp without time zone, '2014-01-02 00:00:00'::timestamp without tim
e zone)))
   ->  Seq Scan on c4  (cost=0.00..2356.23 rows=86 width=8)
         Filter: (crt_time = ANY (f('2014-01-01 00:00:00'::timestamp without time zone, '2014-01-02 00:00:00'::timestamp without tim
e zone)))
   ->  Seq Scan on c5  (cost=0.00..2356.23 rows=86 width=8)
         Filter: (crt_time = ANY (f('2014-01-01 00:00:00'::timestamp without time zone, '2014-01-02 00:00:00'::timestamp without tim
e zone)))
   ->  Seq Scan on c6  (cost=0.00..2356.23 rows=86 width=8)
         Filter: (crt_time = ANY (f('2014-01-01 00:00:00'::timestamp without time zone, '2014-01-02 00:00:00'::timestamp without tim
e zone)))
(15 rows)



[参考]
1. src/backend/optimizer/util/plancat.c

/* GUC parameter */
int                     constraint_exclusion = CONSTRAINT_EXCLUSION_PARTITION;
.........................
/*
 * relation_excluded_by_constraints
 *
 * Detect whether the relation need not be scanned because it has either
 * self-inconsistent restrictions, or restrictions inconsistent with the
 * relation's validated CHECK constraints.
 *
 * Note: this examines only rel->relid, rel->reloptkind, and
 * rel->baserestrictinfo; therefore it can be called before filling in
 * other fields of the RelOptInfo.
 */
bool
relation_excluded_by_constraints(PlannerInfo *root,
                                                                 RelOptInfo *rel, RangeTblEntry *rte)
{
        List       *safe_restrictions;
        List       *constraint_pred;
        List       *safe_constraints;
        ListCell   *lc;

        /* Skip the test if constraint exclusion is disabled for the rel */
        if (constraint_exclusion == CONSTRAINT_EXCLUSION_OFF ||
                (constraint_exclusion == CONSTRAINT_EXCLUSION_PARTITION &&
                 !(rel->reloptkind == RELOPT_OTHER_MEMBER_REL ||
                   (root->hasInheritedTarget &&
                        rel->reloptkind == RELOPT_BASEREL &&
                        rel->relid == root->parse->resultRelation))))
                return false;

        /*
         * Check for self-contradictory restriction clauses.  We dare not make
         * deductions with non-immutable functions, but any immutable clauses that
         * are self-contradictory allow us to conclude the scan is unnecessary.
         *
         * Note: strip off RestrictInfo because predicate_refuted_by() isn't
         * expecting to see any in its predicate argument.
         */
        safe_restrictions = NIL;
        foreach(lc, rel->baserestrictinfo)
        {
                RestrictInfo *rinfo = (RestrictInfo *) lfirst(lc);

                if (!contain_mutable_functions((Node *) rinfo->clause))
                        safe_restrictions = lappend(safe_restrictions, rinfo->clause);
        }

        if (predicate_refuted_by(safe_restrictions, safe_restrictions))
                return true;

        /* Only plain relations have constraints */
        if (rte->rtekind != RTE_RELATION || rte->inh)
                return false;

        /*
         * OK to fetch the constraint expressions.  Include "col IS NOT NULL"
         * expressions for attnotnull columns, in case we can refute those.
         */
        constraint_pred = get_relation_constraints(root, rte->relid, rel, true);

        /*
         * We do not currently enforce that CHECK constraints contain only
         * immutable functions, so it's necessary to check here. We daren't draw
         * conclusions from plan-time evaluation of non-immutable functions. Since
         * they're ANDed, we can just ignore any mutable constraints in the list,
         * and reason about the rest.
         */
        safe_constraints = NIL;
        foreach(lc, constraint_pred)
        {
                Node       *pred = (Node *) lfirst(lc);

                if (!contain_mutable_functions(pred))
                        safe_constraints = lappend(safe_constraints, pred);
        }

        /*
         * The constraints are effectively ANDed together, so we can just try to
         * refute the entire collection at once.  This may allow us to make proofs
         * that would fail if we took them individually.
         *
         * Note: we use rel->baserestrictinfo, not safe_restrictions as might seem
         * an obvious optimization.  Some of the clauses might be OR clauses that
         * have volatile and nonvolatile subclauses, and it's OK to make
         * deductions with the nonvolatile parts.
         */
        if (predicate_refuted_by(safe_constraints, rel->baserestrictinfo))
                return true;

        return false;
}



Flag Counter
