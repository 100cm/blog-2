PostgreSQL research

PostgreSQL Subplan or subquery BUG? - NO, non exists column can used in subquery

2015-06-02 22:29:12   查看原文>>

一个看似诡异的查询，实际上是SQL标准中的correlated subqueries。
概念：
http://en.wikipedia.org/wiki/Correlated_subquery
In a SQL database query, a correlated subquery (also known as a synchronized subquery) is a subquery (a query nested inside another query) that uses values from the outer query. The subquery is evaluated once for each row processed by the outer query.
例子，当使用子查询进行＝或in的匹配时，如果subquery中查询了一个本身不存在的列，并且列名在outer table中存在，就会转换为subplan。(correlated subqueries输出的是outer table的列)。
例如：

postgres=# create table table1 (c1 int, c2 int, c3 int, c4 text);
CREATE TABLE
postgres=# create table table2 (id int);
CREATE TABLE
postgres=# insert into table1 values (1,2,3,'test');
INSERT 0 1
postgres=# insert into table1 values (2,3,4,'test');
INSERT 0 1
postgres=# insert into table2 values (100);
INSERT 0 1


c1列在table2中并不存在，转换为correlated subquries。执行计划如下：

postgres=# explain (analyze,verbose) select * from table1 where c1 = (select c1 from table2 limit 1);
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.table1  (cost=0.00..116.59 rows=23 width=44) (actual time=0.020..0.023 rows=2 loops=1)
   Output: table1.c1, table1.c2, table1.c3, table1.c4
   Filter: (table1.c1 = (SubPlan 1))
   SubPlan 1
     ->  Limit  (cost=0.00..0.01 rows=1 width=0) (actual time=0.003..0.003 rows=1 loops=2)
           Output: (table1.c1)
           ->  Seq Scan on public.table2  (cost=0.00..112.30 rows=10230 width=0) (actual time=0.002..0.002 rows=1 loops=2)
                 Output: table1.c1
 Planning time: 0.169 ms
 Execution time: 0.070 ms
(10 rows)


c2在table2 不存在，但是在outer table table1中存在，同样这个subquery是correlated subquery：

postgres=# explain select * from table1 where c1 = (select c2 from table2 where id=1);
                           QUERY PLAN                            
-----------------------------------------------------------------
 Seq Scan on table1  (cost=0.00..576322.75 rows=22 width=44)
   Filter: (c1 = (SubPlan 1))
   SubPlan 1
     ->  Seq Scan on table2  (cost=0.00..130.38 rows=48 width=0)
           Filter: (id = 1)
(5 rows)


使用in和=一样，优化器还是用了subplan。

postgres=# explain (analyze,verbose) select * from table1 where c1 in (select c1 from table2 limit 1);
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.table1  (cost=0.00..97.34 rows=2270 width=44) (actual time=0.018..0.022 rows=2 loops=1)
   Output: table1.c1, table1.c2, table1.c3, table1.c4
   Filter: (SubPlan 1)
   SubPlan 1
     ->  Limit  (cost=0.00..0.01 rows=1 width=0) (actual time=0.003..0.003 rows=1 loops=2)
           Output: (table1.c1)
           ->  Seq Scan on public.table2  (cost=0.00..112.30 rows=10230 width=0) (actual time=0.002..0.002 rows=1 loops=2)
                 Output: table1.c1
 Planning time: 0.102 ms
 Execution time: 0.069 ms
(10 rows)

对于correlated subquery, outer table处理每行时，subquery也处理一次。
postgres=# select * from table1 where c1 in (select c1 from table2 limit 1);
 c1 | c2 | c3 |  c4  
----+----+----+------
  1 |  2 |  3 | test
  2 |  3 |  4 | test
(2 rows)

postgres=# select * from table1 where c1 = (select c1 from table2 limit 1);
 c1 | c2 | c3 |  c4  
----+----+----+------
  1 |  2 |  3 | test
  2 |  3 |  4 | test
(2 rows)

所以
postgres=# select * from table1 where c1 = (select c1 from table2 limit 1);
 c1 | c2 | c3 |  c4
----+----+----+------
  1 |  2 |  3 | test
  2 |  3 |  4 | test
(2 rows)
这样是查不到结果的，因为table2.id = 100, 没有=1的。
postgres=# select * from table1 where c1 = (select c1 from table2 where id=1);
 c1 | c2 | c3 | c4
----+----+----+----
(0 rows)

同样的，如果有多行返回，则不要使用=
postgres=# insert into table2 values (1);
INSERT 0 1
postgres=# insert into table2 values (1);
INSERT 0 1
postgres=# select * from table1 where c1 = (select c1 from table2 where id=1);
ERROR:  more than one row returned by a subquery used as an expression

postgres=# select * from table1 where c1 in (select c1 from table2 where id=1);
 c1 | c2 | c3 |  c4
----+----+----+------
  1 |  2 |  3 | test
  2 |  3 |  4 | test
(2 rows)


如果在subquery中加上修饰，将报错，因为没有自动使用correlated column：

postgres=# explain (analyze,verbose) select * from table1 where c1 = (select table2.c1 from table2 limit 1);
ERROR:  column table2.c1 does not exist
LINE 1: ...,verbose) select * from table1 where c1 = (select table2.c1 ...
                                                             ^


单独查询不存在的列也会报错的，因为没有correlated column：

postgres=# explain select c1 from table2 limit 1;
ERROR:  column "c1" does not exist
LINE 1: explain select c1 from table2 limit 1;
                       ^


把subquery放在select子句中，也可能生成correlated subqueries。

postgres=# explain (analyze,verbose) select (select c1 from table2 limit 1) from table1;
                                                        QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.table1  (cost=0.00..105.24 rows=4540 width=4) (actual time=0.013..0.017 rows=2 loops=1)
   Output: (SubPlan 1)
   SubPlan 1
     ->  Limit  (cost=0.00..0.01 rows=1 width=0) (actual time=0.002..0.002 rows=1 loops=2)
           Output: (table1.c1)
           ->  Seq Scan on public.table2  (cost=0.00..112.30 rows=10230 width=0) (actual time=0.001..0.001 rows=1 loops=2)
                 Output: table1.c1
 Planning time: 0.100 ms
 Execution time: 0.070 ms
(9 rows)

对于使用correlated column的情况，不管有没有写表的alias, 执行计划完全一致，仅仅当subquery不存在c1列时
postgres=# explain (analyze,verbose) select (select table1.c1 from table2 limit 1) from table1;
                                                        QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.table1  (cost=0.00..105.24 rows=4540 width=4) (actual time=0.012..0.015 rows=2 loops=1)
   Output: (SubPlan 1)
   SubPlan 1
     ->  Limit  (cost=0.00..0.01 rows=1 width=0) (actual time=0.002..0.002 rows=1 loops=2)
           Output: (table1.c1)
           ->  Seq Scan on public.table2  (cost=0.00..112.30 rows=10230 width=0) (actual time=0.001..0.001 rows=1 loops=2)
                 Output: table1.c1
 Planning time: 0.059 ms
 Execution time: 0.049 ms




如果使用的字段名与查询条件字段名不一致，不会转换为subplan：

postgres=# explain select * from table1 where c1 = (select id from table2 limit 1);
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Seq Scan on table1  (cost=0.01..66.76 rows=23 width=44)
   Filter: (c1 = $0)
   InitPlan 1 (returns $0)
     ->  Limit  (cost=0.00..0.01 rows=1 width=4)
           ->  Seq Scan on table2  (cost=0.00..112.30 rows=10230 width=4)
(5 rows)


当子查询的表真实存在查询列时，也不会转换为subquery

postgres=# alter table table2 add column c1 int;
ALTER TABLE
postgres=# explain select * from table1 where c1 = (select c1 from table2 limit 1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Seq Scan on table1  (cost=0.01..66.76 rows=23 width=44)
   Filter: (c1 = $0)
   InitPlan 1 (returns $0)
     ->  Limit  (cost=0.00..0.01 rows=1 width=4)
           ->  Seq Scan on table2  (cost=0.00..100.90 rows=9090 width=4)
(5 rows)


对于系统表，同样适用：

postgres=# explain select tablename from tt;
ERROR:  column "tablename" does not exist
LINE 1: explain select tablename from tt;
                       ^
postgres=# \d tt
      Table "public.tt"
 Column |  Type   | Modifiers 
--------+---------+-----------
 id     | integer | 
postgres=# explain (analyze, verbose) select * from pg_tables where tablename in (select tablename from tt);
                                                                                                                                    
                                                                                 QUERY PLAN                                         
                                                                                                                                    
                                        
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------
 Nested Loop Left Join  (cost=0.00..32052.66 rows=51 width=199) (actual time=0.045..0.802 rows=102 loops=1)
   Output: n.nspname, c.relname, pg_get_userbyid(c.relowner), t.spcname, c.relhasindex, c.relhasrules, c.relhastriggers
   Join Filter: (t.oid = c.reltablespace)
   Rows Removed by Join Filter: 296
   ->  Nested Loop Left Join  (cost=0.00..32049.20 rows=51 width=139) (actual time=0.033..0.637 rows=102 loops=1)
         Output: c.relname, c.relowner, c.relhasindex, c.relhasrules, c.relhastriggers, c.reltablespace, n.nspname
         Join Filter: (n.oid = c.relnamespace)
         Rows Removed by Join Filter: 918
         ->  Seq Scan on pg_catalog.pg_class c  (cost=0.00..32040.43 rows=51 width=79) (actual time=0.020..0.341 rows=102 loops=1)
               Output: c.relname, c.relnamespace, c.reltype, c.reloftype, c.relowner, c.relam, c.relfilenode, c.reltablespace, c.rel
pages, c.reltuples, c.relallvisible, c.reltoastrelid, c.relhasindex, c.relisshared, c.relpersistence, c.relkind, c.relnatts, c.relch
ecks, c.relhasoids, c.relhaspkey, c.relhasrules, c.relhastriggers, c.relhassubclass, c.relispopulated, c.relreplident, c.relfrozenxi
d, c.relminmxid, c.relacl, c.reloptions
               Filter: ((c.relkind = 'r'::"char") AND (SubPlan 1))
               Rows Removed by Filter: 389
               SubPlan 1
                 ->  Seq Scan on public.tt  (cost=0.00..106.30 rows=9630 width=0) (actual time=0.001..0.001 rows=1 loops=102)
                       Output: c.relname
         ->  Materialize  (cost=0.00..1.15 rows=10 width=68) (actual time=0.000..0.001 rows=10 loops=102)
               Output: n.nspname, n.oid
               ->  Seq Scan on pg_catalog.pg_namespace n  (cost=0.00..1.10 rows=10 width=68) (actual time=0.003..0.005 rows=10 loops
=1)
                     Output: n.nspname, n.oid
   ->  Materialize  (cost=0.00..1.04 rows=3 width=68) (actual time=0.000..0.000 rows=3 loops=102)
         Output: t.spcname, t.oid
         ->  Seq Scan on pg_catalog.pg_tablespace t  (cost=0.00..1.03 rows=3 width=68) (actual time=0.002..0.003 rows=3 loops=1)
               Output: t.spcname, t.oid
 Planning time: 0.367 ms
 Execution time: 0.887 ms
(25 rows)


这并不是BUG，SQL标准就是这样的。
http://www.postgresql.org/docs/9.4/static/features-sql-standard.html
┌────────┬────┬───────────────────────┐
│E061-13 │Core│Correlated subqueries  │
└────────┴────┴───────────────────────┘

其实在Oracle中也是这么处理的，如下：

SQL> create table t1(c1 int,c2 int,c3 int,c4 varchar(10));

Table created.

SQL> create table t2(id int);

Table created.

SQL> insert into t1 values (1,2,3,'test');

1 row created.

SQL> insert into t1 values (2,3,4,'t');

1 row created.

SQL> insert into t2 values (100);

1 row created.
SQL> set autotrace on
SQL> select * from t1 where c1=(select c1 from t2);  

        C1         C2         C3 C4
---------- ---------- ---------- ----------
         1          2          3 test
         2          3          4 t


Execution Plan
----------------------------------------------------------
Plan hash value: 895956251

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |     1 |    46 |     4   (0)| 00:00:01 |
|*  1 |  FILTER            |      |       |       |            |          |
|   2 |   TABLE ACCESS FULL| T1   |     2 |    92 |     2   (0)| 00:00:01 |
|   3 |   TABLE ACCESS FULL| T2   |     1 |       |     2   (0)| 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("C1"= (SELECT /*+ */ :B1 FROM "T2" "T2"))

Note
-----
   - dynamic sampling used for this statement


Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
         10  consistent gets
          0  physical reads
          0  redo size
        763  bytes sent via SQL*Net to client
        487  bytes received via SQL*Net from client
          2  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
          2  rows processed



[参考]
1. 

/*
 * pull_varnos
 *              Create a set of all the distinct varnos present in a parsetree.
 *              Only varnos that reference level-zero rtable entries are considered.
 *
 * NOTE: this is used on not-yet-planned expressions.  It may therefore find
 * bare SubLinks, and if so it needs to recurse into them to look for uplevel
 * references to the desired rtable level!      But when we find a completed
 * SubPlan, we only need to look at the parameters passed to the subplan.
 */
Relids
pull_varnos(Node *node)
{
        pull_varnos_context context;

        context.varnos = NULL;
        context.sublevels_up = 0;

        /*
         * Must be prepared to start with a Query or a bare expression tree; if
         * it's a Query, we don't want to increment sublevels_up.
         */
        query_or_expression_tree_walker(node,
                                                                        pull_varnos_walker,
                                                                        (void *) &context,
                                                                        0);

        return context.varnos;
}

/*
 * Convert a SubLink (as created by the parser) into a SubPlan.
 *
 * We are given the SubLink's contained query, type, and testexpr.  We are
 * also told if this expression appears at top level of a WHERE/HAVING qual.
 *
 * Note: we assume that the testexpr has been AND/OR flattened (actually,
 * it's been through eval_const_expressions), but not converted to
 * implicit-AND form; and any SubLinks in it should already have been
 * converted to SubPlans.  The subquery is as yet untouched, however.
 *
 * The result is whatever we need to substitute in place of the SubLink
 * node in the executable expression.  This will be either the SubPlan
 * node (if we have to do the subplan as a subplan), or a Param node
 * representing the result of an InitPlan, or a row comparison expression
 * tree containing InitPlan Param nodes.
 */
static Node *
make_subplan(PlannerInfo *root, Query *orig_subquery, SubLinkType subLinkType,
                         Node *testexpr, bool isTopQual)
{
        Query      *subquery;
        bool            simple_exists = false;
        double          tuple_fraction;
        Plan       *plan;
        PlannerInfo *subroot;
        List       *plan_params;
        Node       *result;

        /*
         * Copy the source Query node.  This is a quick and dirty kluge to resolve
         * the fact that the parser can generate trees with multiple links to the
         * same sub-Query node, but the planner wants to scribble on the Query.
         * Try to clean this up when we do querytree redesign...
         */
        subquery = (Query *) copyObject(orig_subquery);

        /*
         * If it's an EXISTS subplan, we might be able to simplify it.
         */
        if (subLinkType == EXISTS_SUBLINK)
                simple_exists = simplify_EXISTS_query(subquery);

        /*
         * For an EXISTS subplan, tell lower-level planner to expect that only the
         * first tuple will be retrieved.  For ALL and ANY subplans, we will be
         * able to stop evaluating if the test condition fails or matches, so very
         * often not all the tuples will be retrieved; for lack of a better idea,
         * specify 50% retrieval.  For EXPR and ROWCOMPARE subplans, use default
         * behavior (we're only expecting one row out, anyway).
         *
         * NOTE: if you change these numbers, also change cost_subplan() in
         * path/costsize.c.
         *
         * XXX If an ANY subplan is uncorrelated, build_subplan may decide to hash
         * its output.  In that case it would've been better to specify full
         * retrieval.  At present, however, we can only check hashability after
         * we've made the subplan :-(.  (Determining whether it'll fit in work_mem
         * is the really hard part.)  Therefore, we don't want to be too
         * optimistic about the percentage of tuples retrieved, for fear of
         * selecting a plan that's bad for the materialization case.
         */
        if (subLinkType == EXISTS_SUBLINK)
                tuple_fraction = 1.0;   /* just like a LIMIT 1 */
        else if (subLinkType == ALL_SUBLINK ||
                         subLinkType == ANY_SUBLINK)
                tuple_fraction = 0.5;   /* 50% */
        else
                tuple_fraction = 0.0;   /* default behavior */

        /* plan_params should not be in use in current query level */
        Assert(root->plan_params == NIL);

        /*
         * Generate the plan for the subquery.
         */
        plan = subquery_planner(root->glob, subquery,
                                                        root,
                                                        false, tuple_fraction,
                                                        &subroot);

        /* Isolate the params needed by this specific subplan */
        plan_params = root->plan_params;
        root->plan_params = NIL;

        /* And convert to SubPlan or InitPlan format. */
        result = build_subplan(root, plan, subroot, plan_params,
                                                   subLinkType, testexpr, true, isTopQual);

        /*
         * If it's a correlated EXISTS with an unimportant targetlist, we might be
         * able to transform it to the equivalent of an IN and then implement it
         * by hashing.  We don't have enough information yet to tell which way is
         * likely to be better (it depends on the expected number of executions of
         * the EXISTS qual, and we are much too early in planning the outer query
         * to be able to guess that).  So we generate both plans, if possible, and
         * leave it to the executor to decide which to use.
         */
        if (simple_exists && IsA(result, SubPlan))
        {
                Node       *newtestexpr;
                List       *paramIds;

                /* Make a second copy of the original subquery */
                subquery = (Query *) copyObject(orig_subquery);
                /* and re-simplify */
                simple_exists = simplify_EXISTS_query(subquery);
                Assert(simple_exists);
                /* See if it can be converted to an ANY query */
                subquery = convert_EXISTS_to_ANY(root, subquery,
                                                                                 &newtestexpr, &paramIds);
                if (subquery)
                {
                        /* Generate the plan for the ANY subquery; we'll need all rows */
                        plan = subquery_planner(root->glob, subquery,
                                                                        root,
                                                                        false, 0.0,
                                                                        &subroot);

                        /* Isolate the params needed by this specific subplan */
                        plan_params = root->plan_params;
                        root->plan_params = NIL;

                        /* Now we can check if it'll fit in work_mem */
                        if (subplan_is_hashable(plan))
                        {
                                SubPlan    *hashplan;
                                AlternativeSubPlan *asplan;

                                /* OK, convert to SubPlan format. */
                                hashplan = (SubPlan *) build_subplan(root, plan, subroot,
                                                                                                         plan_params,
                                                                                                         ANY_SUBLINK, newtestexpr,
                                                                                                         false, true);
                                /* Check we got what we expected */
                                Assert(IsA(hashplan, SubPlan));
                                Assert(hashplan->parParam == NIL);
                                Assert(hashplan->useHashTable);
                                /* build_subplan won't have filled in paramIds */
                                hashplan->paramIds = paramIds;

                                /* Leave it to the executor to decide which plan to use */
                                asplan = makeNode(AlternativeSubPlan);
                                asplan->subplans = list_make2(result, hashplan);
                                result = (Node *) asplan;
                        }
                }
        }

        return result;
}



Flag Counter
