PostgreSQL research

PostgreSQL 9.5 new feature - add distance operator <-> & gist KNN order by for point and polygon and circle

2015-06-16 11:13:23   查看原文>>

PostgreSQL 9.5 新增了两个可用于圆形，多边形距离排序的操作符<->
以及求圆形，多边形，点之间距离的操作符<->

58.2. Built-in Operator Classes

The core PostgreSQL distribution includes the GiST operator classes shown in Table 58-1. (Some of the optional modules described in Appendix F provide additional GiST operator classes.)

Table 58-1. Built-in GiST Operator Classes

┌────────────┬─────────────────┬────────────────────────────────────────────┬───────────────────┐
│    Name    │Indexed Data Type│            Indexable Operators             │Ordering Operators │
├────────────┼─────────────────┼────────────────────────────────────────────┼───────────────────┤
│box_ops     │box              │&& &> &< &<| >> << <<| <@ @> @ |&> |>> ~ ~= │                   │
├────────────┼─────────────────┼────────────────────────────────────────────┼───────────────────┤
│circle_ops  │circle           │&& &> &< &<| >> << <<| <@ @> @ |&> |>> ~ ~= │<->                │
├────────────┼─────────────────┼────────────────────────────────────────────┼───────────────────┤
│inet_ops    │inet, cidr       │&& >> >>= > >= <> << <<= < <= =             │                   │
├────────────┼─────────────────┼────────────────────────────────────────────┼───────────────────┤
│point_ops   │point            │>> >^ << <@ <@ <@ <^ ~=                     │<->                │
├────────────┼─────────────────┼────────────────────────────────────────────┼───────────────────┤
│poly_ops    │polygon          │&& &> &< &<| >> << <<| <@ @> @ |&> |>> ~ ~= │<->                │
├────────────┼─────────────────┼────────────────────────────────────────────┼───────────────────┤
│range_ops   │any range type   │&& &> &< >> << <@ -|- = @> @>               │                   │
├────────────┼─────────────────┼────────────────────────────────────────────┼───────────────────┤
│tsquery_ops │tsquery          │<@ @>                                       │                   │
├────────────┼─────────────────┼────────────────────────────────────────────┼───────────────────┤
│tsvector_ops│tsvector         │@@                                          │                   │
└────────────┴─────────────────┴────────────────────────────────────────────┴───────────────────┘

For historical reasons, the inet_ops operator class is not the default class for types inet and cidr. To use it, mention the class name in CREATE INDEX, for example

CREATE INDEX ON my_table USING GIST (my_inet_column inet_ops);


例子：

postgres=# select oprcode,oprleft,oprright,oprresult from pg_operator where oprname='<->' order by 1;
......
 dist_ppoly      |     600 |      604 |       701
 dist_cpoint     |     718 |      600 |       701
 dist_polyp      |     604 |      600 |       701
(19 rows)

postgres=# select typname from pg_type where oid=600;
 typname 
---------
 point
(1 row)

postgres=# select typname from pg_type where oid=604;
 typname 
---------
 polygon
(1 row)

postgres=# select typname from pg_type where oid=718;
 typname 
---------
 circle
(1 row)

postgres=# select typname from pg_type where oid=701;
 typname 
---------
 float8
(1 row)



求两者的最近距离：

postgres=# select point '(1,100)' <-> circle '<(0,1),5>';
     ?column?     
------------------
 94.0050503762308
(1 row)
postgres=# select point '(1,100)' <-> polygon '((1,2),(100,200),(100,2000))';
     ?column?     
------------------
 4.84990586340793
(1 row)
postgres=# select point '(-1,1)' <-> polygon '((0,1),(100,0),(0,0))';
 ?column? 
----------
        1
(1 row)

postgres=# select point '(-1,1)' <-> polygon '((-1,1),(100,0),(0,0))';
 ?column? 
----------
        0
(1 row)



[参考]
1. http://www.postgresql.org/docs/devel/static/gist-builtin-opclasses.html
2. http://www.postgresql.org/docs/devel/static/functions-geometry.html
Flag Counter
