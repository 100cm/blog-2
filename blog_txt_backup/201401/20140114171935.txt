PostgreSQL research

PostgreSQL ARRAY map

2014-01-14 17:19:35   查看原文>>

在数据库中存储的一些数组, 如果要转换成另一组对应的数组, 可以写函数来解决.
映射表 : 

digoal=# create table dict(c1 int unique, c2 int unique);


插入100万条映射数据 : 

digoal=# insert into dict select generate_series(1,1000000),generate_series(2,1000001);


映射数据样本如下 : 

digoal=# select * from dict limit 10;
 c1 | c2 
----+----
  1 |  2
  2 |  3
  3 |  4
  4 |  5
  5 |  6
  6 |  7
  7 |  8
  8 |  9
  9 | 10
 10 | 11
(10 rows)


创建数组转换函数 : 

digoal=# create or replace function f_map(i_arr int[]) returns int[] as $$
declare
  v_res int[] := '{}'::int[]; 
  i int;
begin
  foreach i in array i_arr loop
    select array_append(v_res,c2) into v_res from dict where c1=i;
  end loop;
  return v_res;
end;
$$ language plpgsql strict;


这个函数可以根据映射关系, 如实转换, 如下 : 

digoal=# select f_map('{9,9,9}'::int[]);
   f_map    
------------
 {10,10,10}
(1 row)
Time: 0.680 ms


如果数组中不会出现重复的值, 那么可以换个函数, 减少表的扫描次数.

digoal=# create or replace function f_map(i_arr int[]) returns int[] as $$
declare
v_res int[] := '{}'::int[]; i int;
begin
  select array_agg(c2) into v_res from dict where c1 = any(i_arr);
return v_res;end;                           
$$ language plpgsql strict;
CREATE FUNCTION


使用以上函数, 如果元素有重复的话, 会消掉重复元素. 如下 : 

digoal=# select f_map('{9,9,9}'::int[]);
 f_map 
-------
 {10}
(1 row)



这个用程序的话更好解决, 所以建议就不要用数据库来搞了.
例如 : 
python

>>> a = [1,2,3,4,5,6,7,8,9,1,2,3]
>>> c=[]
>>> c.extend(i*2 for i in a)
>>> c
[2, 4, 6, 8, 10, 12, 14, 16, 18, 2, 4, 6]
>>> set(c)
{2, 4, 6, 8, 10, 12, 14, 16, 18}


Flag Counter
