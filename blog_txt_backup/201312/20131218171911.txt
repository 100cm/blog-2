PostgreSQL research

PostgreSQL Function volatile,stable,immutable difference between QUERY select and where.

2013-12-18 17:19:11   查看原文>>

函数放在SELECT和WHERE子句中, 调用次数有不同的是stable态.
需要特别注意.

在select 子句和在where子句中有差别.
例如某个表有5条记录 : 

digoal=# select * from t;
 id 
----
  3
  3
  3
  4
  5
(5 rows)


当函数为volatile时, 它在select中和where子句中, 每条tuple都要运算到这个函数.

digoal=# alter function nextval(regclass) volatile;
ALTER FUNCTION
digoal=# select currval('seq');
 currval 
---------
      62
(1 row)

digoal=# select nextval('seq') from t;
 nextval 
---------
      63
      64
      65
      66
      67
(5 rows)

digoal=# select currval('seq');
 currval 
---------
      67
(1 row)

digoal=# select * from t where nextval('seq')=68;
 id 
----
  3
(1 row)

digoal=# select currval('seq');
 currval 
---------
      72
(1 row)


对于stable态, 它在select中, 每条tuple都要运算到这个函数. 但是在where子句中, 只运算一次.

digoal=# alter function nextval(regclass) stable;
ALTER FUNCTION
digoal=# select nextval('seq') from t;
 nextval 
---------
      73
      74
      75
      76
      77
(5 rows)

digoal=# select * from t where nextval('seq')=78;
 id 
----
  3
  3
  3
  4
  5
(5 rows)

digoal=# select currval('seq');
 currval 
---------
      78
(1 row)


对于immutable态, 它在select中和where子句中, 都只运算一次.

digoal=# alter function nextval(regclass) immutable;
ALTER FUNCTION
digoal=# select nextval('seq') from t;
 nextval 
---------
      79
      79
      79
      79
      79
(5 rows)

digoal=# select * from t where nextval('seq')=80;
 id 
----
  3
  3
  3
  4
  5
(5 rows)

digoal=# select currval('seq');
 currval 
---------
      80
(1 row)



从以上三种测试, 我们知道stable和immutable函数在where子句中时, 参数相同的话, 只会运算一次.
因为对于PG来说, 定义的函数如果未stable或者immutable的, 如果传入参数相同, 不管调用多少次返回结果都是一样的.
所以只有stable或者immutable函数才能用于创建函数索引.

本例修改一个不稳定函数为稳定函数后, 验证了三态对优化器带来的影响, 必须时刻注意.

[参考]
1. src/backend/optimizer/util
