PostgreSQL research

PostgreSQL sequence get speed with 2 Intel(R) Xeon(R) CPU E5504 @ 2.00GHz

2013-01-15 21:13:59   查看原文>>

PostgreSQL 的序列性能测试 : 
测试机 : 

CentOS 5.7 x64
PostgreSQL 9.2.1
DELL R610
CPU 2 * Intel(R) Xeon(R) CPU E5504  @ 2.00GHz



1. 测试不开启cache的情况下取序列的速度 : 
创建序列 : 

ocz@db-172-16-3-150-> psql 
psql (9.2.1)
Type "help" for help.
digoal=> create sequence seq_test;
CREATE SEQUENCE


查看当前序列ID : 

digoal=> select * from seq_test ;
-[ RECORD 1 ]-+--------------------
sequence_name | seq_test
last_value    | 1
start_value   | 1
increment_by  | 1
max_value     | 9223372036854775807
min_value     | 1
cache_value   | 1
log_cnt       | 0
is_cycled     | f
is_called     | f



pgbench测试脚本 : 

ocz@db-172-16-3-150-> cat t.sql
select nextval('seq_test');



测试结果 : 

ocz@db-172-16-3-150-> pgbench -M prepared -n -r -f ./t.sql -c 16 -j 4 -T 30 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 30 s
number of transactions actually processed: 3085448
tps = 102832.533289 (including connections establishing)
tps = 102891.321540 (excluding connections establishing)
statement latencies in milliseconds:
        0.153352        select nextval('seq_test');


由此看出不启用cache的情况下每秒可取102891个序列值.

2. 测试开启cache的情况下取序列的速度 : 

digoal=> alter sequence seq_test restart with 1;
ALTER SEQUENCE
digoal=> alter sequence seq_test cache 100;
ALTER SEQUENCE
ocz@db-172-16-3-150-> pgbench -M prepared -n -r -f ./t.sql -c 16 -j 4 -T 30 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 30 s
number of transactions actually processed: 3359853
tps = 111975.743127 (including connections establishing)
tps = 112049.881187 (excluding connections establishing)
statement latencies in milliseconds:
        0.140799        select nextval('seq_test');
ocz@db-172-16-3-150-> psql digoal digoal
psql (9.2.1)
Type "help" for help.
digoal=> \x
Expanded display is on.
digoal=> select * from seq_test ;
-[ RECORD 1 ]-+--------------------
sequence_name | seq_test
last_value    | 3360400
start_value   | 1
increment_by  | 1
max_value     | 9223372036854775807
min_value     | 1
cache_value   | 100
log_cnt       | 32
is_cycled     | f
is_called     | t


获取速度为112049每秒. 略有提高. 但是如果非长连接的话, 将造成巨大的浪费. 如下 : 

digoal=> alter sequence seq_test restart with 1;
ALTER SEQUENCE



调整pgbench参数 : 

  -C           establish new connection for each transaction


测试结果 : 

ocz@db-172-16-3-150-> pgbench -M simple -C -n -r -f ./t.sql -c 16 -j 4 -T 30 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 16
number of threads: 4
duration: 30 s
number of transactions actually processed: 25865
tps = 861.986914 (including connections establishing)
tps = 59712.243088 (excluding connections establishing)
statement latencies in milliseconds:
        13.960707       select nextval('seq_test');


查看最后的序列值 : 

ocz@db-172-16-3-150-> psql digoal digoal
psql (9.2.1)
Type "help" for help.
digoal=> \x
Expanded display is on.
digoal=> select * from seq_test ;
-[ RECORD 1 ]-+--------------------
sequence_name | seq_test
last_value    | 2588100
start_value   | 1
increment_by  | 1
max_value     | 9223372036854775807
min_value     | 1
cache_value   | 100
log_cnt       | 32
is_cycled     | f
is_called     | t


实际处理事务为25865个,  但是序列值已经增长到了2588100, 100倍的浪费.
测试结果仅供参考.
