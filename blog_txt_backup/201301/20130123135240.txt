PostgreSQL research

PostgreSQL 9.3 feature COPY Optimize, Data loaded with COPY can inited with freeze xid in some condition

2013-01-23 13:52:40   查看原文>>

PostgreSQL 9.3将带来令人兴奋的特性之一.
COPY的优化,
我们知道PostgreSQL 数据库的MVCC机制中需要用到tuple的xmin,xmax以及infomask,pg_clog中的信息等。
一条记录插入后xmin代表了执行这个插入SQL的事务的事务ID。
由于XID是有限的, 在经历若干个事务后, xmin或xmax必须置为frozenXID, 否则将会"消失", 注意这个"消失"不是数据没了, 而是MVCC机制导致的该TUPLE变成了未来的TUPLE, 而不可见。
因此frozen 这个动作是数据库在经常做的. 需要修改块的数据, 并且需要扫描块.
frozen也是个不小的开销.
但是PostgreSQL 9.3给大家带来了好消息, 在COPY命令中加入了freeze选项。只要符合以下三个条件, 就会在导入数据时将xmin置为frozenXID。
因此不需要后续的frozen动作。这次改进对COPY命令本身没有性能提升, 但是对于后续来说是有提升的。

1. Rows will be frozen only if the table being loaded has been created in the current subtransaction, 
2. there are no cursors open held by this transaction.
3. there are no older snapshots held by this transaction.


commit信息 : 

1. When a relfilenode is created in this subtransaction or a committed child transaction 
2. and it(relfilenode) cannot otherwise be seen by our own process, 
3. mark tuples committed ahead of transaction commit for all COPY commands in same transaction. 


    (事务提交前标记tuple为committed状态, 而不需要等到事务结束后去修改infomask的信息)

1. If FREEZE specified on COPY
2. and pre-conditions met 
then rows will also be frozen.


Both options designed to avoid revisiting rows after commit,
increasing performance of subsequent commands after data load and upgrade. 
pg_restore changes later.


pg_restore随后将会改进, 因为pg_resotre也是通过COPY来恢复数据的, 直接置为frozenXID将减少了大量的frozen操作(块扫描以及块修改).

结合手册中的描述以及commit中的描述, 怎样算是满足了这3个条件呢?
1. 表必须是在当前事务创建的或前面已提交的前面的子事务创建的.
2. 如果表已经创建了, 那么如果relfilenode在本事务中或已经提交的前面的子事务中变更了. 也算满足条件
3. 除了当前进程, 其他进程无法看到这个relfilenode.
4. 执行COPY的事务没有已经打开的游标, 没有老的snapshot.

测试 : 
安装数据库 : 

cd /home/pgdev
wget http://ftp.postgresql.org/pub/snapshot/dev/postgresql-snapshot.tar.bz2
tar -jxvf postgresql-snapshot.tar.bz2

export PGPORT=9300
export PGUSER=postgres
export PGDATA=/home/pgdev/pg_root
export LANG=en_US.utf8
export PGHOME=/home/pgdev/pgsql9.3
export PGHOST=$PGDATA
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
export DATE=`date +"%Y%m%d%H%M"`
export PATH=$PGHOME/bin:$PATH:.
export MANPATH=$PGHOME/share/man:$MANPATH

cd /home/pgdev/postgresql-9.3devel/
./configure --prefix=/home/pgdev/pgsql9.3 --with-pgport=9300 --with-perl --with-python --with-tcl --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=16 --enable-debug && gmake world
gmake install-world
su - pgdev
initdb -D $PGDATA -E UTF8 --locale=c -U postgres
pg_ctl start


测试 : 
生成测试数据 : 

postgres=# copy pg_class to '/home/pgdev/pg_class.sql';
COPY 291


测试1 , 符合在事务中新建表的条件 : 

postgres=# begin;
BEGIN
postgres=# create table test(like pg_class including all) with oids;
CREATE TABLE
postgres=# copy test from '/home/pgdev/pg_class.sql' freeze;
COPY 291
postgres=# select xmin,count(*) from test group by xmin;
 xmin | count 
------+-------
    2 |   291
(1 row)


测试2 , 符合在事务中新建relfilenode的条件(truncate) : 

postgres=# begin;
BEGIN
postgres=# truncate test;
TRUNCATE TABLE


-- 生成新的relfilenode, 这个filenode其他进程是看不到的.

postgres=# copy test from '/home/pgdev/pg_class.sql' freeze;
COPY 291
postgres=# select xmin,count(*) from test group by xmin;
 xmin | count 
------+-------
    2 |   291
(1 row)


测试3 , 不符合条件. 因为表不是在事务中创建的, 并且relfilenode也不是在事务中新建的 : 

postgres=# truncate test ;
TRUNCATE TABLE
-- 生成新的relfilenode, 但是这个filenode其他进程是能看到的. 因为在事务外.
postgres=# begin;
BEGIN
postgres=# copy test from '/home/pgdev/pg_class.sql' freeze;
COPY 291
postgres=# select xmin,count(*) from test group by xmin;
 xmin | count 
------+-------
 1694 |   291
(1 row)


truncate生成filenode的解释 : 

postgres=# select pg_relation_filepath('test'::regclass);
 pg_relation_filepath 
----------------------
 base/12810/17887
(1 row)
postgres=# truncate test;
TRUNCATE TABLE
postgres=# select pg_relation_filepath('test'::regclass);
 pg_relation_filepath 
----------------------
 base/12810/18183
(1 row)
postgres=# begin;
BEGIN
postgres=# truncate test;
TRUNCATE TABLE
postgres=# select pg_relation_filepath('test'::regclass);
 pg_relation_filepath 
----------------------
 base/12810/18188
(1 row)


其他会话看到的还是老的filenode : 

postgres=# select pg_relation_filepath('test'::regclass);
 pg_relation_filepath 
----------------------
 base/12810/18183
(1 row)



测试4 , 不符合条件. 含游标的测试 : 

postgres=# begin;
BEGIN
postgres=# truncate test;
TRUNCATE TABLE
postgres=# declare refcurs cursor for select * from pg_class;
DECLARE CURSOR
postgres=# select * from pg_cursors ;
  name   |                     statement                      | is_holdable | is_binary | is_scrollable |         creation_time     
    
---------+----------------------------------------------------+-------------+-----------+---------------+---------------------------
----
 refcurs | declare refcurs cursor for select * from pg_class; | f           | f         | t             | 2013-01-23 13:30:31.793574
+08
(1 row)

postgres=# copy test from '/home/pgdev/pg_class.sql' freeze;
COPY 291
postgres=# select xmin,count(*) from test group by xmin;
 xmin | count 
------+-------
 1698 |   291
(1 row)



测试5 , 不符合条件. 含已注册的snapshot的测试 : 

postgres=# begin TRANSACTION ISOLATION LEVEL repeatable read;
BEGIN
postgres=# 
postgres=# SELECT pg_export_snapshot();
 pg_export_snapshot 
--------------------
 000006AA-1
(1 row)
postgres=# truncate test;
TRUNCATE TABLE
postgres=# copy test from '/home/pgdev/pg_class.sql' freeze;
COPY 291
postgres=# select xmin,count(*) from test group by xmin;
 xmin | count 
------+-------
 1706 |   291
(1 row)


xmin=2表示这个是frozenXID.
见 : 

src/include/access/transam.h
/* ----------------
 *              Special transaction ID values
 *
 * BootstrapTransactionId is the XID for "bootstrap" operations, and
 * FrozenTransactionId is used for very old tuples.  Both should
 * always be considered valid.
 *
 * FirstNormalTransactionId is the first "normal" transaction id.
 * Note: if you need to change it, you must change pg_class.h as well.
 * ----------------
 */
#define InvalidTransactionId            ((TransactionId) 0)
#define BootstrapTransactionId          ((TransactionId) 1)
#define FrozenTransactionId                     ((TransactionId) 2)
#define FirstNormalTransactionId        ((TransactionId) 3)
#define MaxTransactionId                        ((TransactionId) 0xFFFFFFFF)



【参考】
1. http://www.postgresql.org/docs/devel/static/sql-copy.html
2. https://github.com/postgres/postgres/commit/8de72b66a2edcf12c812de0a73bd50b6b7d81d62
3. https://github.com/postgres/postgres/commit/ddf509eb4a163aacd59a7bbd44ba2ca9ba691da2
4. https://github.com/postgres/postgres/commit/02aea36414ecfac8d1e90fba6d4642d8d67d7aaa
5. http://blog.163.com/digoal@126/blog/static/163877040201210134586363/
6. http://blog.163.com/digoal@126/blog/static/163877040201211259497702/
7. http://blog.163.com/digoal@126/blog/static/1638770402011830105342275/
8. http://blog.163.com/digoal@126/blog/static/163877040201183043153622/
9. http://blog.163.com/digoal@126/blog/static/1638770402012416105232835/
10. http://blog.163.com/digoal@126/blog/static/1638770402012101423358264/
9. src/backend/utils/time/snapmgr.c

 * snapmgr.c
 *              PostgreSQL snapshot manager
 *
 * We keep track of snapshots in two ways: those "registered" by resowner.c,
 * and the "active snapshot" stack.  All snapshots in either of them live in
 * persistent memory.  When a snapshot is no longer in any of these lists
 * (tracked by separate refcounts on each snapshot), its memory can be freed.
 *
 * The FirstXactSnapshot, if any, is treated a bit specially: we increment its
 * regd_count and count it in RegisteredSnapshots, but this reference is not
 * tracked by a resource owner. We used to use the TopTransactionResourceOwner
 * to track this snapshot reference, but that introduces logical circularity
 * and thus makes it impossible to clean up in a sane fashion.  It's better to
 * handle this reference as an internally-tracked registration, so that this
 * module is entirely lower-level than ResourceOwners.
 *
 * Likewise, any snapshots that have been exported by pg_export_snapshot
 * have regd_count = 1 and are counted in RegisteredSnapshots, but are not
 * tracked by any resource owner.
 *
 * These arrangements let us reset MyPgXact->xmin when there are no snapshots
 * referenced by this transaction.      (One possible improvement would be to be
 * able to advance Xmin when the snapshot with the earliest Xmin is no longer
 * referenced.  That's a bit harder though, it requires more locking, and
 * anyway it should be rather uncommon to keep temporary snapshots referenced
 * for too long.)
......................
bool
ThereAreNoPriorRegisteredSnapshots(void)
{
        if (RegisteredSnapshots <= 1)
                return true;

        return false;
}


10.. src/backend/commands/copy.c

                /*
                 * Optimize if new relfilenode was created in this subxact or
                 * one of its committed children and we won't see those rows later
                 * as part of an earlier scan or command. This ensures that if this
                 * subtransaction aborts then the frozen rows won't be visible
                 * after xact cleanup. Note that the stronger test of exactly
                 * which subtransaction created it is crucial for correctness
                 * of this optimisation.
                 *
                 * As noted above rd_newRelfilenodeSubid is not set in all cases
                 * where we can apply the optimization, so in those rare cases
                 * where we cannot honour the request we do so silently.
                 */
                if (cstate->freeze &&
                        ThereAreNoPriorRegisteredSnapshots() &&
                        ThereAreNoReadyPortals() &&
                        (cstate->rel->rd_newRelfilenodeSubid == GetCurrentSubTransactionId() ||
                         cstate->rel->rd_createSubid == GetCurrentSubTransactionId()))
                        hi_options |= HEAP_INSERT_FROZEN;


