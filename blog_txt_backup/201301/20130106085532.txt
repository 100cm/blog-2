PostgreSQL research

PostgreSQL array compare and array element's sort

2013-01-06 8:55:32   查看原文>>

前几天写了一篇关于PostgreSQL 分区表的监控的BLOG, 里面涉及到父表与子表权限的比较环节.
权限在数据库中是以aclitem[]类型存储的, 也就是要比较两个数组了.
我们来看看两个数组比较的时候会是什么样子的情形?

digoal=> select 1 where array[1,2]=array[2,1];
 ?column? 
----------
(0 rows)

digoal=> select 1 where array[1,2]=array[1,2];
 ?column? 
----------
        1
(1 row)


从上面的例子可以看出, 两个数组必须完全一致, 包括元素的顺序也必须一致那么这两个数组才是相等的.
或者说=这个operator 作用在两个数组上是, 是这么来判断一致性的.
另外, 来看看包含和被包含. 确又有点不一样. 看起来是拆成元素并去重后进行的比较 : 
包含 : 

digoal=> select array[1,2,3,2] @> array[1,2,1];
 ?column? 
----------
 t
(1 row)
digoal=> select array[1,2,3,2] @> array[1,2,1,4];
 ?column? 
----------
 f
(1 row)


被包含 : 

digoal=> select array[1,2,3,2] <@ array[1,2,1,4];
 ?column? 
----------
 f
(1 row)

digoal=> select array[1,2,3,2] <@ array[1,2,1,4,3];
 ?column? 
----------
 t
(1 row)


以上用到的=, <@, @>操作符如下 : 

                                                     List of operators
   Schema   | Name | Left arg type |  Right arg type  |   Result type    |                   Description                   
------------+------+---------------+------------------+------------------+-------------------------------------------------
 pg_catalog | <@   | anyarray      | anyarray         | boolean          | is contained by
 pg_catalog | @>   | anyarray      | anyarray         | boolean          | contains
 pg_catalog | =    | anyarray                    | anyarray                    | boolean     | equal



他们对应的系统函数如下 : 

digoal=> select oid,typname from pg_type where typname ~ 'array';
 oid  |   typname   
------+-------------
 2277 | anyarray
 2776 | anynonarray
(2 rows)
digoal=> select * from pg_operator where oprname in ('<@', '@>', '=') and oprleft=2277 and oprright=2277;
-[ RECORD 1 ]+-----------------
oprname      | <@
oprnamespace | 11
oprowner     | 10
oprkind      | b
oprcanmerge  | f
oprcanhash   | f
oprleft      | 2277
oprright     | 2277
oprresult    | 16
oprcom       | 2751
oprnegate    | 0
oprcode      | arraycontained
oprrest      | arraycontsel
oprjoin      | arraycontjoinsel
-[ RECORD 2 ]+-----------------
oprname      | =
oprnamespace | 11
oprowner     | 10
oprkind      | b
oprcanmerge  | t
oprcanhash   | t
oprleft      | 2277
oprright     | 2277
oprresult    | 16
oprcom       | 1070
oprnegate    | 1071
oprcode      | array_eq
oprrest      | eqsel
oprjoin      | eqjoinsel
-[ RECORD 3 ]+-----------------
oprname      | @>
oprnamespace | 11
oprowner     | 10
oprkind      | b
oprcanmerge  | f
oprcanhash   | f
oprleft      | 2277
oprright     | 2277
oprresult    | 16
oprcom       | 2752
oprnegate    | 0
oprcode      | arraycontains
oprrest      | arraycontsel
oprjoin      | arraycontjoinsel


也就是如下对应关系 : 

= : array_eq
<@ : arraycontained
@> : arraycontains



1. 那么要比较两个array严格相等(包括顺序), 可以使用=操作符.
如 : 

digoal=> select array[1,2]=array[1,2];
 ?column? 
----------
 t
(1 row)

digoal=> select array[1,2]=array[2,1];
 ?column? 
----------
 f
(1 row)



2. 如果要比较两个array不严格相等(只需要数组的元素相等, 各个元素的个数可以不相等), 可以使用a @> b并且b <@ a;

digoal=> select array[2,2,1,1,3,3,3] @> array[1,1,2,3] and array[2,2,1,1,3,3,3] <@ array[1,1,2,3];
 ?column? 
----------
 t
(1 row)



3. 如果要比较两个array排序后相等呢? 那就得使用定制函数了, 这个在
http://blog.163.com/digoal@126/blog/static/16387704020130433036377/
已经提到了.
首先是对数组进行排序 : 
为了通用性, 这里用到了anyarray类型, 所以可以针对所有元素类型可排序的数组类型.

create or replace function mon_array_sort(i_arr anyarray, OUT result anyarray) returns anyarray as $$
declare
begin
  select array_agg(arr order by arr) into result from unnest(i_arr) t(arr);
  return;
end;
$$ language plpgsql;


例如 : 
text数组 : 

digoal=> select mon_array_sort('{1,2,3,4}'::text[]) = mon_array_sort('{3,1,2,4,4}'::text[]);
 ?column? 
----------
 f
(1 row)

digoal=> select mon_array_sort('{1,2,3,4}'::text[]) = mon_array_sort('{3,1,2,4}'::text[]);
 ?column? 
----------
 t
(1 row)


int型数组 : 

digoal=> select mon_array_sort(array[3,1,4,2]) = mon_array_sort(array[1,2,3,4]);
 ?column? 
----------
 t
(1 row)
digoal=> select mon_array_sort(array[3,1,4,2]) = mon_array_sort(array[1,2,3,4,1]);
 ?column? 
----------
 f
(1 row)


【参考】
1. http://blog.163.com/digoal@126/blog/static/16387704020130433036377/
