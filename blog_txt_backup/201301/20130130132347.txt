PostgreSQL research

PostgreSQL extension Redis FDW update will support redis structured data types and support for restricted keyspace search

2013-01-30 13:23:47   查看原文>>

redis fdw更新了! 来自andrew的博客 : 

Today I've published a major revision to the Redis Foreign Data Wrapper code for use with PostgreSQL versions 9.2 and later. There are two new features: support for Redis structured data types and support for restricted keyspace search.

The structured data type support is enabled by using the table option "tabletype", which can take one of the values "hash", "list", "set" or "zset". If this option is used the data comes back as an array rather than as a simple scalar value. In the case of "hash" tables, the values are a sequence of key/value pairs. For the other types they are simply the elements of the relevant structure. If the values column of these tables is defined to be of type "text[]"(i.e. array of text) then an actual array is returned. If the column is a plain text column an array literal is returned. Hash table arrays in particular can be turned into records via hstore's "populate_record" functionality, or transformed in other useful ways.

Restricted keyspace search is enabled by using one of the table options "tablekeyprefix" or "tablekeyset". These are mutually exclusive. "tablekeyprefix" restricts the search to keys with the given prefix. However, in a very large Redis database this might still be expensive. In that case, it might be better to keep a list of the keys in a separate set, and this is supported using the "tablekeyset" option. When this is used the global keyspace isn't searched at all, and the list of keys is simply taken as the members of the set.

The new functionality is demonstrated in the test script (which is also new). 

I am also working on some facilities to push data into Redis and similar things, but these fall outside the current possibility of a Foreign Data Wrapper, and will be announced separately.


在PostgreSQL 9.2+ 的版本中使用更新后的redis_fdw版本, 可以支持redis结构化数据类型, list, hash, zset, set.

(9.2 and later) tabletype: can be 'hash', 'list', 'set' or 'zset' Default: none, meaning only look at scalar values.
(9.2 and later) tablekeyprefix: only get items whose names start with the prefix. Default: none
(9.2 and later) tablekeyset: fetch item names from the named set. Default: none


如果foreign talbe参数中使用了tabletype设置list,hash,zset或者set. 那么外部表的value字段可以选择使用普通类型或者数组类型存储, 例如text存储或者text[]存储.
同时使用了tabletype后, 
1. 可以使用tablekeyprefix限定key的名字. 
2. 或者使用tablekeyset限定set的key名.(这个set中的value用作检索tabletype指定的数据结构的key值, 这样的话比使用tablekeyprefix限定更加方便)

使用举例 : 
PostgreSQL 9.2.1
安装redis fdw

wget https://github.com/dpage/redis_fdw/archive/REL9_2_STABLE.zip
unzip REL9_2_STABLE.zip
mv redis_fdw-REL9_2_STABLE postgresql-9.2.1/contrib
su - root
. /home/ocz/.bash_profile
cd postgresql-9.2.1/contrib/redis_fdw-REL9_2_STABLE
gmake clean
gmake
gmake install


redis测试数据 : 

pgdev@db-172-16-3-150-> redis-cli
select 15

set foo bar
set baz blurfl

sadd set1 m1 m2 m3 m4 m5 m6 m7 m8
sadd set2 m8 m9 m10 m11 m12

lpush list1 e1 e2 e3 e4 e5 e6
lpush list2 e7 e8 e9 e10

hmset hash1 k1 v1 k2 v2 k3 v3 k4 v4
hmset hash2 k1 v5 k2 v6 k3 v7 k4 v8

zadd zset1 1 z1 2 z2 3 z3 4 z4 5 z5 6 z6
zadd zset2 1 z7 2 z8 3 z9 4 z10 5 z11 6 z12

sadd hkeys hash1 hash2
sadd lkeys list1 list2
sadd skeys set1 set2
sadd zkeys zset1 zset2


输出 : 

redis 127.0.0.1:6379> select 15
OK
redis 127.0.0.1:6379[15]> 
redis 127.0.0.1:6379[15]> set foo bar
OK
redis 127.0.0.1:6379[15]> set baz blurfl
OK
redis 127.0.0.1:6379[15]> 
redis 127.0.0.1:6379[15]> sadd set1 m1 m2 m3 m4 m5 m6 m7 m8
(integer) 8
redis 127.0.0.1:6379[15]> sadd set2 m8 m9 m10 m11 m12
(integer) 5
redis 127.0.0.1:6379[15]> 
redis 127.0.0.1:6379[15]> lpush list1 e1 e2 e3 e4 e5 e6
(integer) 6
redis 127.0.0.1:6379[15]> lpush list2 e7 e8 e9 e10
(integer) 4
redis 127.0.0.1:6379[15]> 
redis 127.0.0.1:6379[15]> hmset hash1 k1 v1 k2 v2 k3 v3 k4 v4
OK
redis 127.0.0.1:6379[15]> hmset hash2 k1 v5 k2 v6 k3 v7 k4 v8
OK
redis 127.0.0.1:6379[15]> 
redis 127.0.0.1:6379[15]> zadd zset1 1 z1 2 z2 3 z3 4 z4 5 z5 6 z6
(integer) 6
redis 127.0.0.1:6379[15]> zadd zset2 1 z7 2 z8 3 z9 4 z10 5 z11 6 z12
(integer) 6
redis 127.0.0.1:6379[15]> 
redis 127.0.0.1:6379[15]> sadd hkeys hash1 hash2
(integer) 2
redis 127.0.0.1:6379[15]> sadd lkeys list1 list2
(integer) 2
redis 127.0.0.1:6379[15]> sadd skeys set1 set2
(integer) 2
redis 127.0.0.1:6379[15]> sadd zkeys zset1 zset2
(integer) 2


使用redis_fdw : 
1. 创建extension, server以及user mapping for server.

ocz@db-172-16-3-150-> psql digoal
psql (9.2.1)
Type "help" for help.
digoal=# create extension redis_fdw;
CREATE EXTENSION
digoal=# CREATE SERVER redis_server FOREIGN DATA WRAPPER redis_fdw OPTIONS (address '127.0.0.1', port '6379');
CREATE SERVER
digoal=# CREATE USER MAPPING FOR PUBLIC SERVER redis_server;
CREATE USER MAPPING


创建基于database的普通的key value外部表.

digoal=# CREATE FOREIGN TABLE redis_db15_kv (key text, value text) 
digoal-# SERVER redis_server
digoal-# OPTIONS (database '15');
CREATE FOREIGN TABLE
digoal=# select * from redis_db15_kv ;
 key | value  
-----+--------
 baz | blurfl
 foo | bar
(2 rows)


如果不指定database,  默认是0, 如下 : 

Datum
redis_fdw_validator(PG_FUNCTION_ARGS)
{
 List    *options_list = untransformRelOptions(PG_GETARG_DATUM(0));
 Oid   catalog = PG_GETARG_OID(1);
 char    *svr_address = NULL;
 int   svr_port = 0;
 char    *svr_password = NULL;
 int   svr_database = 0;
 redis_table_type tabletype = PG_REDIS_SCALAR_TABLE;
 char       *tablekeyprefix = NULL;
 char       *tablekeyset = NULL;
 ListCell   *cell;


2. 创建基于database的所有hash的外部表. hash value以text存储.

digoal=# CREATE FOREIGN TABLE redis_db15_hash_all_vtext (key text, value text) 
digoal-# SERVER redis_server
digoal-# OPTIONS (database '15', tabletype 'hash');
CREATE FOREIGN TABLE
digoal=# select * from redis_db15_hash_all_vtext ;
  key  |                   value                   
-------+-------------------------------------------
 hash1 | {"k1","v1","k2","v2","k3","v3","k4","v4"}
 hash2 | {"k1","v5","k2","v6","k3","v7","k4","v8"}
(2 rows)


3. 创建基于database的所有hash的外部表. hash value以text[]存储.

digoal=# CREATE FOREIGN TABLE redis_db15_hash_all_vtext_array (key text, value text[]) 
digoal-# SERVER redis_server
digoal-# OPTIONS (database '15', tabletype 'hash');
CREATE FOREIGN TABLE
digoal=# select * from redis_db15_hash_all_vtext_array ;
  key  |           value           
-------+---------------------------
 hash1 | {k1,v1,k2,v2,k3,v3,k4,v4}
 hash2 | {k1,v5,k2,v6,k3,v7,k4,v8}
(2 rows)


4. 创建基于database的指定hash key值的外部表. hash value以text存储.
使用tablekeyprfix指定 KEY值.

digoal=# CREATE FOREIGN TABLE redis_db15_hash1_vtext (key text, value text)   
SERVER redis_server
OPTIONS (database '15', tabletype 'hash', tablekeyprefix 'hash1');
CREATE FOREIGN TABLE
digoal=# select * from redis_db15_hash1_vtext ;
  key  |                   value                   
-------+-------------------------------------------
 hash1 | {"k1","v1","k2","v2","k3","v3","k4","v4"}
(1 row)


5. 创建基于database的指定hash key值集合的外部表. hash value以text存储.
外部表包含的hash key值集合存储在redis的set结构中, 所以用tablekeyset指定了set的key值.

digoal=# CREATE FOREIGN TABLE redis_db15_hash_hkeys (key text, value text) 
digoal-# SERVER redis_server
digoal-# OPTIONS (database '15', tabletype 'hash', tablekeyset 'hkeys');
CREATE FOREIGN TABLE
digoal=# select * from redis_db15_hash_hkeys ;
  key  |                   value                   
-------+-------------------------------------------
 hash1 | {"k1","v1","k2","v2","k3","v3","k4","v4"}
 hash2 | {"k1","v5","k2","v6","k3","v7","k4","v8"}
(2 rows)


如果set中包含不存在的hash key, 那么这个hash 的value为空白的array结构, 注意不是NULL.

redis 127.0.0.1:6379[15]> sadd hkeys emptyhask
(integer) 1
digoal=# select * from redis_db15_hash_hkeys ;
    key    |                   value                   
-----------+-------------------------------------------
 hash1     | {"k1","v1","k2","v2","k3","v3","k4","v4"}
 emptyhask | {}
 hash2     | {"k1","v5","k2","v6","k3","v7","k4","v8"}
(3 rows)


list, set, zset使用与hash类似, 不再举例.

【其他】
1. 如果tabletype='zset', 目前不取score, 只取member.

【参考】
1. http://blog.163.com/digoal@126/blog/static/1638770402013024112341509/
2. https://github.com/dpage/redis_fdw

Flag Counter
