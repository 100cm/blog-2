PostgreSQL research

Active archive_command (or fork pgarch proc) on PostgreSQL's standby node by modify postmaster.c and walreceiver.c

2014-06-20 12:53:37   查看原文>>

PostgreSQL standby节点(换句话说, 数据库未进入PM_RUN状态的时候) , 在启动数据库后, 不会触发pgarch进程.
也就是说postgresql 的standby节点是没有办法做xlog的归档的.
当然PG不允许standby节点归档, 也是情有可原, 但是我个人觉得, 这个可以交给用户自己来决定是否需要开启standby节点的归档功能. 例如增肌一个GUC参数, 控制standby节点是否允许归档.

好了不扯淡, 接下来要做的是如何开启standby的归档, 以下是最简单粗暴的方法.
有两处代码需要修改.
第一处, 去除启动pgarch进程的状态判断, 这样的话standby节点也可以启动archiver进程.
1. src/backend/postmaster/postmaster.c
                if (XLogArchivingActive() && PgArchPID == 0 )
                //if (XLogArchivingActive() && PgArchPID == 0 && pmState == PM_RUN)
                        PgArchPID = pgarch_start();
...
                        if (XLogArchivingActive())
                        //if (XLogArchivingActive() && pmState == PM_RUN)
                                PgArchPID = pgarch_start();
第二除, 修改walreceiver进程的接收部分, 不接收.done文件.
这个文件在$PGDATA/pg_xlog/archive_status里面, 文件名由两部分组成xlog_name.done, 表示已经归档完成.
如果walreceiver直接生成这个文件, 将使得archiver认为这个文件已经归档了, 所以不需要再归档.
同时archive需要通过xlog_name.ready来判断是否需要对该XLOG文件进行归档, 所以我们这把生成.done, 改成.ready.
2. src/backend/replication/walreceiver.c
                        /*
                         * Create .done file forcibly to prevent the streamed segment from
                         * being archived later.
                         */
                        XLogFileName(xlogfname, recvFileTLI, recvSegNo);
                        //XLogArchiveForceDone(xlogfname);
                        XLogArchiveNotify(xlogfname);
....
                                /*
                                 * Create .done file forcibly to prevent the streamed segment
                                 * from being archived later.
                                 */
                                XLogFileName(xlogfname, recvFileTLI, recvSegNo);
                                //XLogArchiveForceDone(xlogfname);
                                XLogArchiveNotify(xlogfname);
修改后重新编译standby节点的postgresql程序, 重启standby.
现在standby节点可以正常的执行archive_command里配置的命令了.
这个场景主要应用在以standby节点为备份节点的场景中. 主节点不需要开启归档, 由备份节点去完成归档.

注意, 修改后, 因为standby节点会fork出archive进程, 所以在关库的时候也需要关这个进程, 相应的代码本文未修改, 所以关库会卡住, 你可以使用pg_ctl stop -m immediate来关.

本文仅供测试, 不建议在生产中使用.

[参考]
1. src/backend/postmaster/postmaster.c
2. src/backend/postmaster/pgarch.c
3. src/backend/replication/walreceiver.c
4. src/backend/access/transam/xlogarchive.c
/*
 * XLogArchiveNotify
 *
 * Create an archive notification file
 *
 * The name of the notification file is the message that will be picked up
 * by the archiver, e.g. we write 0000000100000001000000C6.ready
 * and the archiver then knows to archive XLOGDIR/0000000100000001000000C6,
 * then when complete, rename it to 0000000100000001000000C6.done
 */
void
XLogArchiveNotify(const char *xlog)
...
/*
 * XLogArchiveForceDone
 *
 * Emit notification forcibly that an XLOG segment file has been successfully
 * archived, by creating <XLOG>.done regardless of whether <XLOG>.ready
 * exists or not.
 */
void
XLogArchiveForceDone(const char *xlog)


Flag Counter
