PostgreSQL research

PostgreSQL array's head or tail ordering match case - 1

2013-04-23 23:45:33   查看原文>>

本文主要讲解一下数组的匹配案例, 例如 : 
[1,2,3,4,5] 包含 [1,2,3] 返回真.
[1,2,3,4,5] 包含 [2,1,3] 返回假.
也就是需要按从头开始的顺序进行匹配.
最简单的做法就是转换成text类型进行匹配.
例如 : 
'{1,2,3,4,5}' ~ E'^\\{1,2,3'.

【具体方法如下 : 】
-- 创建测试表

digoal=# create table t(id int[]);


-- 创建数组转text的immutable函数, 用于函数索引.

digoal=# create or replace function intarray_to_text(int[]) returns text as $$
   select textin(array_out($1));
 $$ language sql strict immutable;


-- 创建索引

digoal=# create index idx_t_1 on t(intarray_to_text(id));
digoal=# create index idx_t_2 on t(array_length(id,1));


-- 插入测试数据

digoal=# insert into t select array[round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000),round(random()*100000)] from generate_series(1,1000000);
Time: 86062.617 ms


-- 每秒约插入11619 . 
-- 查询

digoal=# select * from t limit 1;
{40241,86365,43946,48807,99558,11987,82836,24504,97856,62515,14241,81148,65980,35811,5017,88976,51379,76457,42701,34981,93450,72379
,8785,38390,51686,8603,18504,54890,42702,50231,49994,82943,36596,93940,31749,36154,5927,14585,60659,3783,77100,74900,84932,43080,107
11,89949,32056,62090,66405,74757,97071,59856,47136,5856,98246,98822,14459,16750,53712,57161,66981,3705,40103,3577,97645,71853,39732,
3572,86438,390,7355,63538,75290,92287,6618,86001,82236,38675,48091,48641,13432,45162,8497,60568,51018,6743,59390,65476,23493,13102,2
2637,90474,16807,62740,94051,14452,34593,33783}


-- 索引检索, 前10个元素匹配, 速度还行.

digoal=# explain analyze select * from t where intarray_to_text(id) ~ E'^\\{40241,86365,43946,48807,99558,11987,82836,24504,97856,62515,';
                                                                                                     QUERY PLAN                     
                                                                                
------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Index Scan using idx_t_1 on t  (cost=0.50..7.66 rows=100 width=416) (actual time=0.120..0.122 rows=1 loops=1)
   Index Cond: ((intarray_to_text(id) >= '{40241,86365,43946,48807,99558,11987,82836,24504,97856,62515,'::text) AND (intarray_to_tex
t(id) < '{40241,86365,43946,48807,99558,11987,82836,24504,97856,62515-'::text))
   Filter: (intarray_to_text(id) ~ '^\\{40241,86365,43946,48807,99558,11987,82836,24504,97856,62515,'::text)
 Total runtime: 0.145 ms
(4 rows)
Time: 1.695 ms



【intarray extension】
http://www.postgresql.org/docs/9.2/static/intarray.html
intarray扩展了int数组的操作符, 函数等. 例如支持元素排序等. 
当然使用array_agg(i order by i) from unnest(array) g(i) 也可以排序.

Table F-8. intarray Functions

┌───────────────────────────────────┬───────────┬──────────────────────────────────────────────────────────┬─────────────────────────────────────┬──────────┐
│             Function              │Return Type│                       Description                        │               Example               │  Result  │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│icount(int[])                      │int        │number of elements in array                               │icount('{1,2,3}'::int[])             │3         │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│sort(int[], text dir)              │int[]      │sort array — dir must be asc or desc                     │sort('{1,2,3}'::int[], 'desc')       │{3,2,1}   │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│sort(int[])                        │int[]      │sort in ascending order                                   │sort(array[11,77,44])                │{11,44,77}│
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│sort_asc(int[])                    │int[]      │sort in ascending order                                   │                                     │          │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│sort_desc(int[])                   │int[]      │sort in descending order                                  │                                     │          │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│uniq(int[])                        │int[]      │remove adjacent duplicates                                │uniq(sort('{1,2,3,2,1}'::int[]))     │{1,2,3}   │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│idx(int[], int item)               │int        │index of first element matching item (0 if none)          │idx(array[11,22,33,22,11], 22)       │2         │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│subarray(int[], int start, int len)│int[]      │portion of array starting at position start, len elements │subarray('{1,2,3,2,1}'::int[], 2, 3) │{2,3,2}   │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│subarray(int[], int start)         │int[]      │portion of array starting at position start               │subarray('{1,2,3,2,1}'::int[], 2)    │{2,3,2,1} │
├───────────────────────────────────┼───────────┼──────────────────────────────────────────────────────────┼─────────────────────────────────────┼──────────┤
│intset(int)                        │int[]      │make single-element array                                 │intset(42)                           │{42}      │
└───────────────────────────────────┴───────────┴──────────────────────────────────────────────────────────┴─────────────────────────────────────┴──────────┘

Table F-9. intarray Operators

┌──────────────────┬───────┬────────────────────────────────────────────────────────────────┐
│     Operator     │Returns│                          Description                           │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] && int[]    │boolean│overlap — true if arrays have at least one common element      │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] @> int[]    │boolean│contains — true if left array contains right array             │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] <@ int[]    │boolean│contained — true if left array is contained in right array     │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│# int[]           │int    │number of elements in array                                     │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] # int       │int    │index (same as idx function)                                    │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] + int       │int[]  │push element onto array (add it to end of array)                │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] + int[]     │int[]  │array concatenation (right array added to the end of left one)  │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] - int       │int[]  │remove entries matching right argument from array               │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] - int[]     │int[]  │remove elements of right array from left                        │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] | int       │int[]  │union of arguments                                              │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] | int[]     │int[]  │union of arrays                                                 │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] & int[]     │int[]  │intersection of arrays                                          │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│int[] @@ query_int│boolean│true if array satisfies query (see below)                       │
├──────────────────┼───────┼────────────────────────────────────────────────────────────────┤
│query_int ~~ int[]│boolean│true if array satisfies query (commutator of @@)                │
└──────────────────┴───────┴────────────────────────────────────────────────────────────────┘

【text 类型】
因为本例没有用到数组的其他特性, 所以可以使用text类型来替代id字段. 

postgres=# create table t1 (id text);
CREATE TABLE
postgres=# insert into t1 select id::text from t;
INSERT 0 1000000
postgres=# create index idx_t1_1 on t1(id);
CREATE INDEX
postgres=# create index idx_t1_2 on t1(array_length(regexp_split_to_array(id,','),1));
-- SIZE
postgres=# \dt+
                    List of relations
 Schema | Name | Type  |  Owner   |  Size  | Description 
--------+------+-------+----------+--------+-------------
 public | t    | table | postgres | 434 MB | 
 public | t1   | table | postgres | 601 MB | 
(2 rows)
postgres=# \di+
                          List of relations
 Schema |   Name   | Type  |  Owner   | Table |  Size   | Description 
--------+----------+-------+----------+-------+---------+-------------
 public | idx_t1_1 | index | postgres | t1    | 723 MB  | 
 public | idx_t_1  | index | postgres | t     | 1031 MB | 
 public | idx_t_2  | index | postgres | t     | 27 MB   | 
(3 rows)


-- 查询效率

postgres=# explain analyze select * from t1 where id ~ E'^\\{40241,86365,43946,48807,99558,11987,82836,24504,97856,62515,';
                                                                                   QUERY PLAN                                       
                                            
------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------
 Index Only Scan using idx_t1_1 on t1  (cost=0.00..6.12 rows=100 width=582) (actual time=0.031..0.032 rows=1 loops=1)
   Index Cond: ((id >= '{40241,86365,43946,48807,99558,11987,82836,24504,97856,62515,'::text) AND (id < '{40241,86365,43946,48807,99
558,11987,82836,24504,97856,62515-'::text))
   Filter: (id ~ '^\\{40241,86365,43946,48807,99558,11987,82836,24504,97856,62515,'::text)
   Heap Fetches: 1
 Total runtime: 0.040 ms
(5 rows)


-- 使用text查询耗时更短, 因为不需要运算intarray_to_text, 如果查询并发高的话, 可以考虑使用text替代前面的int array.

【其他】
1. 如果是数组的中间部分顺序匹配, 例如 : 
[1,2,3,4,5] @> [2,3,4]
这种查询如果一定要在数据库中大量进行, 那么建议使用gist索引, 先查出包含后, 然后进行顺序匹配过滤.

2. 索引字段长度不要超过8191

digoal=# insert into t select arr from (select array_agg(i) AS arr from (select round(random()*1000000) AS i from generate_series(1,10000)) t) t;
ERROR:  54000: index row requires 50656 bytes, maximum size is 8191
LOCATION:  index_form_tuple, indextuple.c:170


-- 如下

src/backend/access/common/indextuple.c
        if ((size & INDEX_SIZE_MASK) != size)
                ereport(ERROR,
                                (errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),
                                 errmsg("index row requires %lu bytes, maximum size is %lu",
                                                (unsigned long) size,
                                                (unsigned long) INDEX_SIZE_MASK)));
src/include/access/itup.h
#define INDEX_SIZE_MASK   0x1FFF



【参考】
1. A case, choose array , hstore or text type, or split column
http://blog.163.com/digoal@126/blog/static/16387704020120453516936/
2. PostgreSQL row , record , composite , table type used in array and prepared statement case
http://blog.163.com/digoal@126/blog/static/16387704020132695425525/
3. PostgreSQL varbit type used case : railway | train ticket sales
http://blog.163.com/digoal@126/blog/static/163877040201302092558484/
4. PostgreSQL large row|column performance tuning case
http://blog.163.com/digoal@126/blog/static/16387704020130931040444/
5. PostgreSQL array subscript out of range error explain
http://blog.163.com/digoal@126/blog/static/163877040201201272718196/
6. PostgreSQL 9.2 add array elements statistics
http://blog.163.com/digoal@126/blog/static/16387704020124180182088/
7. PostgreSQL ADD atomic array_replace and array_remove element value(s) from ARRAY
http://blog.163.com/digoal@126/blog/static/163877040201261273149437/
8. PostgreSQL file text array fdw used for unpredictable columns of text file
http://blog.163.com/digoal@126/blog/static/163877040201302410511382/
9. PostgreSQL ARRAY datatype introduce
http://blog.163.com/digoal@126/blog/static/163877040201201275922529/
10. PostgreSQL array compare and array element's sort
http://blog.163.com/digoal@126/blog/static/16387704020130682522480/
11. PostgreSQL Function to return the intersection of 2 ARRAYs
http://blog.163.com/digoal@126/blog/static/1638770402013030104627983/
