PostgreSQL research

Postgres-XC add coordinator or repair coordinator catalog - 1

2013-04-03 17:44:24   查看原文>>

本文讲解的环境参考 : 
http://blog.163.com/digoal@126/blog/static/16387704020133292915600/

1. 首先将192.168.122.178的coordinator从其他的coordinator配置中去除.
模拟当前只有5个coordinator的情况.

psql -h 192.168.122.173 -p 1921 -U postgres postgres -c "drop node coordinate_6";
psql -h 192.168.122.174 -p 1921 -U postgres postgres -c "drop node coordinate_6";
psql -h 192.168.122.175 -p 1921 -U postgres postgres -c "drop node coordinate_6";
psql -h 192.168.122.176 -p 1921 -U postgres postgres -c "drop node coordinate_6";
psql -h 192.168.122.177 -p 1921 -U postgres postgres -c "drop node coordinate_6";



2. 在这5个coordinator中的任意一个中新建一个测试表
# 因为修改了node信息, 所以先重载一下pool

postgres=# select pgxc_pool_reload();
postgres=# create table user_info(id int primary key, info text, crt_time timestamp) distribute by hash(id) to group gp0;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_info_pkey" for table "user_info"
CREATE TABLE



3. 在192.168.122.178的coordinator中看不到这个新建的user_info表.

[pgxc@db-192-168-122-173 pgxc_ddl]$ psql -h 192.168.122.178 -p 1921 -U postgres postgres
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=# \dt
        List of relations
 Schema | Name | Type  |  Owner   
--------+------+-------+----------
 public | t1   | table | postgres
(1 row)



4. 现在要让user_info表出现在192.168.122.178的coordinator中, 直接加肯定是不行的, 因为各个datanode中已经存在这个表了.

psql -h 192.168.122.178 -p 1921 -U postgres postgres
postgres=# create table user_info(id int primary key, info text, crt_time timestamp) distribute by hash(id) to group gp0;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_info_pkey" for table "user_info"
ERROR:  relation "user_info" already exists


做法如下 : 
1. 将192.168.122.178的coordinator添加到现有的coordinator中.

psql -h 192.168.122.173 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"
psql -h 192.168.122.174 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"
psql -h 192.168.122.175 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"
psql -h 192.168.122.176 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"
psql -h 192.168.122.177 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"


# 重载pool

psql -h 192.168.122.173 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"
psql -h 192.168.122.174 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"
psql -h 192.168.122.175 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"
psql -h 192.168.122.176 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"
psql -h 192.168.122.177 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"


2. 关闭当前所有有应用程序连接的coordinator(或者阻断他们与外界的任何连接, 包括select, dml等等), 假设当前为5个coordinator.
主要是防止现有coordinator的catalog又会发生变更(例如变更表结构,  删除表或者新建表等等, 并且一会在192.168.122.178上还要用到其中的一个datanode来做引子, 所以务必小心操作).

[pgxc@db-192-168-122-173]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-174]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-175]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-176]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-177]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate


3. 连接到所有datanode, 重命名user_info表

[pgxc@db-192-168-122-173 pgxc_ddl]$ psql -h 192.168.122.178 -p 1923 -U postgres postgres
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=# \dt
           List of relations
 Schema |   Name    | Type  |  Owner   
--------+-----------+-------+----------
 public | t1        | table | postgres
 public | user_info | table | postgres
(2 rows)

postgres=# alter table user_info rename to digoal_user_info;
ALTER TABLE


# 其他节点

[pgxc@db-192-168-122-174 pg_log]$ psql -h 192.168.122.173 -p 1923 -U postgres postgres -c "alter table user_info rename to digoal_user_info;"
ALTER TABLE
[pgxc@db-192-168-122-174 pg_log]$ psql -h 192.168.122.174 -p 1923 -U postgres postgres -c "alter table user_info rename to digoal_user_info;"
ALTER TABLE
[pgxc@db-192-168-122-174 pg_log]$ psql -h 192.168.122.175 -p 1923 -U postgres postgres -c "alter table user_info rename to digoal_user_info;"
ALTER TABLE
[pgxc@db-192-168-122-174 pg_log]$ psql -h 192.168.122.176 -p 1923 -U postgres postgres -c "alter table user_info rename to digoal_user_info;"
ALTER TABLE
[pgxc@db-192-168-122-174 pg_log]$ psql -h 192.168.122.177 -p 1923 -U postgres postgres -c "alter table user_info rename to digoal_user_info;"
ALTER TABLE



4. 连接到192.168.122.178的coordinator.
删除所有除本地coordinator以外的其他coordinator节点, 然后新建user_info表.

drop node coordinate_1;
drop node coordinate_2;
drop node coordinate_3;
drop node coordinate_4;
drop node coordinate_5;
postgres=# create table user_info(id int primary key, info text, crt_time timestamp) distribute by hash(id) to group gp0;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_info_pkey" for table "user_info"
CREATE TABLE


5. 连接到所有datanode删除user_info表, 然后将digoal_user_info表改回user_info. 为什么要这么做呢? 参考本文参考部分的第2点.

[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.173 -p 1923 -U postgres postgres -c "drop table user_info;"
DROP TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.174 -p 1923 -U postgres postgres -c "drop table user_info;"
DROP TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.175 -p 1923 -U postgres postgres -c "drop table user_info;"
DROP TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.176 -p 1923 -U postgres postgres -c "drop table user_info;"
DROP TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.177 -p 1923 -U postgres postgres -c "drop table user_info;"
DROP TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.178 -p 1923 -U postgres postgres -c "drop table user_info;"
DROP TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.178 -p 1923 -U postgres postgres -c "alter table digoal_user_info rename to user_info;"
ALTER TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.177 -p 1923 -U postgres postgres -c "alter table digoal_user_info rename to user_info;"
ALTER TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.176 -p 1923 -U postgres postgres -c "alter table digoal_user_info rename to user_info;"
ALTER TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.175 -p 1923 -U postgres postgres -c "alter table digoal_user_info rename to user_info;"
ALTER TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.174 -p 1923 -U postgres postgres -c "alter table digoal_user_info rename to user_info;"
ALTER TABLE
[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.173 -p 1923 -U postgres postgres -c "alter table digoal_user_info rename to user_info;"
ALTER TABLE



6. 连接到192.168.122.178的coordinator, 新建删除掉的coordinator.

[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.178 -p 1921 -U postgres postgres 
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=# select * from pgxc_node;
  node_name   | node_type | node_port |     node_host      | nodeis_primary | nodeis_preferred |   node_id   
--------------+-----------+-----------+--------------------+----------------+------------------+-------------
 datanode_1   | D         |      1923 | db-192-168-122-173 | t              | f                |  -675012441
 datanode_2   | D         |      1923 | db-192-168-122-174 | f              | f                | -1047623914
 datanode_3   | D         |      1923 | db-192-168-122-175 | f              | f                |  1787525382
 datanode_4   | D         |      1923 | db-192-168-122-176 | f              | f                |   -83063638
 datanode_5   | D         |      1923 | db-192-168-122-177 | f              | f                |   137889650
 datanode_6   | D         |      1923 | db-192-168-122-178 | f              | t                |  -678318491
 coordinate_6 | C         |      1921 | db-192-168-122-178 | f              | f                |    15814306
(7 rows)
postgres=# create node coordinate_1 with (type=coordinator, host='db-192-168-122-173', port=1921);
CREATE NODE
postgres=# create node coordinate_2 with (type=coordinator, host='db-192-168-122-174', port=1921);
CREATE NODE
postgres=# create node coordinate_3 with (type=coordinator, host='db-192-168-122-175', port=1921);
CREATE NODE
postgres=# create node coordinate_4 with (type=coordinator, host='db-192-168-122-176', port=1921);
CREATE NODE
postgres=# create node coordinate_5 with (type=coordinator, host='db-192-168-122-177', port=1921);
CREATE NODE
postgres=# clean connection to all for database postgres;
CLEAN CONNECTION
postgres=# select pgxc_pool_reload();
 pgxc_pool_reload 
------------------
 t
(1 row)



7. 启动其他coordinator

[pgxc@db-192-168-122-173]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-174]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-175]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-176]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-177]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate



[其他]
1. # 建议pg-xc提供一个dummy datanode, 这样的话修复数据就不需要用到真实的datanode了.
2. 指定to node nodename, 还是会在其他datanode执行SQL. 保持所有的datanode信息一致.
例如 : 
datanode_1的log中看到的一条消息 : 

2013-04-03 09:27:56.205 CST,"postgres","postgres",23928,"192.168.122.178:23977",515b84df.5d78,7,"idle in transaction",2013-04-03 09:24:47 CST,5/24,0,LOG,00000,"statement: create table user_info1(id int primary key, info text, crt_time timestamp) distribute by hash(id) to node datanode_6;",,,,,,,,"exec_simple_query, postgres.c:933","pgxc"


所以本例修复数据可以采用另外的方法, 下一篇blog将会介绍.
