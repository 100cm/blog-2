PostgreSQL research

Postgres-XC add coordinator or repair coordinator catalog - 2

2013-04-03 23:39:40   查看原文>>

 上一篇BLOG聊到了修复coordinator元数据与其他的coordinator节点不一致的情况下的修复方法.
用到了重命名所有datanode上的表, 然后在异常或新加入coordinator节点上新建元数据的方法.
http://blog.163.com/digoal@126/blog/static/16387704020133345813184/
这里要介绍另一种方法.
不需要重命名所有datanode上的表, 而是通过dummy datanode的方法来解决.
1. 首先将192.168.122.178的coordinator从其他的coordinator配置中去除.
模拟当前只有5个coordinator的情况.

psql -h 192.168.122.173 -p 1921 -U postgres postgres -c "drop node coordinate_6";
psql -h 192.168.122.174 -p 1921 -U postgres postgres -c "drop node coordinate_6";
psql -h 192.168.122.175 -p 1921 -U postgres postgres -c "drop node coordinate_6";
psql -h 192.168.122.176 -p 1921 -U postgres postgres -c "drop node coordinate_6";
psql -h 192.168.122.177 -p 1921 -U postgres postgres -c "drop node coordinate_6";



2. 在这5个coordinator中的任意一个中新建一个测试表
# 因为修改了node信息, 所以先重载一下pool

[pgxc@db-192-168-122-173 ~]$ psql -h 192.168.122.177 -p 1921 -U postgres postgres
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=# select pgxc_pool_reload();
postgres=# create table new_user_info(id int primary key, info text, crt_time timestamp) distribute by hash(id) to group gp0;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "new_user_info_pkey" for table "new_user_info"
CREATE TABLE



3. 在192.168.122.178的coordinator中看不到这个新建的new_user_info表.

[pgxc@db-192-168-122-173 pgxc_ddl]$ psql -h 192.168.122.178 -p 1921 -U postgres postgres
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=# \dt
           List of relations
 Schema |   Name    | Type  |  Owner   
--------+-----------+-------+----------
 public | t1        | table | postgres
 public | user_info | table | postgres
(2 rows)



4. 现在要让new_user_info表出现在192.168.122.178的coordinator中, 直接加肯定是不行的, 因为各个datanode中已经存在这个表了.
本文的做法如下 : 
1. 将192.168.122.178的coordinator添加到现有的coordinator中.

psql -h 192.168.122.173 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"
psql -h 192.168.122.174 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"
psql -h 192.168.122.175 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"
psql -h 192.168.122.176 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"
psql -h 192.168.122.177 -p 1921 -U postgres postgres -c "create node coordinate_6 with (type=coordinator, host='db-192-168-122-178', port=1921);"


# 重载pool

psql -h 192.168.122.173 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"
psql -h 192.168.122.174 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"
psql -h 192.168.122.175 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"
psql -h 192.168.122.176 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"
psql -h 192.168.122.177 -p 1921 -U postgres postgres -c "select pgxc_pool_reload()"



2. 关闭当前所有有应用程序连接的coordinator(或者阻断他们与外界的任何连接, 包括select, dml等等), 假设当前为5个coordinator.
主要是防止现有coordinator的catalog又会发生变更(例如变更表结构,  删除表或者新建表等等, 并且一会在192.168.122.178上还要用到其中的一个datanode来做引子, 所以务必小心操作).

[pgxc@db-192-168-122-173]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-174]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-175]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-176]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-177]$ pg_ctl -Z coordinator stop -m fast -D /data02/pgxc_coordinate



3. 新建一个dummy datanode(或者在现有的datanode中选择1个作为dummy datanode), 重命名new_user_info表
# 本例选择192.168.122.178 -p 1923作为dummy datanode

[pgxc@db-192-168-122-178 ~]$ psql -h 192.168.122.178 -p 1923 -U postgres postgres
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=# \dt
             List of relations
 Schema |     Name      | Type  |  Owner   
--------+---------------+-------+----------
 public | new_user_info | table | postgres
 public | t1            | table | postgres
 public | user_info     | table | postgres
(3 rows)

postgres=# alter table new_user_info rename to digoal_new_user_info;
ALTER TABLE



4. 连接到192.168.122.178的coordinator.
删除所有除本地coordinator以外的其他coordinator节点, 然后新建user_info表.

[pgxc@db-192-168-122-178 ~]$ psql -h 192.168.122.178 -p 1921 -U postgres postgres
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.

drop node coordinate_1;
drop node coordinate_2;
drop node coordinate_3;
drop node coordinate_4;
drop node coordinate_5;


记录下当前的datanode的oid(后面将要用于还原)

postgres=# select oid,* from pgxc_node order by node_name;
  oid  |  node_name   | node_type | node_port |     node_host      | nodeis_primary | nodeis_preferred |   node_id   
-------+--------------+-----------+-----------+--------------------+----------------+------------------+-------------
 11129 | coordinate_6 | C         |      1921 | db-192-168-122-178 | f              | f                |    15814306
 16437 | datanode_1   | D         |      1923 | db-192-168-122-173 | t              | f                |  -675012441
 16432 | datanode_2   | D         |      1923 | db-192-168-122-174 | f              | f                | -1047623914
 16433 | datanode_3   | D         |      1923 | db-192-168-122-175 | f              | f                |  1787525382
 16434 | datanode_4   | D         |      1923 | db-192-168-122-176 | f              | f                |   -83063638
 16435 | datanode_5   | D         |      1923 | db-192-168-122-177 | f              | f                |   137889650
 16436 | datanode_6   | D         |      1923 | db-192-168-122-178 | f              | t                |  -678318491



删除所有除dummy datanode以外的其他datanode节点, 然后在这个dummy datanode新建new_user_info表.

postgres=# drop node datanode_1;
DROP NODE
postgres=# drop node datanode_2;
DROP NODE
postgres=# drop node datanode_3;
DROP NODE
postgres=# drop node datanode_4;
DROP NODE
postgres=# drop node datanode_5;
DROP NODE
postgres=# select pgxc_pool_reload();
 pgxc_pool_reload 
------------------
 t
(1 row)

postgres=# create table new_user_info(id int primary key, info text, crt_time timestamp) distribute by hash(id) to node datanode_6;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "new_user_info_pkey" for table "new_user_info"
CREATE TABLE


# 注意新建的表分布规则与其他节点不一致, 一会需要调整. 

postgres=# select * from pgxc_class;
 pcrelid | pclocatortype | pcattnum | pchashalgorithm | pchashbuckets |              nodeoids               
---------+---------------+----------+-----------------+---------------+-------------------------------------
   16447 | H             |        1 |               1 |          4096 | 16437 16432 16433 16434 16435 16436
   24730 | H             |        1 |               1 |          4096 | 16437 16432 16433 16434 16435 16436
   24751 | H             |        1 |               1 |          4096 | 16436
(3 rows)


# pgxc_group一会修复后也需要更新.

postgres=# select * from pgxc_group;
 group_name |            group_members            
------------+-------------------------------------
 gp0        | 16437 16432 16433 16434 16435 16436
(1 row)



5. 连接到dummy datanode, 修改表名.

[pgxc@db-192-168-122-178 ~]$ psql -h 192.168.122.178 -p 1923 -U postgres postgres
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=# \dt
                List of relations
 Schema |         Name         | Type  |  Owner   
--------+----------------------+-------+----------
 public | digoal_new_user_info | table | postgres
 public | new_user_info        | table | postgres
 public | t1                   | table | postgres
 public | user_info            | table | postgres
(4 rows)
postgres=# drop table new_user_info;
DROP TABLE
postgres=# alter table digoal_new_user_info rename to new_user_info;
ALTER TABLE



6. 连接到192.168.122.178的coordinator, 新建前面删除掉的coordinator以及datanode节点.

[pgxc@db-192-168-122-178 pgxc-v1.0.2]$ psql -h 192.168.122.178 -p 1921 -U postgres postgres 
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=# select oid,* from pgxc_node;
  oid  |  node_name   | node_type | node_port |     node_host      | nodeis_primary | nodeis_preferred |  node_id   
-------+--------------+-----------+-----------+--------------------+----------------+------------------+------------
 16436 | datanode_6   | D         |      1923 | db-192-168-122-178 | f              | t                | -678318491
 11129 | coordinate_6 | C         |      1921 | db-192-168-122-178 | f              | f                |   15814306
(2 rows)
postgres=# create node coordinate_1 with (type=coordinator, host='db-192-168-122-173', port=1921);
CREATE NODE
postgres=# create node coordinate_2 with (type=coordinator, host='db-192-168-122-174', port=1921);
CREATE NODE
postgres=# create node coordinate_3 with (type=coordinator, host='db-192-168-122-175', port=1921);
CREATE NODE
postgres=# create node coordinate_4 with (type=coordinator, host='db-192-168-122-176', port=1921);
CREATE NODE
postgres=# create node coordinate_5 with (type=coordinator, host='db-192-168-122-177', port=1921);
CREATE NODE
postgres=# create node datanode_1 with (type=datanode, host='db-192-168-122-173', port=1923, primary=true, preferred=false);
CREATE NODE
postgres=# create node datanode_2 with (type=datanode, host='db-192-168-122-174', port=1923, primary=false, preferred=false);
CREATE NODE
postgres=# create node datanode_3 with (type=datanode, host='db-192-168-122-175', port=1923, primary=false, preferred=false);
CREATE NODE
postgres=# create node datanode_4 with (type=datanode, host='db-192-168-122-176', port=1923, primary=false, preferred=false);
CREATE NODE
postgres=# create node datanode_5 with (type=datanode, host='db-192-168-122-177', port=1923, primary=false, preferred=false);
CREATE NODE
postgres=# clean connection to all for database postgres;
CLEAN CONNECTION
postgres=# select pgxc_pool_reload();
 pgxc_pool_reload 
------------------
 t
(1 row)
postgres=# select oid,* from pgxc_node order by node_name;
  oid  |  node_name   | node_type | node_port |     node_host      | nodeis_primary | nodeis_preferred |   node_id   
-------+--------------+-----------+-----------+--------------------+----------------+------------------+-------------
 24759 | coordinate_1 | C         |      1921 | db-192-168-122-173 | f              | f                |  -922782310
 24760 | coordinate_2 | C         |      1921 | db-192-168-122-174 | f              | f                |  1027955327
 24761 | coordinate_3 | C         |      1921 | db-192-168-122-175 | f              | f                |   183504851
 24762 | coordinate_4 | C         |      1921 | db-192-168-122-176 | f              | f                | -1338651536
 24763 | coordinate_5 | C         |      1921 | db-192-168-122-177 | f              | f                |  2058409530
 11129 | coordinate_6 | C         |      1921 | db-192-168-122-178 | f              | f                |    15814306
 24764 | datanode_1   | D         |      1923 | db-192-168-122-173 | t              | f                |  -675012441
 24765 | datanode_2   | D         |      1923 | db-192-168-122-174 | f              | f                | -1047623914
 24766 | datanode_3   | D         |      1923 | db-192-168-122-175 | f              | f                |  1787525382
 24767 | datanode_4   | D         |      1923 | db-192-168-122-176 | f              | f                |   -83063638
 24768 | datanode_5   | D         |      1923 | db-192-168-122-177 | f              | f                |   137889650
 16436 | datanode_6   | D         |      1923 | db-192-168-122-178 | f              | t                |  -678318491
(12 rows)



7. 根据以上结果, 由于pgxc_node中datanode的oid变更了, 所以必须修改192.168.122.178的coordinator 节点的pgxc_class的oid信息. 以及pgxc_group的信息.

postgres=# update pgxc_group set group_members=oidvector '24764 24765 24766 24767 24768 16436';
UPDATE 1
postgres=# update pgxc_class set nodeoids=oidvector '24764 24765 24766 24767 24768 16436' where pcrelid in (16447, 24730, 24751);
UPDATE 3
postgres=# select * from pgxc_class;
 pcrelid | pclocatortype | pcattnum | pchashalgorithm | pchashbuckets |              nodeoids               
---------+---------------+----------+-----------------+---------------+-------------------------------------
   16447 | H             |        1 |               1 |          4096 | 24764 24765 24766 24767 24768 16436
   24730 | H             |        1 |               1 |          4096 | 24764 24765 24766 24767 24768 16436
   24751 | H             |        1 |               1 |          4096 | 24764 24765 24766 24767 24768 16436
(3 rows)
postgres=# select * from pgxc_group;
 group_name |            group_members            
------------+-------------------------------------
 gp0        | 24764 24765 24766 24767 24768 16436
(1 row)
postgres=# clean connection to all for database postgres;
CLEAN CONNECTION
postgres=# select pgxc_pool_reload();
 pgxc_pool_reload 
------------------
 t
(1 row)
postgres=# insert into new_user_info select generate_series(1,10000), md5(random()::text), clock_timestamp();
INSERT 0 10000
postgres=# select count(*) from new_user_info ;
 count 
-------
 10000
(1 row)



8. 启动其他coordinator

[pgxc@db-192-168-122-173]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-174]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-175]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-176]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate
[pgxc@db-192-168-122-177]$ pg_ctl -Z coordinator start -D /data02/pgxc_coordinate



[其他]
1. # 建议pg-xc提供一个dummy datanode, 这样的话修复数据就不需要用到真实的datanode了.
