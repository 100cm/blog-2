PostgreSQL research

why where clause use non-leading column's or non-clause-column's index

2012-04-26 18:23:29   查看原文>>

今天一位网友发现一个比较奇怪的问题,
select * from table where col1=0;
走了一个索引btree (col2,col1)
而select * from table where col1=1则全表扫描.
这其实是一个跳跃索引的例子. 

什么情况下where clause子句会使用非前导列的索引, 或者干脆就使用无此列的索引呢?
不管是前导列col2还是非前导列col1, 要走索引扫描, 势必让走索引的成本最低, 或者强制走索引.
只不过走前导列的开销(可能是部分索引扫描)大多数情况下要小于走非前导列的开销(整个索引的扫描).

-- 创建测试表

postgres=# create table test (id int,name text,crt_time timestamp(0));
CREATE TABLE


-- 插入测试数据

postgres=# insert into test select generate_series(1,100000),'digoal'||generate_series(1,100000),now();
INSERT 0 100000


-- 插入索引列值为空的记录一条, 这条为了说明PostgreSQL 当今版本记录了NULL值列的信息.

postgres=# insert into test(id,name,crt_time) values (1,null,null);
INSERT 0 1


见8.3 Release的时候有如下信息:
Allow col IS NULL to use an index (Teodor)
也就是必须8.3含以上版本才可用.

-- 创建一个不包含id的索引. 但是包含了where子句.

postgres=# create index idx_test_1 on test(name) where id=1;
CREATE INDEX


-- 收集test表的统计信息

postgres=# analyze test;
ANALYZE


--这条SQL就走了索引.

postgres=# explain analyze select * from test where id=1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_test_1 on test  (cost=0.00..6.28 rows=1 width=23) (actual time=0.047..0.049 rows=2 loops=1)
 Total runtime: 0.083 ms
(2 rows)


-- 而这条不会走索引, 因为索引中没有id=0的信息.

postgres=# explain analyze select * from test where id=0;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Seq Scan on test  (cost=0.00..1887.01 rows=1 width=23) (actual time=16.943..16.943 rows=0 loops=1)
   Filter: (id = 0)
 Total runtime: 16.982 ms
(3 rows)


很有意思, PostgreSQL精彩无处不在.
另外, 我们再回到主题, 当索引有两列或多列时, 如何让SQL走非前导列的扫描呢?

postgres=# create table tt(c1 int, c2 int, c3 int,c4 int) ;
CREATE TABLE
postgres=# insert into tt select round(random()*id),round(random()*id),round(random()*id),round(random()*id) from generate_series(1,1000000) t(id);
INSERT 0 1000000
postgres=# create index idx_1 on tt(c1,c2,c3);
CREATE INDEX
postgres=# set enable_seqscan=off;
SET
postgres=# analyze tt;
ANALYZE
postgres=# explain select * from tt where c1=1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Index Scan using idx_1 on tt  (cost=0.42..14.47 rows=3 width=16)
   Index Cond: (c1 = 1)
(2 rows)


从explain的结果看,使用非前导列时,  postgresql走索引扫描, 从返回第一条记录, 到所有记录返回完毕, 扫描的成本比直接扫描前导列高了, 因为要整个索引全扫一遍才能得到非前导列的结果.

postgres=# explain select * from tt where c2=1;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Index Scan using idx_1 on tt  (cost=0.42..11523.94 rows=67 width=16)
   Index Cond: (c2 = 1)
(2 rows)
postgres=# explain select * from tt where c3=1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Index Scan using idx_1 on tt  (cost=0.42..11334.45 rows=3 width=16)
   Index Cond: (c3 = 1)
(2 rows)


