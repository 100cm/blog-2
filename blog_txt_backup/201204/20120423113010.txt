PostgreSQL research

Recover PostgreSQL data when truncated or droped table .

2012-04-23 11:30:10   查看原文>>

truncate表后, PostgreSQL把原来的数据文件删掉, 重新分配数据文件.
删掉的包含fsm,vm文件, 数据表的main数据文件, 索引相关的数据文件, toast表相关的数据文件.
数据存储在main文件和toast表的数据文件中. 所以要恢复必须先恢复这些数据文件. 
恢复操作可以借助相关的磁盘恢复工具, 把删除掉的文件找回来. 所以这是前提条件.
下面我模拟的是文件找回后如何恢复, 其实很简单, 只是恢复后需要reindex和重新analyze .
创建测试表以及插入测试数据, 测试表包含text字段并使用了toast存储, 这是不了解PG的同学会忽略的地方.

postgres=# create table drop_recovery_test(id int,info text);
CREATE TABLE
postgres=# insert into drop_recovery_test select generate_series(1,100000),repeat('digoal',50);
INSERT 0 100000


创建索引,  方便在恢复后查看一个特殊情况, 就是貌似数据还没找回, 原因是执行计划是走的索引但是索引没有恢复哦.

postgres=# create index idx_test on drop_recovery_test (info);
CREATE INDEX
postgres=# create index idx_test_1 on drop_recovery_test (id);
CREATE INDEX


首先要知道我们要恢复的文件是哪些个文件.

postgres=# select relname from pg_class where oid in (select reltoastrelid from pg_class where relname='drop_recovery_test');
    relname     
----------------
 pg_toast_26056
(1 row)
postgres=# select pg_relation_filepath('drop_recovery_test');
 pg_relation_filepath 
----------------------
 base/12699/26062
(1 row)
postgres=# select pg_relation_filepath('pg_toast.pg_toast_26056');
 pg_relation_filepath 
----------------------
 base/12699/26063
(1 row)


停库

pg_ctl stop


把数据文件移动到别的地方

cd $PGDATA
mv base/12699/26062 $PGDATA/26062
mv base/12699/26063 $PGDATA/26063


启库

pg_ctl start
truncate 表
postgres=# truncate table drop_recovery_test ;
TRUNCATE TABLE
postgres=# select * from drop_recovery_test ;
 id | info 
----+------
(0 rows)


truncate完后, 找到新分配的文件位置

postgres=# select relname from pg_class where oid in (select reltoastrelid from pg_class where relname='drop_recovery_test');
    relname     
----------------
 pg_toast_26056
(1 row)
postgres=# select pg_relation_filepath('drop_recovery_test');
 pg_relation_filepath 
----------------------
 base/12699/26067
(1 row)
postgres=# select pg_relation_filepath('pg_toast.pg_toast_26056');
 pg_relation_filepath 
----------------------
 base/12699/26068
(1 row)


停库, 恢复

pg_ctl stop
cd $PGDATA
mv 26062 base/12699/26067
mv 26063 base/12699/26068


启库, 查看恢复结果

pg_ctl start


这个查询是全部扫描, 所以能看到数据

postgres=# select * from drop_recovery_test limit 1;
 id |                                                                                                                               
                      info                                                                                                          
                                           
----+-------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------
  1 | digoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoal
digoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoal
digoaldigoaldigoaldigoaldigoaldigoaldigoal
(1 row)
postgres=# \d+ drop_recovery_test 
           Table "public.drop_recovery_test"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 id     | integer |           | plain    | 
 info   | text    |           | extended | 
Indexes:
    "idx_test" btree (info)
    "idx_test_1" btree (id)
Has OIDs: no


这个查询为啥没有数据呢, 因为走的是索引但是索引没恢复嘛

postgres=# select * from drop_recovery_test where id=1;
 id | info 
----+------
(0 rows)
postgres=# explain select * from drop_recovery_test where id=1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Bitmap Heap Scan on drop_recovery_test  (cost=8.13..799.53 rows=500 width=36)
   Recheck Cond: (id = 1)
   ->  Bitmap Index Scan on idx_test_1  (cost=0.00..8.01 rows=500 width=0)
         Index Cond: (id = 1)
(4 rows)



-- 重建索引后走索引的数据就正常了

postgres=# reindex table drop_recovery_test;
REINDEX
postgres=# select * from drop_recovery_test where id=1;
 id |                                                                                                                               
                      info                                                                                                          
                                           
----+-------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------
  1 | digoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoal
digoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoaldigoal
digoaldigoaldigoaldigoaldigoaldigoaldigoal
(1 row)


但是貌似不应该用bitmap

postgres=# explain select * from drop_recovery_test where id=1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Bitmap Heap Scan on drop_recovery_test  (cost=8.13..799.53 rows=500 width=36)
   Recheck Cond: (id = 1)
   ->  Bitmap Index Scan on idx_test_1  (cost=0.00..8.01 rows=500 width=0)
         Index Cond: (id = 1)
(4 rows)


所以vacuum analyze 后执行计划正常.

postgres=# vacuum analyze drop_recovery_test ;
VACUUM
postgres=# explain select * from drop_recovery_test where id=1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Index Scan using idx_test_1 on drop_recovery_test  (cost=0.00..4.27 rows=1 width=308)
   Index Cond: (id = 1)
(2 rows)



如果是drop表的话, 恢复方法与上面类似. 
1. 在表所在的文件系统中使用文件恢复工具找回RM掉的文件.
2. 如果文件已经找不回来了 , 如果有基础备份, 那就用基础备份做PITR的恢复.
3. 如果没有基础备份但是有pg_dump的逻辑备份, 可从逻辑备份恢复.
4. 如果以上都没有, 但是有standby数据库, 可以考虑从standby库重复以上方法.
5. 如果有基础备份, 但是不想做PITR, 只想找到对应的文件. 并使用雷同以上truncate的恢复方法恢复. 那就把基础备份恢复到某个时间点. 把基础备份的目录当成$PGDATA, 启动数据库, 注意启动时修改一下备份的PGDATA的postgresql.conf以免端口冲突.
6. 如果基础备份因为种种原因起不来, 可以尝试一下postgres单用户启动.(设置pg_clog比特位=0). 修改前注意备份.

