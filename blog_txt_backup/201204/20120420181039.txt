PostgreSQL research

PostgreSQL HOT Standby Query and Recovery Conflict Introduction

2012-04-20 18:10:39   查看原文>>

本文基于PostgreSQL9.0.4版本来说.
PostgreSQL 的 Hot Standby常被用来当只读的数据库提供查询或者统计服务, 但是由于各种原因查询SQL可能被cancel掉。
例如, 
1. 主库执行了DROP某TABLE的操作, 而standby库上某用户正在查询这个表的数据. 当standby接收到了这些XLOG的信息并且准备在standby库上apply的时候, 如果这个SQL还在执行, 就发生冲突了, 这个时候standby 要判断是否要cancel掉这个SQL使得apply可以正常进行下去, 或者standby选择等待多长时间. 
2. 主库执行删除表空间或者删除库等相关的操作也会遇到上面的问题.
3. 更隐晦的是主库上执行了vacuum操作, 这些被vacuum掉的tuple, 可能是standby库上的SQL可见的TUPLE, 也会发生冲突.
4. 还有其他原因, 详细参考附录
那么Standby根据什么来判断是CANCEL SQL还是选择等待, 如果等待, 等多长时间?
有两个参数
max_standby_archive_delay
max_standby_streaming_delay
如果值等于-1表示永不因为recovery 和SQL冲突原因cancel standby上的SQL.
如果设置了一个值如30秒, 那么在cancel 冲突的SQL前, 会等待, 等待多长时间, 看下面几个函数.
1. 取自src/backend/storage/ipc/standby.c
通过GetStandbyLimitTime来判断是否要触发CANCEL SQL, 当GetStandbyLimitTime返回的值为0 时表示永不触发CANCEL, 如果返回的是一个时间值, 这个时间值和当前时间进行比较, 如果小于当前时间则进行CANCEL操作.

/*
 * Determine the cutoff time at which we want to start canceling conflicting
 * transactions.  Returns zero (a time safely in the past) if we are willing
 * to wait forever.
 */
static TimestampTz
GetStandbyLimitTime(void)
{
        TimestampTz rtime;
        bool            fromStream;

        /*
         * The cutoff time is the last WAL data receipt time plus the appropriate
         * delay variable.      Delay of -1 means wait forever.
         */
        GetXLogReceiptTime(&rtime, &fromStream);
        if (fromStream)
        {
                if (max_standby_streaming_delay < 0)
                        return 0;                       /* wait forever */
                return TimestampTzPlusMilliseconds(rtime, max_standby_streaming_delay);
        }
        else
        {
                if (max_standby_archive_delay < 0)
                        return 0;                       /* wait forever */
                return TimestampTzPlusMilliseconds(rtime, max_standby_archive_delay);
        }
}


rtime是通过GetXLogReceiptTime获取的.
从上面的代码中可以看出, SQL是否被CANCEL不仅仅取决于max_standby_streaming_delay或max_standby_archive_delay设定的时间, 而是取决于GetXLogReceiptTime设置的rtime加max_standby_streaming_delay或max_standby_archive_delay的这个结果是否大于当前的时间点. 
GetXLogReceiptTime 如下 : 
src/backend/access/transam/xlog.c

/*
 * Returns time of receipt of current chunk of XLOG data, as well as
 * whether it was received from streaming replication or from archives.
 */
void
GetXLogReceiptTime(TimestampTz *rtime, bool *fromStream)
{
        /*
         * This must be executed in the startup process, since we don't export the
         * relevant state to shared memory.
         */
        Assert(InRecovery);

        *rtime = XLogReceiptTime;
        *fromStream = (XLogReceiptSource == XLOG_FROM_STREAM);
}


而XLogReceiptTime变量又是通过如下逻辑来修改的,
src/backend/access/transam/xlog.c

/*
 * Walreceiver is active, so see if new data has arrived.
 * We only advance XLogReceiptTime when we obtain fresh
 * WAL from walreceiver and observe that we had already
 * processed everything before the most recent "chunk"
 * that it flushed to disk.  In steady state where we are
 * keeping up with the incoming data, XLogReceiptTime will
 * be updated on each cycle.  When we are behind,
 * XLogReceiptTime will not advance, so the grace time
 * alloted to conflicting queries will decrease.
 */
if (XLByteLT(*RecPtr, receivedUpto))
        havedata = true;
else
{
        XLogRecPtr      latestChunkStart;

        receivedUpto = GetWalRcvWriteRecPtr(&latestChunkStart);
        if (XLByteLT(*RecPtr, receivedUpto))
        {
                havedata = true;
                if (!XLByteLT(*RecPtr, latestChunkStart))
                        XLogReceiptTime = GetCurrentTimestamp();
        }
        else
                havedata = false;
}
if (havedata)
{
        /*
         * Great, streamed far enough. Open the file if it's
         * not open already.  Use XLOG_FROM_STREAM so that
         * source info is set correctly and XLogReceiptTime
         * isn't changed.
         */
        if (readFile < 0)
        {
                readFile =
                        XLogFileRead(readId, readSeg, PANIC,
    recoveryTargetTLI,
    XLOG_FROM_STREAM, false);
                Assert(readFile >= 0);
                switched_segment = true;
        }
        else
        {
                /* just make sure source info is correct... */
                readSource = XLOG_FROM_STREAM;
                XLogReceiptSource = XLOG_FROM_STREAM;
        }
        break;
}


src/include/access/xlogdefs.h

#define XLByteLT(a, b)          \
                        ((a).xlogid < (b).xlogid || \
                         ((a).xlogid == (b).xlogid && (a).xrecoff < (b).xrecoff))

#define XLByteLE(a, b)          \
                        ((a).xlogid < (b).xlogid || \
                         ((a).xlogid == (b).xlogid && (a).xrecoff <= (b).xrecoff))

#define XLByteEQ(a, b)          \
                        ((a).xlogid == (b).xlogid && (a).xrecoff == (b).xrecoff)


RecPtr的更新参见
src/backend/access/transam/xlog.c

/*
 * Insert an XLOG record having the specified RMID and info bytes,
 * with the body of the record being the data chunk(s) described by
 * the rdata chain (see xlog.h for notes about rdata).
 *
 * Returns XLOG pointer to end of record (beginning of next record).
 * This can be used as LSN for data pages affected by the logged action.
 * (LSN is the XLOG point up to which the XLOG must be flushed to disk
 * before the data page can be written out.  This implements the basic
 * WAL rule "write the log before the data".)
 *
 * NB: this routine feels free to scribble on the XLogRecData structs,
 * though not on the data they reference.  This is OK since the XLogRecData
 * structs are always just temporaries in the calling code.
 */
XLogRecPtr
XLogInsert(RmgrId rmid, uint8 info, XLogRecData *rdata)
{
略
}


src/backend/replication/walreceiverfuncs.c

/*
 * Returns the last+1 byte position that walreceiver has written.
 *
 * Optionally, returns the previous chunk start, that is the first byte
 * written in the most recent walreceiver flush cycle.  Callers not
 * interested in that value may pass NULL for latestChunkStart.
 */
XLogRecPtr
GetWalRcvWriteRecPtr(XLogRecPtr *latestChunkStart)
{
        /* use volatile pointer to prevent code rearrangement */
        volatile WalRcvData *walrcv = WalRcv;
        XLogRecPtr      recptr;

        SpinLockAcquire(&walrcv->mutex);
        recptr = walrcv->receivedUpto;
        if (latestChunkStart)
                *latestChunkStart = walrcv->latestChunkStart;
        SpinLockRelease(&walrcv->mutex);

        return recptr;
}


XLogReceiptTime这个变量到底什么时候才会更新成GetCurrentTimestamp()呢, 更新这个变量必须满足如下两个条件,
1. 在WALreceiver运行时调用,
2. 已经recover的XLOG的位置必须大于或等于latestChunkStart.
因此当standby的recover很慢, 但是receiver很快, 并且recover一直都没有跟上receiver到的xlog的位置时, 这个XLogReceiptTime就一直都没有办法更新到当前时间.
在这种情况下留给在standby上执行SQL的时间窗口就会很小. 
怎么解决呢?
1. 把max_standby_streaming_delay, max_standby_archive_delay调成-1. 如果要调整SQL的超时通过statement_timeout来设置.
2. 提高standby 的IO能力. 让standby数据库的recover能跟上接收到的XLOG的节奏.
3. 使用PostgreSQL 9.1版本, 9.1加大了max_standby_streaming_delay, max_standby_archive_delay允许的最大值, 并且添加了pg_xlog_replay_pause()函数可以暂停recover, 以及hot_standby_feedback参数降低被cancel的概率.
以下取自PostgreSQL 9.1 HISTORY.

Hot Standby

     * Add configuration parameter hot_standby_feedback to enable standbys
       to postpone cleanup of old row versions on the primary (Simon
       Riggs)
       This helps avoid canceling long-running queries on the standby.
     * Add the pg_stat_database_conflicts system view to show queries that
       have been canceled and the reason (Magnus Hagander)
       Cancellations can occur because of dropped tablespaces, lock
       timeouts, old snapshots, pinned buffers, and deadlocks.
     * Add a conflicts count to pg_stat_database (Magnus Hagander)
       This is the number of conflicts that occurred in the database.
     * Increase the maximum values for max_standby_archive_delay and
       max_standby_streaming_delay
       The maximum value for each of these parameters was previously only
       about 35 minutes. Much larger values are now allowed.
     * Add ERRCODE_T_R_DATABASE_DROPPED error code to report recovery
       conflicts due to dropped databases (Tatsuo Ishii)
       This is useful for connection pooling software.
     __________________________________________________________________

Recovery Control

     * Add functions to control streaming replication replay (Simon Riggs)
       The new functions are pg_xlog_replay_pause(),
       pg_xlog_replay_resume(), and the status function
       pg_is_xlog_replay_paused().
     * Add "recovery.conf" setting pause_at_recovery_target to pause
       recovery at target (Simon Riggs)
       This allows a recovery server to be queried to check whether the
       recovery point is the one desired.
     * Add the ability to create named restore points using
       pg_create_restore_point() (Jaime Casanova)
       These named restore points can be specified as recovery targets
       using the new "recovery.conf" setting recovery_target_name.
     * Allow standby recovery to switch to a new timeline automatically
       (Heikki Linnakangas)
       Now standby servers scan the archive directory for new timelines
       periodically.     
     * Add restart_after_crash setting which disables automatic server
       restart after a backend crash (Robert Haas)
       This allows external cluster management software to control whether
       the database server restarts or not.
     * Allow "recovery.conf" to use the same quoting behavior as
       "postgresql.conf" (Dimitri Fontaine)
       Previously all values had to be quoted.



下面是关于xlog文件的读取和写入的介绍,
主库的wal sender进程.
1. postgres: wal sender process 这个进程是读取xlog文件并发往standby的receiver进程的.
2. postgres: wal writer process 这个进程负责写和更新XLOG日志.
standby库的startup进程和receiver进程.
1. postgres: startup process   recovering 这个进程是读取xlog文件的.
2. postgres: wal receiver process 这个进程是接收主库的sender发送过来的XLOG信息并初始化并更新到xlog文件的.
使用lsof去看这些进程的打开文件可以看出来, 
读取xlog的sender进程或startup进程例如
postgres   4756  postgres    5r      REG              104,3   16777216   14160028 /pg_xlog/000000050000029B000000D6
更新到xlog文件的例如receiver进程, 因为主库每次切换XLOG后都会新建一个XLOG文件. 填满初始值, 可能是0, 后面就是receiver接收并更新这个XLOG的内容.
postgres  4151  postgres    4u      REG              253,0   67108864    1836097 /pg_xlog/0000000200000F5B0000001A

standby.c中query cancel逻辑部分建附录.
【小结】
PostgreSQL 9.0.4中有两个函数
pg_last_xlog_replay_location()
pg_last_xlog_receive_location()
这两个函数存在差异时, 则表示wal receiver接收到新的XLOG时不会更新XLogReceiptTime这个变量.
到PostgreSQL 9.1 新增了几个函数, 例如查询pg_last_xact_replay_timestamp可以反映STANDBY最后一次commit/abort record被恢复的时间, 但是没有函数可以返回XLogReceiptTime的值, 还是值得期待的. 那样就可以方便的知道接下来执行的SQL有可能会在多长时间内被CANCEL掉。
以下取自PostgreSQL 9.1 src/backend/access/transam/xlog.c

/*
 * Fetch timestamp of latest processed commit/abort record.
 */
static TimestampTz
GetLatestXTime(void)
{
        /* use volatile pointer to prevent code rearrangement */
        volatile XLogCtlData *xlogctl = XLogCtl;
        TimestampTz xtime;

        SpinLockAcquire(&xlogctl->info_lck);
        xtime = xlogctl->recoveryLastXTime;
        SpinLockRelease(&xlogctl->info_lck);

        return xtime;
}
/*
 * Returns timestamp of latest processed commit/abort record.
 *
 * When the server has been started normally without recovery the function
 * returns NULL.
 */
Datum
pg_last_xact_replay_timestamp(PG_FUNCTION_ARGS)
{
        TimestampTz xtime;

        xtime = GetLatestXTime();
        if (xtime == 0)
                PG_RETURN_NULL();

        PG_RETURN_TIMESTAMPTZ(xtime);
}


postgres=# \df *.*rece*
                                      List of functions
   Schema   |             Name              | Result data type | Argument data types |  Type  
------------+-------------------------------+------------------+---------------------+--------
 pg_catalog | pg_last_xlog_receive_location | text             |                     | normal
(1 row)

postgres=# \df *.*replay*
                                          List of functions
   Schema   |             Name              |     Result data type     | Argument data types |  Type  
------------+-------------------------------+--------------------------+---------------------+--------
 pg_catalog | pg_is_xlog_replay_paused      | boolean                  |                     | normal
 pg_catalog | pg_last_xact_replay_timestamp | timestamp with time zone |                     | normal
 pg_catalog | pg_last_xlog_replay_location  | text                     |                     | normal
 pg_catalog | pg_xlog_replay_pause          | void                     |                     | normal
 pg_catalog | pg_xlog_replay_resume         | void                     |                     | normal
(5 rows)



【参考】
http://www.postgresql.org/docs/9.0/static/hot-standby.html#HOT-STANDBY-CONFLICT 
src/backend/access/transam/xlog.c
src/backend/storage/ipc/standby.c
src/include/utils/timestamp.h
【附】
rdata结构, src/include/access/xlog.h

/*
 * The rmgr data to be written by XLogInsert() is defined by a chain of
 * one or more XLogRecData structs.  (Multiple structs would be used when
 * parts of the source data aren't physically adjacent in memory, or when
 * multiple associated buffers need to be specified.)
 *
 * If buffer is valid then XLOG will check if buffer must be backed up
 * (ie, whether this is first change of that page since last checkpoint).
 * If so, the whole page contents are attached to the XLOG record, and XLOG
 * sets XLR_BKP_BLOCK_X bit in xl_info.  Note that the buffer must be pinned
 * and exclusive-locked by the caller, so that it won't change under us.
 * NB: when the buffer is backed up, we DO NOT insert the data pointed to by
 * this XLogRecData struct into the XLOG record, since we assume it's present
 * in the buffer.  Therefore, rmgr redo routines MUST pay attention to
 * XLR_BKP_BLOCK_X to know what is actually stored in the XLOG record.
 * The i'th XLR_BKP_BLOCK bit corresponds to the i'th distinct buffer
 * value (ignoring InvalidBuffer) appearing in the rdata chain.
 *
 * When buffer is valid, caller must set buffer_std to indicate whether the
 * page uses standard pd_lower/pd_upper header fields.  If this is true, then
 * XLOG is allowed to omit the free space between pd_lower and pd_upper from
 * the backed-up page image.  Note that even when buffer_std is false, the
 * page MUST have an LSN field as its first eight bytes!
 *
 * Note: data can be NULL to indicate no rmgr data associated with this chain
 * entry.  This can be sensible (ie, not a wasted entry) if buffer is valid.
 * The implication is that the buffer has been changed by the operation being
 * logged, and so may need to be backed up, but the change can be redone using
 * only information already present elsewhere in the XLOG entry.
 */
typedef struct XLogRecData
{
        char       *data;                       /* start of rmgr data to include */
        uint32          len;                    /* length of rmgr data to include */
        Buffer          buffer;                 /* buffer associated with data, if any */
        bool            buffer_std;             /* buffer has standard pd_lower/pd_upper */
        struct XLogRecData *next;       /* next struct in chain, or NULL */
} XLogRecData;


standby.c中query cancel逻辑部分

/*
 * -----------------------------------------------------
 *              Standby wait timers and backend cancel logic
 * -----------------------------------------------------
 */

/*
 * Determine the cutoff time at which we want to start canceling conflicting
 * transactions.  Returns zero (a time safely in the past) if we are willing
 * to wait forever.
 */
static TimestampTz
GetStandbyLimitTime(void)
{
        TimestampTz rtime;
        bool            fromStream;

        /*
         * The cutoff time is the last WAL data receipt time plus the appropriate
         * delay variable.      Delay of -1 means wait forever.
         */
        GetXLogReceiptTime(&rtime, &fromStream);
        if (fromStream)
        {
                if (max_standby_streaming_delay < 0)
                        return 0;                       /* wait forever */
                return TimestampTzPlusMilliseconds(rtime, max_standby_streaming_delay);
        }
        else
        {
                if (max_standby_archive_delay < 0)
                        return 0;                       /* wait forever */
                return TimestampTzPlusMilliseconds(rtime, max_standby_archive_delay);
        }
}

#define STANDBY_INITIAL_WAIT_US  1000
static int      standbyWait_us = STANDBY_INITIAL_WAIT_US;

/*
 * Standby wait logic for ResolveRecoveryConflictWithVirtualXIDs.
 * We wait here for a while then return. If we decide we can't wait any
 * more then we return true, if we can wait some more return false.
 */
static bool
WaitExceedsMaxStandbyDelay(void)
{
        TimestampTz ltime;

        /* Are we past the limit time? */
        ltime = GetStandbyLimitTime();
        if (ltime && GetCurrentTimestamp() >= ltime)
                return true;

        /*
         * Sleep a bit (this is essential to avoid busy-waiting).
         */
        pg_usleep(standbyWait_us);

        /*
         * Progressively increase the sleep times, but not to more than 1s, since
         * pg_usleep isn't interruptable on some platforms.
         */
        standbyWait_us *= 2;
        if (standbyWait_us > 1000000)
                standbyWait_us = 1000000;

        return false;
}

/*
 * This is the main executioner for any query backend that conflicts with
 * recovery processing. Judgement has already been passed on it within
 * a specific rmgr. Here we just issue the orders to the procs. The procs
 * then throw the required error as instructed.
 */
static void
ResolveRecoveryConflictWithVirtualXIDs(VirtualTransactionId *waitlist,
                                                                           ProcSignalReason reason)
{
        while (VirtualTransactionIdIsValid(*waitlist))
        {
                TimestampTz waitStart;
                char       *new_status;

                pgstat_report_waiting(true);

                waitStart = GetCurrentTimestamp();
                new_status = NULL;              /* we haven't changed the ps display */

                /* reset standbyWait_us for each xact we wait for */
                standbyWait_us = STANDBY_INITIAL_WAIT_US;

                /* wait until the virtual xid is gone */
                while (!ConditionalVirtualXactLockTableWait(*waitlist))
                {
                        /*
                         * Report via ps if we have been waiting for more than 500 msec
                         * (should that be configurable?)
                         */
                        if (update_process_title && new_status == NULL &&
                                TimestampDifferenceExceeds(waitStart, GetCurrentTimestamp(),
                                                                                   500))
                        {
                                const char *old_status;
                                int                     len;

                                old_status = get_ps_display(&len);
                                new_status = (char *) palloc(len + 8 + 1);
                                memcpy(new_status, old_status, len);
                                strcpy(new_status + len, " waiting");
                                set_ps_display(new_status, false);
                                new_status[len] = '\0'; /* truncate off " waiting" */
                        }

                        /* Is it time to kill it? */
                        if (WaitExceedsMaxStandbyDelay())
                        {
                                pid_t           pid;

                                /*
                                 * Now find out who to throw out of the balloon.
                                 */
                                Assert(VirtualTransactionIdIsValid(*waitlist));
                                pid = CancelVirtualTransaction(*waitlist, reason);

                                /*
                                 * Wait a little bit for it to die so that we avoid flooding
                                 * an unresponsive backend when system is heavily loaded.
                                 */
                                if (pid != 0)
                                        pg_usleep(5000L);
                        }
                }

                /* Reset ps display if we changed it */
                if (new_status)
                {
                        set_ps_display(new_status, false);
                        pfree(new_status);
                }
                pgstat_report_waiting(false);

                /* The virtual transaction is gone now, wait for the next one */
                waitlist++;
        }
}

void
ResolveRecoveryConflictWithSnapshot(TransactionId latestRemovedXid, RelFileNode node)
{
        VirtualTransactionId *backends;

        /*
         * If we get passed InvalidTransactionId then we are a little surprised,
         * but it is theoretically possible in normal running. It also happens
         * when replaying already applied WAL records after a standby crash or
         * restart. If latestRemovedXid is invalid then there is no conflict. That
         * rule applies across all record types that suffer from this conflict.
         */
        if (!TransactionIdIsValid(latestRemovedXid))
                return;

        backends = GetConflictingVirtualXIDs(latestRemovedXid,
                                                                                 node.dbNode);

        ResolveRecoveryConflictWithVirtualXIDs(backends,
                                                                                 PROCSIG_RECOVERY_CONFLICT_SNAPSHOT);
}

void
ResolveRecoveryConflictWithTablespace(Oid tsid)
{
        VirtualTransactionId *temp_file_users;

        /*
         * Standby users may be currently using this tablespace for for their
         * temporary files. We only care about current users because
         * temp_tablespace parameter will just ignore tablespaces that no longer
         * exist.
         *
         * Ask everybody to cancel their queries immediately so we can ensure no
         * temp files remain and we can remove the tablespace. Nuke the entire
         * site from orbit, it's the only way to be sure.
         *
         * XXX: We could work out the pids of active backends using this
         * tablespace by examining the temp filenames in the directory. We would
         * then convert the pids into VirtualXIDs before attempting to cancel
         * them.
         *
         * We don't wait for commit because drop tablespace is non-transactional.
         */
        temp_file_users = GetConflictingVirtualXIDs(InvalidTransactionId,
                                                                                                InvalidOid);
        ResolveRecoveryConflictWithVirtualXIDs(temp_file_users,
                                                                           PROCSIG_RECOVERY_CONFLICT_TABLESPACE);
}

void
ResolveRecoveryConflictWithDatabase(Oid dbid)
{
        /*
         * We don't do ResolveRecoveryConflictWithVirtualXIDs() here since that
         * only waits for transactions and completely idle sessions would block
         * us. This is rare enough that we do this as simply as possible: no wait,
         * just force them off immediately.
         *
         * No locking is required here because we already acquired
         * AccessExclusiveLock. Anybody trying to connect while we do this will
         * block during InitPostgres() and then disconnect when they see the
         * database has been removed.
         */
        while (CountDBBackends(dbid) > 0)
        {
                CancelDBBackends(dbid, PROCSIG_RECOVERY_CONFLICT_DATABASE, true);

                /*
                 * Wait awhile for them to die so that we avoid flooding an
                 * unresponsive backend when system is heavily loaded.
                 */
                pg_usleep(10000);
        }
}

static void
ResolveRecoveryConflictWithLock(Oid dbOid, Oid relOid)
{
        VirtualTransactionId *backends;
        bool            report_memory_error = false;
        bool            lock_acquired = false;
        int                     num_attempts = 0;
        LOCKTAG         locktag;

        SET_LOCKTAG_RELATION(locktag, dbOid, relOid);

        /*
         * If blowing away everybody with conflicting locks doesn't work, after
         * the first two attempts then we just start blowing everybody away until
         * it does work. We do this because its likely that we either have too
         * many locks and we just can't get one at all, or that there are many
         * people crowding for the same table. Recovery must win; the end
         * justifies the means.
         */
        while (!lock_acquired)
        {
                if (++num_attempts < 3)
                        backends = GetLockConflicts(&locktag, AccessExclusiveLock);
                else
                {
                        backends = GetConflictingVirtualXIDs(InvalidTransactionId,
                                                                                                 InvalidOid);
                        report_memory_error = true;
                }

                ResolveRecoveryConflictWithVirtualXIDs(backends,
                                                                                         PROCSIG_RECOVERY_CONFLICT_LOCK);

                if (LockAcquireExtended(&locktag, AccessExclusiveLock, true, true, false)
                        != LOCKACQUIRE_NOT_AVAIL)
                        lock_acquired = true;
        }
}

/*
 * ResolveRecoveryConflictWithBufferPin is called from LockBufferForCleanup()
 * to resolve conflicts with other backends holding buffer pins.
 *
 * We either resolve conflicts immediately or set a SIGALRM to wake us at
 * the limit of our patience. The sleep in LockBufferForCleanup() is
 * performed here, for code clarity.
 *
 * Resolve conflicts by sending a PROCSIG signal to all backends to check if
 * they hold one of the buffer pins that is blocking Startup process. If so,
 * backends will take an appropriate error action, ERROR or FATAL.
 *
 * We also must check for deadlocks.  Deadlocks occur because if queries
 * wait on a lock, that must be behind an AccessExclusiveLock, which can only
 * be cleared if the Startup process replays a transaction completion record.
 * If Startup process is also waiting then that is a deadlock. The deadlock
 * can occur if the query is waiting and then the Startup sleeps, or if
 * Startup is sleeping and the query waits on a lock. We protect against
 * only the former sequence here, the latter sequence is checked prior to
 * the query sleeping, in CheckRecoveryConflictDeadlock().
 *
 * Deadlocks are extremely rare, and relatively expensive to check for,
 * so we don't do a deadlock check right away ... only if we have had to wait
 * at least deadlock_timeout.  Most of the logic about that is in proc.c.
 */
void
ResolveRecoveryConflictWithBufferPin(void)
{
        bool            sig_alarm_enabled = false;
        TimestampTz ltime;
        TimestampTz now;

        Assert(InHotStandby);

        ltime = GetStandbyLimitTime();
        now = GetCurrentTimestamp();

        if (!ltime)
        {
                /*
                 * We're willing to wait forever for conflicts, so set timeout for
                 * deadlock check (only)
                 */
                if (enable_standby_sig_alarm(now, now, true))
                        sig_alarm_enabled = true;
                else
                        elog(FATAL, "could not set timer for process wakeup");
        }
        else if (now >= ltime)
        {
                /*
                 * We're already behind, so clear a path as quickly as possible.
                 */
                SendRecoveryConflictWithBufferPin(PROCSIG_RECOVERY_CONFLICT_BUFFERPIN);
        }
        else
        {
                /*
                 * Wake up at ltime, and check for deadlocks as well if we will be
                 * waiting longer than deadlock_timeout
                 */
                if (enable_standby_sig_alarm(now, ltime, false))
                        sig_alarm_enabled = true;
                else
                        elog(FATAL, "could not set timer for process wakeup");
        }

        /* Wait to be signaled by UnpinBuffer() */
        ProcWaitForSignal();

        if (sig_alarm_enabled)
        {
                if (!disable_standby_sig_alarm())
                        elog(FATAL, "could not disable timer for process wakeup");
        }
}

void
SendRecoveryConflictWithBufferPin(ProcSignalReason reason)
{
        Assert(reason == PROCSIG_RECOVERY_CONFLICT_BUFFERPIN ||
                   reason == PROCSIG_RECOVERY_CONFLICT_STARTUP_DEADLOCK);

        /*
         * We send signal to all backends to ask them if they are holding the
         * buffer pin which is delaying the Startup process. We must not set the
         * conflict flag yet, since most backends will be innocent. Let the
         * SIGUSR1 handling in each backend decide their own fate.
         */
        CancelDBBackends(InvalidOid, reason, false);
}

/*
 * In Hot Standby perform early deadlock detection.  We abort the lock
 * wait if are about to sleep while holding the buffer pin that Startup
 * process is waiting for. The deadlock occurs because we can only be
 * waiting behind an AccessExclusiveLock, which can only clear when a
 * transaction completion record is replayed, which can only occur when
 * Startup process is not waiting. So if Startup process is waiting we
 * never will clear that lock, so if we wait we cause deadlock. If we
 * are the Startup process then no need to check for deadlocks.
 */
void
CheckRecoveryConflictDeadlock(LWLockId partitionLock)
{
        Assert(!InRecovery);

        if (!HoldingBufferPinThatDelaysRecovery())
                return;

        LWLockRelease(partitionLock);

        /*
         * Error message should match ProcessInterrupts() but we avoid calling
         * that because we aren't handling an interrupt at this point. Note that
         * we only cancel the current transaction here, so if we are in a
         * subtransaction and the pin is held by a parent, then the Startup
         * process will continue to wait even though we have avoided deadlock.
         */
        ereport(ERROR,
                        (errcode(ERRCODE_T_R_DEADLOCK_DETECTED),
                         errmsg("canceling statement due to conflict with recovery"),
           errdetail("User transaction caused buffer deadlock with recovery.")));
}


