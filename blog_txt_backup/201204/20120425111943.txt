PostgreSQL research

PostgreSQL Partition Table Example

2012-04-25 11:19:43   查看原文>>

最近在写PostgreSQL 2Day DBA的培训PPT, 写到分区表章节. 记录一下. 以前写过分区表调优的案例, 也不建议使用数据库来分区, 至少PG中是这样的, 原因可以参考如下
PostgreSQL partition table's arithmetic tuning example
http://blog.163.com/digoal@126/blog/static/1638770402011210114036419/

Range分区表的使用实例 : 
其他的诸如list, hash, complex的分区实例照葫芦画瓢.

-- 创建主表

CREATE TABLE p (
    city_id         int not null,
    logtime         timestamp(0) not null,
    peaktemp        int,
    unitsales       int
);


-- 在分区字段上创建索引

CREATE INDEX idx_p_logtime ON p (logtime);


-- 创建子表

CREATE TABLE p_201201 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201202 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201203 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201204 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201205 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201206 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201207 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201208 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201209 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201210 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201211 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_201212 (LIKE p INCLUDING all) INHERITS (p);
CREATE TABLE p_default (LIKE p INCLUDING all) INHERITS (p);


-- 添加分区字段约束

ALTER TABLE p_201201 ADD CONSTRAINT p_201201_ck1 CHECK (logtime>=date '2012-01-01' and logtime<date '2012-02-01');
ALTER TABLE p_201202 ADD CONSTRAINT p_201202_ck1 CHECK (logtime>=date '2012-02-01' and logtime<date '2012-03-01');
ALTER TABLE p_201203 ADD CONSTRAINT p_201203_ck1 CHECK (logtime>=date '2012-03-01' and logtime<date '2012-04-01');
ALTER TABLE p_201204 ADD CONSTRAINT p_201204_ck1 CHECK (logtime>=date '2012-04-01' and logtime<date '2012-05-01');
ALTER TABLE p_201205 ADD CONSTRAINT p_201205_ck1 CHECK (logtime>=date '2012-05-01' and logtime<date '2012-06-01');
ALTER TABLE p_201206 ADD CONSTRAINT p_201206_ck1 CHECK (logtime>=date '2012-06-01' and logtime<date '2012-07-01');
ALTER TABLE p_201207 ADD CONSTRAINT p_201207_ck1 CHECK (logtime>=date '2012-07-01' and logtime<date '2012-08-01');
ALTER TABLE p_201208 ADD CONSTRAINT p_201208_ck1 CHECK (logtime>=date '2012-08-01' and logtime<date '2012-09-01');
ALTER TABLE p_201209 ADD CONSTRAINT p_201209_ck1 CHECK (logtime>=date '2012-09-01' and logtime<date '2012-10-01');
ALTER TABLE p_201210 ADD CONSTRAINT p_201210_ck1 CHECK (logtime>=date '2012-10-01' and logtime<date '2012-11-01');
ALTER TABLE p_201211 ADD CONSTRAINT p_201211_ck1 CHECK (logtime>=date '2012-11-01' and logtime<date '2012-12-01');
ALTER TABLE p_201212 ADD CONSTRAINT p_201212_ck1 CHECK (logtime>=date '2012-12-01' and logtime<date '2013-01-01');
ALTER TABLE p_default ADD CONSTRAINT p_default_ck1 CHECK (logtime<date '2012-01-01' or logtime>=date '2013-01-01');


-- 其中的一个子表展示, including all继承了主表的索引, 存储, 约束等特性.

postgres=# \d p_201201
                Table "public.p_201201"
  Column   |              Type              | Modifiers 
-----------+--------------------------------+-----------
 city_id   | integer                        | not null
 logtime   | timestamp(0) without time zone | not null
 peaktemp  | integer                        | 
 unitsales | integer                        | 
Indexes:
    "p_201201_logtime_idx" btree (logtime)
Check constraints:
    "p_201201_ck1" CHECK (logtime >= '2012-01-01'::date AND logtime < '2012-02-01'::date)
Inherits: p


-- 创建插入触发器函数

CREATE OR REPLACE FUNCTION p_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF    ( NEW.logtime >= DATE '2012-01-01' AND NEW.logtime < DATE '2012-02-01' ) THEN
        INSERT INTO p_201201 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-02-01' AND NEW.logtime < DATE '2012-03-01' ) THEN
        INSERT INTO p_201202 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-03-01' AND NEW.logtime < DATE '2012-04-01' ) THEN
        INSERT INTO p_201203 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-04-01' AND NEW.logtime < DATE '2012-05-01' ) THEN
        INSERT INTO p_201204 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-05-01' AND NEW.logtime < DATE '2012-06-01' ) THEN
        INSERT INTO p_201205 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-06-01' AND NEW.logtime < DATE '2012-07-01' ) THEN
        INSERT INTO p_201206 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-07-01' AND NEW.logtime < DATE '2012-08-01' ) THEN
        INSERT INTO p_201207 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-08-01' AND NEW.logtime < DATE '2012-09-01' ) THEN
        INSERT INTO p_201208 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-09-01' AND NEW.logtime < DATE '2012-10-01' ) THEN
        INSERT INTO p_201209 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-10-01' AND NEW.logtime < DATE '2012-11-01' ) THEN
        INSERT INTO p_201210 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-11-01' AND NEW.logtime < DATE '2012-12-01' ) THEN
        INSERT INTO p_201211 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2012-12-01' AND NEW.logtime < DATE '2013-01-01' ) THEN
        INSERT INTO p_201212 VALUES (NEW.*);
    ELSIF ( NEW.logtime >= DATE '2013-01-01' OR NEW.logtime < DATE '2012-01-01' ) THEN
        INSERT INTO p_default VALUES (NEW.*);
    ELSE
        RAISE EXCEPTION 'Date out of range.  Fix the p_insert_trigger() function!';
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


-- 创建删除触发器函数

CREATE OR REPLACE FUNCTION p_delete_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF    ( OLD.logtime >= DATE '2012-01-01' AND OLD.logtime < DATE '2012-02-01' ) THEN
        DELETE FROM p_201201 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-02-01' AND OLD.logtime < DATE '2012-03-01' ) THEN
        DELETE FROM p_201202 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-03-01' AND OLD.logtime < DATE '2012-04-01' ) THEN
        DELETE FROM p_201203 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-04-01' AND OLD.logtime < DATE '2012-05-01' ) THEN
        DELETE FROM p_201204 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-05-01' AND OLD.logtime < DATE '2012-06-01' ) THEN
        DELETE FROM p_201205 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-06-01' AND OLD.logtime < DATE '2012-07-01' ) THEN
        DELETE FROM p_201206 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-07-01' AND OLD.logtime < DATE '2012-08-01' ) THEN
        DELETE FROM p_201207 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-08-01' AND OLD.logtime < DATE '2012-09-01' ) THEN
        DELETE FROM p_201208 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-09-01' AND OLD.logtime < DATE '2012-10-01' ) THEN
        DELETE FROM p_201209 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-10-01' AND OLD.logtime < DATE '2012-11-01' ) THEN
        DELETE FROM p_201210 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-11-01' AND OLD.logtime < DATE '2012-12-01' ) THEN
        DELETE FROM p_201211 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2012-12-01' AND OLD.logtime < DATE '2013-01-01' ) THEN
        DELETE FROM p_201212 WHERE logtime=OLD.logtime;
    ELSIF ( OLD.logtime >= DATE '2013-01-01' OR OLD.logtime < DATE '2012-01-01' ) THEN
        DELETE FROM p_default WHERE logtime=OLD.logtime;
    ELSE
        RAISE EXCEPTION 'Date out of range.  Fix the p_insert_trigger() function!';
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


-- 创建主表的插入和删除触发器, 更新操作实际上就是delete+insert. 所以不需要新增触发器.

CREATE TRIGGER insert_p_trigger
    BEFORE INSERT ON p
    FOR EACH ROW EXECUTE PROCEDURE p_insert_trigger();

CREATE TRIGGER delete_p_trigger
    BEFORE DELETE ON p
    FOR EACH ROW EXECUTE PROCEDURE p_delete_trigger();


-- 插入测试数据, 分布在每个范围段

INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (1, timestamp '2012-01-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (2, timestamp '2012-02-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (3, timestamp '2012-03-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (4, timestamp '2012-04-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (5, timestamp '2012-05-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (6, timestamp '2012-06-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (7, timestamp '2012-07-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (8, timestamp '2012-08-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (9, timestamp '2012-09-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (10, timestamp '2012-10-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (11, timestamp '2012-11-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (12, timestamp '2012-12-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (13, timestamp '2013-01-02 12:59:59', 20, 10);
INSERT INTO p (city_id, logtime, peaktemp, unitsales) VALUES (14, timestamp '2011-12-02 12:59:59', 20, 10);


-- 查看数据插入的准确性

SELECT t1.relname,t2.* FROM p t2,pg_class t1 WHERE t2.tableoid=t1.oid ORDER BY t2.logtime;
  relname  | city_id |       logtime       | peaktemp | unitsales 
-----------+---------+---------------------+----------+-----------
 p_default |      14 | 2011-12-02 12:59:59 |       20 |        10
 p_201201  |       1 | 2012-01-02 12:59:59 |       20 |        10
 p_201202  |       2 | 2012-02-02 12:59:59 |       20 |        10
 p_201203  |       3 | 2012-03-02 12:59:59 |       20 |        10
 p_201204  |       4 | 2012-04-02 12:59:59 |       20 |        10
 p_201205  |       5 | 2012-05-02 12:59:59 |       20 |        10
 p_201206  |       6 | 2012-06-02 12:59:59 |       20 |        10
 p_201207  |       7 | 2012-07-02 12:59:59 |       20 |        10
 p_201208  |       8 | 2012-08-02 12:59:59 |       20 |        10
 p_201209  |       9 | 2012-09-02 12:59:59 |       20 |        10
 p_201210  |      10 | 2012-10-02 12:59:59 |       20 |        10
 p_201211  |      11 | 2012-11-02 12:59:59 |       20 |        10
 p_201212  |      12 | 2012-12-02 12:59:59 |       20 |        10
 p_default |      13 | 2013-01-02 12:59:59 |       20 |        10



-- 查看在WHERE条件中使用分区字段和常量比较的更新操作的执行计划

postgres=# EXPLAIN UPDATE p SET unitsales=unitsales+1 WHERE logtime=timestamp '2011-12-02 12:59:59';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Update on p  (cost=0.00..9.79 rows=9 width=26)
   ->  Seq Scan on p  (cost=0.00..0.00 rows=1 width=26)
         Filter: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
   ->  Bitmap Heap Scan on p_default p  (cost=2.31..9.78 rows=8 width=26)
         Recheck Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
         ->  Bitmap Index Scan on p_default_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
               Index Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)

UPDATE p SET unitsales=unitsales+1 WHERE logtime=timestamp '2011-12-02 12:59:59';
  relname  | city_id |       logtime       | peaktemp | unitsales 
-----------+---------+---------------------+----------+-----------
 p_default |      14 | 2011-12-02 12:59:59 |       20 |        11



-- 查看在WHERE条件中使用分区字段和常量比较的删除操作的执行计划

postgres=# EXPLAIN DELETE FROM p WHERE logtime=timestamp '2011-12-02 12:59:59';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Delete on p  (cost=0.00..9.76 rows=9 width=6)
   ->  Seq Scan on p  (cost=0.00..0.00 rows=1 width=6)
         Filter: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
   ->  Bitmap Heap Scan on p_default p  (cost=2.31..9.76 rows=8 width=6)
         Recheck Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
         ->  Bitmap Index Scan on p_default_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
               Index Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)

DELETE FROM p WHERE logtime=timestamp '2011-12-02 12:59:59';
DELETE 1


-- 查看在WHERE条件中使用分区字段和常量比较的查询操作的执行计划

postgres=# EXPLAIN SELECT * FROM p WHERE logtime=timestamp '2011-12-02 12:59:59';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Result  (cost=0.00..9.76 rows=9 width=20)
   ->  Append  (cost=0.00..9.76 rows=9 width=20)
         ->  Seq Scan on p  (cost=0.00..0.00 rows=1 width=20)
               Filter: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
         ->  Bitmap Heap Scan on p_default p  (cost=2.31..9.76 rows=8 width=20)
               Recheck Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
               ->  Bitmap Index Scan on p_default_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)



-- 查看在WHERE条件中使用分区字段和函数比较的操作的执行计划

postgres=# select proname,provolatile,proargtypes from pg_proc where prorettype in (select oid from pg_type where typname ~ 'timestamp') order by proargtypes;
               proname                | provolatile |  proargtypes   
--------------------------------------+-------------+----------------
 transaction_timestamp                | s           | 
 statement_timestamp                  | s           | 
 pg_stat_get_bgwriter_stat_reset_time | s           | 
 pg_conf_load_time                    | s           | 
 pg_postmaster_start_time             | s           | 
 pg_last_xact_replay_timestamp        | v           | 
 clock_timestamp                      | v           | 
 now                                  | s           | 


-- 确认已经开启了constraint_exclusion

postgres=# show constraint_exclusion;
 constraint_exclusion 
----------------------
 partition

postgres=# EXPLAIN SELECT * FROM p WHERE logtime=now();
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Result  (cost=0.00..127.23 rows=105 width=20)
   ->  Append  (cost=0.00..127.23 rows=105 width=20)
         ->  Seq Scan on p  (cost=0.00..0.00 rows=1 width=20)
               Filter: (logtime = now())
         ->  Bitmap Heap Scan on p_201201 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201201_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201202 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201202_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201203 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201203_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201204 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201204_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201205 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201205_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201206 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201206_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201207 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201207_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201208 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201208_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201209 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201209_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201210 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201210_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201211 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201211_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_201212 p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_201212_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())
         ->  Bitmap Heap Scan on p_default p  (cost=2.31..9.79 rows=8 width=20)
               Recheck Cond: (logtime = now())
               ->  Bitmap Index Scan on p_default_logtime_idx  (cost=0.00..2.31 rows=8 width=0)
                     Index Cond: (logtime = now())


-- 修改函数稳定性并重测.

postgres=# ALTER FUNCTION now() IMMUTABLE;
ALTER FUNCTION
postgres=# EXPLAIN SELECT * FROM p WHERE logtime=now();
-- 同上

postgres=# ALTER FUNCTION now() VOLATILE;
ALTER FUNCTION
postgres=# EXPLAIN SELECT * FROM p WHERE logtime=now();
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Result  (cost=0.00..447.85 rows=105 width=20)
   ->  Append  (cost=0.00..447.85 rows=105 width=20)
         ->  Seq Scan on p  (cost=0.00..0.00 rows=1 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201201 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201202 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201203 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201204 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201205 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201206 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201207 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201208 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201209 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201210 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201211 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_201212 p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
         ->  Seq Scan on p_default p  (cost=0.00..34.45 rows=8 width=20)
               Filter: (logtime = now())
(30 rows)



【小结】
分区表使用注意事项 : 

尽量将分区功能移至应用端代码中.
constraint_exclusion = partition
WHERE条件中与分区字段的约束契合必须使用constant
简化分区规则, 分区字段上使用简单的b-tree索引, 尽量避免函数索引.
使用数据库分区的潜在问题
CPU开销(触发器或rule, 硬解析)

【参考】
Thinking PostgreSQL Function's Volatility Categories
http://blog.163.com/digoal@126/blog/static/163877040201151011105494/

PostgreSQL partition table's arithmetic tuning example
http://blog.163.com/digoal@126/blog/static/1638770402011210114036419/



