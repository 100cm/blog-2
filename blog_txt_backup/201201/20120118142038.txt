PostgreSQL research

pg-json extension

2012-01-18 14:20:38   查看原文>>

【安装】
pg-json : 
1. 首先要下载并安装jansson.
    下载地址 : http://www.digip.org/jansson/
本例下载2.2.1版本。
$ ./configure $ make $ make install
2. 然后到pgxn网站下载pg-json这个extension。
    下载地址
    http://www.pgxn.org/dist/pg-json/
3. 拷贝, jansson 2.2.1 源码文件src目录中的jansson_config.h 和 jansson.h到pg-json源码目录中。
4. 安装pg-json

    unzip pg-json-0.0.1.zip
    mv pg-json-0.0.1 PostgreSQL9.1.2_src/contrib/
    chown -R postgres:postgres PostgreSQL9.1.2_src
    . /home/postgres/.bash_profile
    cd PostgreSQL9.1.2_src/contrib/pg-json-0.0.1
    # make USE_PGXS=1
    # make install USE_PGXS=1


5. 进入psql 创建extension : 

    psql -h 127.0.0.1 digoal postgres
    psql (9.1.2)
    Type "help" for help.
    digoal=# create extension "pg-json";


6. 查看新增的extension : 

digoal=# select * from pg_extension ;
 extname | extowner | extnamespace | extrelocatable | extversion | extconfig | extcondition 
---------+----------+--------------+----------------+------------+-----------+--------------
 plpgsql |       10 |           11 | f              | 1.0        |           | 
 pg-json |       10 |         2200 | t              | 0.0.1      |           | 
(2 rows)


新增了5个函数

digoal=# \df
                              List of functions
 Schema |      Name       | Result data type | Argument data types  |  Type  
--------+-----------------+------------------+----------------------+--------
 public | json_equals     | boolean          | this json, that json | normal
 public | json_get_value  | text             | data json, path text | normal
 public | json_in         | json             | cstring              | normal
 public | json_not_equals | boolean          | this json, that json | normal
 public | json_out        | cstring          | json                 | normal
(5 rows)


新增了json类型

digoal=# \dT
     List of data types
 Schema | Name | Description 
--------+------+-------------
 public | json | 
(1 row)


查看extension sql  ： 

postgres@db-172-> cd /opt/pgsql/share/extension/
postgres@db-172-> less pg-json
pg-json--0.0.1.sql  pg-json.control     
postgres@db-172-> less pg-json--0.0.1.sql 
/*-------------------------------------------------------------------------
 *
 * JSON functions using the Jansson JSON library
 *
 * Copyright (c) 2011, Claes Jakobsson, Glue Finance AB
 *
 * This software is licensed under the MIT license. See LICENSE
 *
 *-------------------------------------------------------------------------
 */
 
CREATE OR REPLACE FUNCTION json_in(cstring)
    RETURNS json
    AS '$libdir/pg-json'
    LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION json_out(json)
    RETURNS cstring
    AS '$libdir/pg-json'
    LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION json_get_value(data json, path text)
    RETURNS text
    AS '$libdir/pg-json'
    LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION json_equals(this json, that json)
    RETURNS boolean
    AS '$libdir/pg-json'
    LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION json_not_equals(this json, that json)
        RETURNS boolean
        AS '$libdir/pg-json'
        LANGUAGE C IMMUTABLE STRICT;
    
CREATE TYPE json (
    INPUT = json_in,
    OUTPUT = json_out
);

CREATE OPERATOR ~ (
    PROCEDURE = json_get_value,
    LEFTARG = json, RIGHTARG = text
);

CREATE OPERATOR = (
    PROCEDURE = json_equals,
    LEFTARG = json, RIGHTARG = json,
    COMMUTATOR = =,
    NEGATOR = !=
);

CREATE OPERATOR != (
    PROCEDURE = json_not_equals,
    LEFTARG = json, RIGHTARG = json,
    COMMUTATOR = !=,
    NEGATOR = =
);



从SQL文件看出创建extension时新增了5个函数1个类型和3个操作符。

【测试】 : 

digoal=> create table json_test (id int,info json);
CREATE TABLE
digoal=> insert into json_test values (1,'{"foo":[1,2,3, [3,4,5]]}');
INSERT 0 1
digoal=> select * from json_test ;
 id |           info           
----+--------------------------
  1 | {"foo":[1,2,3, [3,4,5]]}
(1 row)

digoal=> select json_get_value(info,'foo[3][2]'),id from json_test ;
 json_get_value | id 
----------------+----
 5              |  1
(1 row)

digoal=> insert into json_test values (2, '{"foo": {"bar": [{}, {}, {"orz": "herp"}]}}');
INSERT 0 1
digoal=> select json_get_value(info,'foo.bar[2].orz'),id from json_test where id=2;
 json_get_value | id 
----------------+----
 herp           |  2



【参考】
http://api.pgxn.org/src/pg-json/pg-json-0.0.1/README

http://www.digip.org/jansson/


