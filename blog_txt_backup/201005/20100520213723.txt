PostgreSQL research

[From My Companion]修改psstat

2010-05-20 21:37:23   查看原文>>

一个有意思的功能，在类unix系统下执行一个程序，比如
./a.out abc
那么ps -elf和top -c中显示出此命令行，在postgres数据库中，数据库执行子进程修改自己的命令行，使得ps和top中显示出正在执行的任务信息，可以很清楚看到现在是什么任务在占用系统资源
不同的操作系统上有不同的方式修改psstat，postgres的源码提供了6种方式：
/*
 * Alternative ways of updating ps display:
 *
 * PS_USE_SETPROCTITLE
 *    use the function setproctitle(const char *, …)
 *    (newer BSD systems)
 * PS_USE_PSTAT
 *    use the pstat(PSTAT_SETCMD, )
 *    (HPUX)
 * PS_USE_PS_STRINGS
 *    assign PS_STRINGS->ps_argvstr = “string”
 *    (some BSD systems)
 * PS_USE_CHANGE_ARGV
 *    assign argv[0] = “string”
 *    (some other BSD systems)
 * PS_USE_CLOBBER_ARGV
 *    write over the argv and environment area
 *    (most SysV-like systems)
 * PS_USE_WIN32
 *    push the string out as the name of a Windows event
 * PS_USE_NONE
 *    don’t update ps display
 *    (This is the default, as it is safest.)
 */
#if defined(HAVE_SETPROCTITLE)
#define PS_USE_SETPROCTITLE
#elif defined(HAVE_PSTAT) && defined(PSTAT_SETCMD)
#define PS_USE_PSTAT
#elif defined(HAVE_PS_STRINGS)
#define PS_USE_PS_STRINGS
#elif (defined(BSD) || defined(__bsdi__) || defined(__hurd__)) && !defined(__darwin__)
#define PS_USE_CHANGE_ARGV
#elif defined(__linux__) || defined(_AIX) || defined(__sgi) || (defined(sun) && !defined(BSD)) || defined(ultrix) || defined(__ksr__) || defined(__osf__) || defined(__svr4__) || defined(__svr5__) || defined(__darwin__)
#define PS_USE_CLOBBER_ARGV
#elif defined(WIN32)
#define PS_USE_WIN32
#else
#define PS_USE_NONE
#endif
/* Different systems want the buffer padded differently */
#if defined(_AIX) || defined(__linux__) || defined(__svr4__)
#define PS_PADDING ”
#else
#define PS_PADDING ‘‘
#endif
其中最常见的是PS_USE_CLOBBER_ARGV这种方式，因为linux和aix目前最流行
在适合PS_USE_CLOBBER_ARGV的系统中，ps和top是通过main函数的argc和argv[0]所指向的空间得到其命令行的，argv[0]指向的空间存放着命令行的参数，例如linux命令行
./a.out 1 23 abc
在argv[0]的空间中这样存放，字符串都是连续存放的
“./a.out\x001\x0023\x00abc\x00″
如果修改这块内存，则ps和top的显示也会改变，原理很简单，注意ps和top显示字符串的方式，是将argc个字符串用空格连起来显示，因此在修改的时候，要保证字符串数量，例如要把上面的命令行修改为
hello world
则修改为
“hello world\x00\x00\x00\x00″
或者
“hello\x00world\x00\x00\x00″
总之保证有不少于argc个字符串，否则ps和top会继续向后读取字符串，会导致越界
既然提到越界，很自然的问题就是，可以用来搞这个事情的内存有多大，实际上，在上述命令行所占用的内存之后，紧跟着是环境变量字串的内存，这个也可以拿来用的，但是考虑到很多模块需要用到环境变量和原始argv（某些系统上，在main之外可以通过一些api获取到argc和argv），所以需要先save一个副本，同时得到可用内存大小，然后就可以向这块内存
写东西以修改psstat了
postgres相关源码，注意两个for循环里的那个if判断，用来确保这块内存是连续存储这些信息：
#if defined(PS_USE_CLOBBER_ARGV)
 /*
  * If we’re going to overwrite the argv area, count the available space.
  * Also move the environment to make additional room.
  */
 {
  char    *end_of_area = NULL;
  char   **new_environ;
  int   i;
  /*
   * check for contiguous argv strings
   */
  for (i = 0; i < argc; i++)
  {
   if (i == 0 || end_of_area + 1 == argv[i])
    end_of_area = argv[i] + strlen(argv[i]);
  }
  if (end_of_area == NULL) /* probably can’t happen? */
  {
   ps_buffer = NULL;
   ps_buffer_size = 0;
   return argv;
  }
  /*
   * check for contiguous environ strings following argv
   */
  for (i = 0; environ[i] != NULL; i++)
  {
   if (end_of_area + 1 == environ[i])
    end_of_area = environ[i] + strlen(environ[i]);
  }
  ps_buffer = argv[0];
  last_status_len = ps_buffer_size = end_of_area – argv[0];
  /*
   * move the environment out of the way
   */
  new_environ = (char **) malloc((i + 1) * sizeof(char *));
  for (i = 0; environ[i] != NULL; i++)
   new_environ[i] = strdup(environ[i]);
  new_environ[i] = NULL;
  environ = new_environ;
 }
#endif   /* PS_USE_CLOBBER_ARGV */
