PostgreSQL research

PostgreSQL 9.4 pending patch : effective enable_material = off in mergejoin

2013-09-04 14:29:25   查看原文>>

I recently could not shift a plan off of using a materialize, to see
what other options were out there, by setting enable_material to off.

From src/backend/optimizer/path/costsize.c:


     * We don't test the value of enable_material here, because
     * materialization is required for correctness in this case, and turning
     * it off does not entitle us to deliver an invalid plan.

True, but I don't think that the materialization being necessary for
correctness entitles us to ignore enable_material=off.  If we need to
return a plan with materialization in order for this plan to be
correct, it should be punished like all other violations of enable_*
are punished.

The attached patch does that.

Having done this, I wonder if the line here should also be changed to
remove the enable_material test:

    if (enable_material && mat_inner_cost < bare_inner_cost)

If the disable_cost is not enough to make the "mat_inner_cost <
bare_inner_cost" to be false, then I don't see that we need a special
case to prevent use of the materialize anyway, as most other enable_*
implementations do not get one--they rely solely on disable_cost.
However, out of conservatism, I have not made the change of removing
this.


该补丁修改了final_cost_mergejoin函数 . 未使用该补丁前, mergejoin里面如果使用了material, 那么参数enable_material不起作用.

/*
 * final_cost_mergejoin
 *        Final estimate of the cost and result size of a mergejoin path.
 *
 * Unlike other costsize functions, this routine makes one actual decision:
 * whether we should materialize the inner path.  We do that either because
 * the inner path can't support mark/restore, or because it's cheaper to
 * use an interposed Material node to handle mark/restore.      When the decision
 * is cost-based it would be logically cleaner to build and cost two separate
 * paths with and without that flag set; but that would require repeating most
 * of the cost calculations, which are not all that cheap.      Since the choice
 * will not affect output pathkeys or startup cost, only total cost, there is
 * no possibility of wanting to keep both paths.  So it seems best to make
 * the decision here and record it in the path's materialize_inner field.
 *
 * 'path' is already filled in except for the rows and cost fields and
 *              materialize_inner
 * 'workspace' is the result from initial_cost_mergejoin
 * 'sjinfo' is extra info about the join for selectivity estimation
 */
void
final_cost_mergejoin(PlannerInfo *root, MergePath *path,
                                         JoinCostWorkspace *workspace,
                                         SpecialJoinInfo *sjinfo)


补丁 : 

diff --git a/src/backend/optimizer/path/costsize.c b/src/backend/optimizer/path/costsize.c
new file mode 100644
index 0caac75..f98195e
*** a/src/backend/optimizer/path/costsize.c
--- b/src/backend/optimizer/path/costsize.c
*************** final_cost_mergejoin(PlannerInfo *root, 
*** 2242,2247 ****
--- 2242,2250 ----
        mat_inner_cost = inner_run_cost +
                cpu_operator_cost * inner_path_rows * rescanratio;
  
+       if (!enable_material)
+               mat_inner_cost += disable_cost;
+ 
        /*
         * Prefer materializing if it looks cheaper, unless the user has asked to
         * suppress materialization.



测试, 未打补丁, 以下merge join场景中enable_material不起作用.

digoal=# explain analyze select * from
digoal-#     ( select oid, * from pg_class order by oid) as c
digoal-#     join
digoal-#     ( select * from pg_attribute a order by attrelid) as a
digoal-#     on c.oid = a.attrelid;
                                                                              QUERY PLAN                                            
                                  
------------------------------------------------------------------------------------------------------------------------------------
----------------------------------
 Merge Join  (cost=0.55..173.70 rows=2405 width=406) (actual time=9.337..65.589 rows=2439 loops=1)
   Merge Cond: (pg_class.oid = a.attrelid)
   ->  Index Scan using pg_class_oid_index on pg_class  (cost=0.27..17.92 rows=310 width=203) (actual time=0.018..0.512 rows=319 loo
ps=1)
   ->  Materialize  (cost=0.28..121.78 rows=2382 width=203) (actual time=9.309..62.875 rows=2439 loops=1)
         ->  Index Scan using pg_attribute_relid_attnum_index on pg_attribute a  (cost=0.28..92.01 rows=2382 width=203) (actual time
=9.301..62.075 rows=2439 loops=1)
 Total runtime: 70.746 ms
(6 rows)

digoal=# set enable_material=off;
SET
digoal=# explain analyze select * from
    ( select oid, * from pg_class order by oid) as c
    join
    ( select * from pg_attribute a order by attrelid) as a
    on c.oid = a.attrelid;
                                                                             QUERY PLAN                                             
                                 
------------------------------------------------------------------------------------------------------------------------------------
---------------------------------
 Merge Join  (cost=0.55..173.70 rows=2405 width=406) (actual time=0.063..4.282 rows=2439 loops=1)
   Merge Cond: (pg_class.oid = a.attrelid)
   ->  Index Scan using pg_class_oid_index on pg_class  (cost=0.27..17.92 rows=310 width=203) (actual time=0.038..0.398 rows=319 loo
ps=1)
   ->  Materialize  (cost=0.28..121.78 rows=2382 width=203) (actual time=0.019..1.771 rows=2439 loops=1)
         ->  Index Scan using pg_attribute_relid_attnum_index on pg_attribute a  (cost=0.28..92.01 rows=2382 width=203) (actual time
=0.016..1.008 rows=2439 loops=1)
 Total runtime: 4.765 ms
(6 rows)



打完补丁后, 该场景enable_material有效.

[root@db-172-16-3-33 ~]# cd /opt/soft_bak/postgresql-1b1d3d9
[root@db-172-16-3-33 postgresql-1b1d3d9]# wget http://www.postgresql.org/message-id/attachment/29994/enable_material_v01.patch

[root@db-172-16-3-33 postgresql-1b1d3d9]# patch -p1 < enable_material_v01.patch 
patching file src/backend/optimizer/path/costsize.c

[root@db-172-16-3-33 postgresql-1b1d3d9]# gmake && gmake install

[root@db-172-16-3-33 postgresql-1b1d3d9]# su - pg94
pg_cpg94@db-172-16-3-33-> pg_ctl restart -m fast
waiting for server to shut down.... done
server stopped
server starting
pg94@db-172-16-3-33-> LOG:  00000: loaded library "pg_stat_statements"
LOCATION:  load_libraries, miscinit.c:1297
LOG:  00000: redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".
LOCATION:  SysLogger_Start, syslogger.c:649



digoal=# explain analyze select * from
    ( select oid, * from pg_class order by oid) as c
    join
    ( select * from pg_attribute a order by attrelid) as a
    on c.oid = a.attrelid;
                                                                             QUERY PLAN                                             
                                 
------------------------------------------------------------------------------------------------------------------------------------
---------------------------------
 Merge Join  (cost=0.55..185.43 rows=2372 width=410) (actual time=0.039..3.478 rows=2538 loops=1)
   Merge Cond: (pg_class.oid = a.attrelid)
   ->  Index Scan using pg_class_oid_index on pg_class  (cost=0.27..19.86 rows=306 width=207) (actual time=0.010..0.309 rows=332 loo
ps=1)
   ->  Materialize  (cost=0.28..131.62 rows=2558 width=203) (actual time=0.023..1.588 rows=2538 loops=1)
         ->  Index Scan using pg_attribute_relid_attnum_index on pg_attribute a  (cost=0.28..99.65 rows=2558 width=203) (actual time
=0.018..1.106 rows=2538 loops=1)
 Total runtime: 3.783 ms
(6 rows)

digoal=# show enable_material;
 enable_material 
-----------------
 on
(1 row)

digoal=# set enable_material=off;
SET
digoal=# explain analyze select * from
    ( select oid, * from pg_class order by oid) as c
    join
    ( select * from pg_attribute a order by attrelid) as a
    on c.oid = a.attrelid;
                                                                             QUERY PLAN                                             
                                 
------------------------------------------------------------------------------------------------------------------------------------
---------------------------------
 Hash Join  (cost=157.48..237.89 rows=2372 width=410) (actual time=1.564..3.174 rows=2538 loops=1)
   Hash Cond: (pg_class.oid = a.attrelid)
   ->  Index Scan using pg_class_oid_index on pg_class  (cost=0.27..19.86 rows=306 width=207) (actual time=0.019..0.287 rows=332 loo
ps=1)
   ->  Hash  (cost=125.23..125.23 rows=2558 width=203) (actual time=1.526..1.526 rows=2538 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 367kB
         ->  Index Scan using pg_attribute_relid_attnum_index on pg_attribute a  (cost=0.28..99.65 rows=2558 width=203) (actual time
=0.009..0.731 rows=2538 loops=1)
 Total runtime: 3.437 ms
(7 rows)



[参考]
1. src/backend/optimizer/path/costsize.c
2. http://www.postgresql.org/message-id/flat/CAMkU=1zYsYH7EpHF_RKBiN5fjoudFqGiYKVMnhb2LhU3m8UHLA@mail.gmail.com#CAMkU=1zYsYH7EpHF_RKBiN5fjoudFqGiYKVMnhb2LhU3m8UHLA@mail.gmail.com
3. http://www.depesz.com/2013/05/09/explaining-the-unexplainable-part-3/
