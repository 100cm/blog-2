PostgreSQL research

PostgreSQL pending patch : before or after statement-level Triggers on foreign tables

2013-09-17 15:11:07   查看原文>>

Hello.

I wanted to know what it would take to implement triggers on foreign tables. 
It seems that statement-level triggers can work provided they are allowed in 
the code.

Please find attached a simple POC patch that implement just that.

For row-level triggers, it seems more complicated. From what I understand, 
OLD/NEW tuples are fetched from the heap using their ctid (except for BEFORE 
INSERT triggers). How could this be adapted for foreign tables ?


--
Ronan Dunklau


PostgreSQL 的一个外部表触发器补丁, 目前仅支持语句级别的触发器, 无法做到行级触发.
补丁安装 : 

[root@db-172-16-3-39 postgresql-1b1d3d9]# wget http://www.postgresql.org/message-id/attachment/30159/foreign_triggers_v2.patch
[root@db-172-16-3-39 postgresql-1b1d3d9]# patch -p1 < foreign_triggers_v2.patch 
patching file doc/src/sgml/ref/create_trigger.sgml
patching file doc/src/sgml/trigger.sgml
patching file src/backend/commands/tablecmds.c
patching file src/backend/commands/trigger.c
patching file src/test/regress/expected/foreign_data.out
patching file src/test/regress/sql/foreign_data.sql
[root@db-172-16-3-39 postgresql-1b1d3d9]# gmake
[root@db-172-16-3-39 postgresql-1b1d3d9]# gmake install



测试, 创建postgres_fdw模块 : 

[root@db-172-16-3-39 postgresql-1b1d3d9]# su - pg94
pg94@db-172-16-3-39-> pg_ctl restart -m fast
pg94@db-172-16-3-39-> psql
psql (9.4devel)
Type "help" for help.
digoal=# create extension postgres_fdw;
CREATE EXTENSION


测试用到postgres_fdw这个可写外部表模块.
有兴趣的同学可参考
http://blog.163.com/digoal@126/blog/static/1638770402013214103144414/
创建server

digoal=# CREATE SERVER myserver FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '127.0.0.1', dbname 'digoal', port '2999', updatable 'true');


创建user mapping

digoal=# create role digoal superuser login encrypted password 'digoal';
CREATE ROLE
digoal=# CREATE USER MAPPING FOR digoal SERVER myserver OPTIONS (user 'digoal', password 'digoal');
CREATE USER MAPPING
digoal=# \c digoal digoal


创建测试表

digoal=# create table t1(id int primary key, info text, crt_time timestamp);


创建可写外部表

digoal=# CREATE FOREIGN TABLE f_t1(id int, info text, crt_time timestamp) server myserver options (schema_name 'public', table_name 't1');
digoal=# insert into f_t1 values (1,'test',now());
INSERT 0 1
digoal=# select * from t1;
 id | info |          crt_time          
----+------+----------------------------
  1 | test | 2013-09-17 14:44:04.445224
(1 row)

digoal=# select * from f_t1;
 id | info |          crt_time          
----+------+----------------------------
  1 | test | 2013-09-17 14:44:04.445224
(1 row)


创建记录表(触发器中使用)

digoal=# create table tg_log(id serial8 primary key, crt_time timestamp default clock_timestamp(), tg_name name, tg_when text, tg_level text, tg_op text, tg_relid oid, tg_relname name, tg_table_name name, tg_table_schema name, tg_nargs int, tg_argv text);
CREATE TABLE



创建触发器函数

digoal=# create or replace function f_tg() returns trigger as $$
declare
begin 
  insert into tg_log (tg_name, tg_when, tg_level, tg_op, tg_relid, tg_relname, tg_table_name, tg_table_schema, tg_nargs, tg_argv) 
  values (tg_name, tg_when, tg_level, tg_op, tg_relid, tg_relname, tg_table_name, tg_table_schema, tg_nargs, tg_argv);
  return null;
-- statement-level触发器函数直接返回null
end;
$$ language plpgsql strict;


对触发器有兴趣的同学可以参考
http://blog.163.com/digoal@126/blog/static/1638770402013283547959/

创建触发器

digoal=# create trigger tg1 before insert or update or delete on f_t1 execute procedure f_tg();
CREATE TRIGGER
digoal=# create trigger tg2 after insert or update or delete on f_t1 execute procedure f_tg();
CREATE TRIGGER



测试

digoal=# insert into f_t1 values (2,'text',now());
INSERT 0 1
digoal=# select * from f_t1;
 id | info |          crt_time          
----+------+----------------------------
  2 | text | 2013-09-17 15:06:15.373727
(1 row)

digoal=# select * from t1;
 id | info |          crt_time          
----+------+----------------------------
  2 | text | 2013-09-17 15:06:15.373727
(1 row)

digoal=# select * from tg_log;
 id |          crt_time          | tg_name | tg_when | tg_level  | tg_op  | tg_relid | tg_relname | tg_table_name | tg_table_schema 
| tg_nargs | tg_argv 
----+----------------------------+---------+---------+-----------+--------+----------+------------+---------------+-----------------
+----------+---------
 10 | 2013-09-17 15:06:15.374379 | tg1     | BEFORE  | STATEMENT | INSERT |    24990 | f_t1       | f_t1          | public          
|        0 | 
 11 | 2013-09-17 15:06:15.375116 | tg2     | AFTER   | STATEMENT | INSERT |    24990 | f_t1       | f_t1          | public          
|        0 | 
(2 rows)

digoal=# update f_t1 set info='new';
UPDATE 1
digoal=# select * from t1;
 id | info |          crt_time          
----+------+----------------------------
  2 | new  | 2013-09-17 15:06:15.373727
(1 row)

digoal=# select * from f_t1;
 id | info |          crt_time          
----+------+----------------------------
  2 | new  | 2013-09-17 15:06:15.373727
(1 row)

digoal=# select * from tg_log;
 id |          crt_time          | tg_name | tg_when | tg_level  | tg_op  | tg_relid | tg_relname | tg_table_name | tg_table_schema 
| tg_nargs | tg_argv 
----+----------------------------+---------+---------+-----------+--------+----------+------------+---------------+-----------------
+----------+---------
 10 | 2013-09-17 15:06:15.374379 | tg1     | BEFORE  | STATEMENT | INSERT |    24990 | f_t1       | f_t1          | public          
|        0 | 
 11 | 2013-09-17 15:06:15.375116 | tg2     | AFTER   | STATEMENT | INSERT |    24990 | f_t1       | f_t1          | public          
|        0 | 
 12 | 2013-09-17 15:06:52.176488 | tg1     | BEFORE  | STATEMENT | UPDATE |    24990 | f_t1       | f_t1          | public          
|        0 | 
 13 | 2013-09-17 15:06:52.178111 | tg2     | AFTER   | STATEMENT | UPDATE |    24990 | f_t1       | f_t1          | public          
|        0 | 
(4 rows)

digoal=# delete from f_t1;
DELETE 1
digoal=# select * from f_t1;
 id | info | crt_time 
----+------+----------
(0 rows)

digoal=# select * from t1;
 id | info | crt_time 
----+------+----------
(0 rows)

digoal=# select * from tg_log;
 id |          crt_time          | tg_name | tg_when | tg_level  | tg_op  | tg_relid | tg_relname | tg_table_name | tg_table_schema 
| tg_nargs | tg_argv 
----+----------------------------+---------+---------+-----------+--------+----------+------------+---------------+-----------------
+----------+---------
 10 | 2013-09-17 15:06:15.374379 | tg1     | BEFORE  | STATEMENT | INSERT |    24990 | f_t1       | f_t1          | public          
|        0 | 
 11 | 2013-09-17 15:06:15.375116 | tg2     | AFTER   | STATEMENT | INSERT |    24990 | f_t1       | f_t1          | public          
|        0 | 
 12 | 2013-09-17 15:06:52.176488 | tg1     | BEFORE  | STATEMENT | UPDATE |    24990 | f_t1       | f_t1          | public          
|        0 | 
 13 | 2013-09-17 15:06:52.178111 | tg2     | AFTER   | STATEMENT | UPDATE |    24990 | f_t1       | f_t1          | public          
|        0 | 
 14 | 2013-09-17 15:07:13.009584 | tg1     | BEFORE  | STATEMENT | DELETE |    24990 | f_t1       | f_t1          | public          
|        0 | 
 15 | 2013-09-17 15:07:13.010709 | tg2     | AFTER   | STATEMENT | DELETE |    24990 | f_t1       | f_t1          | public          
|        0 | 
(6 rows)


[注意]
1. 创建外部表时, 如果在本地创建的话, 请务必指定schema_name和table_name, 否则插入外部表的时候会造成死循环.
foreign table -> foreign table ... ...
例如

digoal=# create extension postgres_fdw;
CREATE EXTENSION
digoal=# CREATE SERVER myserver FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '127.0.0.1', dbname 'digoal', port '2999', updatable 'on');
CREATE SERVER
digoal=# CREATE USER MAPPING FOR digoal SERVER myserver OPTIONS (user 'digoal', password 'digoal');
CREATE USER MAPPING
digoal=# create table t1 (id int primary key, info text, crt_time timestamp);
CREATE TABLE
digoal=# CREATE FOREIGN TABLE f_t1(id int, info text, crt_time timestamp) server myserver;
CREATE FOREIGN TABLE
digoal=# insert into f_t1 values (1,'test',now());
ERROR:  could not connect to server "myserver"
DETAIL:  FATAL:  sorry, too many clients already
CONTEXT:  Remote SQL command: INSERT INTO public.f_t1(id, info, crt_time) VALUES ($1, $2, $3)
Remote SQL command: INSERT INTO public.f_t1(id, info, crt_time) VALUES ($1, $2, $3)
Remote SQL command: INSERT INTO public.f_t1(id, info, crt_time) VALUES ($1, $2, $3)
....


.... 直到连接耗尽.
原因是外部表支持更新, 并且创建外部表时未指定table_name和schema_name, 同时连接的又是当前数据库.
那么会进入一个死循环.

[参考]
1. http://www.postgresql.org/message-id/flat/1553612.aNJakFASte@ronan_laptop#1553612.aNJakFASte@ronan_laptop

+    On foreign tables, trigger can be defined to execute either before or after any
+    <command>INSERT</command>,
+    <command>UPDATE</command> or
+    <command>DELETE</command> operation, only once per <acronym>SQL</acronym> statement.
+    This means that row-level triggers are not supported for foreign tables.
+   </para>


2. http://blog.163.com/digoal@126/blog/static/1638770402013214103144414/
3. http://blog.163.com/digoal@126/blog/static/163877040201312544919858/
4. http://www.postgresql.org/docs/devel/static/libpq-connect.html
5. http://www.postgresql.org/docs/devel/static/postgres-fdw.html
6. http://blog.163.com/digoal@126/blog/static/1638770402013283547959/
7. http://blog.163.com/digoal@126/blog/static/1638770402013211102130526/
8. 可用的postgres_fdw OPTIONS

HINT:  Valid options in this context are: service, connect_timeout, dbname, host, hostaddr, port, application_name, keepalives, keepalives_idle, keepalives_interval, keepalives_count, sslmode, sslcompression, sslcert, sslkey, sslrootcert, sslcrl, requirepeer, use_remote_estimate, fdw_startup_cost, fdw_tuple_cost, updatable


非libpq部分options : 

        /* non-libpq FDW-specific FDW options */
        static const PgFdwOption non_libpq_options[] = {
                {"schema_name", ForeignTableRelationId, false},
                {"table_name", ForeignTableRelationId, false},
                {"column_name", AttributeRelationId, false},
                /* use_remote_estimate is available on both server and table */
                {"use_remote_estimate", ForeignServerRelationId, false},
                {"use_remote_estimate", ForeignTableRelationId, false},
                /* cost factors */
                {"fdw_startup_cost", ForeignServerRelationId, false},
                {"fdw_tuple_cost", ForeignServerRelationId, false},
                /* updatable is available on both server and table */
                {"updatable", ForeignServerRelationId, false},
                {"updatable", ForeignTableRelationId, false},
                {NULL, InvalidOid, false}
        };


