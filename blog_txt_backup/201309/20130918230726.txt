PostgreSQL research

PostgreSQL pending patch : Freezing without write I/O

2013-09-18 23:07:26   查看原文>>

PostgreSQL MVCC机制中, 一个重要的概念是xid, 每条记录上都存储了32位的xid信息, 表示该记录被写入时的事务号. 由于xid值有限, 所以记录上的xid信息必须在产生一定量的事务(必须小于2^31)后置为freeze xid. 否则会变成未来的xid, 造成数据消失的假象.
freeze xid是一个特殊的xid, 持这个xid的记录对所有事务来说都是可见的. 
这样就带来一个情况, 无论数据后续是否要被修改, 行上面存储的xid信息在发生若干的事务后都需要被置为freeze xid, (由于前面所述的xid wrap的原因.)
例如一个表只有插入, 没有更新也没有删除, 最老的一条记录的xid=100, 当发生了若干次事务后, 这个xid必须变更为freeze xid(=2). 所以这个page实际上就至少额外发生了一次写的操作. 

本文所述的补丁, 原理如下 : 

Here's a first draft. A lot of stuff missing and broken, but "make 
check" passes :-).

In the patch, instead of working with "half-epochs", there are "XID-LSN 
ranges", which can be of arbitrary size. An XID-LSN range consists of 
three values:
LSN指WAL文件的位置信息.

本补丁的关键点在这里, 维护了1个列表, 这个列表中包含一系列的范围信息. 如minlsn 最小lsn号. minxid - maxxid指 大于该lsd的对应的xid的范围
minlsn: The point in WAL where this range begins.
minxid - maxxid: The range of XIDs allowed in this range.

Every point in WAL belongs to exactly one range. The minxid-maxxid of 
the ranges can overlap. For example:

1. XIDs 25000942 - 27000003 LSN 0/3BB9938
2. XIDs 23000742 - 26000003 LSN 0/2AB9288
3. XIDs 22000721 - 25000003 LSN 0/1AB8BE0
4. XIDs 22000002 - 24000003 LSN 0/10B1550
每次页面被更新时, lsn随之更新, 根据lsn对应的minxid和maxxid范围来判断是否需要对该页面内小于minxid的xid做freeze处理(这些写操作在一次中完成).  所以省去了后面再来做freeze的额外io.  

The invariant with the ranges is that a page with a certain LSN is only 
allowed to contain XIDs that belong to the range specified by that LSN. 
For example, if a page has LSN 0/3500000, it belongs to the 2nd range, 
and can only contain XIDs between 23000742 - 26000003. If a backend 
updates the page, so that it's LSN is updated to, say, 0/3D12345, all 
XIDs on the page older than 25000942 must be frozen first, to avoid 
violating the rule.
每个页面上都存储了一个lsn值, 代表最近一次该页面被更新时在xlog中的记录位置
pd_lsn          - identifies xlog record for last change to this page.
因为unlogged table不记录xlog, 所以本补丁不适用于unlogged table.
作者的TODO LIST中包含该信息.

The system keeps track of a small number of these XID-LSN ranges. Where 
we currently truncate clog, we can also truncate the ranges with maxxid 
< the clog truncation point. Vacuum removes any dead tuples and updates 
relfrozenxid as usual, to make sure that there are no dead tuples or 
aborted XIDs older than the minxid of the oldest tracked XID-LSN range. 
It no longer needs to freeze old committed XIDs, however - that's the 
gain from this patch (except to uphold the invariant, if it has to 
remove some dead tuples on the page and update its LSN).
xid-lsn列表的删除需要配合clog的清理一起执行. 所以xid-lsn也不会太大.

A new range is created whenever we reach the maxxid on the current one. 
The new range's minxid is set to the current global oldest xmin value, 
and maxxid is just the old maxxid plus a fixed number (1 million in the 
patch, but we probably want a higher value in reality). This ensures 
that if you modify a page and update its LSN, all the existing XIDs on 
the page that cannot be frozen yet are greater than the minxid of the 
latest range. In other words, you can always freeze old XIDs on a page, 
so that any remaining non-frozen XIDs are within the minxid-maxxid of 
the latest range.
新xid-lsn数据的创建, minxid取当前数据库中未提交的最小事务.(txid_current_snapshot()函数可以查看).
maxxid则在minxid的值上加一个常量值, 例如默认为100万. 
+ #define XID_LSN_RANGE_INTERVAL 1000000
+       ShmemVariableCache->nextSwitchXid = ShmemVariableCache->nextXid + XID_LSN_RANGE_INTERVAL;

The HeapTupleSatisfies functions are modified to look at the page's LSN 
first. If it's old enough, it doesn't look at the XIDs on the page level 
at all, and just considers everything on the page is visible to everyone 
(I'm calling this state a "mature page").
加入了该机制后, 判断行是否可见的函数HeapTupleSatisfies 首先会查看该页面的lsn信息, 如果lsn小于当前最小的xid-lsd中的lsn的值, 表明这些对应clog已经截断, 同时对应的xid-lsn也删除了, 这种页面被称为mature page, 所有数据对所有用户可见.

> I think the tricky part is going to be figuring out the
> synchronization around half-epoch boundaries.

Yep. I skipped all those difficult parts in this first version. There 
are two race conditions that need to be fixed:

1. When a page is updated, we check if it needs to be frozen. If its LSN 
is greater than the latest range's LSN. IOW, if we've already modified 
the page, and thus frozen all older tuples, within the current range. 
However, it's possible that a new range is created immediately after 
we've checked that. When we then proceed to do the actual update on the 
page and WAL-log that, the new LSN falls within the next range, and we 
should've frozen the page. I'm planning to fix that by adding a "parity 
bit" on the page header. Each XID-LSN range is assigned a parity bit, 0 
or 1. When we check if a page needs to be frozen on update, we make note 
of the latest range's parity bit, and write it in the page header. 
Later, when we look at the page's LSN to determine which XID-LSN range 
it belongs to, we compare the parity. If the parity doesn't match, we 
know that the race condition happened, so we treat the page to belong to 
the previous range, not the one it would normally belong to, per the LSN.

2. When we look at a page, and determine that it's not old enough to be 
"matured", we then check the clog as usual. A page is considered mature, 
if the XID-LSN range (and corresponding clog pages) has already been 
truncated away. It's possible that between those steps, the XID-LSN 
range and clog is truncated away, so that the backend tries to access a 
clog page that doesn't exist anymore. To fix that, the XID-LSN range and 
clog truncation needs to be done in two steps. First, mark the 
truncation point in shared memory. Then somehow wait until all backends 
see the new value, and go ahead with actually truncating the clog only 
after that.


Aside from those two race conditions, there are plenty of scalability 
issues remaining. Currently, the shared XID-LSN range array is checked 
every time a page is accessed, so it could quickly become a bottleneck. 
Need to cache that information in each backend. Oh, and I didn't 
implement the PD_RECENTLY_FROZEN bit in the page header yet, so you will 
get a freezing frenzy right after a new XID-LSN range is created.

I'll keep hacking away on those things, but please let me know if you 
see some fatal flaw with this plan.

- Heikki
以上两个问题在随后的补丁中已经解决了 . 
Here's an updated patch. The race conditions I mentioned above have been 
fixed.

This is still definitely work-in-progress, but overall I think this is 
quite promising. The patch basically works, although there are a bunch 
of TODO items like handling unlogged tables.

This patch is also available in my git repository at 
git://git.postgresql.org/git/users/heikki/postgres.git, branch 
"freeze-by-xid-lsn-ranges".

- Heikki



测试补丁 : 
使用的数据库源码如下 : 

http://git.postgresql.org/gitweb/?p=postgresql.git;a=snapshot;h=d41cb869aad493178777b6e6e8d1425535349acb;sf=tgz


[root@db-172-16-3-33 soft_bak]# tar -zxvf postgresql-d41cb86.tar.gz 
[root@db-172-16-3-33 soft_bak]# cd postgresql-d41cb86


下载补丁

wget http://www.postgresql.org/message-id/attachment/30162/xid-lsn-ranges-3.patch.gz
wget http://www.postgresql.org/message-id/attachment/29948/xidtest.tar.gz
[root@db-172-16-3-33 postgresql-d41cb86]# gunzip xid-lsn-ranges-3.patch.gz 
[root@db-172-16-3-33 postgresql-d41cb86]# tar -zxvf xidtest.tar.gz 
xidtest/
xidtest/xidtest--1.0.sql
xidtest/xidtest.c
xidtest/Makefile
xidtest/xidtest.control
[root@db-172-16-3-33 postgresql-d41cb86]# mv xidtest contrib/


打补丁

[root@db-172-16-3-33 postgresql-d41cb86]# patch -p1 < xid-lsn-ranges-3.patch 
patching file TODO-xidlsnranges.txt
patching file contrib/pg_xlogdump/rmgrdesc.c
patching file doc/src/sgml/maintenance.sgml
patching file doc/src/sgml/ref/create_table.sgml
patching file src/backend/access/heap/heapam.c
patching file src/backend/access/heap/pruneheap.c
patching file src/backend/access/rmgrdesc/Makefile
patching file src/backend/access/rmgrdesc/varsupdesc.c
patching file src/backend/access/rmgrdesc/xlogdesc.c
patching file src/backend/access/transam/rmgr.c
patching file src/backend/access/transam/varsup.c
patching file src/backend/access/transam/xlog.c
patching file src/backend/commands/cluster.c
patching file src/backend/commands/vacuum.c
patching file src/backend/commands/vacuumlazy.c
patching file src/backend/nodes/copyfuncs.c
patching file src/backend/nodes/equalfuncs.c
patching file src/backend/parser/gram.y
patching file src/backend/postmaster/autovacuum.c
patching file src/backend/storage/ipc/procarray.c
patching file src/backend/utils/misc/guc.c
patching file src/backend/utils/misc/postgresql.conf.sample
patching file src/backend/utils/time/snapmgr.c
patching file src/backend/utils/time/tqual.c
patching file src/include/access/heapam.h
patching file src/include/access/rmgrlist.h
patching file src/include/access/transam.h
patching file src/include/access/varsup_internal.h
patching file src/include/access/xlog.h
patching file src/include/catalog/pg_control.h
patching file src/include/commands/cluster.h
patching file src/include/commands/vacuum.h
patching file src/include/nodes/parsenodes.h
patching file src/include/storage/procarray.h
patching file src/include/utils/snapmgr.h
patching file src/include/utils/tqual.h


编译安装数据库

./configure --prefix=/home/pg94/pgsql9.4devel --with-pgport=2999 --with-perl --with-tcl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=16 --enable-dtrace && gmake && gmake install


要用到一些模块, 把模块也编译安装掉

cd contrib
gmake && gmake install


作者提到的xidtest模块也安装一下,  方便查看xid-lsn列表信息,

[root@db-172-16-3-33 postgresql-d41cb86]# cd contrib/xidtest/
[root@db-172-16-3-33 xidtest]# export PATH=/home/pg94/pgsql9.4devel/bin:$PATH
[root@db-172-16-3-33 xidtest]# gmake
gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fpic -I. -I. -I../../src/include -D_GNU_SOURCE -I/usr/include/libxml2   -c -o xidtest.o xidtest.c
gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fpic -shared -o xidtest.so xidtest.o -L../../src/port -L../../src/common  -Wl,-rpath,'/home/pg94/pgsql9.4devel/lib',--enable-new-dtags  
[root@db-172-16-3-33 xidtest]# gmake install
/bin/mkdir -p '/home/pg94/pgsql9.4devel/lib'
/bin/mkdir -p '/home/pg94/pgsql9.4devel/share/extension'
/bin/mkdir -p '/home/pg94/pgsql9.4devel/share/extension'
/usr/bin/install -c -m 755  xidtest.so '/home/pg94/pgsql9.4devel/lib/xidtest.so'
/usr/bin/install -c -m 644 xidtest.control '/home/pg94/pgsql9.4devel/share/extension/'
/usr/bin/install -c -m 644 xidtest--1.0.sql '/home/pg94/pgsql9.4devel/share/extension/'



初始化数据库, 启动数据库(略)
创建xidtest插件

[root@db-172-16-3-33 xidtest]# su - pg94
pg94@db-172-16-3-33-> psql
psql (9.4devel)
Type "help" for help.
digoal=# create extension xidtest;
CREATE EXTENSION


这个插件包含两个函数, 一个用于消耗xid, 另一个用于查看xid-lsn列表

digoal=# \df
                               List of functions
 Schema |        Name        | Result data type | Argument data types |  Type  
--------+--------------------+------------------+---------------------+--------
 public | consume_xids       | void             | integer             | normal
 public | print_xidlsnranges | void             |                     | normal
(2 rows)


例如当前的xid-lsn列表信息如下

digoal=# select * from print_xidlsnranges();
NOTICE:  XIDs 3 - 0, MultiXIDs 1 - 0, LSN 0/0 (expires 0)
NOTICE:  page mature LSN 0/0
 print_xidlsnranges 
--------------------
 
(1 row)


消耗100万个xid后

digoal=# select consume_xids(1000000);
NOTICE:  consumed 1000000 xids, nextXid = 1002085
 consume_xids 
--------------
 
(1 row)


消耗100万个xid后

digoal=# select consume_xids(1000000);
NOTICE:  consumed 1000000 xids, nextXid = 2002086
 consume_xids 
--------------
 
(1 row)
digoal=# checkpoint;
CHECKPOINT


再次查看这个xid-lsn列表信息, 已经发生了一点改变. 新增了1条xid-lsn信息.

digoal=# select * from print_xidlsnranges();
NOTICE:  XIDs 2084 - 0, MultiXIDs 1 - 0, LSN 0/16A5C80 (expires 0)
NOTICE:  XIDs 3 - 1001473, MultiXIDs 1 - 2, LSN 0/0 (expires 0)
NOTICE:  page mature LSN 0/0
 print_xidlsnranges 
--------------------
 
(1 row)



使用上一篇文章介绍的方法进行更新测试. 同时观察xid-lsn列表信息.
http://blog.163.com/digoal@126/blog/static/16387704020138185042307/

digoal=# create table test(id int primary key, info text, crt_time timestamp);
CREATE TABLE
digoal=# create or replace function update_test(i_num int) returns void as                   
digoal-# $$
digoal$# declare
digoal$# begin
digoal$#   update test set info=md5(random()::text),crt_time=clock_timestamp() where id=mod(i_num,100);
digoal$#   return;
digoal$# exception 
digoal$#   when others then
digoal$#     return;
digoal$# end;
digoal$# $$ language plpgsql strict;
CREATE FUNCTION
digoal=# insert into test select generate_series(0,99),md5(random()::text),clock_timestamp();
INSERT 0 100


pgbench脚本

pg94@db-172-16-3-33-> vi test.sql
select update_test(pg_backend_pid());


测试100秒更新.

pg94@db-172-16-3-33->  pgbench -M prepared -n -r -f ./test.sql -P 1 -c 8 -j 4 -T 100 -h 127.0.0.1 -U postgres digoal
progress: 1.0 s, 28709.1 tps, 0.279 ms lat
progress: 2.0 s, 27751.8 tps, 0.288 ms lat
progress: 3.0 s, 25238.4 tps, 0.317 ms lat
progress: 4.0 s, 27509.2 tps, 0.291 ms lat
.....
progress: 98.0 s, 42864.7 tps, 0.187 ms lat
progress: 99.0 s, 40282.1 tps, 0.199 ms lat
progress: 100.0 s, 47759.9 tps, 0.168 ms lat
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 4
duration: 100 s
number of transactions actually processed: 3792496
tps = 37923.591338 (including connections establishing)
tps = 37926.672863 (excluding connections establishing)
statement latencies in milliseconds:
        0.209422        select update_test(pg_backend_pid());


pgbench更新完后, 来查看xid-lsn列表信息, 注意最新的这个minxid-maxxid, minxid已经到16004987了, maxxid=0, 可能是个bug.

digoal=# select * from print_xidlsnranges();
NOTICE:  XIDs 16004987 - 0, MultiXIDs 16 - 0, LSN 0/4D6265E0 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 15004796 - 16005121, MultiXIDs 15 - 17, LSN 0/480CE178 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 14004599 - 15004929, MultiXIDs 14 - 16, LSN 0/42B75FC0 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 13004407 - 14004737, MultiXIDs 13 - 15, LSN 0/3D60FBD0 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 12004216 - 13004545, MultiXIDs 12 - 14, LSN 0/380B5670 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 11004025 - 12004353, MultiXIDs 11 - 13, LSN 0/32B5B4D0 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 10004016 - 11004161, MultiXIDs 10 - 12, LSN 0/2C1F2C10 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 9003630 - 10004353, MultiXIDs 9 - 11, LSN 0/26C93220 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 8003513 - 9004161, MultiXIDs 8 - 10, LSN 0/2172F088 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 7003288 - 8003713, MultiXIDs 7 - 9, LSN 0/1C1B2F20 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 6002988 - 7003521, MultiXIDs 6 - 8, LSN 0/16C577A0 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 5002798 - 6003329, MultiXIDs 5 - 7, LSN 0/116FC000 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 4002361 - 5003137, MultiXIDs 4 - 6, LSN 0/C1A0560 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 3002038 - 4002945, MultiXIDs 3 - 5, LSN 0/6C41CD8 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 2085 - 3002625, MultiXIDs 2 - 4, LSN 0/16D1000 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 2084 - 2002177, MultiXIDs 1 - 3, LSN 0/16A5C80 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  XIDs 3 - 1001473, MultiXIDs 1 - 2, LSN 0/0 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
NOTICE:  page mature LSN 0/0
 print_xidlsnranges 
--------------------
 
(1 row)


接下来根据crt_time反向排序, 取出9条记录, 测试时我们用了8个连接, 所以有8条记录被更新了, 第9条应该是初始状态的记录.

digoal=# select xmin,xmax,* from test order by crt_time desc limit 9;
   xmin   | xmax | id |               info               |          crt_time          
----------+------+----+----------------------------------+----------------------------
 16011638 |    0 | 73 | bffc12f83a4a6c5b8e230a5a22b09901 | 2013-09-18 22:37:20.989665
 16011636 |    0 | 74 | 2e9303e2ae57a1d9810ef9074b265f89 | 2013-09-18 22:37:20.987248
 16011634 |    0 | 75 | 32a7e953677ba36e45c0fbd073c84191 | 2013-09-18 22:37:20.987016
 16011632 |    0 | 78 | 8275f216f17027f294c7a54a59bd15e1 | 2013-09-18 22:37:20.986985
 16011630 |    0 | 77 | 2a51aa6f7ebc2455d8941b3869f0d4ea | 2013-09-18 22:37:20.986927
 16011628 |    0 | 76 | cc679135a79e0cf4cffd85cf2c16ec50 | 2013-09-18 22:37:20.986913
 13004420 |    0 | 79 | 0101ac985e5e76760b3029006f042931 | 2013-09-18 22:36:22.654286
 13004424 |    0 | 80 | 7dbb1d686f58b1e94aa7e427db548bf4 | 2013-09-18 22:36:22.654202
        2 |    0 | 56 | ad09eac6856d030fa326926ab132a870 | 2013-09-18 21:10:15.450525
(9 rows)


接下来查看对应的ctid信息, 有了ctid, 我们就可以通过pageinspect这个模块查看页面的lsn信息. 并且根据页面中所有记录的xmin信息范围比对是否符合本补丁的约束.

digoal=# select * from (select ctid,xmin,* from test order by crt_time desc limit 9) t order by ctid;
  ctid   |   xmin   | id |               info               |          crt_time          
---------+----------+----+----------------------------------+----------------------------
 (0,53)  |        2 | 56 | ad09eac6856d030fa326926ab132a870 | 2013-09-18 21:10:15.450525
 (8,4)   | 13004420 | 79 | 0101ac985e5e76760b3029006f042931 | 2013-09-18 22:36:22.654286
 (8,5)   | 13004424 | 80 | 7dbb1d686f58b1e94aa7e427db548bf4 | 2013-09-18 22:36:22.654202
 (9,70)  | 16011628 | 76 | cc679135a79e0cf4cffd85cf2c16ec50 | 2013-09-18 22:37:20.986913
 (10,54) | 16011638 | 73 | bffc12f83a4a6c5b8e230a5a22b09901 | 2013-09-18 22:37:20.989665
 (11,31) | 16011630 | 77 | 2a51aa6f7ebc2455d8941b3869f0d4ea | 2013-09-18 22:37:20.986927
 (12,60) | 16011634 | 75 | 32a7e953677ba36e45c0fbd073c84191 | 2013-09-18 22:37:20.987016
 (13,48) | 16011636 | 74 | 2e9303e2ae57a1d9810ef9074b265f89 | 2013-09-18 22:37:20.987248
 (14,67) | 16011632 | 78 | 8275f216f17027f294c7a54a59bd15e1 | 2013-09-18 22:37:20.986985
(9 rows)


创建pageinspect extension , 用于查看page的lsn信息.

digoal=# create extension pageinspect;
CREATE EXTENSION
digoal=# select * from page_header(get_raw_page('test', 9));
    lsn     | checksum | flags | lower | upper | special | pagesize | version | prune_xid 
------------+----------+-------+-------+-------+---------+----------+---------+-----------
 0/4D6B4EE0 |        0 |     5 |   416 |  8120 |    8192 |     8192 |       4 |         0
(1 row)


lsn符合这条NOTICE:  XIDs 16004987 - 0, MultiXIDs 16 - 0, LSN 0/4D6265E0 (expires 0) 表示当页面的lsd大于这个值时, 这个page中的xid取值范围.
9号块的xmin范围, 符合以上xid-lsn对应的约束规则. (16011628 > 16004987 )

digoal=# select min(xmin::text::int8), max(xmin::text::int8) from test where ctid::text ~ '\(9,';
   min    |   max    
----------+----------
 16011628 | 16011628
(1 row)
src/include/access/transam.h
+ typedef struct XidLSNRange
+ {
+       XLogRecPtr      beginlsn;
+ 
+       /* XID range */
+       TransactionId minxid;   /* inclusive */
+       TransactionId maxxid;   /* exclusive */
+ 
+       /* Multi-XID range */
+       TransactionId minmxid;  /* inclusive */
+       TransactionId maxmxid;  /* exclusive */
+ 
+       /*
+        * Once oldest-xmin is > expirationXmin, all backends have observed that
+        * the global pageMatureLSN is > minlsn. At that point, no-one is going to
+        * look at the clog for XIDs older than minxid, so it can safely be
+        * truncated, and this range can be removed from the array.
+        */
+       TransactionId expirationXmin;
+ } XidLSNRange;



0号块的信息分析: 

digoal=# select * from page_header(get_raw_page('test', 0));
    lsn     | checksum | flags | lower | upper | special | pagesize | version | prune_xid 
------------+----------+-------+-------+-------+---------+----------+---------+-----------
 0/4D6B5480 |        0 |     5 |   480 |  1568 |    8192 |     8192 |       4 |         0
(1 row)


根据这个lsn信息, 这个页面中的xid取值范围应该是大于16004987, 所有小于这个值的xid都必须置为freezexid=2.

digoal=# select xmin from test where ctid::text ~ '\(0,' group by xmin order by xmin::text::int8;
   xmin   
----------
        2
  2842182
  2842234
  2842303
  2842309
  2842311
  2842313
  2842322
  2842326
  2842328
  2842330
  2842334
  2842338
  2842344
  2842348
  2842351
  2842352
  2842354
  2842356
  2842358
 10815213
 10815250
 10815286
 10815307
 10815318
 10815322
 10815324
 10815327
 10815328
 10815329
 10815335
 10815339
 10815341
 10815343
 10815348
 10815353
 10815355
(37 rows)


显然这个数据块的xmin范围违反了xid-lsn约束, 有一些小于minxid的xmin未置为freezexid. 这显然是个bug.
期待作者继续更新.
8号数据块也出现了类似问题 : 

digoal=# select ctid,xmin,* from test where ctid::text ~ '\(8,';
 ctid  |   xmin   | id |               info               |          crt_time          
-------+----------+----+----------------------------------+----------------------------
 (8,4) | 13004420 | 79 | 0101ac985e5e76760b3029006f042931 | 2013-09-18 22:36:22.654286
 (8,5) | 13004424 | 80 | 7dbb1d686f58b1e94aa7e427db548bf4 | 2013-09-18 22:36:22.654202
(2 rows)
digoal=# select * from page_header(get_raw_page('test', 8));
    lsn     | checksum | flags | lower | upper | special | pagesize | version | prune_xid 
------------+----------+-------+-------+-------+---------+----------+---------+-----------
 0/4D6B5810 |        0 |     1 |   460 |  7904 |    8192 |     8192 |       4 |         0
(1 row)


按照xid-lsn的约束原则, 这两条记录的xmin本该置为freezexid.

[参考]
1. http://www.postgresql.org/message-id/flat/521CCC1F.6040904@vmware.com#521CCC1F.6040904@vmware.com
2. http://blog.163.com/digoal@126/blog/static/16387704020138185042307/
3. http://www.postgresql.org/docs/devel/static/pageinspect.html
4. http://blog.163.com/digoal@126/blog/static/16387704020114273265960/
5. src/backend/access/transam/README

A basic assumption of a write AHEAD log is that log entries must reach stable
storage before the data-page changes they describe.  This ensures that
replaying the log to its end will bring us to a consistent state where there
are no partially-performed transactions.  To guarantee this, each data page
(either heap or index) is marked with the LSN (log sequence number --- in
practice, a WAL file location) of the latest XLOG record affecting the page.
Before the bufmgr can write out a dirty page, it must ensure that xlog has
been flushed to disk at least up to the page's LSN.  This low-level
interaction improves performance by not waiting for XLOG I/O until necessary.
The LSN check exists only in the shared-buffer manager, not in the local
buffer manager used for temp tables; hence operations on temp tables must not
be WAL-logged.


6. src/include/access/transam.h

+ typedef struct XidLSNRange
+ {
+       XLogRecPtr      beginlsn;
+ 
+       /* XID range */
+       TransactionId minxid;   /* inclusive */
+       TransactionId maxxid;   /* exclusive */
+ 
+       /* Multi-XID range */
+       TransactionId minmxid;  /* inclusive */
+       TransactionId maxmxid;  /* exclusive */
+ 
+       /*
+        * Once oldest-xmin is > expirationXmin, all backends have observed that
+        * the global pageMatureLSN is > minlsn. At that point, no-one is going to
+        * look at the clog for XIDs older than minxid, so it can safely be
+        * truncated, and this range can be removed from the array.
+        */
+       TransactionId expirationXmin;
+ } XidLSNRange;


