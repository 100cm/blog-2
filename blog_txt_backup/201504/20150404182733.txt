PostgreSQL research

PostgreSQL dirty read extension pg_dirtyread used to recovery stand alone tablespace

2015-04-04 18:27:33   查看原文>>

在某些场景中, 我们可能遇到一个问题, 即$PGDATA可能被误删除了, 但是用户自建表空间目录还在.
或者$PGDATA所在的文件系统损坏了, 但是用户自建的表空间还能正常读取.
那么在这种情况下, 我们能不能从表空间中获取有用的数据呢?
这里需要用到脏读工具pg_dirtyread.
接下来来模拟一下 : 
创建表空间, 以及测试数据.

[root@db-172-16-3-150 ~]# cd /data03
[root@db-172-16-3-150 data03]# mkdir pgtbs
[root@db-172-16-3-150 data03]# chown postgres:postgres pgtbs

[root@db-172-16-3-150 data03]# su - postgres
-bash: unalias: vi: not found
postgres@db-172-16-3-150-> psql
psql (9.4.1)
Type "help" for help.

postgres=# create tablespace tbs location '/data03/pgtbs';
CREATE TABLESPACE
postgres=# create database test;
ERROR:  database "test" already exists
postgres=# \c test
You are now connected to database "test" as user "postgres".
test=# \dt
        List of relations
 Schema | Name | Type  |  Owner   
--------+------+-------+----------
 public | test | table | postgres
(1 row)
test=# create table t1(id int, info text, crt_time timestamp) tablespace tbs;
CREATE TABLE
test=# insert into t1 select generate_series(1,10000),md5(random()::text),clock_timestamp();
INSERT 0 10000
test=# create table t2 (like t1);
CREATE TABLE
test=# insert into t2 select * from t1;
INSERT 0 10000


测试数据的校验值如下, 用于后面我们恢复后校验值是否一致.

test=# select sum(hashtext(t1.*::text)) from t1;
     sum      
--------------
 185323099056
(1 row)
test=# select sum(hashtext(t2.*::text)) from t2;
     sum      
--------------
 185323099056
(1 row)
test=# \q


关闭数据库

postgres@db-172-16-3-150-> pg_ctl stop -m fast
waiting for server to shut down.... done
server stopped


将$PGDATA目录重名, 模拟删除$PGDATA

postgres@db-172-16-3-150-> echo $PGDATA
/data02/pgdata/pg_root

postgres@db-172-16-3-150-> exit
logout
[root@db-172-16-3-150 pgdata]# cd /data02/pgdata/
[root@db-172-16-3-150 pgdata]# ll
total 4.0K
drwx------. 19 postgres postgres 4.0K Apr  4 17:28 pg_root
[root@db-172-16-3-150 pgdata]# mv pg_root pg_root_old



新建一个$PGDATA空目录, 用于初始化一个新的数据库集群.

[root@db-172-16-3-150 pgdata]# mkdir pg_root
[root@db-172-16-3-150 pgdata]# chown postgres:postgres pg_root
[root@db-172-16-3-150 pgdata]# chmod 700 pg_root

[root@db-172-16-3-150 pgdata]# su - postgres
-bash: unalias: vi: not found
postgres@db-172-16-3-150-> initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W
.....



修改一下新建的数据库集群的配置文件

postgres@db-172-16-3-150-> cd $PGDATA
postgres@db-172-16-3-150-> ll
total 108K
drwx------ 5 postgres postgres 4.0K Apr  4 17:30 base
drwx------ 2 postgres postgres 4.0K Apr  4 17:30 global
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_clog
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_dynshmem
-rw------- 1 postgres postgres 4.4K Apr  4 17:29 pg_hba.conf
-rw------- 1 postgres postgres 1.6K Apr  4 17:29 pg_ident.conf
drwx------ 4 postgres postgres 4.0K Apr  4 17:29 pg_logical
drwx------ 4 postgres postgres 4.0K Apr  4 17:29 pg_multixact
drwx------ 2 postgres postgres 4.0K Apr  4 17:30 pg_notify
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_replslot
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_serial
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_snapshots
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_stat
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_stat_tmp
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_subtrans
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_tblspc
drwx------ 2 postgres postgres 4.0K Apr  4 17:29 pg_twophase
-rw------- 1 postgres postgres    4 Apr  4 17:29 PG_VERSION
drwx------ 3 postgres postgres 4.0K Apr  4 17:29 pg_xlog
-rw------- 1 postgres postgres   88 Apr  4 17:29 postgresql.auto.conf
-rw------- 1 postgres postgres  21K Apr  4 17:29 postgresql.conf

postgres@db-172-16-3-150-> vi postgresql.conf
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;
port = 1921                             # (change requires restart)
max_connections = 40                  # (change requires restart)
superuser_reserved_connections = 13     # (change requires restart)
unix_socket_directories = '.'   # comma-separated list of directories
shared_buffers = 4096MB                 # min 128kB
maintenance_work_mem = 64MB             # min 1MB
dynamic_shared_memory_type = posix      # the default is the first option
synchronous_commit = off                # synchronization level;
checkpoint_segments = 32                # in logfile segments, min 1, 16MB each
log_destination = 'csvlog'              # Valid values are combinations of
logging_collector = on          # Enable capturing of stderr and csvlog
log_truncate_on_rotation = on           # If on, an existing log file with the
log_min_duration_statement = 1s # -1 is disabled, 0 logs all statements
log_checkpoints = on
log_connections = on
log_disconnections = on
log_error_verbosity = verbose           # terse, default, or verbose messages
log_lock_waits = on                     # log lock waits >= deadlock_timeout
log_timezone = 'PRC'
datestyle = 'iso, mdy'
timezone = 'PRC'
lc_messages = 'C'                       # locale for system error message
lc_monetary = 'C'                       # locale for monetary formatting
lc_numeric = 'C'                        # locale for number formatting
lc_time = 'C'                           # locale for time formatting
default_text_search_config = 'pg_catalog.english'
deadlock_timeout = 10ms
wal_sync_method='open_sync'



然后启动新的数据库集群, 为新的数据库集群创建表空间

pg_ctl start
[root@db-172-16-3-150 pgdata]# cd /data03/
[root@db-172-16-3-150 data03]# ll
total 32K
drwxr-xr-x. 2 root     root     4.0K Apr  3 09:07 iso
drwxr-xr-x. 2 root     root     4.0K Apr  2 10:39 kvmdisk
drwx------. 2 root     root      16K Feb 11 09:13 lost+found
drwxr-xr-x. 2 postgres postgres 4.0K Feb 13 14:56 pgdata
drwx------  3 postgres postgres 4.0K Apr  4 17:20 pgtbs
[root@db-172-16-3-150 data03]# mkdir pgtbs1
[root@db-172-16-3-150 data03]# chown postgres:postgres pgtbs1

postgres@db-172-16-3-150-> psql
psql (9.4.1)
Type "help" for help.

postgres=# create tablespace tbs location '/data03/pgtbs1';
CREATE TABLESPACE


创建两个新表, 注意表结构和需要恢复的表结构一致.

postgres=# create table rt1(id int, info text, crt_time timestamp) tablespace tbs;
CREATE TABLE
postgres=# create table rt2(id int, info text, crt_time timestamp) tablespace tbs;
CREATE TABLE


查看这两个表的数据文件路径.

postgres=# select * from pg_relation_filepath('rt1');
             pg_relation_filepath             
----------------------------------------------
 pg_tblspc/16384/PG_9.4_201409291/12944/16385
(1 row)

postgres=# select * from pg_relation_filepath('rt2');
             pg_relation_filepath             
----------------------------------------------
 pg_tblspc/16384/PG_9.4_201409291/12944/16391
(1 row)


退出数据库, 并关闭自动垃圾回收.

postgres=# \q
postgres@db-172-16-3-150-> cd $PGDATA
postgres@db-172-16-3-150-> vi postgresql.conf
autovacuum=off

postgres@db-172-16-3-150-> pg_ctl stop -m fast
waiting for server to shut down.... done
server stopped



来到需要恢复的表空间, 将数据文件, free space map文件拷贝到新集群对应的表空间目录下.

postgres@db-172-16-3-150-> cd /data03/pgtbs
postgres@db-172-16-3-150-> ll
total 4.0K
drwx------ 3 postgres postgres 4.0K Apr  4 17:22 PG_9.4_201409291
postgres@db-172-16-3-150-> cd PG_9.4_201409291/
postgres@db-172-16-3-150-> ll
total 4.0K
drwx------ 2 postgres postgres 4.0K Apr  4 17:23 94532
postgres@db-172-16-3-150-> cd 94532/
postgres@db-172-16-3-150-> ll
total 896K
-rw------- 1 postgres postgres 768K Apr  4 17:24 94554
-rw------- 1 postgres postgres  96K Apr  4 17:23 94554_fsm
-rw------- 1 postgres postgres    0 Apr  4 17:22 94557
-rw------- 1 postgres postgres  32K Apr  4 17:22 94559

postgres@db-172-16-3-150-> pwd
/data03/pgtbs/PG_9.4_201409291/94532
postgres@db-172-16-3-150-> cd /data03/pgtbs1/PG_9.4_201409291/
postgres@db-172-16-3-150-> ll
total 4.0K
drwx------ 2 postgres postgres 4.0K Apr  4 17:33 12944
postgres@db-172-16-3-150-> cd 12944/
postgres@db-172-16-3-150-> ll
total 64K
-rw------- 1 postgres postgres   0 Apr  4 17:33 16385
-rw------- 1 postgres postgres   0 Apr  4 17:33 16388
-rw------- 1 postgres postgres 32K Apr  4 17:33 16390
-rw------- 1 postgres postgres   0 Apr  4 17:33 16391
-rw------- 1 postgres postgres   0 Apr  4 17:33 16394
-rw------- 1 postgres postgres 32K Apr  4 17:33 16396


拷贝前需要删除新表对应的数据文件, 使用需要恢复的数据文件覆盖之.

postgres@db-172-16-3-150-> rm -f 16385
postgres@db-172-16-3-150-> cp /data03/pgtbs/PG_9.4_201409291/94532/94554* ./
postgres@db-172-16-3-150-> mv 94554 16385
postgres@db-172-16-3-150-> mv 94554_fsm 16385_fsm


接下来我们要用单用户启动数据库, 并且查询一下需要恢复的表.
如果没有报错, 说明结构正确.
因为我们不知道需要恢复的数据文件的表结构, 所以这种操作非常繁琐, 特别是在这个表空间下有很多表的情况, 我们可能需要尝试多次.

postgres@db-172-16-3-150-> postgres --help
postgres is the PostgreSQL server.

Usage:
  postgres [OPTION]...

Options:
  -B NBUFFERS        number of shared buffers
  -c NAME=VALUE      set run-time parameter
  -C NAME            print value of run-time parameter, then exit
  -d 1-5             debugging level
  -D DATADIR         database directory
  -e                 use European date input format (DMY)
  -F                 turn fsync off
  -h HOSTNAME        host name or IP address to listen on
  -i                 enable TCP/IP connections
  -k DIRECTORY       Unix-domain socket location
  -l                 enable SSL connections
  -N MAX-CONNECT     maximum number of allowed connections
  -o OPTIONS         pass "OPTIONS" to each server process (obsolete)
  -p PORT            port number to listen on
  -s                 show statistics after each query
  -S WORK-MEM        set amount of memory for sorts (in kB)
  -V, --version      output version information, then exit
  --NAME=VALUE       set run-time parameter
  --describe-config  describe configuration parameters, then exit
  -?, --help         show this help, then exit

Developer options:
  -f s|i|n|m|h       forbid use of some plan types
  -n                 do not reinitialize shared memory after abnormal exit
  -O                 allow system table structure changes
  -P                 disable system indexes
  -t pa|pl|ex        show timings after each query
  -T                 send SIGSTOP to all backend processes if one dies
  -W NUM             wait NUM seconds to allow attach from a debugger

Options for single-user mode:
  --single           selects single-user mode (must be first argument)
  DBNAME             database name (defaults to user name)
  -d 0-5             override debugging level
  -E                 echo statement before execution
  -j                 do not use newline as interactive query delimiter
  -r FILENAME        send stdout and stderr to given file

Options for bootstrapping mode:
  --boot             selects bootstrapping mode (must be first argument)
  DBNAME             database name (mandatory argument in bootstrapping mode)
  -r FILENAME        send stdout and stderr to given file
  -x NUM             internal use

Please read the documentation for the complete list of run-time
configuration settings and how to set them on the command line or in
the configuration file.

Report bugs to <pgsql-bugs@postgresql.org>.
postgres@db-172-16-3-150-> postgres --single postgres 

PostgreSQL stand-alone backend 9.4.1
backend> select * from rt1;
         1: id  (typeid = 23, len = 4, typmod = -1, byval = t)
         2: info        (typeid = 25, len = -1, typmod = -1, byval = f)
         3: crt_time    (typeid = 1114, len = 8, typmod = -1, byval = t)
        ----


退出单用户模式.
然后我们就可以启动数据库了.

postgres@db-172-16-3-150-> pg_ctl start
server starting
postgres@db-172-16-3-150-> LOG:  00000: redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".
LOCATION:  SysLogger_Start, syslogger.c:645

postgres@db-172-16-3-150-> psql
psql (9.4.1)
Type "help" for help.


直接查询这两张表是没有数据的, 因为MVCC, 这里涉及实际数据中行头部的xmin, xmax 信息, 以及当前数据库集群的pg_clog中的事务提交状态信息, 以及当前数据库集群控制文件的next xid信息等. 从而我们读不到数据是正常的.

postgres=# select count(*) from rt1;
 count 
-------
     0
(1 row)

postgres=# select count(*) from rt2;
 count 
-------
     0
(1 row)


接下来就是重点了, 既然数据文件已经覆盖了, 我们又因为pg_clog, xmin, xmax等导致数据无法读取, 那么怎么才能读出来呢?
要用到脏读工具pg_dirtyread.
克隆

postgres@db-172-16-3-150-> git clone https://github.com/omniti-labs/pgtreats


安装

postgres@db-172-16-3-150-> cd pgtreats/
postgres@db-172-16-3-150-> ll
total 48K
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 autonomous_logging_tool
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 branding
drwxrwxr-x 7 postgres postgres 4.0K Apr  4 17:41 contrib
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 curo
drwxrwxr-x 3 postgres postgres 4.0K Apr  4 17:41 db-tests
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 functions
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 pg_log
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 pitr_clone
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 quickstats
drwxrwxr-x 4 postgres postgres 4.0K Apr  4 17:41 Sniffer-Postgres
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 table_growth
drwxrwxr-x 7 postgres postgres 4.0K Apr  4 17:41 tools
postgres@db-172-16-3-150-> cd contrib/
postgres@db-172-16-3-150-> ll
total 20K
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 control
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 pg_dirtyread
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 pg_scoreboard
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 pg_stat_mem
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 scratch
postgres@db-172-16-3-150-> cd pg_dirtyread/
postgres@db-172-16-3-150-> ll
total 20K
-rw-rw-r-- 1 postgres postgres  154 Apr  4 17:41 Makefile
-rw-rw-r-- 1 postgres postgres   88 Apr  4 17:41 pg_dirtyread--1.0.sql
-rw-rw-r-- 1 postgres postgres 3.6K Apr  4 17:41 pg_dirtyread.c
-rw-rw-r-- 1 postgres postgres  152 Apr  4 17:41 pg_dirtyread.control
-rw-rw-r-- 1 postgres postgres  960 Apr  4 17:41 README.md

postgres@db-172-16-3-150-> exit
logout
[root@db-172-16-3-150 data03]# cd /home/postgres/pgtreats/
autonomous_logging_tool/ curo/                    .git/                    quickstats/              tools/
branding/                db-tests/                pg_log/                  Sniffer-Postgres/        
contrib/                 functions/               pitr_clone/              table_growth/            
[root@db-172-16-3-150 data03]# cd /home/postgres/pgtreats/contrib/
[root@db-172-16-3-150 contrib]# ll
total 20K
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 control
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 pg_dirtyread
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 pg_scoreboard
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 pg_stat_mem
drwxrwxr-x 2 postgres postgres 4.0K Apr  4 17:41 scratch


拷贝到postgresql源码的contrib目录下, 配置好pg_config路径后, 就可以编译安装了

[root@db-172-16-3-150 contrib]# cp -R pg_dirtyread /opt/soft_bak/postgresql-9.4.1/contrib/
[root@db-172-16-3-150 contrib]# cd /opt/soft_bak/postgresql-9.4.1/contrib/pg_dirtyread/
[root@db-172-16-3-150 pg_dirtyread]# export PATH=/opt/pgsql/bin:$PATH
[root@db-172-16-3-150 pg_dirtyread]# which pg_config
/opt/pgsql/bin/pg_config
[root@db-172-16-3-150 pg_dirtyread]# gmake clean
rm -f pg_dirtyread.so pg_dirtyread.o
[root@db-172-16-3-150 pg_dirtyread]# gmake
gcc -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -g -O2 -fpic -I. -I./ -I/opt/pgsql9.4.1/include/server -I/opt/pgsql9.4.1/include/internal -D_GNU_SOURCE -I/usr/include/libxml2   -c -o pg_dirtyread.o pg_dirtyread.c
gcc -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -g -O2 -fpic -L/opt/pgsql9.4.1/lib -Wl,--as-needed -Wl,-rpath,'/opt/pgsql9.4.1/lib',--enable-new-dtags  -shared -o pg_dirtyread.so pg_dirtyread.o
[root@db-172-16-3-150 pg_dirtyread]# gmake install
/bin/mkdir -p '/opt/pgsql9.4.1/share/extension'
/bin/mkdir -p '/opt/pgsql9.4.1/share/extension'
/bin/mkdir -p '/opt/pgsql9.4.1/lib'
/usr/bin/install -c -m 644 pg_dirtyread.control '/opt/pgsql9.4.1/share/extension/'
/usr/bin/install -c -m 644 pg_dirtyread--1.0.sql '/opt/pgsql9.4.1/share/extension/'
/usr/bin/install -c -m 755  pg_dirtyread.so '/opt/pgsql9.4.1/lib/'


安装好之后, 创建这个扩展.

[root@db-172-16-3-150 pg_dirtyread]# su - postgres
-bash: unalias: vi: not found
postgres@db-172-16-3-150-> psql
psql (9.4.1)
Type "help" for help.

postgres=# create extension pg_dirtyread;
CREATE EXTENSION


现在我们来使用脏读工具读取数据吧

postgres=# select * from pg_relation_filepath('rt1');
             pg_relation_filepath             
----------------------------------------------
 pg_tblspc/16384/PG_9.4_201409291/12944/16385
(1 row)

postgres=# select * from pg_relation_filepath('rt2');
             pg_relation_filepath             
----------------------------------------------
 pg_tblspc/16384/PG_9.4_201409291/12944/16391
(1 row)

postgres=# select count(*) from rt1;
 count 
-------
     0
(1 row)


已经读出数据了

postgres=# select count(*) from pg_dirtyread('rt1'::regclass) as t(id int, info text, crt_time timestamp);
 count 
-------
 10000
(1 row)


校验一下, 数据完全正确.

postgres=# select sum(hashtext(t.*::text)) from pg_dirtyread('rt1'::regclass) as t(id int, info text, crt_time timestamp);
     sum      
--------------
 185323099056
(1 row)

postgres=# select * from pg_dirtyread('rt1'::regclass) as t(id int, info text, crt_time timestamp);
  id   |               info               |          crt_time          
-------+----------------------------------+----------------------------
     1 | 53831c34cba80a1023252e759d8cb3f4 | 2015-04-04 17:23:15.519064
     2 | 0b504a5d937e058cdcf0f18f2b260c69 | 2015-04-04 17:23:15.519222
     3 | 6cd58d72286d8642289fb9dee979a47e | 2015-04-04 17:23:15.519231
     4 | fdad49c2f5b639f6eb5d58477dbe6570 | 2015-04-04 17:23:15.519237
     5 | ec4218b25163ec37e55fd5b2179ae8cc | 2015-04-04 17:23:15.519242
     6 | cdd82952f7b6cd5bbbbc5abb5ba5d8f2 | 2015-04-04 17:23:15.519247
     7 | eef311aad13be63ba5b5438c83cb85be | 2015-04-04 17:23:15.519252
     8 | a7493052d3cc93b4fd296a27008fa908 | 2015-04-04 17:23:15.519257
     9 | 311ada6d383bc37fb618c677b818e3d9 | 2015-04-04 17:23:15.519261
    10 | 8f49cf44506464ce404e38b10b5d0145 | 2015-04-04 17:23:15.519266
    11 | 109191b085d7576e83be7ed9fd0dd1bd | 2015-04-04 17:23:15.519271
    12 | 1024828c11a43351311978fdf3092018 | 2015-04-04 17:23:15.519276
    ..................



将这个数据恢复到另一张表.

postgres=# insert into rt2 select * from pg_dirtyread('rt1'::regclass) as t(id int, info text, crt_time timestamp);
INSERT 0 10000
postgres=# select * from rt2;
  id   |               info               |          crt_time          
-------+----------------------------------+----------------------------
     1 | 53831c34cba80a1023252e759d8cb3f4 | 2015-04-04 17:23:15.519064
     2 | 0b504a5d937e058cdcf0f18f2b260c69 | 2015-04-04 17:23:15.519222
     3 | 6cd58d72286d8642289fb9dee979a47e | 2015-04-04 17:23:15.519231
     4 | fdad49c2f5b639f6eb5d58477dbe6570 | 2015-04-04 17:23:15.519237
     5 | ec4218b25163ec37e55fd5b2179ae8cc | 2015-04-04 17:23:15.519242
     6 | cdd82952f7b6cd5bbbbc5abb5ba5d8f2 | 2015-04-04 17:23:15.519247
     7 | eef311aad13be63ba5b5438c83cb85be | 2015-04-04 17:23:15.519252
     8 | a7493052d3cc93b4fd296a27008fa908 | 2015-04-04 17:23:15.519257
     9 | 311ada6d383bc37fb618c677b818e3d9 | 2015-04-04 17:23:15.519261
    10 | 8f49cf44506464ce404e38b10b5d0145 | 2015-04-04 17:23:15.519266
..................................



好了, 问题又来了, 既然是脏读, 也就是说, 只要记录没有被垃圾回收掉, 就可以被读出来.
所以, 如果需要恢复的表里面有脏数据怎么办呢? 是不是也会一起读出来.
来实验一下.
关闭当前数据库, 回退到以前的数据库.

postgres=# \q
postgres@db-172-16-3-150-> pg_ctl stop -m fast
waiting for server to shut down.... done
server stopped

postgres@db-172-16-3-150-> exit
logout
[root@db-172-16-3-150 ~]# cd /data02/
[root@db-172-16-3-150 data02]# ll
total 20K
drwx------. 2 root     root      16K Feb 11 09:13 lost+found
drwxr-xr-x. 4 postgres postgres 4.0K Apr  4 17:29 pgdata
[root@db-172-16-3-150 data02]# cd pgdata/
[root@db-172-16-3-150 pgdata]# ll
total 8.0K
drwx------  19 postgres postgres 4.0K Apr  4 17:52 pg_root
drwx------. 19 postgres postgres 4.0K Apr  4 17:28 pg_root_old
[root@db-172-16-3-150 pgdata]# mv pg_root pg_rootnew
[root@db-172-16-3-150 pgdata]# mv pg_root_old pg_root
[root@db-172-16-3-150 pgdata]# su - postgres
-bash: unalias: vi: not found
postgres@db-172-16-3-150-> pg_ctl start
server starting
postgres@db-172-16-3-150-> LOG:  00000: redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".
LOCATION:  SysLogger_Start, syslogger.c:645



接下来我们要对t1, t2进行两笔更新操作.

postgres@db-172-16-3-150-> psql
psql (9.4.1)
Type "help" for help.

postgres=# \dt
        List of relations
 Schema | Name | Type  |  Owner   
--------+------+-------+----------
 public | t    | table | postgres
 public | tbl  | table | postgres
 public | test | table | postgres
(3 rows)

postgres=# \c test
You are now connected to database "test" as user "postgres".
test=# \dt
        List of relations
 Schema | Name | Type  |  Owner   
--------+------+-------+----------
 public | t1   | table | postgres
 public | t2   | table | postgres
 public | test | table | postgres
(3 rows)


更新

test=# update t1 set info='new' where id=1;
UPDATE 1
test=# update t2 set info='new' where id=2;
UPDATE 1


关闭数据库

test=# \q
postgres@db-172-16-3-150-> pg_ctl stop -m fast
waiting for server to shut down.... done
server stopped



接下来又是重复恢复的过程.

postgres@db-172-16-3-150-> exit
logout
[root@db-172-16-3-150 pgdata]# ll
total 8.0K
drwx------. 19 postgres postgres 4.0K Apr  4 17:54 pg_root
drwx------  19 postgres postgres 4.0K Apr  4 17:52 pg_rootnew
[root@db-172-16-3-150 pgdata]# mv pg_root pg_rootold
[root@db-172-16-3-150 pgdata]# mv pg_rootnew pg_root

[root@db-172-16-3-150 pgdata]# su - postgres
-bash: unalias: vi: not found
postgres@db-172-16-3-150-> cd /data03/
iso/        kvmdisk/    lost+found/ pgdata/     pgtbs/      pgtbs1/     
postgres@db-172-16-3-150-> cd /data03/pgtbs1/PG_9.4_201409291/12944/

postgres@db-172-16-3-150-> rm -f 16385*
postgres@db-172-16-3-150-> cp /data03/pgtbs/PG_9.4_201409291/94532/94554* ./
postgres@db-172-16-3-150-> mv 94554 16385
postgres@db-172-16-3-150-> mv 94554_fsm 16385_fsm

postgres@db-172-16-3-150-> pg_ctl start
server starting
postgres@db-172-16-3-150-> LOG:  00000: redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".
LOCATION:  SysLogger_Start, syslogger.c:645

postgres@db-172-16-3-150-> psql
psql (9.4.1)
Type "help" for help.

postgres=# select count(*) from rt1;
 count 
-------
     0
(1 row)


但是请注意, 恢复数据时得到了意想不到的结果. 我们把更新前的数据也恢复了.

postgres=# select count(*) from pg_dirtyread('rt1'::regclass) as t(id int, info text, crt_time timestamp);
 count 
-------
 10001
(1 row)


这就是脏读恢复的弊端. 因为PostgreSQL的垃圾回收是有阈值的, 并不是产生一条垃圾马上就回收掉, 所以使用pg_dirtyread恢复表空间时, 恢复出来的数据可能是不一致的, 就如本例.

postgres=# select * from pg_dirtyread('rt1'::regclass) as t(id int, info text, crt_time timestamp) where t.id=1;
 id |               info               |          crt_time          
----+----------------------------------+----------------------------
  1 | 53831c34cba80a1023252e759d8cb3f4 | 2015-04-04 17:23:15.519064
  1 | new                              | 2015-04-04 17:23:15.519064
(2 rows)


这种情况我们可以通过人为观察来排除数据. 

或者我们可以通过pageinspect插件读取xmin, t_infomask等数据来区分TUPLE是否为脏数据.
这里不再细说. 例如 : 

postgres=# create extension pageinspect;
CREATE EXTENSION
postgres=# select * from heap_page_items(get_raw_page('rt1',1))
postgres-# ;
 lp  | lp_off | lp_flags | lp_len |  t_xmin  | t_xmax | t_field3 | t_ctid  | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid 
-----+--------+----------+--------+----------+--------+----------+---------+-------------+------------+--------+--------+-------
   1 |  32696 |        1 |     72 | 98858591 |      0 |        0 | (1,1)   |           3 |       2306 |     24 |        |      
   2 |  32624 |        1 |     72 | 98858591 |      0 |        0 | (1,2)   |           3 |       2306 |     24 |        |      
   3 |  32552 |        1 |     72 | 98858591 |      0 |        0 | (1,3)   |           3 |       2306 |     24 |        |      


t_infomask的含义请参考源码htup_details.h详解.

/*
 * information stored in t_infomask:
 */
#define HEAP_HASNULL                    0x0001  /* has null attribute(s) */
#define HEAP_HASVARWIDTH                0x0002  /* has variable-width attribute(s) */
#define HEAP_HASEXTERNAL                0x0004  /* has external stored attribute(s) */
#define HEAP_HASOID                             0x0008  /* has an object-id field */
#define HEAP_XMAX_KEYSHR_LOCK   0x0010  /* xmax is a key-shared locker */
#define HEAP_COMBOCID                   0x0020  /* t_cid is a combo cid */
#define HEAP_XMAX_EXCL_LOCK             0x0040  /* xmax is exclusive locker */
#define HEAP_XMAX_LOCK_ONLY             0x0080  /* xmax, if valid, is only a locker */

 /* xmax is a shared locker */
#define HEAP_XMAX_SHR_LOCK      (HEAP_XMAX_EXCL_LOCK | HEAP_XMAX_KEYSHR_LOCK)

#define HEAP_LOCK_MASK  (HEAP_XMAX_SHR_LOCK | HEAP_XMAX_EXCL_LOCK | \
                                                 HEAP_XMAX_KEYSHR_LOCK)
#define HEAP_XMIN_COMMITTED             0x0100  /* t_xmin committed */
#define HEAP_XMIN_INVALID               0x0200  /* t_xmin invalid/aborted */
#define HEAP_XMIN_FROZEN                (HEAP_XMIN_COMMITTED|HEAP_XMIN_INVALID)
#define HEAP_XMAX_COMMITTED             0x0400  /* t_xmax committed */
#define HEAP_XMAX_INVALID               0x0800  /* t_xmax invalid/aborted */
#define HEAP_XMAX_IS_MULTI              0x1000  /* t_xmax is a MultiXactId */
#define HEAP_UPDATED                    0x2000  /* this is UPDATEd version of row */
#define HEAP_MOVED_OFF                  0x4000  /* moved to another place by pre-9.0
                                                                                 * VACUUM FULL; kept for binary
                                                                                 * upgrade support */
#define HEAP_MOVED_IN                   0x8000  /* moved from another place by pre-9.0
                                                                                 * VACUUM FULL; kept for binary
                                                                                 * upgrade support */
#define HEAP_MOVED (HEAP_MOVED_OFF | HEAP_MOVED_IN)

#define HEAP_XACT_MASK                  0xFFF0  /* visibility-related bits */




附上脏读源码如下

#include "postgres.h"
#include "funcapi.h"
#include "utils/tqual.h"
#include "utils/rel.h"
#include "catalog/pg_type.h"
#include "access/tupconvert.h"

typedef struct
{
    Relation            rel;
    HeapScanDesc        scan;
    TupleDesc           reltupdesc;
    TupleConversionMap  *map;
} pg_dirtyread_ctx;

PG_MODULE_MAGIC;

PG_FUNCTION_INFO_V1(pg_dirtyread);
Datum pg_dirtyread(PG_FUNCTION_ARGS);

Datum
pg_dirtyread(PG_FUNCTION_ARGS)
{
    FuncCallContext     *funcctx;
    MemoryContext       oldcontext;
    pg_dirtyread_ctx    *usr_ctx;
    Oid                 relid;
    HeapTuple           tuplein, tupleout;
    TupleDesc           tupdesc;

    if (SRF_IS_FIRSTCALL())
    {
        relid = PG_GETARG_OID(0);

        if (OidIsValid(relid))
        {
            funcctx = SRF_FIRSTCALL_INIT();
            oldcontext = MemoryContextSwitchTo(funcctx->multi_call_memory_ctx);
            usr_ctx = (pg_dirtyread_ctx *) palloc(sizeof(pg_dirtyread_ctx));
            usr_ctx->rel = heap_open(relid, AccessShareLock);
            usr_ctx->reltupdesc = RelationGetDescr(usr_ctx->rel);
            get_call_result_type(fcinfo, NULL, &tupdesc);
            funcctx->tuple_desc = BlessTupleDesc(tupdesc);
            usr_ctx->map = convert_tuples_by_position(usr_ctx->reltupdesc, funcctx->tuple_desc, "Error converting tuple descriptors!");
            usr_ctx->scan = heap_beginscan(usr_ctx->rel, SnapshotAny, 0, NULL);
            funcctx->user_fctx = (void *) usr_ctx;
            MemoryContextSwitchTo(oldcontext);
        }
    }

    funcctx = SRF_PERCALL_SETUP();
    usr_ctx = (pg_dirtyread_ctx *) funcctx->user_fctx;

    if ((tuplein = heap_getnext(usr_ctx->scan, ForwardScanDirection)) != NULL)
    {
        tupleout = do_convert_tuple(tuplein, usr_ctx->map);
        SRF_RETURN_NEXT(funcctx, HeapTupleGetDatum(tupleout));
    }
    else
    {
        heap_endscan(usr_ctx->scan);
        heap_close(usr_ctx->rel, AccessShareLock);
        SRF_RETURN_DONE(funcctx);
    }
}



最后需要注意的是, 如果你的数据中有一些变长自动超出TOAST阈值, 可能会有一些存在TOAST里面, 请同时恢复TOAST数据, 否则可能导致数据缺失.

[参考]
1. https://raw.githubusercontent.com/omniti-labs/pgtreats/master/contrib/pg_dirtyread/pg_dirtyread.c
2. http://www.depesz.com/2012/04/04/lets-talk-dirty/
3. http://dba.stackexchange.com/questions/58704/how-do-i-access-a-old-saved-tablespace-after-reinstalling-postgres

Flag Counter
