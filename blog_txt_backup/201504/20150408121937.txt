PostgreSQL research

use systemtap analyze pgpool-II performance, which functions use the most time

2015-04-08 12:19:37   查看原文>>

为了找到pgpool-II慢在什么地方, 这里用到stap进行跟踪.
pgpool-II默认开启了debug, 所以直接编译即可, 不需要修改Makefile

[root@db-172-16-3-150 pgpool-II-3.4.1]# less Makefile
默认开启了debug, 如下
CFLAGS = -g -O2 -Wall -Wmissing-prototypes -Wmissing-declarations

# man gcc
   Options for Debugging Your Program or GCC
       GCC has various special options that are used for debugging either your program or GCC:

       -g  Produce debugging information in the operating system’s native format (stabs, COFF, XCOFF, or DWARF 2).
           GDB can work with this debugging information.

           On most systems that use stabs format, -g enables use of extra debugging information that only GDB can use;
           this extra information makes debugging work better in GDB but will probably make other debuggers crash or
           refuse to read the program.  If you want to control for certain whether to generate the extra information,
           use -gstabs+, -gstabs, -gxcoff+, -gxcoff, or -gvms (see below).

           GCC allows you to use -g with -O.  The shortcuts taken by optimized code may occasionally produce
           surprising results: some variables you declared may not exist at all; flow of control may briefly move
           where you did not expect it; some statements may not be executed because they compute constant results or
           their values were already at hand; some statements may execute in different places because they were moved
           out of loops.

           Nevertheless it proves possible to debug optimized output.  This makes it reasonable to use the optimizer
           for programs that might have bugs.

           The following options are useful when GCC is generated with the capability for more than one debugging
           format.


测试用到3台服务器, 
1. db
8核 Intel(R) Xeon(R) CPU           E5405  @ 2.00GHz
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall lm constant_tsc pni monitor ds_cpl vmx tm2 cx16 xtpr lahf_lm

2. pgbench
8核 Intel(R) Xeon(R) CPU           E5405  @ 2.00GHz
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall lm constant_tsc pni monitor ds_cpl vmx tm2 cx16 xtpr lahf_lm

3. pgpool
8核 Intel(R) Xeon(R) CPU           E5504  @ 2.00GHz
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt
lahf_lm dts tpr_shadow vnmi flexpriority ept vpid

安装pgpool-II

[root@db-172-16-3-150 src]# cd /opt/soft_bak/
[root@db-172-16-3-150 soft_bak]# wget http://www.pgpool.net/download.php?f=pgpool-II-3.4.1.tar.gz

[root@db-172-16-3-150 soft_bak]# tar -zxvf pgpool-II-3.4.1.tar.gz
[root@db-172-16-3-150 soft_bak]# cd pgpool-II-3.4.1

[root@db-172-16-3-150 pgpool-II-3.4.1]# ./configure --prefix=/opt/pgpool3.4.1 --with-pgsql=/opt/pgsql
[root@db-172-16-3-150 pgpool-II-3.4.1]# gmake && gmake install
[root@db-172-16-3-150 pgpool-II-3.4.1]# vi /etc/ld.so.conf
/opt/pgpool3.4.1/lib

[root@db-172-16-3-150 pgpool-II-3.4.1]# ldconfig
[root@db-172-16-3-150 pgpool-II-3.4.1]# ldconfig -p|grep pgpool
        libpcp.so.0 (libc6,x86-64) => /opt/pgpool3.4.1/lib/libpcp.so.0
        libpcp.so (libc6,x86-64) => /opt/pgpool3.4.1/lib/libpcp.so

[root@db-172-16-3-150 pgpool-II-3.4.1]# vi /etc/profile
export PATH=/opt/pgpool3.4.1/bin:$PATH



配置文件样本如下 

[root@db-172-16-3-150 pgpool-II-3.4.1]# cd src/sample/
[root@db-172-16-3-150 sample]# ll
total 176K
-rw-rw-r-- 1 postgres postgres 2.0K Feb  5 18:28 dist_def_pgbench.sql
-rw-rw-r-- 1 postgres postgres  858 Feb  5 18:28 pcp.conf.sample
-rw-rw-r-- 1 postgres postgres  33K Feb  5 18:33 pgpool.conf.sample
-rw-rw-r-- 1 postgres postgres  33K Feb  5 18:33 pgpool.conf.sample-master-slave
-rw-rw-r-- 1 postgres postgres  33K Feb  5 18:33 pgpool.conf.sample-replication
-rw-rw-r-- 1 postgres postgres  33K Feb  5 18:33 pgpool.conf.sample-stream
-rw-rw-r-- 1 postgres postgres   71 Feb  5 18:28 pgpool.pam
-rw-rw-r-- 1 postgres postgres  695 Feb  5 18:28 pgpool_recovery
-rw-rw-r-- 1 postgres postgres  656 Feb  5 18:28 pgpool_recovery_pitr
-rw-rw-r-- 1 postgres postgres  239 Feb  5 18:28 pgpool_remote_start
-rw-rw-r-- 1 postgres postgres 3.2K Feb  5 18:28 pool_hba.conf.sample
-rw-rw-r-- 1 postgres postgres  420 Feb  5 18:28 replicate_def_pgbench.sql



pgpool-II启动命令, 需要配置3个配置文件.


[root@db-172-16-3-150 sample]# pgpool --help
pgpool-II version 3.4.1 (tataraboshi),
  A generic connection pool/replication/load balance server for PostgreSQL

Usage:
  pgpool [ -c] [ -f CONFIG_FILE ] [ -F PCP_CONFIG_FILE ] [ -a HBA_CONFIG_FILE ]
         [ -n ] [ -D ] [ -d ]
  pgpool [ -f CONFIG_FILE ] [ -F PCP_CONFIG_FILE ] [ -a HBA_CONFIG_FILE ]
         [ -m SHUTDOWN-MODE ] stop
  pgpool [ -f CONFIG_FILE ] [ -F PCP_CONFIG_FILE ] [ -a HBA_CONFIG_FILE ] reload

Common options:
  -a, --hba-file=HBA_CONFIG_FILE
                      Sets the path to the pool_hba.conf configuration file
                      (default: /opt/pgpool3.4.1/etc/pool_hba.conf)
  -f, --config-file=CONFIG_FILE
                      Sets the path to the pgpool.conf configuration file
                      (default: /opt/pgpool3.4.1/etc/pgpool.conf)
  -F, --pcp-file=PCP_CONFIG_FILE
                      Sets the path to the pcp.conf configuration file
                      (default: /opt/pgpool3.4.1/etc/pcp.conf)
  -h, --help          Prints this help

Start options:
  -C, --clear-oidmaps Clears query cache oidmaps when memqcache_method is memcached
                      (If shmem, discards whenever pgpool starts.)
  -n, --dont-detach   Don't run in daemon mode, does not detach control tty
  -x, --debug-assertions   Turns on various assertion checks, This is a debugging aid
  -D, --discard-status Discard pgpool_status file and do not restore previous status
  -d, --debug         Debug mode

Stop options:
  -m, --mode=SHUTDOWN-MODE
                      Can be "smart", "fast", or "immediate"

Shutdown modes are:
  smart       quit after all clients have disconnected
  fast        quit directly, with proper shutdown
  immediate   the same mode as fast



将配置文件样本拷贝到对应位置.

[root@db-172-16-3-150 sample]# pwd
/opt/soft_bak/pgpool-II-3.4.1/src/sample
[root@db-172-16-3-150 sample]# mkdir /etc/pgpool
[root@db-172-16-3-150 sample]# cp pcp.conf.sample /etc/pgpool/pcp.conf
[root@db-172-16-3-150 sample]# cp pgpool.conf.sample /etc/pgpool/pgpool.conf
[root@db-172-16-3-150 sample]# cp pool_hba.conf.sample /etc/pgpool/pool_hba.conf
[root@db-172-16-3-150 sample]# chown -R postgres:postgres /etc/pgpool



修改3个配置文件, 为了方便测试, 我们这里使用trust认证.

[root@db-172-16-3-150 pgpool]# which pg_md5
/opt/pgpool3.4.1/bin/pg_md5
[root@db-172-16-3-150 pgpool]# pg_md5 -p
password: 输入密码,如digoal
ebe067295ca3f3b8040d0f4d955d2d72



[root@db-172-16-3-150 pgpool]# cd /etc/pgpool/
[root@db-172-16-3-150 pgpool]# vi pcp.conf 
postgres:ebe067295ca3f3b8040d0f4d955d2d72



[root@db-172-16-3-150 pgpool]# vi pool_hba.conf 
# "local" is for Unix domain socket connections only
local   all         all                               trust
# IPv4 local connections:
host    all         all         127.0.0.1/32          trust
host    all         all         ::1/128               trust
host all all 0.0.0.0/0 trust



我们这里只用连接池模式, 不使用其他任何附加功能.

[root@db-172-16-3-150 pgpool]# vi pgpool.conf 
# ----------------------------
# pgPool-II configuration file
# ----------------------------

# - pgpool Connection Settings -

listen_addresses = '0.0.0.0'
                                   # Host name or IP address to listen on:
                                   # '*' for all, '' for no TCP/IP connections
                                   # (change requires restart)
port = 9999
                                   # Port number
                                   # (change requires restart)
socket_dir = '/tmp'
                                   # Unix domain socket path
                                   # The Debian package defaults to
                                   # /var/run/postgresql
                                   # (change requires restart)
listen_backlog_multiplier = 2
                                   # Set the backlog parameter of listen(2) to
                                                                   # num_init_children * listen_backlog_multiplier.
                                   # (change requires restart)

# - pgpool Communication Manager Connection Settings -

pcp_listen_addresses = '*'
                                   # Host name or IP address for pcp process to listen on:
                                   # '*' for all, '' for no TCP/IP connections
                                   # (change requires restart)
pcp_port = 9898
                                   # Port number for pcp
                                   # (change requires restart)
pcp_socket_dir = '/tmp'
                                   # Unix domain socket path for pcp
                                   # The Debian package defaults to
                                   # /var/run/postgresql
                                   # (change requires restart)

# - Backend Connection Settings -

backend_hostname0 = '172.16.3.176'
                                   # Host name or IP address to connect to for backend 0
backend_port0 = 1921
                                   # Port number for backend 0
backend_weight0 = 1
                                   # Weight for backend 0 (only in load balancing mode)
backend_data_directory0 = '/data02/pgdata/pg_root'
                                   # Data directory for backend 0
backend_flag0 = 'ALLOW_TO_FAILOVER'
                                   # Controls various backend behavior
                                   # ALLOW_TO_FAILOVER or DISALLOW_TO_FAILOVER


# - Authentication -

enable_pool_hba = off
                                   # Use pool_hba.conf for client authentication
pool_passwd = 'pool_passwd'
                                   # File name of pool_passwd for md5 authentication.
                                   # "" disables pool_passwd.
                                   # (change requires restart)
authentication_timeout = 60
                                   # Delay in seconds to complete client authentication
                                   # 0 means no timeout.

# - SSL Connections -

ssl = off
                                   # Enable SSL support
                                   # (change requires restart)
#ssl_key = './server.key'
                                   # Path to the SSL private key file
                                   # (change requires restart)
#ssl_cert = './server.cert'
                                   # Path to the SSL public certificate file
                                   # (change requires restart)
#ssl_ca_cert = ''
                                   # Path to a single PEM format file
                                   # containing CA root certificate(s)
                                   # (change requires restart)
#ssl_ca_cert_dir = ''
                                   # Directory containing CA root certificate(s)
                                   # (change requires restart)


#------------------------------------------------------------------------------
# POOLS
#------------------------------------------------------------------------------

# - Pool size -

num_init_children = 32
                                   # Number of pools
                                   # (change requires restart)
max_pool = 4
                                   # Number of connections per pool
                                   # (change requires restart)

# - Life time -

child_life_time = 300
                                   # Pool exits after being idle for this many seconds
child_max_connections = 0
                                   # Pool exits after receiving that many connections
                                   # 0 means no exit
connection_life_time = 0
                                   # Connection to backend closes after being idle for this many seconds
                                   # 0 means no close
client_idle_limit = 0
                                   # Client is disconnected after being idle for that many seconds
                                   # (even inside an explicit transactions!)
                                   # 0 means no disconnection


#------------------------------------------------------------------------------
# LOGS
#------------------------------------------------------------------------------

# - Where to log -

log_destination = 'syslog'
                                   # Where to log
                                   # Valid values are combinations of stderr,
                                   # and syslog. Default to stderr.



#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------

pid_file_name = '/var/run/pgpool/pgpool.pid'
                                   # PID file name
                                   # (change requires restart)
logdir = '/var/log/pgpool'
                                   # Directory of pgPool status file
                                   # (change requires restart)


#------------------------------------------------------------------------------
# CONNECTION POOLING
#------------------------------------------------------------------------------

connection_cache = on
                                   # Activate connection pools
                                   # (change requires restart)

                                   # Semicolon separated list of queries
                                   # to be issued at the end of a session
                                   # The default is for 8.3 and later
reset_query_list = 'ABORT; DISCARD ALL'
                                   # The following one is for 8.2 and before
#reset_query_list = 'ABORT; RESET ALL; SET SESSION AUTHORIZATION DEFAULT'


#------------------------------------------------------------------------------
# REPLICATION MODE
#------------------------------------------------------------------------------

replication_mode = off
                                   # Activate replication mode
                                   # (change requires restart)



#------------------------------------------------------------------------------
# LOAD BALANCING MODE
#------------------------------------------------------------------------------

load_balance_mode = off
                                   # Activate load balancing mode


#------------------------------------------------------------------------------
# MASTER/SLAVE MODE
#------------------------------------------------------------------------------

master_slave_mode = off


#------------------------------------------------------------------------------
# HEALTH CHECK
#------------------------------------------------------------------------------

health_check_period = 0
                                   # Health check period
                                   # Disabled (0) by default


#------------------------------------------------------------------------------
# ONLINE RECOVERY
#------------------------------------------------------------------------------

...


#------------------------------------------------------------------------------
# WATCHDOG
#------------------------------------------------------------------------------

# - Enabling -

use_watchdog = off
                                    # Activates watchdog
...


#------------------------------------------------------------------------------
# OTHERS
#------------------------------------------------------------------------------
...

#------------------------------------------------------------------------------
# IN MEMORY QUERY MEMORY CACHE
#------------------------------------------------------------------------------
...



创建日志目录和run pid目录.

[root@db-172-16-3-150 pgpool]# mkdir /var/log/pgpool
[root@db-172-16-3-150 pgpool]# mkdir /var/run/pgpool



启动pgpool

[root@db-172-16-3-150 pgpool]# pgpool -a /etc/pgpool/pool_hba.conf -f /etc/pgpool/pgpool.conf -F /etc/pgpool/pcp.conf 

[root@db-172-16-3-150 pgpool]# tail -f -n 10 /var/log/messages
Apr  8 08:40:51 db-172-16-3-150 pgpool[1780]: [1-1] 2015-04-08 08:40:51: pid 1780: LOG:  Backend status file /var/log/pgpool/pgpool_status does not exist
Apr  8 08:40:51 db-172-16-3-150 pgpool[1780]: [1-2] 2015-04-08 08:40:51: pid 1780: LOCATION:  pgpool_main.c:2755
Apr  8 08:40:51 db-172-16-3-150 pgpool[1780]: [2-1] 2015-04-08 08:40:51: pid 1780: LOG:  Setting up socket for 0.0.0.0:9999
Apr  8 08:40:51 db-172-16-3-150 pgpool[1780]: [2-2] 2015-04-08 08:40:51: pid 1780: LOCATION:  pgpool_main.c:797
Apr  8 08:40:51 db-172-16-3-150 pgpool[1780]: [3-1] 2015-04-08 08:40:51: pid 1780: LOG:  pgpool-II successfully started. version 3.4.1 (tataraboshi)
Apr  8 08:40:51 db-172-16-3-150 pgpool[1780]: [3-2] 2015-04-08 08:40:51: pid 1780: LOCATION:  pgpool_main.c:330



测试是否可以正常连接

postgres@db-172-16-3-150-> psql -h 127.0.0.1 -p 9999 -U postgres postgres
psql (9.4.1)
Type "help" for help.
postgres=# \q



准备用于压力测试的脚本, 因为我们测的是pgpool-II, 而不是数据库, 所以使用最简单的查询.

postgres@db-172-16-3-174-> vi test.sql
select 1;



在数据库本地, 直接连接数据库测试, 结果如下 : 

postgres@176-> pgbench -M prepared -n -r -f ./test.sql -h 127.0.0.1 -p 1921 -U postgres -c 16 -j 8 -T 120 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 120 s
number of transactions actually processed: 13798268
tps = 114984.315254 (including connections establishing)
tps = 114995.257173 (excluding connections establishing)
statement latencies in milliseconds:
        0.137798        select 1;


在测试机, 直接连接数据库测试, 结果如下 : 

postgres@db-172-16-3-174-> pgbench -M prepared -n -r -f ./test.sql -h 172.16.3.176 -p 1921 -U postgres -c 16 -j 8 -T 120 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 120 s
number of transactions actually processed: 7534770
tps = 62788.712417 (including connections establishing)
tps = 62794.058850 (excluding connections establishing)
statement latencies in milliseconds:
        0.252501        select 1;


在测试机, 连接pgpool-II测试, 结果如下 : 

postgres@db-172-16-3-174-> pgbench -M prepared -n -r -f ./test.sql -h 172.16.3.150 -p 9999 -U postgres -c 16 -j 8 -T 120 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 120 s
number of transactions actually processed: 2065233
tps = 17209.981713 (including connections establishing)
tps = 17211.768999 (excluding connections establishing)
statement latencies in milliseconds:
        0.765831        select 1;


在pgpool-II机器本地, 直接连接数据库测试, 结果如下 : 

postgres@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -h 172.16.3.176 -p 1921 -U postgres -c 16 -j 8 -T 120 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 120 s
number of transactions actually processed: 8632236
latency average: 0.222 ms
tps = 71934.282729 (including connections establishing)
tps = 71943.727533 (excluding connections establishing)
statement latencies in milliseconds:
        0.220962        select 1;



在pgpool-II机器本地, 直接连接pgpool-II测试, 结果如下 : 

postgres@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -h 127.0.0.1 -p 9999 -U postgres -c 16 -j 8 -T 120 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 120 s
number of transactions actually processed: 2033971
latency average: 0.944 ms
tps = 16949.161299 (including connections establishing)
tps = 16951.540647 (excluding connections establishing)
statement latencies in milliseconds:
        0.771560        select 1;



从测试数据来看, pgpool-II 3.4.1版本的性能损耗依旧.
下面是一stap来进行跟踪.
安装systemtap

[root@db-172-16-3-150 src]# uname -r
2.6.32-504.el6.x86_64
yum install -y kernel-devel-2.6.32-504.el6.x86_64 systemtap


编写跟踪脚本

# vi cat trc.stp 
global f_start[999999],f_stop[999999]

probe process("/opt/pgpool3.4.1/bin/pgpool").function("*@/opt/soft_bak/pgpool-II-3.4.1/src/*").call { 
  f_start[execname(), pid(), tid(), cpu()] = gettimeofday_ns()
}

probe process("/opt/pgpool3.4.1/bin/pgpool").function("*@/opt/soft_bak/pgpool-II-3.4.1/src/*").return { 
  t=gettimeofday_ns()
  a=execname()
  b=cpu()
  c=pid()
  d=pp()
  e=tid()
  if (f_start[a,c,e,b]) {
    f_stop[a,d] <<< t - f_start[a,c,e,b]
  }
  
}

probe timer.s(5) {
  foreach ([a,d] in f_stop @sum - limit 50 ) { 
    printf("avg_ns:%d, sum_ns:%d, cnt:%d, execname:%s, pp:%s\n", @avg(f_stop[a,d]), @sum(f_stop[a,d]), @count(f_stop[a,d]), a, d)
  }
  exit()
}



在pgbench测试机开启pgbench, 连接pgpool-II

postgres@db6-> pgbench -M prepared -n -r -f ./test.sql -h 172.16.3.150 -p 9999 -U postgres -c 16 -j 8 -T 50 postgres
Client 5 aborted in state 0. Probably the backend died while processing.
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 50 s
number of transactions actually processed: 784156
tps = 15682.483918 (including connections establishing)
tps = 15686.457333 (excluding connections establishing)
statement latencies in milliseconds:
        0.808510        select 1;



同时开启stap, 确保可以跟踪到压力测试过程.  收集5秒的测试数据报告如下 : 

[root@db-172-16-3-150 ~]# stap -vp 5 -DMAXSKIPPED=9999999 -DSTP_NO_OVERLOAD -DMAXTRYLOCK=100 ./trc.stp
 
Pass 1: parsed user script and 116 library script(s) using 212504virt/40068res/3172shr/37724data kb, in 330usr/30sys/358real ms.
Pass 2: analyzed script: 937 probe(s), 7 function(s), 4 embed(s), 2 global(s) using 218240virt/46796res/4184shr/43460data kb, in 160usr/80sys/328real ms.
Pass 3: translated to C into "/tmp/stapooq1sT/stap_cfcc5355227f07104ee2359b8481c4a1_394533_src.c" using 218244virt/47344res/4532shr/43464data kb, in 100usr/80sys/169real ms.
Pass 4: compiled C into "stap_cfcc5355227f07104ee2359b8481c4a1_394533.ko" in 2590usr/310sys/2868real ms.
Pass 5: starting run.
avg_ns:5266, sum_ns:1909464893, cnt:362594, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
avg_ns:19393, sum_ns:255681973, cnt:13184, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("appendStringInfoVA@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:114").return
avg_ns:5178, sum_ns:204855738, cnt:39558, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("initStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:47").return
avg_ns:14494, sum_ns:191096928, cnt:13184, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("pg_vsnprintf@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:202").return
avg_ns:10092, sum_ns:133073987, cnt:13186, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("makeStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:29").return
avg_ns:9907, sum_ns:130620770, cnt:13184, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("dopr@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:355").return
avg_ns:5339, sum_ns:35205838, cnt:6593, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("appendStringInfoChar@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:174").return
WARNING: Number of errors: 0, skipped probes: 20377
Pass 5: run completed in 10usr/12590sys/22383real ms.



有些函数因为锁超时跳过, 从剩下的结果来看, 大部分耗时在这个函数. 调用次数最多, 累计耗时最长.

dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c
static void
dopr_outch(int c, PrintfTarget *target)
{
        if (target->bufend != NULL && target->bufptr >= target->bufend)
        {
                /* buffer full, can we dump to stream? */
                if (target->stream == NULL)
                        return;                         /* no, lose the data */
                flushbuffer(target);
        }
        *(target->bufptr++) = c;
}


接下来我把这个函数内容清空, 重新编译pgpool-II再次测试, 结果依旧

postgres@db6-> pgbench -M prepared -n -r -f ./test.sql -h 172.16.3.150 -p 9999 -U postgres -c 16 -j 8 -T 50 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 50 s
number of transactions actually processed: 844017
tps = 16879.764062 (including connections establishing)
tps = 16884.295568 (excluding connections establishing)
statement latencies in milliseconds:
        0.781028        select 1;



接下来做一下单SQL的所有函数跟踪.

postgres@db-172-16-3-150-> psql -h 127.0.0.1 -p 9999 -U postgres postgres
psql (9.4.1, server 9.3.5)
Type "help" for help.
postgres=# 


定位到POOL的pid, 用于stap跟踪.

ps -ewf|grep pgpool
root     21962 21961  0 13:36 ?        00:00:00 pgpool: postgres postgres 127.0.0.1(44044) idle 


稍微修改一下跟踪脚本

[root@db-172-16-3-150 ~]# vi trc.stp 
global f_start[999999],f_stop[999999]

probe process("/opt/pgpool3.4.1/bin/pgpool").function("*@/opt/soft_bak/pgpool-II-3.4.1/src/*").call {
  f_start[execname(), pid(), tid(), cpu()] = gettimeofday_ns()
}

probe process("/opt/pgpool3.4.1/bin/pgpool").function("*@/opt/soft_bak/pgpool-II-3.4.1/src/*").return {
  t=gettimeofday_ns()
  a=execname()
  b=cpu()
  c=pid()
  d=pp()
  e=tid()
  if (f_start[a,c,e,b]) {
    f_stop[a,d] <<< t - f_start[a,c,e,b]
    printf("%d, %s\n", t - f_start[a,c,e,b], d)
    # or you can printf("%s \n", $$locals$$)
  }

}

probe end {
  foreach ([a,d] in f_stop @sum - limit 50 ) {
    printf("avg_ns:%d, sum_ns:%d, cnt:%d, execname:%s, pp:%s\n", @avg(f_stop[a,d]), @sum(f_stop[a,d]), @count(f_stop[a,d]), a, d)
  }
  exit()
}



跟踪过程中执行一条查询.

postgres=# select * from pg_class limit 1;
   relname    | relnamespace | reltype | reloftype | relowner | relam | relfilenode | reltablespace | relpages | reltuples | relallv
isible | reltoastrelid | reltoastidxid | relhasindex | relisshared | relpersistence | relkind | relnatts | relchecks | relhasoids | 
relhaspkey | relhasrules | relhastriggers | relhassubclass | relispopulated | relfrozenxid | relminmxid |           relacl          
  | reloptions 
--------------+--------------+---------+-----------+----------+-------+-------------+---------------+----------+-----------+--------
-------+---------------+---------------+-------------+-------------+----------------+---------+----------+-----------+------------+-
-----------+-------------+----------------+----------------+----------------+--------------+------------+---------------------------
--+------------
 pg_statistic |           11 |   10818 |         0 |       10 |     0 |       12629 |             0 |       15 |       388 |        
    15 |          2840 |             0 | t           | f           | p              | r       |       26 |         0 | f          | 
f          | f           | f              | f              | t              |         1800 |          1 | {postgres=arwdDxt/postgres
} | 
(1 row)

Time: 2.566 ms



跟踪结果 : 

[root@db-172-16-3-150 ~]# stap -vp 5 -DMAXSKIPPED=9999999 -DSTP_NO_OVERLOAD -DMAXTRYLOCK=100 ./trc.stp -x 21962
Pass 1: parsed user script and 116 library script(s) using 212508virt/40068res/3172shr/37728data kb, in 320usr/30sys/355real ms.
Pass 2: analyzed script: 937 probe(s), 7 function(s), 4 embed(s), 2 global(s) using 218660virt/47212res/4168shr/43880data kb, in 190usr/80sys/345real ms.
Pass 3: translated to C into "/tmp/stapX1vB5l/stap_3d39e5129acf59add49b6bf0e6dbd2cb_420727_src.c" using 218668virt/47752res/4512shr/43888data kb, in 100usr/70sys/174real ms.
Pass 4: compiled C into "stap_3d39e5129acf59add49b6bf0e6dbd2cb_420727.ko" in 2570usr/350sys/2866real ms.
Pass 5: starting run.
5768, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex_init@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:3279").return
4786, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yyensure_buffer_stack@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:2945").return
10659, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yy_switch_to_buffer@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:2740").return
16177, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yy_scan_buffer@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:2995").return
22334, process("/opt/pgpool3.4.1/bin/pgpool").function("scanner_init@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.l:1070").return
4711, process("/opt/pgpool3.4.1/bin/pgpool").function("parser_init@/opt/soft_bak/pgpool-II-3.4.1/src/parser/gram.y:14022").return
6561, process("/opt/pgpool3.4.1/bin/pgpool").function("ScanKeywordLookup@/opt/soft_bak/pgpool-II-3.4.1/src/parser/kwlookup.c:38").return
12141, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
17366, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
4026, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
8694, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
4399, process("/opt/pgpool3.4.1/bin/pgpool").function("new_list@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:68").return
9963, process("/opt/pgpool3.4.1/bin/pgpool").function("lcons@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:264").return
3421, process("/opt/pgpool3.4.1/bin/pgpool").function("new_list@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:68").return
8066, process("/opt/pgpool3.4.1/bin/pgpool").function("lcons@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:264").return
4211, process("/opt/pgpool3.4.1/bin/pgpool").function("ScanKeywordLookup@/opt/soft_bak/pgpool-II-3.4.1/src/parser/kwlookup.c:38").return
8851, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
13218, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
4509, process("/opt/pgpool3.4.1/bin/pgpool").function("ScanKeywordLookup@/opt/soft_bak/pgpool-II-3.4.1/src/parser/kwlookup.c:38").return
4511, process("/opt/pgpool3.4.1/bin/pgpool").function("downcase_truncate_identifier@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scansup.c:131").return
10093, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
14532, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
4516, process("/opt/pgpool3.4.1/bin/pgpool").function("ScanKeywordLookup@/opt/soft_bak/pgpool-II-3.4.1/src/parser/kwlookup.c:38").return
9213, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
13574, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
4585, process("/opt/pgpool3.4.1/bin/pgpool").function("makeRangeVar@/opt/soft_bak/pgpool-II-3.4.1/src/parser/makefuncs.c:421").return
3432, process("/opt/pgpool3.4.1/bin/pgpool").function("new_list@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:68").return
7994, process("/opt/pgpool3.4.1/bin/pgpool").function("lcons@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:264").return
6101, process("/opt/pgpool3.4.1/bin/pgpool").function("process_integer_literal@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.l:1177").return
10490, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
15001, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
4647, process("/opt/pgpool3.4.1/bin/pgpool").function("makeIntConst@/opt/soft_bak/pgpool-II-3.4.1/src/parser/gram.y:13370").return
4495, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
9066, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
3499, process("/opt/pgpool3.4.1/bin/pgpool").function("new_list@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:68").return
8153, process("/opt/pgpool3.4.1/bin/pgpool").function("lcons@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:264").return
3497, process("/opt/pgpool3.4.1/bin/pgpool").function("lcons@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:264").return
4836, process("/opt/pgpool3.4.1/bin/pgpool").function("list_nth@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:415").return
3732, process("/opt/pgpool3.4.1/bin/pgpool").function("list_nth@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:415").return
4430, process("/opt/pgpool3.4.1/bin/pgpool").function("list_concat@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:326").return
9653, process("/opt/pgpool3.4.1/bin/pgpool").function("insertSelectOptions@/opt/soft_bak/pgpool-II-3.4.1/src/parser/gram.y:13588").return
3565, process("/opt/pgpool3.4.1/bin/pgpool").function("new_list@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:68").return
8187, process("/opt/pgpool3.4.1/bin/pgpool").function("lcons@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:264").return
3923, process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
8453, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
14031, process("/opt/pgpool3.4.1/bin/pgpool").function("base_yyparse@/opt/soft_bak/pgpool-II-3.4.1/src/parser/gram.c:20532").return
4695, process("/opt/pgpool3.4.1/bin/pgpool").function("scanner_finish@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.l:1108").return
10165, process("/opt/pgpool3.4.1/bin/pgpool").function("raw_parser@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:49").return
6052, process("/opt/pgpool3.4.1/bin/pgpool").function("initStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:47").return
15669, process("/opt/pgpool3.4.1/bin/pgpool").function("makeStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:29").return
4255, process("/opt/pgpool3.4.1/bin/pgpool").function("initStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:47").return
13428, process("/opt/pgpool3.4.1/bin/pgpool").function("makeStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:29").return
4565, process("/opt/pgpool3.4.1/bin/pgpool").function("appendStringInfoChar@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:174").return
3760, process("/opt/pgpool3.4.1/bin/pgpool").function("initStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:47").return
3342, process("/opt/pgpool3.4.1/bin/pgpool").function("initStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:47").return
4465, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3308, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3455, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3250, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3340, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3286, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3327, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3306, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3298, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3282, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3337, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3260, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3352, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3295, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3308, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3284, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3306, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3278, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3330, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3286, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3291, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3290, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3304, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3284, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
7861, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:355").return
12794, process("/opt/pgpool3.4.1/bin/pgpool").function("pg_vsnprintf@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:202").return
17946, process("/opt/pgpool3.4.1/bin/pgpool").function("appendStringInfoVA@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:114").return
3430, process("/opt/pgpool3.4.1/bin/pgpool").function("initStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:47").return
3286, process("/opt/pgpool3.4.1/bin/pgpool").function("initStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:47").return
3300, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3314, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3316, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3324, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3280, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3328, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3286, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3292, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3257, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3352, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3282, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3306, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3283, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3330, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3286, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3288, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3292, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3294, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3278, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3300, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3276, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3328, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3289, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3268, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3347, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3296, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3280, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3301, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3276, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3329, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
3286, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
7872, process("/opt/pgpool3.4.1/bin/pgpool").function("dopr@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:355").return
12239, process("/opt/pgpool3.4.1/bin/pgpool").function("pg_vsnprintf@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:202").return
16750, process("/opt/pgpool3.4.1/bin/pgpool").function("appendStringInfoVA@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:114").return


^C

avg_ns:3323, sum_ns:182786, cnt:55, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("dopr_outch@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:1024").return
avg_ns:12488, sum_ns:99904, cnt:8, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("base_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:108").return
avg_ns:7904, sum_ns:63232, cnt:8, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:1325").return
avg_ns:7643, sum_ns:45860, cnt:6, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("lcons@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:264").return
avg_ns:17348, sum_ns:34696, cnt:2, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("appendStringInfoVA@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:114").return
avg_ns:14548, sum_ns:29097, cnt:2, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("makeStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:29").return
avg_ns:12516, sum_ns:25033, cnt:2, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("pg_vsnprintf@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:202").return
avg_ns:4020, sum_ns:24125, cnt:6, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("initStringInfo@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:47").return
avg_ns:22334, sum_ns:22334, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("scanner_init@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.l:1070").return
avg_ns:4949, sum_ns:19797, cnt:4, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("ScanKeywordLookup@/opt/soft_bak/pgpool-II-3.4.1/src/parser/kwlookup.c:38").return
avg_ns:3663, sum_ns:18316, cnt:5, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("new_list@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:68").return
avg_ns:16177, sum_ns:16177, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("core_yy_scan_buffer@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:2995").return
avg_ns:7866, sum_ns:15733, cnt:2, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("dopr@/opt/soft_bak/pgpool-II-3.4.1/src/parser/snprintf.c:355").return
avg_ns:14031, sum_ns:14031, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("base_yyparse@/opt/soft_bak/pgpool-II-3.4.1/src/parser/gram.c:20532").return
avg_ns:10659, sum_ns:10659, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("core_yy_switch_to_buffer@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:2740").return
avg_ns:10165, sum_ns:10165, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("raw_parser@/opt/soft_bak/pgpool-II-3.4.1/src/parser/parser.c:49").return
avg_ns:9653, sum_ns:9653, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("insertSelectOptions@/opt/soft_bak/pgpool-II-3.4.1/src/parser/gram.y:13588").return
avg_ns:4284, sum_ns:8568, cnt:2, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("list_nth@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:415").return
avg_ns:6101, sum_ns:6101, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("process_integer_literal@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.l:1177").return
avg_ns:5768, sum_ns:5768, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("core_yylex_init@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:3279").return
avg_ns:4786, sum_ns:4786, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("core_yyensure_buffer_stack@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.c:2945").return
avg_ns:4711, sum_ns:4711, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("parser_init@/opt/soft_bak/pgpool-II-3.4.1/src/parser/gram.y:14022").return
avg_ns:4695, sum_ns:4695, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("scanner_finish@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scan.l:1108").return
avg_ns:4647, sum_ns:4647, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("makeIntConst@/opt/soft_bak/pgpool-II-3.4.1/src/parser/gram.y:13370").return
avg_ns:4585, sum_ns:4585, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("makeRangeVar@/opt/soft_bak/pgpool-II-3.4.1/src/parser/makefuncs.c:421").return
avg_ns:4565, sum_ns:4565, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("appendStringInfoChar@/opt/soft_bak/pgpool-II-3.4.1/src/parser/stringinfo.c:174").return
avg_ns:4511, sum_ns:4511, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("downcase_truncate_identifier@/opt/soft_bak/pgpool-II-3.4.1/src/parser/scansup.c:131").return
avg_ns:4430, sum_ns:4430, cnt:1, execname:pgpool, pp:process("/opt/pgpool3.4.1/bin/pgpool").function("list_concat@/opt/soft_bak/pgpool-II-3.4.1/src/parser/list.c:326").return
Pass 5: run completed in 10usr/14470sys/20108real ms.


时间总和 698965us = 0.698965 毫秒.  也可以理解为pgpool-II处理一个查询时, 自身的开心约0.698965毫秒, (实际上应该略小, 因为stap计算时间时也有一定的开销, 在这个基础上, 最后给个经验值约 0.5毫秒左右吧.)
(和本文前面测试中的0.765831-0.252501 = 0.51333毫秒差不多)
这部分时间是select * from pg_class limit 1; 在pgpool-II代码中的耗费.

Flag Counter
