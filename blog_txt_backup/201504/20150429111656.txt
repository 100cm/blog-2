PostgreSQL research

Can we use event trigger implement like Oracle recycle bin? - Not Now, you can use hook in tcop/utility.h

2015-04-29 11:16:56   查看原文>>

早上一位网友问我，能否让用户在删除表时，不执行删除操作，而是重命名表。
这不就是Oracle的recycle bin的特性吗？即删表时将表放到回收站，以后还可以恢复。
从9.3开始，PostgreSQL提供了event trigger的功能。目前支持几个TAG：

ddl_command_start
sql_drop
table_rewrite
ddl_command_end


如果要获取被删除的对象名，目前只有sql_drop的TAG支持，也就是在sql_drop的事件触发器函数中可以调用以下函数类获取对象信息。

pg_event_trigger_dropped_objects returns a list of all objects dropped by the command in whose sql_drop event it is called. If called in any other context, pg_event_trigger_dropped_objects raises an error. pg_event_trigger_dropped_objects returns the following columns:

┌───────────────┬──────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│     Name      │ Type │                                                                                                   Description                                                                                                   │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│classid        │Oid   │OID of catalog the object belonged in                                                                                                                                                                            │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│objid          │Oid   │OID the object had within the catalog                                                                                                                                                                            │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│objsubid       │int32 │Object sub-id (e.g. attribute number for columns)                                                                                                                                                                │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│original       │bool  │Flag used to identify the root object(s) of the deletion                                                                                                                                                         │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│normal         │bool  │Flag indicating that there's a normal dependency relationship in the dependency graph leading to this object                                                                                                     │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│is_temporary   │bool  │Flag indicating that the object was a temporary object.                                                                                                                                                          │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│object_type    │text  │Type of the object                                                                                                                                                                                               │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│schema_name    │text  │Name of the schema the object belonged in, if any; otherwise NULL. No quoting is applied.                                                                                                                        │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│object_name    │text  │Name of the object, if the combination of schema and name can be used as a unique identifier for the object; otherwise NULL. No quoting is applied, and name is never schema-qualified.                          │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│object_identity│text  │Text rendering of the object identity, schema-qualified. Each and every identifier present in the identity is quoted if necessary.                                                                               │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│address_names  │text[]│An array that, together with object_type and address_args, can be used by the pg_get_object_address() to recreate the object address in a remote server containing an identically named object of the same kind. │
├───────────────┼──────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│address_args   │text[]│Complement for address_names above.                                                                                                                                                                              │
└───────────────┴──────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
那么我们是否能用它来实现类似oracle recycle bin的功能呢？即
用户在删除表时，不执行删除操作，而是重命名表。
答案是不行的，因为SQL_DROP触发时表已经删除了，再执行alter table rename等操作会报对象不存在的错误。
我们在事务中可以模拟这样的情形。例子：

postgres=# begin;
BEGIN
postgres=# drop table test2;
DROP TABLE
postgres=# alter table test2 rename to t;
ERROR:  relation "test2" does not exist
postgres=# rollback;
ROLLBACK


我们用事件触发器会得到同样的结果：
例如我们创建一个schema来存放重命名的对象。用一个表来记录重命名的前后关系。

postgres=# create schema recyclebin;
postgres=# create table recyclebin.trace(id serial8 primary key,type_name text,nsp_name text,obj_name text,tg_tag text,new_nsp_name text,new_obj_name text,crt_time timestamp);
CREATE TABLE


创建一个事件触发器函数进行测试：

CREATE OR REPLACE FUNCTION test_event_trigger_for_drops()
        RETURNS event_trigger LANGUAGE plpgsql AS $$
DECLARE
    obj record;
    v_type_name text[] := '{}'::text[];
    v_nsp_name text[] := '{}'::text[];
    v_obj_name text[] := '{}'::text[];
    v_tg_tag text := TG_TAG;
    v_crt_time timestamp := now();
    i int := 1;
    v_new_nsp_name text := 'recyclebin';
    v_new_obj_name text;
    have_table boolean := false;
    x text;
    tt text;
BEGIN
    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
    LOOP
        RAISE NOTICE '% dropped object: % %.% %',
                     v_tg_tag,
                     obj.object_type,
                     obj.schema_name,
                     obj.object_name,
                     obj.object_identity;

        v_type_name := array_append(v_type_name, obj.object_type);
        v_nsp_name := array_append(v_nsp_name, obj.schema_name);
        v_obj_name := array_append(v_obj_name, obj.object_name);

--  调试, 在这里已经查不到被删除对象的信息了.
      select t.*::text into tt from pg_class t where relname=obj.object_name and relnamespace=(select oid from pg_namespace where nspname=obj.schema_name);
      raise notice '%', tt;

        if (obj.object_type = 'table') then
          RAISE NOTICE 'Found table in drop list. %', v_obj_name;
          have_table := true;
        end if;

    END LOOP;

    if ( have_table = true ) then
      RAISE NOTICE 'Move table to recycle bin';
      RAISE exception 'Found table in drop list.';
    end if;

    EXCEPTION WHEN others then
      raise notice 'exception handler';
--  调试, 在这里已经查不到被删除对象的信息了.
      select t.*::text into tt from pg_class t where relname=obj.object_name and relnamespace=(select oid from pg_namespace where nspname=obj.schema_name);
      raise notice '%', tt;

      FOREACH x in ARRAY v_obj_name LOOP
        raise notice 'loop';
        if v_type_name[i] = 'table' then
          v_new_obj_name := 'md5'||md5(random()::text||clock_timestamp()::text);
          execute 'alter table '||v_nsp_name[i]||'.'||x||' set schema '||v_new_nsp_name;
          execute 'alter table '||v_new_nsp_name||'.'||x||' rename to '||v_new_obj_name;
          insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time)
            values (v_type_name[i],v_nsp_name[i],v_obj_name[i],v_tg_tag,v_new_nsp_name,v_new_obj_name,v_crt_time);
        end if;
        i := i+1;
      END LOOP;
END;
$$;


创建事件触发器：

CREATE EVENT TRIGGER test_event_trigger_for_drops
   ON sql_drop 
   EXECUTE PROCEDURE test_event_trigger_for_drops();


删除表测试：

postgres=# drop table test2;
NOTICE:  DROP TABLE dropped object: table public.test2 public.test2
NOTICE:  <NULL>
NOTICE:  Found table in drop list. {test2}
NOTICE:  Move table to recycle bin
NOTICE:  exception handler
NOTICE:  <NULL>
NOTICE:  loop
ERROR:  relation "public.test2" does not exist
CONTEXT:  SQL statement "alter table public.test2 set schema recyclebin"
PL/pgSQL function test_event_trigger_for_drops() line 56 at EXECUTE statement


和我们预想的一样。
也就是说，使用事件触发器无法实现这个场景的功能，我们只能做到抛出异常，然后告诉用户执行rename。
下面我们修改一下这个事件触发器函数，来一个温馨提示：
例如：

CREATE OR REPLACE FUNCTION test_event_trigger_for_drops()
        RETURNS event_trigger LANGUAGE plpgsql AS $$
DECLARE
    obj record;
    v_type_name text[] := '{}'::text[];
    v_nsp_name text[] := '{}'::text[];
    v_obj_name text[] := '{}'::text[];
    v_tg_tag text := TG_TAG;
    v_crt_time timestamp := now();
    i int := 1;
    v_new_nsp_name text := 'recyclebin';
    v_new_obj_name text;
    have_table boolean := false;
    x text;
    tt text := '';
    v_sql text[];
    v_sqlend text := '';
BEGIN
    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
    LOOP
        RAISE NOTICE '% dropped object: % %.% %',
                     v_tg_tag,
                     obj.object_type,
                     obj.schema_name,
                     obj.object_name,
                     obj.object_identity;

        v_type_name := array_append(v_type_name, obj.object_type);
        v_nsp_name := array_append(v_nsp_name, obj.schema_name);
        v_obj_name := array_append(v_obj_name, obj.object_name);

        if (obj.object_type = 'table') then
          have_table := true;
        end if;
    END LOOP;
    
    if ( have_table = true ) then
      RAISE NOTICE 'Move table to recycle bin';
      RAISE exception 'Found table in drop list.';
    end if;

    EXCEPTION WHEN others then
      raise notice 'You can not exec DROP, please execute these SQL instead: ';
      raise notice '-----------------------------------------------------------';
      FOREACH x in ARRAY v_obj_name LOOP
        if v_type_name[i] = 'table' then
          v_new_obj_name := 'md5'||md5(random()::text||clock_timestamp()::text);
          
          v_sql[1] := 'alter table '||v_nsp_name[i]||'.'||x||' set schema '||v_new_nsp_name||';';
          v_sql[2] := 'alter table '||v_new_nsp_name||'.'||x||' rename to '||v_new_obj_name||';';          
          v_sql[3] := 'insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time) 
            values ('||quote_nullable(v_type_name[i])||','||quote_nullable(v_nsp_name[i])||','||quote_nullable(v_obj_name[i])||','||quote_nullable(v_tg_tag)||','||quote_nullable(v_new_nsp_name)||','||quote_nullable(v_new_obj_name)||','||quote_nullable(v_crt_time)||');';
          v_sqlend := v_sqlend||v_sql[1]||v_sql[2]||v_sql[3];
        end if;

        i := i+1;
      END LOOP;
      raise notice 'BEGIN; % COMMIT;', v_sqlend;
      raise notice '-----------------------------------------------------------';
      raise exception 'Please Execute these SQL above, Good Luck.';
END;
$$;


测试：

postgres=# create table t1(id int);
CREATE TABLE
postgres=# create table t2(like t1) inherits(t1);
NOTICE:  merging column "id" with inherited definition
CREATE TABLE
postgres=# create table t3(like t1) inherits(t1);
NOTICE:  merging column "id" with inherited definition
CREATE TABLE


现在是温柔的提示：

postgres=# drop table t1 cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table t2
drop cascades to table t3
NOTICE:  DROP TABLE dropped object: table public.t1 public.t1
NOTICE:  DROP TABLE dropped object: type public.t1 public.t1
NOTICE:  DROP TABLE dropped object: type public._t1 public.t1[]
NOTICE:  DROP TABLE dropped object: table public.t2 public.t2
NOTICE:  DROP TABLE dropped object: type public.t2 public.t2
NOTICE:  DROP TABLE dropped object: type public._t2 public.t2[]
NOTICE:  DROP TABLE dropped object: table public.t3 public.t3
NOTICE:  DROP TABLE dropped object: type public.t3 public.t3
NOTICE:  DROP TABLE dropped object: type public._t3 public.t3[]
NOTICE:  Move table to recycle bin
NOTICE:  You can not exec DROP, please execute these SQL instead: 
NOTICE:  -----------------------------------------------------------
NOTICE:  BEGIN; alter table public.t1 set schema recyclebin;alter table recyclebin.t1 rename to md5fc6e07f4c89aec008d2a80123fe7f788;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time) 
    values ('table','public','t1','DROP TABLE','recyclebin','md5fc6e07f4c89aec008d2a80123fe7f788','2015-04-29 10:59:51.306056');alter table public.t2 set schema recyclebin;alter table recyclebin.t2 rename to md5e0749f673c5c94db0993a93490091c50;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time) 
    values ('table','public','t2','DROP TABLE','recyclebin','md5e0749f673c5c94db0993a93490091c50','2015-04-29 10:59:51.306056');alter table public.t3 set schema recyclebin;alter table recyclebin.t3 rename to md59ed6eeedce6faf153cb8a006882c8f45;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time) 
    values ('table','public','t3','DROP TABLE','recyclebin','md59ed6eeedce6faf153cb8a006882c8f45','2015-04-29 10:59:51.306056'); COMMIT;
NOTICE:  -----------------------------------------------------------
ERROR:  Please Execute these SQL above, Good Luck.


我们只需要照着执行以上SQL就可以了：

BEGIN; alter table public.t1 set schema recyclebin;alter table recyclebin.t1 rename to md5fc6e07f4c89aec008d2a80123fe7f788;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time) 
    values ('table','public','t1','DROP TABLE','recyclebin','md5fc6e07f4c89aec008d2a80123fe7f788','2015-04-29 10:59:51.306056');alter table public.t2 set schema recyclebin;alter table recyclebin.t2 rename to md5e0749f673c5c94db0993a93490091c50;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time) 
    values ('table','public','t2','DROP TABLE','recyclebin','md5e0749f673c5c94db0993a93490091c50','2015-04-29 10:59:51.306056');alter table public.t3 set schema recyclebin;alter table recyclebin.t3 rename to md59ed6eeedce6faf153cb8a006882c8f45;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time) 
    values ('table','public','t3','DROP TABLE','recyclebin','md59ed6eeedce6faf153cb8a006882c8f45','2015-04-29 10:59:51.306056'); COMMIT;


在recyclebin可以找到我们刚才“删除"的表：

postgres=# select * from recyclebin.trace where obj_name in ('t1','t2','t3');
 id | type_name | nsp_name | obj_name |   tg_tag   | new_nsp_name |            new_obj_name             |          crt_time         
 
----+-----------+----------+----------+------------+--------------+-------------------------------------+---------------------------
-
  4 | table     | public   | t1       | DROP TABLE | recyclebin   | md5fc6e07f4c89aec008d2a80123fe7f788 | 2015-04-29 10:59:51.306056
  5 | table     | public   | t2       | DROP TABLE | recyclebin   | md5e0749f673c5c94db0993a93490091c50 | 2015-04-29 10:59:51.306056
  6 | table     | public   | t3       | DROP TABLE | recyclebin   | md59ed6eeedce6faf153cb8a006882c8f45 | 2015-04-29 10:59:51.306056
(3 rows)



[其他方法]
1. hook, 用在执行utility命令时。
图例
Can we use event trigger implement like Oracle recycle bin? - Not Now, you can use hook in tcop/utility.h - 德哥@Digoal - PostgreSQL research

钩子代码：
src/backend/tcop/utility.c

  70 /* Hook for plugins to get control in ProcessUtility() */
  71 ProcessUtility_hook_type ProcessUtility_hook = NULL;

 273 /*
 274  * ProcessUtility
 275  *      general utility function invoker
 276  *
 277  *  parsetree: the parse tree for the utility statement
 278  *  queryString: original source text of command
 279  *  context: identifies source of statement (toplevel client command,
 280  *      non-toplevel client command, subcommand of a larger utility command)
 281  *  params: parameters to use during execution
 282  *  dest: where to send results
 283  *  completionTag: points to a buffer of size COMPLETION_TAG_BUFSIZE
 284  *      in which to store a command completion status string.
 285  *
 286  * Notes: as of PG 8.4, caller MUST supply a queryString; it is not
 287  * allowed anymore to pass NULL.  (If you really don't have source text,
 288  * you can pass a constant string, perhaps "(query not available)".)
 289  *
 290  * completionTag is only set nonempty if we want to return a nondefault status.
 291  *
 292  * completionTag may be NULL if caller doesn't want a status string.
 293  */
 294 void
 295 ProcessUtility(Node *parsetree,
 296                const char *queryString,
 297                ProcessUtilityContext context,
 298                ParamListInfo params,
 299                DestReceiver *dest,
 300                char *completionTag)
 301 {
 302     Assert(queryString != NULL);    /* required as of 8.4 */
 303 
 304     /*
 305      * We provide a function hook variable that lets loadable plugins get
 306      * control when ProcessUtility is called.  Such a plugin would normally
 307      * call standard_ProcessUtility().
 308      */
 309     if (ProcessUtility_hook)
 310         (*ProcessUtility_hook) (parsetree, queryString,
 311                                 context, params,
 312                                 dest, completionTag);
 313     else
 314         standard_ProcessUtility(parsetree, queryString,
 315                                 context, params,
 316                                 dest, completionTag);
 317 }


利用这个钩子的例子：
https://github.com/petere/pgtrashcan
http://blog.163.com/digoal@126/blog/static/1638770402014339374747
钩子例子截取自pgtrashcan：

#if PG_VERSION_NUM >= 90300
static void
pgtrashcan_ProcessUtility(Node *parsetree,
                                                  const char *queryString,
                                                  ProcessUtilityContext context,
                                                  ParamListInfo params,
                                                  DestReceiver *dest,
                                                  char *completionTag)
#else
static void
pgtrashcan_ProcessUtility(Node *parsetree,
                                                  const char *queryString,
                                                  ParamListInfo params,
                                                  bool isTopLevel,
                                                  DestReceiver *dest,
                                                  char *completionTag)
#endif
{
        if (nodeTag(parsetree) == T_DropStmt)
        {
                DropStmt *stmt = (DropStmt *) parsetree;

                if (stmt->removeType == OBJECT_TABLE)
                {
                        RangeVar *r;
                        AlterObjectSchemaStmt *newstmt = makeNode(AlterObjectSchemaStmt);
                        newstmt->objectType = stmt->removeType;
                        newstmt->newschema = pstrdup(trashcan_nspname);   // 重设SCHEMA
#if PG_VERSION_NUM >= 90200
                        newstmt->missing_ok = stmt->missing_ok;
#endif
                        if (stmt->behavior != DROP_RESTRICT)
                        ereport(ERROR,
                                        (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                                         errmsg("trash can does not support DROP CASCADE")));

                        r = makeRangeVarFromAnyName(linitial(stmt->objects));
                        r->inhOpt = INH_YES;
                        r->alias = NULL;
                        newstmt->relation = r;

                        if (!r->schemaname || strcmp(r->schemaname, trashcan_nspname) != 0)
                        {
                                parsetree = (Node *) newstmt;
                                create_trashcan_schema();
                        }
                }
        }

#if PG_VERSION_NUM >= 90300
        (*prev_ProcessUtility) (parsetree, queryString, context, params, dest, completionTag); 
        // 传送至PG ProcessUtility@src/backend/tcop/utility.c
#else
        (*prev_ProcessUtility) (parsetree, queryString, params, isTopLevel, dest, completionTag);
#endif
}



[参考]
1. http://www.postgresql.org/docs/devel/static/functions-event-triggers.html
2. http://blog.163.com/digoal@126/blog/static/1638770402014339374747
Flag Counter
