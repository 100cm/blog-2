PostgreSQL research

Avoid repeat-calculate in WHERE and SELECT clause

2012-10-23 13:30:27   查看原文>>

今天群里的讨论的一个话题 : 
where不能直接引用列的别名
但可以在结果中order by引用列的别名
比如 :   

select 50*col1 as test from table where test > 100;
select 50*col1 from table where 50*col1 > 100;


第二种我是不是算了两次?

这个问题的回答在PostgreSQL邮件归档里面已经有了, 我这就不多说了, 首先第一条SQL肯定是不对的, 原因如下 : 

No.  Evaluation of the WHERE clause logically precedes evaluation of the SELECT list, so it's really quite nonsensical to expect SELECT outputs to be available in WHERE.


详细请参考。
http://archives.postgresql.org/pgsql-general/2002-11/msg01411.php

接下来要说说第二个SQL, 确实计算了两次. 下面来测试一下 : 
1. 创建测试表

postgres=# \d test
     Table "digoal.test"
 Column |  Type   | Modifiers 
--------+---------+-----------
 id     | integer | 



2. 插入测试数据

postgres=# insert into test values (10000000);
INSERT 0 1



3. 创建测试函数

CREATE OR REPLACE FUNCTION public.f_test(i_max integer)
 RETURNS numeric
 LANGUAGE plpgsql
 VOLATILE
AS $function$
declare
  result numeric;
begin
  select avg(id) into result from (select generate_series(1,i_max) as id) as t; 
  return result;
end;
$function$;



4. 测试
 -- f_test(id)在SELECT子句中, 整个SQL执行时间1396.352 ms

postgres=# select f_test(id) from test ;
-[ RECORD 1 ]----------------
f_test | 5000000.500000000000
Time: 1396.352 ms


 -- f_test(id)在WHERE子句中, 整个SQL执行时间1522.211 ms

postgres=# select id from test where f_test(id)>1000;
-[ RECORD 1 ]
id | 10000000
Time: 1522.211 ms


 -- f_test(id)在WHERE子句和SELECT子句中, 整个SQL执行时间2925.725 ms

postgres=# select f_test(id) from test where f_test(id)>1000;
-[ RECORD 1 ]----------------
f_test | 5000000.500000000000
Time: 2925.725 ms


从时间上看, f_test(id)确实执行了两遍. 这也验证了Tom Lane的回答 : 

  Evaluation of the WHERE clause logically precedes evaluation of the SELECT list, so it's really quite nonsensical to expect SELECT outputs to be available in WHERE.



那接下来看看怎么优化一下 : 
4.1. 前面已经说过了, SELECT子句中的别名不能在WHERE子句中使用, 会报错如下 : 

postgres=# select f_test(id) as res from test where res>1000;
ERROR:  42703: column "res" does not exist at character 42
LOCATION:  errorMissingColumn, parse_relation.c:2616
STATEMENT:  select f_test(id) as res from test where res>1000;
ERROR:  column "res" does not exist
LINE 1: select f_test(id) as res from test where res>1000;
                                                 ^


4.2. 使用子查询进行优化

postgres=# select res from (select f_test(id) as res from test) t where res>1000;
         res          
----------------------
 5000000.500000000000
(1 row)
Time: 1430.874 ms


注意函数的稳定性是 volatile.
volatile函数多次调用, 在输入参数一致的情况下返回结果可能不一致.

postgres=# select pronamespace,proname,provolatile from pg_proc where proname='f_test';
 pronamespace | proname | provolatile 
--------------+---------+-------------
         2200 | f_test  | v
(1 row)



如果把函数改成immutable 或者 stable的, 执行时间还是这样吗?
immutable和stable函数, (在输入参数一致的情况下, 多次调用, 返回值一致) 

postgres=# alter function f_test(int) STABLE;
ALTER FUNCTION
Time: 0.385 ms
postgres=# select pronamespace,proname,provolatile from pg_proc where proname='f_test';
 pronamespace | proname | provolatile 
--------------+---------+-------------
         2200 | f_test  | s
(1 row)
Time: 0.668 ms
postgres=# select res from (select f_test(id) as res from test) t where res>1000;
         res          
----------------------
 5000000.500000000000
(1 row)
Time: 2798.577 ms

postgres=# alter function f_test(int) IMMUTABLE;
ALTER FUNCTION
Time: 0.460 ms
postgres=# select pronamespace,proname,provolatile from pg_proc where proname='f_test';
 pronamespace | proname | provolatile 
--------------+---------+-------------
         2200 | f_test  | i
(1 row)
postgres=# select res from (select f_test(id) as res from test) t where res>1000;
         res          
----------------------
 5000000.500000000000
(1 row)
Time: 2780.895 ms


函数改成stable或者immutable后, 在这个SQL中, f_test(id)被执行了两次. 而当函数f_test是volatile的时候, f_test函数只执行了一遍.
所以使用子查询对这个SQL进行优化只适合函数是volatile的.
[注意]
这里有点无法理解PostgreSQL的做法, 不管函数什么稳定性, 使用select res from (select f_test(id) as res from test) t where res>1000后, 完全都可以做成仅调用一次的. 
原因在于优化器在搞鬼, stable,immutable函数和volatile函数在处理时不一样.
要解决这个问题, 需要用WITH语法, 见本文后面的部分.
volatile函数, 用了子查询 : 

postgres=# explain (analyze,verbose,costs,buffers,timing) select res from (select f_test(id) as res from test) t where res>1000;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Subquery Scan on t  (cost=0.00..2634.18 rows=3210 width=32) (actual time=1386.403..1386.404 rows=1 loops=1)
   Output: t.res
   Filter: (t.res > 1000::numeric)
   Buffers: shared hit=1
   ->  Seq Scan on public.test  (cost=0.00..2513.80 rows=9630 width=4) (actual time=1386.399..1386.400 rows=1 loops=1)
         Output: f_test(test.id)
         Buffers: shared hit=1
 Planning time: 0.062 ms
 Execution time: 1386.425 ms
(9 rows)


immutable, stable函数, 没有用子查询 : 

postgres=# explain (analyze,verbose,costs,buffers,timing) select res from (select f_test(id) as res from test) t where res>1000;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Seq Scan on public.test  (cost=0.00..3340.38 rows=3210 width=4) (actual time=2756.246..2756.247 rows=1 loops=1)
   Output: f_test(test.id)
   Filter: (f_test(test.id) > 1000::numeric)
   Buffers: shared hit=7
 Planning time: 0.053 ms
 Execution time: 2756.262 ms
(6 rows)



5. 操作符的稳定性
在PostgreSQL中操作符其实可以理解为函数的一种使用形式或别名. 从创建操作符的语法能看出这一点.

Command:     CREATE OPERATOR
Description: define a new operator
Syntax:
CREATE OPERATOR name (
    PROCEDURE = function_name
    [, LEFTARG = left_type ] [, RIGHTARG = right_type ]
    [, COMMUTATOR = com_op ] [, NEGATOR = neg_op ]
    [, RESTRICT = res_proc ] [, JOIN = join_proc ]
    [, HASHES ] [, MERGES ]
)


所以操作符也是有稳定性的, 那么操作符的稳定性在哪里能查到呢? 通过pg_proc和pg_operator就可以查询.
例如*这个操作符 : 

postgres=# select oprname,pronamespace,proname,provolatile from pg_operator o,pg_proc f where o.oprcode=f.oid and oprname='*' order by proname;
 oprname | pronamespace |     proname     | provolatile 
---------+--------------+-----------------+-------------
 *       |           11 | box_mul         | i
 *       |           11 | cash_mul_flt4   | i
 *       |           11 | cash_mul_flt8   | i
 *       |           11 | cash_mul_int2   | i
 *       |           11 | cash_mul_int4   | i
 *       |           11 | circle_mul_pt   | i
 *       |           11 | float48mul      | i
 *       |           11 | float4mul       | i
 *       |           11 | float84mul      | i
 *       |           11 | float8mul       | i
 *       |           11 | flt4_mul_cash   | i
 *       |           11 | flt8_mul_cash   | i
 *       |           11 | int24mul        | i
 *       |           11 | int28mul        | i
 *       |           11 | int2_mul_cash   | i
 *       |           11 | int2mul         | i
 *       |           11 | int42mul        | i
 *       |           11 | int48mul        | i
 *       |           11 | int4_mul_cash   | i
 *       |           11 | int4mul         | i
 *       |           11 | int82mul        | i
 *       |           11 | int84mul        | i
 *       |           11 | int8mul         | i
 *       |           11 | interval_mul    | i
 *       |           11 | mul_d_interval  | i
 *       |           11 | numeric_mul     | i
 *       |           11 | path_mul_pt     | i
 *       |           11 | point_mul       | i
 *       |           11 | range_intersect | i
(29 rows)


都是immutable的. 所以对于子查询的优化无效.
那有没有更好的优化办法呢?

6. 使用WITH 查询, 不管f_test的稳定性如何, 以下f_test函数肯定只执行一次.

postgres=# alter function f_test(int) volatile;
ALTER FUNCTION
Time: 0.286 ms
postgres=# with res as                              
(select f_test(id) as aid from test)
select * from res where aid>100;
         aid          
----------------------
 5000000.500000000000
(1 row)
Time: 1401.281 ms

postgres=# alter function f_test(int) stable;
ALTER FUNCTION
Time: 0.623 ms
postgres=# with res as                              
(select f_test(id) as aid from test)
select * from res where aid>100;
         aid          
----------------------
 5000000.500000000000
(1 row)
Time: 1410.731 ms

postgres=# alter function f_test(int) immutable;
ALTER FUNCTION
Time: 0.360 ms
postgres=# with res as                                 
(select f_test(id) as aid from test)
select * from res where aid>100;
         aid          
----------------------
 5000000.500000000000
(1 row)
Time: 1403.333 ms



【参考】
1. Using an ALIAS in WHERE clause
http://archives.postgresql.org/pgsql-general/2002-11/msg01409.php
2. function 稳定性
http://blog.163.com/digoal@126/blog/static/163877040201151011105494/
http://blog.163.com/digoal@126/blog/static/163877040201252641410920/
3. http://www.postgresql.org/docs/9.2/static/catalog-pg-operator.html
4. with子句
http://blog.163.com/digoal@126/blog/static/163877040201132843255911/
http://blog.163.com/digoal@126/blog/static/163877040201132782850752/

【附加Oracle的同类测试】
1. 创建测试表, 插入测试数据

SQL> drop table test;
Table dropped.
SQL> create table test(id int);
Table created.
SQL> insert into test values (10000000);
1 row created.



2. 创建测试函数 : 

SQL> create or replace function f_test (i_max int) return number as
  2  result number;
  3  begin
  4  select avg(id) into result from ( select rownum as id from dual connect by level <= i_max ) t;
  5  return result;
  6  end;
  7  /
Function created.
Elapsed: 00:00:00.07



 -- f_test(id)在SELECT子句中, 整个SQL执行时间8.1秒

SQL> select f_test(id) from test;
F_TEST(ID)
----------
 5000000.5
Elapsed: 00:00:08.10


 -- f_test(id)在WHERE子句中, 整个SQL执行时间7.57秒

SQL> select id from test where f_test(id)>100;
        ID
----------
  10000000
Elapsed: 00:00:07.57


 -- f_test(id)在WHERE子句和SELECT子句中, 整个SQL执行时间14.32 秒

SQL> select f_test(id) as aid from test where f_test(id)>100;
       AID
----------
 5000000.5
Elapsed: 00:00:14.32


从执行时间上看, f_test被执行了两遍, 并且相比PostgreSQL执行时间较长. PostgreSQL但次执行时间为1.5秒左右.

Oracle同样不支持SELECT子句中的别名出现在WHERE子句中.

SQL> select f_test(id) as aid from test where aid>100;
select f_test(id) as aid from test where aid>100
                                         *
ERROR at line 1:
ORA-00904: "AID": invalid identifier
Elapsed: 00:00:00.06



Oracle使用子查询无法对这种情况进行优化.

SQL> select aid from (select f_test(id) as aid from test) t where aid>100;
       AID
----------
 5000000.5
Elapsed: 00:00:14.41


这里用到的是Oracle 10.2.0.4的版本. 这个测试中PG略胜Oracle.

评论

284466130 - 2012-10-23 15:42:46

nice Digoal... soga
