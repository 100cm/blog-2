PostgreSQL research

mongoDB javascript TO PostgreSQL DO language

2012-10-30 9:12:02   查看原文>>

mongoDB一个非常优秀的功能是支持javascript, 是一个非常便于程序员使用的数据库.
例如闪电狗(https://github.com/flash-dog/flash-dog) : 
应用通过log4j输出日志到mongodb数据库中，闪电狗定时运行脚本分析日志，生成监控曲线和告警。主要优点是不影响业务代码，只需加入几个jar包和修改log4j配置文件就能接入。配置一些javascript小脚本，几乎就能监控所有你想监控的信息，如cpu内存，错误日志百分比，每日访问人数，收入等等
该项目由杭州斯凯网络开源，目前已经在公司内部支付等关键业务中使用，对创业团队和中小型公司有较大吸引力。目前只支持java的log4j和logback日志输出，通过简单扩展可以支持其他语言。
mongoDB作为文档数据库, 还有一个比较特殊的特性是它不需要创建表, 不需要指定字段. 存储的是BSON类型. 类似JSON.
目前PostgreSQL 9.2已经引入了JSON类型, 但是功能还不是很完善. 目前只做到了格式的检查以及2个函数(array to json和row to json)
当然以后PostgreSQL 对JSON的支持应该会越来越好.

如果要让闪电狗支持PostgreSQL , 首先要让程序员适应PostgreSQL 的plpgsql函数语言. 另外就是需要创建表(mongoDB不需要创建). 
为什么要让闪电狗支持PostgreSQL呢? 
原因有几个 : 
1. mongoDB的存储是BIN文件, 每个数据库一个目录, 当数据膨胀后只能repair(锁库, 非常慢) 或者删除数据库来释放空间.
2. mongoDB的锁粒度太粗糙, 容易带来锁性能隐患.

下面以闪电狗某业务为例, 讲讲如何将javascript转换成PostgreSQL DO plpgsql.
1. mongoDB中存储的日志信息表 : 

dog0:PRIMARY> db.sms_plat_mrp.findOne()
{
        "_id" : ObjectId("508ebb67de5d47b91ef5b8a3"),
        "timestamp" : ISODate("2012-10-29T17:22:47.616Z"),
        "level" : "INFO",
        "thread" : "DubboServerHandler-thread-183",
        "message" : "unknow tag:212, just ignore.",
        "loggerName" : {
                "fullyQualifiedClassName" : "stc.skymobi.bean.tlv.decode.decoders.BeanTLVDecoder",
                "package" : [
                        "stc",
                        "skymobi",
                        "bean",
                        "tlv",
                        "decode",
                        "decoders",
                        "BeanTLVDecoder"
                ],
                "className" : "BeanTLVDecoder"
        },
        "fileName" : "BeanTLVDecoder.java",
        "method" : "decode",
        "lineNumber" : "93",
        "class" : {
                "fullyQualifiedClassName" : "stc.skymobi.bean.tlv.decode.decoders.BeanTLVDecoder",
                "package" : [
                        "stc",
                        "skymobi",
                        "bean",
                        "tlv",
                        "decode",
                        "decoders",
                        "BeanTLVDecoder"
                ],
                "className" : "BeanTLVDecoder"
        },
        "host" : {
                "process" : "20592@10_10_10_130.localdomain",
                "name" : "10_10_10_130.localdomain",
                "ip" : "10.10.10.130"
        }
}



转换成PostgreSQL的表, 我这里使用的是PostgreSQL 9.2, 未使用JSON类型, 因为现在JSON类型还不是很成熟.

create table sms_plat_mrp (
  create_time timestamp(0), 
  level text, 
  thread text, 
  message text,  
  loggerName text,
  fileName text,
  method text,
  lineNumber int,
  class text,
  host text
);
create index idx_sms_plat_mrp on sms_plat_mrp (create_time);


需要一个时间索引, 因为统计都是基于时间段的.

插入两条测试数据到PostgreSQL数据库

insert into sms_plat_mrp (create_time, level, thread, message, loggername, filename, method, linenumber, class, host)
values (
now(), 
'WARN', 
'DubboServerHandler-thread-198', 
'订单skyChargeId=13505384817011247601的当前状态是PaySuccess，不能正常接收付费结果报告msgid=20714337&payid=13505384817011247601&appid=428021&appver=2&type=3&hsman=ahong&hstype=ah24a&imei=358511012403055&imsi=460021298968285&provider=0&msgcen=8613800913500&portv=101101180&vmv=1964&smsid=30116326&status=0&price=100&dest=106680061&spcode=11&feecode=9SK&sendtime=20716256&statustime=20722283', '{
                "fullyQualifiedClassName" : "com.skymobi.pay.netsms.service.SmsPayServiceImpl",
                "package" : [
                        "com",
                        "skymobi",
                        "pay",
                        "netsms",
                        "service",
                        "SmsPayServiceImpl"
                ],
                "className" : "SmsPayServiceImpl"
        }', 
'SmsPayServiceImpl.java', 
'isIgnorePayResult',
209,
'{
                "fullyQualifiedClassName" : "com.skymobi.pay.netsms.service.SmsPayServiceImpl",
                "package" : [
                        "com",
                        "skymobi",
                        "pay",
                        "netsms",
                        "service",
                        "SmsPayServiceImpl"
                ],
                "className" : "SmsPayServiceImpl"
        }',
'{
                "process" : "20592@10_10_10_130.localdomain",
                "name" : "10_10_10_130.localdomain",
                "ip" : "10.10.10.130"
        }'
);

insert into sms_plat_mrp (create_time, level, thread, message, loggername, filename, method, linenumber, class, host)
values (
now(), 
'INFO',
'DubboServerHandler-thread-183',
$$receive a pay request SmsPayOrder{id=0, price=100, cap=null, merchantID='10100', VMV=2009, instanceID=49856, orderID='c2c2102012102915383122536', productID='null', productName='null', channelId=0, IMEI='358679881004234', IMSI='460027776410995', HSV=102070009, terminal='sm240', factory='ylt', skyid=256784221, createTime=Mon Oct 29 15:38:36 CST 2012, msgcen='null', status=Init, cpDealResult=un_notice, ropDealResult=un_notice, merchantPasswd='null', skyChargeId='null', failCode=0, payInstanceId=0, realPrice=0, payType=3, appId=428021, appName='maopaoqipai', appVersion='2', businessId='null', businessName='null', channelName='null', portalId='1008', portalName='null', ip='117.136.14.101', network='null', failDesc='null', mobiPhone='null', payResultInfo='null', ext1='', ext2='', ext3='', payRequestInfo='null', notifyAddress='null'}$$,
'{
                "fullyQualifiedClassName" : "com.skymobi.pay.netsms.service.SmsPayServiceImpl",
                "package" : [
                        "com",
                        "skymobi",
                        "pay",
                        "netsms",
                        "service",
                        "SmsPayServiceImpl"
                ],
                "className" : "SmsPayServiceImpl"
        }',
'SmsPayServiceImpl.java',
'commitOrder',
67,
'{
                "fullyQualifiedClassName" : "com.skymobi.pay.netsms.service.SmsPayServiceImpl",
                "package" : [
                        "com",
                        "skymobi",
                        "pay",
                        "netsms",
                        "service",
                        "SmsPayServiceImpl"
                ],
                "className" : "SmsPayServiceImpl"
        }',
'{
                "process" : "20592@10_10_10_130.localdomain",
                "name" : "10_10_10_130.localdomain",
                "ip" : "10.10.10.130"
        }');


2. 接下来看一下闪电狗用到的javascript. 
基本上是基于前面的日志表进行统计, 将统计后的数据插入另一张表. 所以在PostgreSQL数据库中需要创建另一张表.

create table sms_plat_access_metrics (create_time timestamp(0), name text, value numeric);



2.1
//统计错误日志占比

err=db.sms_plat_mrp.find({'level':'ERROR',timestamp:{$gt:new Date(new Date - 300000)}}).count()
total=db.sms_plat_mrp.find({timestamp:{$gt:new Date(new Date - 300000)}}).count();
if(total==0)total=1;
value=err*100/total;
db.sms_plat_access_metrics.save({name:'错误日志百分比',value:value,timeStamp:new Date().getTime()});
return value;



转换成PostgreSQL : 

do language plpgsql $$
declare
v_create_time timestamp(0);
v_name text;
v_value text;
begin
insert into sms_plat_access_metrics (create_time, name, value) 
  select now(), '错误日志百分比', sum(case level when 'ERROR' then 1 else 0 end)/(1+count(*)) from sms_plat_mrp
    where create_time > (now() - interval '300 second')
  returning create_time,name,value into v_create_time,v_name,v_value;
raise notice '%, %, %', v_create_time,v_name,v_value;
return;
end;
$$;



2.2
//统计日志里某些数字总值，如每5分钟收入等

m=function () { 
     result = this.message.match(".*money=(\\d+)"); 
     if (result) { 
         pricePaied = new NumberLong(result[1]);         
         emit("pricePaied", pricePaied); 
     } 
  
 }  
  
 r= function (key, values) { 
     var total = 0; 
     for (var i = 0; i < values.length; i++) { 
         total += values[i]; 
     } 
     return total; 
 }   
 res=db.sms_plat_mrp.mapReduce(m, r, {out:"sms_plat_mrp_output", query:{timestamp:{$gt:new Date(new Date - 300000)}}}); 
 pricePaied=db.sms_plat_mrp_output.findOne({_id:"pricePaied"});
 if(pricePaied) 
    v=pricePaied.value; 
   else 
     v=0;    
 db.sms_plat_access_metrics.save({name:"5分钟收入",value:v,timeStamp:new Date().getTime()}); 
 return res; 



转换成PostgreSQL : 

do language plpgsql $$
declare
v_create_time timestamp(0);
v_name text;
v_value text;
begin
insert into sms_plat_access_metrics (create_time, name, value) 
  select now(), '5分钟收入', sum(mon::numeric) from 
    ( select unnest(regexp_matches(message,'.*money=([[:digit:]]+)')) AS mon from sms_plat_mrp
        where create_time > (now() - interval '300 second') ) t
    returning create_time,name,value into v_create_time,v_name,v_value;
raise notice '%, %, %', v_create_time,v_name,v_value;
return;
end;
$$;



2.3
//统计日志里某些关键字频率，并提取到告警邮件里

 var   metric_name="异常数据次数";       
 var cur = db.sms_plat_mrp.find({message:/系统错误/,timestamp:{$gt:new Date(new Date - 60*60*1000)}}); 
  var content = "";  
  var count=0; 
  cur.forEach( function(log) { 
      count++; 
      content =content+"\n "+log.timestamp.toLocaleDateString()+" "+ log.timestamp.toLocaleTimeString() +" " +log["message"]; 
  }); 
     
 db.sms_plat_access_metrics.save({name:metric_name,value:count, content:content,timeStamp:new Date().getTime()}); 
 return    "次数:"+ count +" \n内容"+content;



转换成PostgreSQL : 

do language plpgsql $$
declare
v_create_time timestamp(0);
v_name text;
v_value text;
begin
insert into sms_plat_access_metrics (create_time, name, value) 
  select now(), '异常数据次数', count(*) from sms_plat_mrp
    where message ~ '系统错误' and create_time > (now() - interval '1 hour') 
  returning create_time,name,value into v_create_time,v_name,v_value;
raise notice '%, %, %', v_create_time,v_name,v_value;
return;
end;
$$;



2.4

var now = new Date;
 var o=db.sms_plat_mrp.findOne({"className":"org.log4mongo.contrib.JvmMonitor",timestamp:{$gt:new Date(now - 3*60*1000)}});
 if(o){
 result = o.message.match(".*memoryUsed=(\\d+).*cpuUsed=(\\d+).*threadCount=(\\d+)");
   var memoryUsed = result[1]/1024;
   var cpuUsed = result[2];
   var threadCount = result[3];
   db.sms_plat_access_metrics.save({name:"memoryUsed (M)",value:memoryUsed,timeStamp:now.getTime()});  
   db.sms_plat_access_metrics.save({name:"cpuUsed",value:cpuUsed,timeStamp:now.getTime()});  
   db.sms_plat_access_metrics.save({name:"threadCount",value:threadCount,timeStamp:now.getTime()});  
  return "cpuUsed="+ cpuUsed  +" memoryUsed="+memoryUsed  +" threadCount="+threadCount;
  }
 return "无记录";



转换成PostgreSQL : 

do language plpgsql $$
declare
  ref refcursor;
  result text[];
begin
  open ref for
    select regexp_matches(message, '.*memoryUsed=([[:digit:]]+).*cpuUsed=([[:digit:]]+).*threadCount=([[:digit:]]+)') as res from sms_plat_mrp 
      where loggerName ~ '"className" = "org.log4mongo.contrib.JvmMonitor"' 
      and create_time > (now() - interval '1 hour')
      and message ~ '.*memoryUsed=([[:digit:]]+).*cpuUsed=([[:digit:]]+).*threadCount=([[:digit:]]+)';
loop
  fetch ref into result;
  if found then
    insert into sms_plat_access_metrics (create_time, name, value) 
     values (now(), 'memoryUsed (M)', (result[1])::numeric / 1024);
    raise notice 'memoryUsed (M): %', (result[1])::numeric / 1024;
    insert into sms_plat_access_metrics (create_time, name, value) 
     values (now(), 'cpuUsed', result[2]);
    raise notice 'cpuUsed', result[2];
    insert into sms_plat_access_metrics (create_time, name, value) 
     values (now(), 'threadCount', result[3]);
    raise notice 'threadCount', result[3];
  else
    close ref;
    exit;
  end if;
end loop;
return;
end;
$$;



【小结】
1. 用PostgreSQL的DO语法替代javascript是不错的选择, 不需要创建PostgreSQL函数, 方便开发人员修改和调试. 
2. javascript中使用return 返回方便开发人员测试脚本, 而PostgreSQL中同样可以使用raise notice 来输出结果, 方便开发人员调试.
3. mongoDB支持capped collection, 可以限定表的SIZE和记录数, 达到后将rotate. 而PostgreSQL不支持这种表. 但是可以通过定时任务来达到同样的目的, 下次讲讲PostgreSQL实现capped table.
《PostgreSQL rotate table like mongoDB's capped collection》

【参考】
1. https://github.com/flash-dog/flash-dog
2. http://www.postgresql.org/docs/9.2/static/sql-do.html

评论

hill - 2012-10-30 9:57:57

先赞1个！
对于我们普通程序员来说，还是有点难懂，挑战不小

德哥@Digoal 回复 hill - 2012-10-30 9:57:57

感谢珊哥指点, PLPGSQL的用法在 http://www.postgresql.org/docs/9.2/static/plpgsql.html
面向过程的语言, 程序员应该很好懂.
