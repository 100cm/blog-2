PostgreSQL research

PostgreSQL batch Get Data|ETL use "cursor" replace "order by PK or (UK+not null) limit $? offset $?"

2013-02-05 13:31:44   查看原文>>

从PostgreSQL 读取大量数据, 一般需要分批处理.
今天一位开发的同事抱怨在某业务中从数据库读取大量数据耗时非常漫长. 
模拟环境如下 : 

postgres=# create table test(id int primary key, crt_time timestamp);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_pkey" for table "test"
CREATE TABLE
postgres=# insert into test select generate_series(1,5000000),clock_timestamp();
INSERT 0 5000000


每天约有500W条记录插入test表, 该业务每天需要将1天的数据读取出来.
所以在crt_time上有个时间索引.

postgres=# create index idx_test_crt_time on test (crt_time);
CREATE INDEX


读取的SQL如下, 每次读取2W条 : 

postgres=# select * from test where crt_time >= '$1'::date and crt_time < '$2'::date order by id limit 20000 offset $3;


执行计划 : 

postgres=# explain select * from test where crt_time >= '2013-02-05'::date and crt_time < '2013-02-06'::date order by id limit 20000 offset 0;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Limit  (cost=73335.94..73385.94 rows=20000 width=12)
   ->  Sort  (cost=73335.94..73398.44 rows=25000 width=12)
         Sort Key: id
         ->  Index Scan using idx_test_crt_time on test  (cost=0.00..71509.74 rows=25000 width=12)
               Index Cond: ((crt_time >= '2013-02-05'::date) AND (crt_time < '2013-02-06'::date))
(5 rows)


相当于要执行250次以上SQL.才能将所有数据读出.
测试如下 : 

ocz@db-172-16-3-150-> cat test.sh
#!/bin/bash
date +%F%T
for ((i=0;i<250;i++)) do
psql <<EOF >>/dev/shm/test.out 2>&1
select * from test where crt_time >= '2013-02-05'::date and crt_time < '2013-02-06'::date order by id limit 20000 offset (20000*$i);
EOF
done
date +%F%T


执行结果 : 

ocz@db-172-16-3-150-> ./test.sh 
2013-02-0510:26:45
2013-02-0510:56:47


耗时 : 
1802秒.
work_mem调到4GB后为806秒.

将以上场景改成通过游标的方式 : 

ocz@db-172-16-3-150-> cat test.sh
#!/bin/bash
for ((i=0;i<250;i++)) do
  SQL=$SQL"fetch 20000 from cur1; "
done
echo $SQL
date +%F%T
psql <<EOF >>/dev/shm/test.out 2>&1
begin;
declare cur1 cursor for select * from test where crt_time >= '2013-02-05'::date and crt_time < '2013-02-06'::date;
$SQL
close cur1;
EOF
date +%F%T


执行结果 : 

ocz@db-172-16-3-150-> ./test.sh 
fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1; fetch 20000 from cur1;
2013-02-0513:13:34
2013-02-0513:14:18


耗时 : 
44秒.

两种方式性能相差41倍.

【小结】
1. 使用第一种方式获取数据, 有2个弊端：
    1.1 耗费资源, 因为每次都要重新排序.
    1.2 使用read committed隔离模式, 如果抽取的数据在变更的话, 最终获取到的数据可能不一致(逻辑上不一致).
          例如A记录和B记录是相互依赖的. A记录抽取后, A,B被更新, 然后抽B记录. 最终A,B记录逻辑上不一致.
    如果要解决不一致的问题, 必须使用repeatable read或以上隔离模式, 并且开启事务在同一个事务中进行抽取.
不一致问题再现 : 

postgres=# create table test(id int primary key, crt_time timestamp, info text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_pkey" for table "test"
CREATE TABLE
postgres=# insert into test select generate_series(1,10), clock_timestamp(), 'test';
INSERT 0 10
SESSION A(抽取进程) : 
postgres=# select * from test order by id limit 1 offset 0;
 id |          crt_time          | info 
----+----------------------------+------
  1 | 2013-02-05 13:23:19.249236 | test
(1 row)

SESSION B(业务进程) : 
postgres=# update test set info='new' where id=2;
UPDATE 1

SESSION A(抽取进程) : 
postgres=# select * from test order by id limit 1 offset 1;
 id |          crt_time          | info 
----+----------------------------+------
  2 | 2013-02-05 13:23:19.249515 | new
(1 row)
-- 显然这里抽取到的数据不一致, SESSION B的改动在后面的抽取中反映出来了.


问题解决测试(repeatable read) : 

SESSION A(抽取进程) : 
postgres=# begin ISOLATION LEVEL repeatable read;
BEGIN
postgres=# select * from test order by id limit 2 offset 0;
 id |          crt_time          | info 
----+----------------------------+------
  1 | 2013-02-05 13:23:19.249236 | test
  2 | 2013-02-05 13:23:19.249515 | new
(2 rows)

SESSION B(业务进程) : 
postgres=# update test set info='new' where id=3;
UPDATE 1

SESSION A(抽取进程) : 
postgres=# select * from test order by id limit 2 offset 2;
 id |          crt_time          | info 
----+----------------------------+------
  3 | 2013-02-05 13:23:19.249527 | test
  4 | 2013-02-05 13:23:19.249532 | test
(2 rows)
-- 数据一致, 没有受到SESSION B的影响.



2. 使用游标抽取解决了以上两个问题.
测试 : 

postgres=# truncate test ;
TRUNCATE TABLE
postgres=# insert into test select generate_series(1,10), clock_timestamp(), 'test';
INSERT 0 10
SESSION A(抽取进程) : 
postgres=# begin;
BEGIN
postgres=# declare cur1 cursor for select * from test;
DECLARE CURSOR
postgres=# fetch 5 from cur1;
 id |          crt_time          | info 
----+----------------------------+------
  1 | 2013-02-05 13:27:24.408857 | test
  2 | 2013-02-05 13:27:24.411389 | test
  3 | 2013-02-05 13:27:24.411402 | test
  4 | 2013-02-05 13:27:24.411407 | test
  5 | 2013-02-05 13:27:24.411412 | test
(5 rows)

SESSION B(业务进程) : 
postgres=# update test set info='new' where id=6;
UPDATE 1

SESSION A(抽取进程) : 
postgres=# fetch 5 from cur1;
 id |          crt_time          | info 
----+----------------------------+------
  6 | 2013-02-05 13:27:24.411417 | test
  7 | 2013-02-05 13:27:24.411421 | test
  8 | 2013-02-05 13:27:24.411426 | test
  9 | 2013-02-05 13:27:24.411431 | test
 10 | 2013-02-05 13:27:24.411436 | test
(5 rows)

postgres=# fetch 5 from cur1;
 id | crt_time | info 
----+----------+------
(0 rows)
-- 数据一致, 没有受到SESSION B的影响.
postgres=# close cur1;
CLOSE CURSOR
-- 记得关闭游标.



3. 如果想不重复抽取数据, 并且不使用排序的话. 怎么办呢? 什么情况下可以这么做?
回到本文开头, 本例用到的SQL : 
select * from test where crt_time >= '$1'::date and crt_time < '$2'::date order by id limit 20000 offset $3;
这里对pk:id 做了排序, 然后limit . offset .
如果不排序直接 limit . offset . 最终可能得到重复的数据.
那么怎么样不排序又能得到一致的结果呢?
    1. 让SQL走索引(本例为crt_time).
    2. 确保取数据的区间内索引不会变更. 例如本例的走的时间索引, 同时这个字段在抽取过程中只会随着时间增长, 不会插入比当前值更小的值.
或者即使会插入更小的值, 也不会影响到本SQL要取的数据区间的索引page（例如取的是前一天的值, 只要新插入的数据不是前一天的范围就行）. 
满足以上2点, 那么不用排序也可以分页取出逻辑一致的数据.
虽然如此, 但是最优的方法还是推荐游标, 因为使用offset时每条SQL索引页还是要重复扫的.
测试环境 : 

postgres=# drop table test;
DROP TABLE
postgres=# create table test(id int primary key, crt_time timestamp, info text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_pkey" for table "test"
CREATE TABLE
postgres=# select now();
              now              
-------------------------------
 2013-02-05 14:14:43.036225+08
(1 row)
postgres=# insert into test select generate_series(1,10),clock_timestamp(),'digoal';
INSERT 0 10
postgres=# create index idx_test_crt_time on test (crt_time);
CREATE INDEX
postgres=# select now();
              now              
-------------------------------
 2013-02-05 14:15:44.936202+08
(1 row)
取数区间 : 
2013-02-05 14:14:43.036225 到 2013-02-05 14:15:44.936202



测试(取数范围外) : 
3.1 新增(取数范围外) : 

SESSION A(抽取进程) : 
-- 确保抽取进程执行计划正确, 走的是crt_time索引.
postgres=# set enable_seqscan=off;
SET
postgres=# explain select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202';
                                                                             QUERY PLAN                                             
                                 
------------------------------------------------------------------------------------------------------------------------------------
---------------------------------
 Index Scan using idx_test_crt_time on test  (cost=0.00..8.27 rows=1 width=44)
   Index Cond: ((crt_time >= '2013-02-05 14:14:43.036225'::timestamp without time zone) AND (crt_time <= '2013-02-05 14:15:44.936202
'::timestamp without time zone))
(2 rows)
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 0;
 id |          crt_time          |  info  
----+----------------------------+--------
  1 | 2013-02-05 14:15:22.751121 | digoal
  2 | 2013-02-05 14:15:22.751417 | digoal
  3 | 2013-02-05 14:15:22.751428 | digoal
  4 | 2013-02-05 14:15:22.751433 | digoal
  5 | 2013-02-05 14:15:22.751438 | digoal
(5 rows)

SESSION B(业务进程) : 
-- 在取数范围前后各插入1条数据.
postgres=# insert into test values (0, '2013-02-04 14:14:43.036225', 'digoal');
INSERT 0 1
postgres=# insert into test values (11, '2013-02-06 14:14:43.036225', 'digoal');
INSERT 0 1

SESSION A(抽取进程) : 
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 5; 
 id |          crt_time          |  info  
----+----------------------------+--------
  6 | 2013-02-05 14:15:22.751443 | digoal
  7 | 2013-02-05 14:15:22.751448 | digoal
  8 | 2013-02-05 14:15:22.751452 | digoal
  9 | 2013-02-05 14:15:22.751457 | digoal
 10 | 2013-02-05 14:15:22.751462 | digoal
(5 rows)
-- 数据抽取正常



3.2 修改(取数范围外) : 

-- 先确保抽取走crt_time索引, 略, 同上.
SESSION A(抽取进程) : 
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 0;
 id |          crt_time          |  info  
----+----------------------------+--------
  1 | 2013-02-05 14:15:22.751121 | digoal
  2 | 2013-02-05 14:15:22.751417 | digoal
  3 | 2013-02-05 14:15:22.751428 | digoal
  4 | 2013-02-05 14:15:22.751433 | digoal
  5 | 2013-02-05 14:15:22.751438 | digoal
(5 rows)
SESSION B(业务进程) : 
postgres=# update test set crt_time='2013-02-03 14:14:43.036225',id=-1,info='test' where id=0;
UPDATE 1
postgres=# update test set crt_time='2013-02-07 14:14:43.036225',id=12,info='test' where id=11;
UPDATE 1
SESSION A(抽取进程) : 
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 5; 
 id |          crt_time          |  info  
----+----------------------------+--------
  6 | 2013-02-05 14:15:22.751443 | digoal
  7 | 2013-02-05 14:15:22.751448 | digoal
  8 | 2013-02-05 14:15:22.751452 | digoal
  9 | 2013-02-05 14:15:22.751457 | digoal
 10 | 2013-02-05 14:15:22.751462 | digoal
(5 rows)



3.3 删除(取数范围外) : 

-- 先确保抽取走crt_time索引, 略, 同上.
SESSION A(抽取进程) : 
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 0;
 id |          crt_time          |  info  
----+----------------------------+--------
  1 | 2013-02-05 14:15:22.751121 | digoal
  2 | 2013-02-05 14:15:22.751417 | digoal
  3 | 2013-02-05 14:15:22.751428 | digoal
  4 | 2013-02-05 14:15:22.751433 | digoal
  5 | 2013-02-05 14:15:22.751438 | digoal
(5 rows)
SESSION B(业务进程) : 
postgres=# delete from test where id=-1;
DELETE 1
postgres=# delete from test where id=12;
DELETE 1
SESSION A(抽取进程) : 
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 5; 
 id |          crt_time          |  info  
----+----------------------------+--------
  6 | 2013-02-05 14:15:22.751443 | digoal
  7 | 2013-02-05 14:15:22.751448 | digoal
  8 | 2013-02-05 14:15:22.751452 | digoal
  9 | 2013-02-05 14:15:22.751457 | digoal
 10 | 2013-02-05 14:15:22.751462 | digoal
(5 rows)



测试(取数范围内的crt_time索引字段变更, 可能导致结果不一致或重复) : 
3.4 新增(取数范围内, 准确来说是已经取数的区间) : 

postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 0;
 id |          crt_time          |  info  
----+----------------------------+--------
  1 | 2013-02-05 14:15:22.751121 | digoal
  2 | 2013-02-05 14:15:22.751417 | digoal
  3 | 2013-02-05 14:15:22.751428 | digoal
  4 | 2013-02-05 14:15:22.751433 | digoal
  5 | 2013-02-05 14:15:22.751438 | digoal
(5 rows)
postgres=# insert into test values (0,'2013-02-05 14:15:22.751433','new');
INSERT 0 1
-- ID=5的记录重复抽取 : 
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 5; 
 id |          crt_time          |  info  
----+----------------------------+--------
  5 | 2013-02-05 14:15:22.751438 | digoal
  6 | 2013-02-05 14:15:22.751443 | digoal
  7 | 2013-02-05 14:15:22.751448 | digoal
  8 | 2013-02-05 14:15:22.751452 | digoal
  9 | 2013-02-05 14:15:22.751457 | digoal
(5 rows)


在未取数区间新增对结果没影响 : 

postgres=# delete from test where id=0;
DELETE 1
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 0;
 id |          crt_time          |  info  
----+----------------------------+--------
  1 | 2013-02-05 14:15:22.751121 | digoal
  2 | 2013-02-05 14:15:22.751417 | digoal
  3 | 2013-02-05 14:15:22.751428 | digoal
  4 | 2013-02-05 14:15:22.751433 | digoal
  5 | 2013-02-05 14:15:22.751438 | digoal
(5 rows)
postgres=# insert into test values (0,'2013-02-05 14:15:22.751457','new');
INSERT 0 1
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 5; 
 id |          crt_time          |  info  
----+----------------------------+--------
  6 | 2013-02-05 14:15:22.751443 | digoal
  7 | 2013-02-05 14:15:22.751448 | digoal
  8 | 2013-02-05 14:15:22.751452 | digoal
  0 | 2013-02-05 14:15:22.751457 | new
  9 | 2013-02-05 14:15:22.751457 | digoal
(5 rows)



3.5 修改(取数范围内, 准确来说是已取数的区间记录修改到未取数区间, 或者未取数区间的数据修改到未取数区间以外的其他区间) : 

postgres=# delete from test  where id=0;
DELETE 1
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 0;
 id |          crt_time          |  info  
----+----------------------------+--------
  1 | 2013-02-05 14:15:22.751121 | digoal
  2 | 2013-02-05 14:15:22.751417 | digoal
  3 | 2013-02-05 14:15:22.751428 | digoal
  4 | 2013-02-05 14:15:22.751433 | digoal
  5 | 2013-02-05 14:15:22.751438 | digoal
(5 rows)
postgres=# update test set crt_time = '2013-02-05 14:15:22.751448' where id=5;
UPDATE 1
-- ID=6的记录抽取不到, 并且已抽取数据的CRT_time最大的那条记录将重复抽取.
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 5;
 id |          crt_time          |  info  
----+----------------------------+--------
  5 | 2013-02-05 14:15:22.751448 | digoal
  7 | 2013-02-05 14:15:22.751448 | digoal
  8 | 2013-02-05 14:15:22.751452 | digoal
  9 | 2013-02-05 14:15:22.751457 | digoal
 10 | 2013-02-05 14:15:22.751462 | digoal
(5 rows)



3.6 删除(取数范围内, 准确来说是删除已取数区间的数据, 将导致有数据抽取不到) : 

postgres=# update test set crt_time = '2013-02-05 14:15:22.751438' where id=5;
UPDATE 1
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 0;
 id |          crt_time          |  info  
----+----------------------------+--------
  1 | 2013-02-05 14:15:22.751121 | digoal
  2 | 2013-02-05 14:15:22.751417 | digoal
  3 | 2013-02-05 14:15:22.751428 | digoal
  4 | 2013-02-05 14:15:22.751433 | digoal
  5 | 2013-02-05 14:15:22.751438 | digoal
(5 rows)
postgres=# delete from test where id=1;
DELETE 1
-- ID=6的记录将抽取不到.
postgres=# select * from test where crt_time between '2013-02-05 14:14:43.036225' and '2013-02-05 14:15:44.936202' limit 5 offset 5; 
 id |          crt_time          |  info  
----+----------------------------+--------
  7 | 2013-02-05 14:15:22.751448 | digoal
  8 | 2013-02-05 14:15:22.751452 | digoal
  9 | 2013-02-05 14:15:22.751457 | digoal
 10 | 2013-02-05 14:15:22.751462 | digoal
(4 rows)




【参考】
1. http://jdbc.postgresql.org/documentation/head/query.html
2. http://www.postgresql.org/docs/9.2/static/libpq-exec.html

