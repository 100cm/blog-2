PostgreSQL research

PostgreSQL 9.5 new feature - Improve PL/pgSQL array performance

2015-07-10 9:11:56   查看原文>>

某些数据类型存储在磁盘的格式主要的初衷是为了减少存储空间，而这种结构可能不适合在内存中使用，例如没有指针。
为了提高这些数据类型在内存中的使用效率，PostgreSQL 9.5 针对这些类型修改了它们在内存中的描述。
例如针对数组类型，提高了element-by-element的检索或更新性能。

Support "expanded" objects, particularly arrays, for better performance.

This patch introduces the ability for complex datatypes to have an
in-memory representation that is different from their on-disk format.
On-disk formats are typically optimized for minimal size, and in any case
they can't contain pointers, so they are often not well-suited for
computation.  Now a datatype can invent an "expanded" in-memory format
that is better suited for its operations, and then pass that around among
the C functions that operate on the datatype.  There are also provisions
(rudimentary as yet) to allow an expanded object to be modified in-place
under suitable conditions, so that operations like assignment to an element
of an array need not involve copying the entire array.

The initial application for this feature is arrays, but it is not hard
to foresee using it for other container types like JSON, XML and hstore.
I have hopes that it will be useful to PostGIS as well.

In this initial implementation, a few heuristics have been hard-wired
into plpgsql to improve performance for arrays that are stored in
plpgsql variables.  We would like to generalize those hacks so that
other datatypes can obtain similar improvements, but figuring out some
appropriate APIs is left as a task for future work.  (The heuristics
themselves are probably not optimal yet, either, as they sometimes
force expansion of arrays that would be better left alone.)

Preliminary performance testing shows impressive speed gains for plpgsql
functions that do element-by-element access or update of large arrays.
There are other cases that get a little slower, as a result of added array
format conversions; but we can hope to improve anything that's annoyingly
bad.  In any case most applications should see a net win.

对比测试：
PostgreSQL 9.5

postgres=# do language plpgsql $$
declare
  v_arr int[]; 
  i int; 
  t numeric := EXTRACT(EPOCH FROM clock_timestamp());
begin
  select array_agg(id) into v_arr from generate_series(1,10000000) t(id); 
  raise notice '%', EXTRACT(EPOCH FROM clock_timestamp())-t;                               
  foreach i in array v_arr loop
    perform i;                                                        
  end loop; 
  raise notice '%', EXTRACT(EPOCH FROM clock_timestamp())-t;
end;
$$;
NOTICE:  3.19077205657959
NOTICE:  39.843327999115
DO



PostgreSQL 9.4

postgres=# do language plpgsql $$
declare
  v_arr int[]; 
  i int; 
  t numeric := EXTRACT(EPOCH FROM clock_timestamp());
begin
  select array_agg(id) into v_arr from generate_series(1,10000000) t(id); 
  raise notice '%', EXTRACT(EPOCH FROM clock_timestamp())-t;                               
  foreach i in array v_arr loop
    perform i;                                                        
  end loop; 
  raise notice '%', EXTRACT(EPOCH FROM clock_timestamp())-t;
end;
$$;
NOTICE:  3.21463513374329
NOTICE:  42.7020330429077
DO



[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=1dc5ebc9077ab742079ce5dac9a6664248d42916

Flag Counter
