PostgreSQL research

Database Index Apply Introduction

2011-01-11 17:13:14   查看原文>>


【参考】
wikipedia

Index (database)

索引在数据库中应用较广，在搜索引擎的应用中也很普遍，不过在数据库和搜索引擎中的应用是有很大差别的，以下简单介绍一下索引在数据库领域的应用。
一、索引结构：
非集群索引(Non-Clustered):
数据表存储数据是无序存储，无序存储写入速度比较快。创建非集群索引后，索引保持创建时选择的KEY的顺序。索引的叶节点包含指向数据页面的信息和页面中该条记录的行号的信息。
非集群索引的特点：
1. 物理行存储顺序和索引的顺序不一致。
2. 典型的应用是将非集群索引创建在需要join,where,order by的key上面。
3. 适合经常涉及记录修改的表。
如，微软的SQLSERVER中默认在PK上创建一个集群索引，非集群索引的创建可以通过create index执行，并且一个表可以创建多个非集群索引。

集群索引(Clustered):
数据表中行记录的物理存储顺序和集群索引的顺序一致，因此一个数据表中只能创建一个集群索引。由于物理顺序存储一致，某些可以降低某些IO的操作频繁度，如按照集群索引的范围条件进行查询，无序存储的话要扫描的PAGE肯定是比有序存储的多。
某些数据库中使用分开的文件存储集群索引和数据表，有些数据库将集群索引和数据表存储在同一个数据文件的不同BLOCK中。
在ORACLE数据库中被称为index organized tables. 创建一个表存储顺序和集群索引的顺序一致，并且集群索引的叶节点包含真实数据行，

二、索引顺序
驱动列，某些数据库仅限于按驱动列查找才可能使用该索引，某些数据库在不包含驱动列但包含非驱动列的条件下也可以使用该索引。

三、应用限制
SELECT email_address FROM customers WHERE email_address LIKE '%@yahoo.com';
正常情况下不走索引，解决办法,
create index on reverse(email_address)
SELECT email_address FROM customers WHERE reverse(email_address) LIKE reverse('%@yahoo.com');

四、索引类型
Bitmap Index
位图索引主要用于bitwise logical operation场景.
Dense Index
keys 和 points组成,points指向表存储的每条记录。
Sparse Index
同样有keys和points组成，只不过points指向存储的block。主键属于sparse index.
Reverse Index
key中存放的值变成倒序，如12345在key中被存放为54321.

五、Covering Index
Oracle中有Index FFS.索引中包含了需要查询的记录。因此在查询时不需要扫描物理表.
A covering index can dramatically speed up data retrieval but may itself be large due to the additional keys, which slow down data insertion & update. To reduce such index size, some systems allow non-key fields to be included in the index. Non-key fields are not themselves part of the index ordering but only included
at the leaf level, allowing for a covering index with less overall index size.
