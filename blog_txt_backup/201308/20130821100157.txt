PostgreSQL research

PostgreSQL use pgbench and mongo_fdw test mongoDB & PostgreSQL performance

2013-08-21 10:01:57   查看原文>>

2015-02-08更新
实际测试建议自行编写测试程序, 不要使用pgbench加PostgreSQL外部表来测试对比, 没有意义.
例如使用python可以很方便快速的进行测试.

最近写过两篇使用pgbench以及PostgreSQL fdw测试对比PostgreSQL性能以及MySQL, Oracle的性能对比.
http://blog.163.com/digoal@126/blog/static/163877040201362355123969/
http://blog.163.com/digoal@126/blog/static/16387704020137834025753/
最近公司某些mongoDB的服务经常因为锁问题导致堵塞(当然,这可能是数据库选型带来的问题,当时只考虑要用mongodb的javascript.), 所以想借此机会将mongoDB上的业务迁移到PostgreSQL, PostgreSQL支持json类型同时也可以通过plv8 language支持javascript语言. 
在功能上来说从mongoDB迁移到PostgreSQL是完全没有问题的.
包括capped collection也是可以通过其他手段来实现的 : 
http://blog.163.com/digoal@126/blog/static/163877040201293051423810/
当然, 本文主要还是想用pgbench来测试一下mongoDB的查询性能.
测试环境 : 
服务器 DELL R610 8核E5504  @ 2.00GHz 内存 24G
操作系统版本 CentOS 5.7 x64
mongodb版本 2.4.5
mongo_fdw所在数据库版本PostgreSQL 9.2.4
对比mongoDB性能的PostgreSQL版本 9.4 devel
plv8 版本 1.4.1
v8 版本 3.14.5

mongoDB配置文件 : 
vi mongod.conf

logpath=/dev/null
logappend=true
fork = true
port = 5281
dbpath=/pgdata/digoal/1921/data02/mongodata/data
pidfilepath = /pgdata/digoal/1921/data02/mongodata/run/mongod.pid
nojournal = true
noauth = true
diaglog = 0
nohttpinterface = true
noprealloc = false
nssize = 1000


启动mongodb : 

[mongo@db-172-16-3-39 data]$ numactl --interleave=all mongod -f /pgdata/digoal/1921/data02/mongodata/etc/mongod.conf
[mongo@db-172-16-3-39 data]$ mongo 127.0.0.1:5281/admin
MongoDB shell version: 2.4.5
connecting to: 127.0.0.1:5281/admin
> show dbs
local   1.0390625GB



在PostgreSQL数据库中生成测试数据500W条.

pg94@db-172-16-3-33-> psql
psql (9.4devel)
Type "help" for help.
digoal=# create table mongo_test(id serial primary key, info text, crt_time timestamp(0));
CREATE TABLE
digoal=# insert into mongo_test (info,crt_time) select md5(random()::text), clock_timestamp() from generate_series(1,5000000);
INSERT 0 5000000


导出为JSON格式 : 

digoal=# select case when id is null then '{"id" : null,' else '{"id" : '||id||',' end || case when info is null then '"info" : null,' else '"info" : "'||info||'",' end || case when crt_time is null then '"crt_time" : null,' else '"crt_time" : {"$date": '||1000*extract(epoch from crt_time)||'}}' end from mongo_test limit 1;
                                             ?column?                                              
---------------------------------------------------------------------------------------------------
 {"id" : 712193,"info" : "dcf472682b9322c56bcdc04b1f508fed","crt_time" : {"$date": 1377007405000}}
(1 row)


copy (select case when id is null then '{"id" : null,' else '{"id" : '||id||',' end || case when info is null then '"info" : null,' else '"info" : "'||info||'",' end || case when crt_time is null then '"crt_time" : null,' else '"crt_time" : {"$date": '||1000*extract(epoch from crt_time)||'}}' end from mongo_test) to '/home/pg94/to_mongo.json';

pg94@db-172-16-3-33-> ll
-rw-r--r-- 1 pg94 pg94 472M Aug 20 14:34 to_mongo.json


导入到mongodb : 

mongoimport -h 127.0.0.1:5281 -d test -c mongo_test --type json --file ./to_mongo.json 

[mongo@db-172-16-3-39 ~]$ mongo 127.0.0.1:5281/test
MongoDB shell version: 2.4.5
connecting to: 127.0.0.1:5281/test
> db.mongo_test.findOne()
{
        "_id" : ObjectId("52130da5956db0c777ff0c0e"),
        "id" : 712193,
        "info" : "dcf472682b9322c56bcdc04b1f508fed",
        "crt_time" : ISODate("2013-08-20T14:03:25Z")
}
> db.mongo_test.count()
5000000


在另一台测试服务器(配置与mongodb所在的服务器一致)中安装postgresql 9.2.4以及mongo_fdw : 

pg92@db-172-16-3-33-> psql
psql (9.2.4)
Type "help" for help.
postgres=# CREATE FOREIGN TABLE f_mongo_test(_id name, id int, info text, crt_time timestamp ) server mongo_server options (database 'test', collection 'mongo_test');

postgres=# select * from f_mongo_test limit 1;
           _id            |   id   |               info               |      crt_time       
--------------------------+--------+----------------------------------+---------------------
 52130e1c956db0c777ff0c0f | 712193 | dcf472682b9322c56bcdc04b1f508fed | 2013-08-20 14:03:25
(1 row)


收集外部表的统计信息 : 

postgres=# analyze verbose f_mongo_test ;
INFO:  analyzing "public.f_mongo_test"
INFO:  "f_mongo_test": collection contains 5000000 rows; 30000 rows     in sample
ANALYZE


查询外部表耗时 : 

postgres=# explain (verbose, analyze, buffers, costs, timing) select * from f_mongo_test where id=1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_mongo_test  (cost=5.00..78172.50 rows=25000 width=44) (actual time=2084.008..2084.010 rows=1 loops=1)
   Output: id, info, crt_time
   Filter: (f_mongo_test.id = 1)
   Foreign Namespace: test.mongo_test
 Total runtime: 2084.591 ms
(5 rows)


由于目前mongodb中未使用索引, 所以影响查询性能, 加上索引 : 

> db.mongo_test.ensureIndex({"id":1})


加上索引后, 性能显著提升 : 

postgres=# explain (verbose, analyze, buffers, costs, timing) select * from f_mongo_test where id=1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_mongo_test  (cost=5.00..78172.50 rows=25000 width=44) (actual time=0.324..0.325 rows=1 loops=1)
   Output: id, info, crt_time
   Filter: (f_mongo_test.id = 1)
   Foreign Namespace: test.mongo_test
 Total runtime: 0.942 ms
(5 rows)


接下来要对比一下mongoDB和PostgreSQL的查询性能 : 
PostgreSQL本地表的primary key的单条查询性能如下 : 

pg92@db-172-16-3-33-> cat test.sql 
\setrandom id 1 5000000
select * from mongo_test where id=:id;
pg92@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 10 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 10 s
number of transactions actually processed: 1094219
tps = 108939.841203 (including connections establishing)
tps = 109216.834472 (excluding connections establishing)
statement latencies in milliseconds:
        0.001316        \setrandom id 1 5000000
        0.143290        select * from mongo_test where id=:id;


mongodb的查询性能通过外部表来查 : 

pg94@db-172-16-3-33-> pgbench -M simple -n -r -f ./test.sql -h 127.0.0.1 -p 1919 -U postgres -c 24 -j 24 -T 10 postgres
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 24
number of threads: 24
duration: 10 s
number of transactions actually processed: 38974
tps = 3894.009486 (including connections establishing)
tps = 3902.631852 (excluding connections establishing)
statement latencies in milliseconds:
        0.002327        \setrandom id 1 5000000
        6.141765        select 1 from f_mongo_test where id=:id;


此时mongod进程的CPU开销约368.8%, 接近所有cpu(8核)资源的一半.

Cpu(s): 26.3%us, 11.1%sy,  0.0%ni, 48.8%id,  0.0%wa,  0.5%hi, 13.3%si,  0.0%st
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
12660 mongo     25   0 3263m 812m 781m R 368.8 10.2   6:36.94 mongod -f ./mongod.conf


通过mongodb自身的opcounters查看query数和pgbench统计的query数是否吻合.

> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 296845,
        "update" : 0,
        "delete" : 0,
        "getmore" : 0,
        "command" : 1474354
}
-- pgbench测试完后, 查看opcounters
> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 335821,
        "update" : 0,
        "delete" : 0,
        "getmore" : 0,
        "command" : 1669226
}
query : 335821-296845 = 38976
command : 1669226-1474354 = 194872


mongo_fdw不仅仅对mongodb有查询操作, 还有其他的command请求. 所以这里我们在计算时使用command的累计.
command 每秒达到了19487. 除去建立连接的开销, mongodb本身的cpu使用率选择26.3%.
因此当系统资源耗尽时, mongodb应该可以处理达到74095每秒的请求.

执行db.serverStatus().opcounters本身会增加2个command计数. 不会增加query计数. 如下 : 

> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 412033,
        "update" : 0,
        "delete" : 0,
        "getmore" : 0,
        "command" : 2050263
}
> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 412033,
        "update" : 0,
        "delete" : 0,
        "getmore" : 0,
        "command" : 2050265
}



一次查询会增加一次query计数, 同时增加1次command计数, 如下 .

> use test
> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 412039,
        "update" : 0,
        "delete" : 0,
        "getmore" : 0,
        "command" : 2050277
}
> db.mongo_test.find({"id" : 1})
{ "_id" : ObjectId("52130e83956db0c77740794f"), "id" : 1, "info" : "47e77a34c50df1a84b2e08c17c3d2942", "crt_time" : ISODate("2013-08-20T14:03:17Z") }
> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 412040,
        "update" : 0,
        "delete" : 0,
        "getmore" : 0,
        "command" : 2050280
}



使用unix-sock测试 : 
http://blog.163.com/digoal@126/blog/static/163877040201372011056128/
测试结果如下 : 

pg94@db-172-16-3-33-> pgbench -M simple -n -r -f ./test.sql -h 127.0.0.1 -p 1919 -U postgres -c 24 -j 12 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 24
number of threads: 12
duration: 60 s
number of transactions actually processed: 179244
tps = 2986.862315 (including connections establishing)
tps = 2987.768753 (excluding connections establishing)
statement latencies in milliseconds:
        0.002353        \setrandom id 1 5000000
        8.027660        select 1 from f_mongo_test where id=:id;

> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 980795,
        "update" : 0,
        "delete" : 0,
        "getmore" : 327,
        "command" : 4896557
}
> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 1160048,
        "update" : 0,
        "delete" : 0,
        "getmore" : 327,
        "command" : 5792779
}

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                
 1615 pg94      15   0  296m 2412 1572 S  9.3  0.0   0:02.22 pgbench -M simple -n -r -f ./test.sql -h 127.0.0.1 -p 1919 -U postgres

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                
 1643 pg92      15   0 1222m 5416 3644 S  4.6  0.0   0:00.95 postgres: postgres postgres 127.0.0.1(22593) SELECT                    
 1629 pg92      15   0 1222m 5416 3644 S  4.3  0.0   0:00.98 postgres: postgres postgres 127.0.0.1(22579) SELECT                    
 1630 pg92      16   0 1222m 5428 3656 S  4.3  0.0   0:00.95 postgres: postgres postgres 127.0.0.1(22580) SELECT                    
 1633 pg92      15   0 1222m 5420 3648 S  4.3  0.0   0:00.97 postgres: postgres postgres 127.0.0.1(22583) SELECT                    
 1635 pg92      16   0 1222m 5420 3648 S  4.3  0.0   0:00.97 postgres: postgres postgres 127.0.0.1(22585) SELECT                    
 1637 pg92      16   0 1222m 5412 3640 S  4.3  0.0   0:00.98 postgres: postgres postgres 127.0.0.1(22587) SELECT                    
 1642 pg92      15   0 1222m 5412 3640 S  4.3  0.0   0:00.98 postgres: postgres postgres 127.0.0.1(22592) SELECT                    
 1645 pg92      15   0 1222m 5416 3644 R  4.3  0.0   0:00.99 postgres: postgres postgres 127.0.0.1(22595) SELECT                    
 1652 pg92      15   0 1222m 5420 3648 S  4.3  0.0   0:00.92 postgres: postgres postgres 127.0.0.1(22599) SELECT                    
 1632 pg92      16   0 1222m 5420 3648 S  4.0  0.0   0:00.94 postgres: postgres postgres 127.0.0.1(22582) SELECT                    
 1634 pg92      15   0 1222m 5412 3640 R  4.0  0.0   0:00.92 postgres: postgres postgres 127.0.0.1(22584) SELECT                    
 1639 pg92      16   0 1222m 5412 3640 S  4.0  0.0   0:00.95 postgres: postgres postgres 127.0.0.1(22589) SELECT                    
 1647 pg92      16   0 1222m 5416 3644 R  4.0  0.0   0:00.96 postgres: postgres postgres 127.0.0.1(22597) SELECT                    
 1628 pg92      15   0 1222m 5416 3644 S  3.7  0.0   0:00.94 postgres: postgres postgres 127.0.0.1(22578) SELECT                    
 1638 pg92      16   0 1222m 5424 3652 S  3.7  0.0   0:00.98 postgres: postgres postgres 127.0.0.1(22588) SELECT                    
 1640 pg92      16   0 1222m 5420 3648 S  3.7  0.0   0:00.95 postgres: postgres postgres 127.0.0.1(22590) SELECT                    
 1641 pg92      15   0 1222m 5420 3648 R  3.7  0.0   0:01.00 postgres: postgres postgres 127.0.0.1(22591) SELECT                    
 1648 pg92      15   0 1222m 5416 3644 S  3.7  0.0   0:00.99 postgres: postgres postgres 127.0.0.1(22598) SELECT                    
 1653 pg92      15   0 1222m 5412 3640 R  3.7  0.0   0:00.96 postgres: postgres postgres 127.0.0.1(22600) SELECT                    
 1657 pg92      15   0 1222m 5420 3648 S  3.7  0.0   0:01.00 postgres: postgres postgres 127.0.0.1(22601) SELECT                    
 1631 pg92      16   0 1222m 5416 3644 S  3.3  0.0   0:00.91 postgres: postgres postgres 127.0.0.1(22581) SELECT                    
 1636 pg92      16   0 1222m 5416 3644 S  3.3  0.0   0:00.91 postgres: postgres postgres 127.0.0.1(22586) SELECT                    
 1644 pg92      15   0 1222m 5412 3640 S  3.3  0.0   0:00.90 postgres: postgres postgres 127.0.0.1(22594) SELECT                    
 1646 pg92      15   0 1222m 5424 3652 S  3.3  0.0   0:00.94 postgres: postgres postgres 127.0.0.1(22596) SELECT 

Cpu(s): 28.8%us, 15.4%sy,  0.0%ni, 55.0%id,  0.1%wa,  0.0%hi,  0.7%si,  0.0%st
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                
 3389 mongo     20   0 3269m 839m 808m R 252.9  6.0  15:39.01 mongod -f ./mongod.conf
计算command/s
digoal=# select 4.6+4.3+4.3+4.3+4.3+4.3+4.3+4.3+4.3+4.0+4.0+4.0+4.0+3.7+3.7+3.7+3.7+3.7+3.7+3.7+3.3+3.3+3.3+3.3+9.3+252.9;
 ?column? 
----------
    356.3
(1 row)
digoal=# select (252.9/356.3)*28.8;
         ?column?         
--------------------------
 20.442099354476564692800
(1 row)
digoal=# select (5792779-4896557-2)/0.20442/60;
      ?column?      
--------------------
 73070.149691810977
(1 row)


和前面pgbench(postgresql fdw)和mongodb分开测试计算得到的值74095差不多.

[小结]
1. 使用pgbench测试的mongoDB qps性能为什么这么低?
一方面的原因是mongo_fdw未使用长连接, 大部分的开销在建立连接上面了.
另一方面mongo_fdw除了query, 还在mongodb中执行了其他command, 并不是纯粹的query. 所以最后mongodb性能引用的是command/s
约74095. 不及PostgreSQL的108939.
因此, 使用pgbench测试mongodb的性能并不可取. 还是用mongodb推荐的测试工具比较靠谱.
2. 本文测试使用的是mongo-c-driver-0.6的版本, 连接mongodb使用的是tcp连接. 如果改成unix-sock连接的话, 性能会略有提高.
有兴趣的朋友可参考 : 
http://blog.163.com/digoal@126/blog/static/163877040201372011056128/
3. 下一篇blog将介绍mongo_fdw到底对数据库执行了啥?
http://blog.163.com/digoal@126/blog/static/1638770402013721103316334/
以及如何优化mongo_fdw : 
http://blog.163.com/digoal@126/blog/static/16387704020137211111138/

[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201362355123969/
2. http://blog.163.com/digoal@126/blog/static/16387704020137834025753/
3. http://blog.163.com/digoal@126/blog/static/1638770402013045395446/
4. http://blog.163.com/digoal@126/blog/static/1638770402011076252545/
5. https://github.com/citusdata/mongo_fdw
6. http://blog.163.com/digoal@126/blog/static/16387704020137204136657/
7. http://blog.163.com/digoal@126/blog/static/163877040201293051423810/
8. http://api.mongodb.org/c/current/#
9. http://algernon.github.io/libmongo-client/
10. https://github.com/algernon/libmongo-client
11. http://blog.163.com/digoal@126/blog/static/163877040201372011056128/
