PostgreSQL research

PostgreSQL window function applied in frame enviroment

2013-08-15 17:03:55   查看原文>>

在数据分析场景中, 可能会有对前后数据做处理的需求.
例如

digoal=# create table t(usr_id int, apk_id int[], crt_time timestamp(0));
CREATE TABLE
digoal=# insert into t values (1,array[1,2,3,4],now()
digoal(# );
INSERT 0 1
digoal=# insert into t values (1,array[1,2,3,4,5],now());
INSERT 0 1
digoal=# insert into t values (1,array[1,2,3,5],now());
INSERT 0 1
digoal=# insert into t values (2,array[1,2,3,5],now());
INSERT 0 1
digoal=# insert into t values (2,array[1,3,5],now());
INSERT 0 1
digoal=# insert into t values (2,array[1,3,5,7],now());
INSERT 0 1
digoal=# select * from t;
 usr_id |   apk_id    |      crt_time       
--------+-------------+---------------------
      1 | {1,2,3,4}   | 2013-08-15 14:52:32
      1 | {1,2,3,4,5} | 2013-08-15 14:52:41
      1 | {1,2,3,5}   | 2013-08-15 14:52:45
      2 | {1,2,3,5}   | 2013-08-15 14:52:49
      2 | {1,3,5}     | 2013-08-15 14:52:52
      2 | {1,3,5,7}   | 2013-08-15 14:52:55
(6 rows)


数据处理需求是这样的, 根据usr_id分组, 并且按照crt_time排序, 比较相邻的两条记录中apk_id数组的差异(取出在上1条记录的apk_id中存在, 但是在当前apk_id中不存在的元素).
以上数据表记录要输出的数据如下 : 

null
{4}
null
null
{2}
null


PostgreSQL支持窗口函数, 聚合函数. 同时PostgreSQL 9.4聚合函数还支持filter过滤.
显然以上场景使用聚合函数不太合适, 但是可以使用窗口函数.
窗口函数的语法中支持帧的用法, 如下 : 

A window function call represents the application of an aggregate-like function over some portion of the rows selected by a query. Unlike regular aggregate function calls, this is not tied to grouping of the selected rows into a single output row — each row remains separate in the query output. However the window
function is able to scan all the rows that would be part of the current row's group according to the grouping specification (PARTITION BY list) of the window function call. The syntax of a window function call is one of the following:

function_name ([expression [, expression ... ]]) OVER ( window_definition )
function_name ([expression [, expression ... ]]) OVER window_name
function_name ( * ) OVER ( window_definition )
function_name ( * ) OVER window_name

where window_definition has the syntax

[ existing_window_name ]
[ PARTITION BY expression [, ...] ]
[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]
[ frame_clause ]

and the optional frame_clause can be one of

[ RANGE | ROWS ] frame_start
[ RANGE | ROWS ] BETWEEN frame_start AND frame_end

where frame_start and frame_end can be one of

UNBOUNDED PRECEDING
value PRECEDING
CURRENT ROW
value FOLLOWING
UNBOUNDED FOLLOWING

要把帧的范围锁定在当前行和前一行, 使用ROWS BETWEEN 1 preceding and current row
窗口函数帧的用法可以参考我以前写过的一篇blog : 
http://blog.163.com/digoal@126/blog/static/16387704020121024102312302/

使用以下SQL则可以查询到当前行的前一行的apk_id值 : 

digoal=# select usr_id,apk_id,first_value(apk_id) over(partition by usr_id order by crt_time rows between 1 preceding and current row) from t;
 usr_id |   apk_id    | first_value 
--------+-------------+-------------
      1 | {1,2,3,4}   | {1,2,3,4}
      1 | {1,2,3,4,5} | {1,2,3,4}
      1 | {1,2,3,5}   | {1,2,3,4,5}
      2 | {1,2,3,5}   | {1,2,3,5}
      2 | {1,3,5}     | {1,2,3,5}
      2 | {1,3,5,7}   | {1,3,5}
(6 rows)


将当前apk_id值与前一行的apk_id值作为参数输入, 进行处理.

digoal=# create or replace function array_minus(v1 int[], v2 int[]) returns int[] as $$
declare
  res1 int[];
begin
  select array_agg(r) into res1 from (select unnest(v1) except select unnest(v2)) t(r);
  return res1; 
end;
$$ language plpgsql;
CREATE FUNCTION


通过以下SQL可以得到本例开头时需要的结果.

digoal=# select usr_id,apk_id,array_minus(first_value, apk_id) from (select usr_id,apk_id,first_value(apk_id) over(partition by usr_id order by crt_time rows between 1 preceding and current row) from t) t;
 usr_id |   apk_id    | array_minus 
--------+-------------+-------------
      1 | {1,2,3,4}   | 
      1 | {1,2,3,4,5} | 
      1 | {1,2,3,5}   | {4}
      2 | {1,2,3,5}   | 
      2 | {1,3,5}     | {2}
      2 | {1,3,5,7}   | 
(6 rows)



窗口函数如果需要自定义的话, 需要写C函数进行处理. plpgsql不支持窗口函数的处理.
WINDOW

    WINDOW indicates that the function is a window function rather than a plain function. This is currently only useful for functions written in C. The WINDOW attribute cannot be changed when replacing an existing function definition.

    自定义的plpgsql窗口函数没有实际的使用功效.

    digoal=# create or replace function array_minus(v1 int[]) returns int[] as $$                                                       declare   
      res1 int[];
    begin
      raise notice '%', v1; 
      return v1;      
    end;
    $$ language plpgsql window strict;
    CREATE FUNCTION


    查询时, 无法获得输入参数的值.

    digoal=# select usr_id,apk_id,array_minus(apk_id) over(partition by usr_id order by crt_time rows between 1 preceding and current row) from t;
    NOTICE:  <NULL>
    NOTICE:  <NULL>
    NOTICE:  <NULL>
    NOTICE:  <NULL>
    NOTICE:  <NULL>
    NOTICE:  <NULL>
     usr_id |   apk_id    | array_minus 
    --------+-------------+-------------
          1 | {1,2,3,4}   | 
          1 | {1,2,3,4,5} | 
          1 | {1,2,3,5}   | 
          2 | {1,2,3,5}   | 
          2 | {1,3,5}     | 
          2 | {1,3,5,7}   | 
    (6 rows)



    以下截取一个first_value的代码 : 
    src/backend/utils/adt/windowfuncs.c

    /*
     * first_value
     * return the value of VE evaluated on the first row of the
     * window frame, per spec.
     */
    Datum
    window_first_value(PG_FUNCTION_ARGS)
    {
            WindowObject winobj = PG_WINDOW_OBJECT();
            Datum           result;
            bool            isnull;

            result = WinGetFuncArgInFrame(winobj, 0,
                                                                      0, WINDOW_SEEK_HEAD, true,
                                                                      &isnull, NULL);
            if (isnull)
                    PG_RETURN_NULL();

            PG_RETURN_DATUM(result);
    }



    [说明]
    1. 本文用到的例子的应用场景说明 : 
    例如每条记录存储了用户的启动应用的数组, 要比较查出上次启动, 但是本次未启动的应用.

    [参考]
    1. http://blog.163.com/digoal@126/blog/static/16387704020121024102312302/
    2. http://www.postgresql.org/docs/9.3/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS
    3. http://blog.163.com/digoal@126/blog/static/1638770402013618293678/
