PostgreSQL research

citusdb's mongo_fdw one query do what?

2013-08-21 10:46:24   查看原文>>

在使用pgbench和mongo_fdw测试mongodb数据库性能时, 发现一个mongodb外部表的查询, 在mongodb中查看serverStatus().opcounters发现带来了1个query以及5个左右的command. 而不是1个query, 1个command.
http://blog.163.com/digoal@126/blog/static/163877040201321984940903/
那么到底1个mongo_fdw外部表的查询, 都执行了些啥呢?
本文将要揭晓这个答案.
首先要修改mongodb配置文件, 记录日志项, 如下 : 

#where to log
logpath=/tmp/mongo.log
# Verbose logging output.
verbose = true
# Set oplogging level where n is
#   0=off (default)
#   1=W
#   2=R
#   3=both
#   7=W+some reads
diaglog = 3


重启mongodb数据库.

[mongo@db-172-16-3-33 etc]$ mongo 127.0.0.1:5281/admin
> db.shutdownServer()
[mongo@db-172-16-3-33 etc]$ numactl --interleave=all mongod -f ./mongod.conf



在数据库中查询外部表 : 

postgres=# select * from f_mongo_test where id=1;
           _id            | id |               info               |      crt_time       
--------------------------+----+----------------------------------+---------------------
 5213373b09405fb9802e3d91 |  1 | 47e77a34c50df1a84b2e08c17c3d2942 | 2013-08-20 14:03:17
(1 row)


查看mongodb日志输出 : 

Wed Aug 21 10:35:52.559 [initandlisten] connection accepted from anonymous unix socket #29 (2 connections now open)
Wed Aug 21 10:35:52.559 [conn29] run command admin.$cmd { ismaster: 1 }
Wed Aug 21 10:35:52.559 [conn29] command admin.$cmd command: { ismaster: 1 } ntoreturn:1 keyUpdates:0  reslen:115 0ms
Wed Aug 21 10:35:52.559 [conn29] run command test.$cmd { count: "mongo_test" }
Wed Aug 21 10:35:52.559 [conn29] command test.$cmd command: { count: "mongo_test" } ntoreturn:1 keyUpdates:0 locks(micros) r:15 reslen:48 0ms
Wed Aug 21 10:35:52.559 [conn29] end connection anonymous unix socket (1 connection now open)
Wed Aug 21 10:35:52.559 [initandlisten] connection accepted from anonymous unix socket #30 (3 connections now open)
Wed Aug 21 10:35:52.559 [conn30] run command admin.$cmd { ismaster: 1 }
Wed Aug 21 10:35:52.559 [conn30] command admin.$cmd command: { ismaster: 1 } ntoreturn:1 keyUpdates:0  reslen:115 0ms
Wed Aug 21 10:35:52.559 [conn30] run command test.$cmd { count: "mongo_test" }
Wed Aug 21 10:35:52.559 [conn30] command test.$cmd command: { count: "mongo_test" } ntoreturn:1 keyUpdates:0 locks(micros) r:9 reslen:48 0ms
Wed Aug 21 10:35:52.559 [conn30] end connection anonymous unix socket (1 connection now open)
Wed Aug 21 10:35:52.559 [initandlisten] connection accepted from anonymous unix socket #31 (2 connections now open)
Wed Aug 21 10:35:52.559 [conn31] run command admin.$cmd { ismaster: 1 }
Wed Aug 21 10:35:52.559 [conn31] command admin.$cmd command: { ismaster: 1 } ntoreturn:1 keyUpdates:0  reslen:115 0ms
Wed Aug 21 10:35:52.560 [conn31] query test.mongo_test query: { id: 1 } ntoreturn:0 ntoskip:0 nscanned:1 keyUpdates:0 locks(micros) r:129 nreturned:1 reslen:111 0ms
Wed Aug 21 10:35:52.560 [conn31] end connection anonymous unix socket (1 connection now open)



在PostgreSQL中再次查询 : 

postgres=# select * from f_mongo_test where id=2;
           _id            | id |               info               |      crt_time       
--------------------------+----+----------------------------------+---------------------
 5213373b09405fb9802e3d92 |  2 | 2d94ce6a7c3896b393c79a0b0162b3b2 | 2013-08-20 14:03:17
(1 row)


mongodb日志输出 : 

Wed Aug 21 10:36:08.347 [DataFileSync] flushing mmaps took 0ms  for 7 files
Wed Aug 21 10:36:08.347 [DataFileSync] flushing diag log
Wed Aug 21 10:36:08.565 [TTLMonitor] query local.system.indexes query: { expireAfterSeconds: { $exists: true } } ntoreturn:0 ntoskip:0 nscanned:0 keyUpdates:0 locks(micros) r:5999 nreturned:0 reslen:20 6ms
Wed Aug 21 10:36:08.565 [TTLMonitor] query test.system.indexes query: { expireAfterSeconds: { $exists: true } } ntoreturn:0 ntoskip:0 nscanned:2 keyUpdates:0 locks(micros) r:68 nreturned:0 reslen:20 0ms
Wed Aug 21 10:36:09.263 [initandlisten] connection accepted from anonymous unix socket #32 (2 connections now open)
Wed Aug 21 10:36:09.263 [conn32] run command admin.$cmd { ismaster: 1 }
Wed Aug 21 10:36:09.263 [conn32] command admin.$cmd command: { ismaster: 1 } ntoreturn:1 keyUpdates:0  reslen:115 0ms
Wed Aug 21 10:36:09.263 [conn32] run command test.$cmd { count: "mongo_test" }
Wed Aug 21 10:36:09.263 [conn32] command test.$cmd command: { count: "mongo_test" } ntoreturn:1 keyUpdates:0 locks(micros) r:20 reslen:48 0ms
Wed Aug 21 10:36:09.263 [conn32] end connection anonymous unix socket (1 connection now open)
Wed Aug 21 10:36:09.263 [initandlisten] connection accepted from anonymous unix socket #33 (3 connections now open)
Wed Aug 21 10:36:09.263 [conn33] run command admin.$cmd { ismaster: 1 }
Wed Aug 21 10:36:09.263 [conn33] command admin.$cmd command: { ismaster: 1 } ntoreturn:1 keyUpdates:0  reslen:115 0ms
Wed Aug 21 10:36:09.263 [conn33] run command test.$cmd { count: "mongo_test" }
Wed Aug 21 10:36:09.263 [conn33] command test.$cmd command: { count: "mongo_test" } ntoreturn:1 keyUpdates:0 locks(micros) r:9 reslen:48 0ms
Wed Aug 21 10:36:09.263 [conn33] end connection anonymous unix socket (1 connection now open)
Wed Aug 21 10:36:09.263 [initandlisten] connection accepted from anonymous unix socket #34 (2 connections now open)
Wed Aug 21 10:36:09.264 [conn34] run command admin.$cmd { ismaster: 1 }
Wed Aug 21 10:36:09.264 [conn34] command admin.$cmd command: { ismaster: 1 } ntoreturn:1 keyUpdates:0  reslen:115 0ms
Wed Aug 21 10:36:09.264 [conn34] query test.mongo_test query: { id: 2 } ntoreturn:0 ntoskip:0 nscanned:1 keyUpdates:0 locks(micros) r:79 nreturned:1 reslen:111 0ms
Wed Aug 21 10:36:09.264 [conn34] end connection anonymous unix socket (1 connection now open)


从以上日志可以看到.
一次mongo_fdw外部表查询, 在mongodb中一共需要建立和断开3次连接, 同时调用了3次ismaster的命令以及2次被查表的count计数查询. 最后才是真正和SQL有关的查询(db.mongo_test.find{id: 1}).
所以说使用mongo_fdw来压mongodb的性能是不可取的. 
除非去掉这些command, 同时使用mongodb连接池.
如何去除这些没有必要的command, 参考下一篇blog : 
http://blog.163.com/digoal@126/blog/static/16387704020137211111138/

[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201372011056128/
2. http://blog.163.com/digoal@126/blog/static/16387704020137218443650/
3. http://blog.163.com/digoal@126/blog/static/16387704020137204136657/
4. http://blog.163.com/digoal@126/blog/static/163877040201321984940903/
