PostgreSQL research

modify citusdb's mongo_fdw extension delete the ismaster and collection count command

2013-08-21 11:15:16   查看原文>>

上一篇blog <citusdb's mongo_fdw one query do what? > 叙述了mongo_fdw在执行一次SQL查询时在mongodb中都执行了些啥?
一次mongo_fdw外部表查询, 在mongodb中一共需要建立和断开3次连接, 同时调用了3次ismaster的命令以及2次被查表的count计数查询. 最后才是真正和SQL有关的查询(db.mongo_test.find{id: 1}).
详见 : 
http://blog.163.com/digoal@126/blog/static/1638770402013721103316334/
本文将对mongo_fdw进行修改, 去除不必要的查询, 例如ismaster去除方法如下 : 
vi mongo-c-driver-v0.8/src/mongo.c

MONGO_EXPORT int mongo_client( mongo *conn , const char *host, int port ) {
    mongo_init( conn );

    conn->primary = (mongo_host_port*)bson_malloc( sizeof( mongo_host_port ) );
    snprintf( conn->primary->host, MAXHOSTNAMELEN, "%s", host);
    conn->primary->port = port;
    conn->primary->next = NULL;

    if( mongo_env_socket_connect( conn, host, port ) != MONGO_OK )
        return MONGO_ERROR;

    return MONGO_OK;
    //return mongo_check_is_master( conn );
}


重新编译mongo_fdw, 重启数据库.


postgres=# select * from f_mongo_test where id=1;
           _id            | id |               info               |      crt_time       
--------------------------+----+----------------------------------+---------------------
 5213373b09405fb9802e3d91 |  1 | 47e77a34c50df1a84b2e08c17c3d2942 | 2013-08-20 14:03:17
(1 row)


查看mongodb日志输出, ismaster的command已经没有了 : 

Wed Aug 21 10:51:00.224 [initandlisten] connection accepted from anonymous unix socket #1 (1 connection now open)
Wed Aug 21 10:51:00.224 [conn1] run command test.$cmd { count: "mongo_test" }
Wed Aug 21 10:51:00.224 [conn1] opening db:  test
Wed Aug 21 10:51:00.241 [conn1] command test.$cmd command: { count: "mongo_test" } ntoreturn:1 keyUpdates:0 locks(micros) W:17329 r:33 reslen:48 17ms
Wed Aug 21 10:51:00.242 [initandlisten] connection accepted from anonymous unix socket #2 (2 connections now open)
Wed Aug 21 10:51:00.242 [conn2] run command test.$cmd { count: "mongo_test" }
Wed Aug 21 10:51:00.242 [conn2] command test.$cmd command: { count: "mongo_test" } ntoreturn:1 keyUpdates:0 locks(micros) r:19 reslen:48 0ms
Wed Aug 21 10:51:00.242 [conn1] end connection anonymous unix socket (1 connection now open)
Wed Aug 21 10:51:00.242 [conn2] end connection anonymous unix socket (0 connections now open)
Wed Aug 21 10:51:00.242 [initandlisten] connection accepted from anonymous unix socket #3 (1 connection now open)
Wed Aug 21 10:51:00.243 [conn3] query test.mongo_test query: { id: 1 } ntoreturn:0 ntoskip:0 nscanned:1 keyUpdates:0 locks(micros) r:269 nreturned:1 reslen:111 0ms
Wed Aug 21 10:51:00.243 [conn3] end connection anonymous unix socket (0 connections now open)



但是collection的count查询还在, 接下来就是去掉这个count查询 : 
vi mongo_fdw.c

所有涉及ForeignTableDocumentCount计算的都改成如下 : 
        documentCount = 5000000;
        //documentCount = ForeignTableDocumentCount(foreignTableId);


重新编译mongo_fdw, 重启数据库.


postgres=# select * from f_mongo_test where id=1;
           _id            | id |               info               |      crt_time       
--------------------------+----+----------------------------------+---------------------
 5213373b09405fb9802e3d91 |  1 | 47e77a34c50df1a84b2e08c17c3d2942 | 2013-08-20 14:03:17
(1 row)


现在很干净了, 只有真实的query : 

Wed Aug 21 10:59:30.793 [initandlisten] connection accepted from anonymous unix socket #5 (1 connection now open)
Wed Aug 21 10:59:30.794 [conn5] query test.mongo_test query: { id: 1 } ntoreturn:0 ntoskip:0 nscanned:1 keyUpdates:0 locks(micros) r:48 nreturned:1 reslen:111 0ms
Wed Aug 21 10:59:30.794 [conn5] end connection anonymous unix socket (0 connections now open)


接下来使用同一个pgbench, 压一下, 结果得到了几倍的性能提升 : 

pg94@db-172-16-3-33-> pgbench -M simple -n -r -f ./test.sql -h 127.0.0.1 -p 1919 -U postgres -c 24 -j 12 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 24
number of threads: 12
duration: 60 s
number of transactions actually processed: 509537
tps = 8491.139011 (including connections establishing)
tps = 8494.350858 (excluding connections establishing)
statement latencies in milliseconds:
        0.002101        \setrandom id 1 5000000
        2.821037        select 1 from f_mongo_test where id=:id;


利用率

Cpu(s): 19.9%us,  7.0%sy,  0.0%ni, 64.0%id,  0.0%wa,  0.4%hi,  8.7%si,  0.0%st
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                
12660 mongo     25   0 3263m 839m 808m R 247.4 10.5  11:02.88 mongod -f ./mongod.conf 


> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 1474344,
        "update" : 0,
        "delete" : 0,
        "getmore" : 0,
        "command" : 2244147
}
修改mongo_fdw后, command没有增加了.
> db.serverStatus().opcounters
{
        "insert" : 1,
        "query" : 1983883,
        "update" : 0,
        "delete" : 0,
        "getmore" : 0,
        "command" : 2244149
}


从cpu利用率和tps计算mongodb在CPU使用率100%时的理想性能如下 : 
digoal=# select 8491/0.199;
      ?column?      
--------------------
 42668.341708542714
(1 row)
这个结果是可以参考的. 在不使用连接池的情况下mongodb可以提供的按照pk进行查询能力约为42668每秒.
在没有连接池的情况下能提供如此强大的qps, 得益于线程处理. 换成pg不使用连接池的话会很惨烈.
同一的环境下, PostgreSQL使用连接池大概108939每秒.
http://blog.163.com/digoal@126/blog/static/163877040201372011056128/
换成pg不使用连接池的话, tps只有500多 : 遇到这样的短连接, 对于pg来说, 必须使用连接池, 例如pgbouncer. 可以有效的解决进程创建的问题.

pg92@db-172-16-3-33-> pgbench -M simple -C -n -r -f ./test.sql -c 32 -j 32 -T 10 postgres
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 32
number of threads: 32
duration: 10 s
number of transactions actually processed: 5631
tps = 560.028412 (including connections establishing)
tps = 21743.965148 (excluding connections establishing)
statement latencies in milliseconds:
        0.004776        \setrandom id 1 5000000
        1.292578        select * from mongo_test where id=:id;


大部分开销在进程创建上.

[mongo@db-172-16-3-33 etc]$ sar -c 1 100000
Linux 2.6.18-274.el5 (db-172-16-3-33.sky-mobi.com)      08/21/2013
02:14:29 PM    proc/s
02:14:30 PM    583.00
02:14:31 PM    578.79



[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201372011056128/
2. http://blog.163.com/digoal@126/blog/static/16387704020137218443650/
3. http://blog.163.com/digoal@126/blog/static/16387704020137204136657/
4. http://blog.163.com/digoal@126/blog/static/163877040201321984940903/
5. http://blog.163.com/digoal@126/blog/static/1638770402013721103316334/
