PostgreSQL research

keepalived track script | interface weight & instance priority & election

2014-08-19 21:35:52   查看原文>>

keepalived 使用vrrp来选举instance的master, 选举方法是以优先级最高的作为master. 一个keepalived可以配置多个instance, 一个节点上可能某些instance是master, 某些instance是fault或者backup的. 
配置instance的优先级范围是0-255.
这里需要注意, instance里可以配置track interface和track script, 对应的track可以配置weight, 当weight>0时, 表示这个跟踪返回正常的话, 优先级加weight. 如果配置的weight<0, 表示跟踪返回失败的话, 优先级要减去这个weight.
配置track的weight有点类似动态调整instance的优先级. 从而导致角色转换, 例如master在多次track weight<0的interface或script后, 可能优先级下降到比其他节点更低, 那么会重新选举master角色.
不过需要注意, 有一种情况, 如果配置的instance的初始优先级是255的话, 则不受track weight的影响. 见vrrp_update_priority函数的内容.

        if (vrrp->base_priority == VRRP_PRIO_OWNER) {
                /* we will not run a PRIO_OWNER into a non-PRIO_OWNER */
                vrrp->effective_priority = VRRP_PRIO_OWNER;
        } else {
                /* WARNING! we must compute new_prio on a signed int in order
                   to detect overflows and avoid wrapping. */
                new_prio = vrrp->base_priority + prio_offset;
                if (new_prio < 1)
                        new_prio = 1;
                else if (new_prio > 254)
                        new_prio = 254;
                vrrp->effective_priority = new_prio;
        }



keepalived / include / vrrp.h

#define VRRP_PRIO_OWNER         255             /* priority of the ip owner -- rfc2338.5.3.4 */


换句话说, 只有初始优先级配置<255的instance, 才可以动态调整优先级. 并且动态调整后的优先级范围是1到254.
    priority <INTEGER-0..255> # VRRP PRIO

详细的配置参考
https://raw.githubusercontent.com/acassen/keepalived/master/doc/keepalived.conf.SYNOPSIS

[参考]
1. keepalived/vrrp/vrrp_scheduler.c

/* Update VRRP effective priority based on multiple checkers.
 * This is a thread which is executed every adver_int.
 */
static int
vrrp_update_priority(thread_t * thread)
{
        vrrp_t *vrrp = THREAD_ARG(thread);
        int prio_offset, new_prio;

        /* compute prio_offset right here */
        prio_offset = 0;

        /* Now we will sum the weights of all interfaces which are tracked. */
        if ((!vrrp->sync || vrrp->sync->global_tracking) && !LIST_ISEMPTY(vrrp->track_ifp))
                 prio_offset += vrrp_tracked_weight(vrrp->track_ifp);

        /* Now we will sum the weights of all scripts which are tracked. */
        if ((!vrrp->sync || vrrp->sync->global_tracking) && !LIST_ISEMPTY(vrrp->track_script))
                prio_offset += vrrp_script_weight(vrrp->track_script);

        if (vrrp->base_priority == VRRP_PRIO_OWNER) {
                /* we will not run a PRIO_OWNER into a non-PRIO_OWNER */
                vrrp->effective_priority = VRRP_PRIO_OWNER;
        } else {
                /* WARNING! we must compute new_prio on a signed int in order
                   to detect overflows and avoid wrapping. */
                new_prio = vrrp->base_priority + prio_offset;
                if (new_prio < 1)
                        new_prio = 1;
                else if (new_prio > 254)
                        new_prio = 254;
                vrrp->effective_priority = new_prio;
        }

        /* Register next priority update thread */
        thread_add_timer(master, vrrp_update_priority, vrrp, vrrp->adver_int);
        return 0;
}



2. keepalived/vrrp/vrrp_track.c

/* Returns total weights of all tracked interfaces :
 * - a positive interface weight adds to the global weight when the
 *   interface is UP.
 * - a negative interface weight subtracts from the global weight when the
 *   interface is DOWN.
 *
 */
int
vrrp_tracked_weight(list l)
{
        element e;
        tracked_if_t *tip;
        int weight = 0;

        for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {    // 接口的weight在track_interface中配置.
                tip = ELEMENT_DATA(e);
                if (IF_ISUP(tip->ifp)) {
                        if (tip->weight > 0)
                                weight += tip->weight;   // 当接口配置的weight大于0并且端口是UP时, 全局weight往上累加接口的weight.
                } else {
                        if (tip->weight < 0)
                                weight += tip->weight;    //  当接口配置的weight小于0并且端口是DOWN时, 全局的weight累计减去接口的weight.
                }
        }
// 换句话说, 当接口配置的weight大于0, 但是端口为DOWN 时, 全局weight不会加也不会减.
// 或者, 当接口配置的weight小于0, 端口为UP是, 全局weight同样不增不减.
        return weight;
}

/* Test if all tracked scripts are either OK or weight-tracked */
int
vrrp_script_up(list l)
{
        element e;
        tracked_sc_t *tsc;

        for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {
                tsc = ELEMENT_DATA(e);
                if ((tsc->scr->result == VRRP_SCRIPT_STATUS_DISABLED) ||
                    (tsc->scr->result == VRRP_SCRIPT_STATUS_INIT_GOOD))
                        continue;
                if (!tsc->weight && tsc->scr->result < tsc->scr->rise)
                        return 0;
        }

        return 1;
}

/* Returns total weights of all tracked scripts :
 * - a positive weight adds to the global weight when the result is OK
 * - a negative weight subtracts from the global weight when the result is KO
 *
 */
int
vrrp_script_weight(list l)
{
        element e;
        tracked_sc_t *tsc;
        int weight = 0;

        for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {
                tsc = ELEMENT_DATA(e);
                if (tsc->scr->result == VRRP_SCRIPT_STATUS_DISABLED)
                        continue;
                if (tsc->scr->result >= tsc->scr->rise) {     // 当脚本的result>=配置的rise时, 如果脚本配置的weight>0 , 那么全局weight累加脚本weight.
                        if (tsc->weight > 0)
                                weight += tsc->weight;
                } else if (tsc->scr->result < tsc->scr->rise) {  // 当脚本的result<配置的rise时, 如果脚本配置的weight<0, 那么全局weight减去脚本的weight.  脚本的result在vrrp_script_child_thread中跟踪.
                        if (tsc->weight < 0)
                                weight += tsc->weight;
                }
        }

        return weight;
}



3. keepalived/include/vrrp_track.h

/* VRRP script tracking results.
 * The result is an integer between 0 and rise-1 to indicate a DOWN state,
 * or between rise-1 and rise+fall-1 to indicate an UP state. Upon failure,
 * we decrease result and set it to zero when we pass below rise. Upon
 * success, we increase result and set it to rise+fall-1 when we pass above
 * rise-1.
 */
#define VRRP_SCRIPT_STATUS_DISABLED  -3
#define VRRP_SCRIPT_STATUS_INIT_GOOD -2
#define VRRP_SCRIPT_STATUS_INIT      -1

/* external script we call to track local processes */
typedef struct _vrrp_script {
        char                    *sname;         /* instance name */
        char                    *script;        /* the command to be called */
        long                    interval;       /* interval between script calls */
        long                    timeout;        /* seconds before script timeout */
        int                     weight;         /* weight associated to this script */
        int                     result;         /* result of last call to this script: 0..R-1 = KO, R..R+F-1 = OK */
        int                     inuse;          /* how many users have weight>0 ? */
        int                     rise;           /* R: how many successes before OK */
        int                     fall;           /* F: how many failures before KO */
} vrrp_script_t;

/* Tracked script structure definition */
typedef struct _tracked_sc {
        int                     weight;         /* tracking weight when non-zero */
        vrrp_script_t           *scr;           /* script pointer, cannot be NULL */
} tracked_sc_t;




Flag Counter
