PostgreSQL research

About PostgreSQL's --enable-debug & --enable-dtrace

2014-08-25 14:49:12   查看原文>>

enable-dtrace开启后, 允许用户使用systemtap 跟踪PostgreSQL内置的探针, 参考
http://blog.163.com/digoal@126/blog/#m=0&t=1&c=fks_084068084086080075085082085095085080082075083081086071084
http://www.postgresql.org/docs/9.3/static/dynamic-trace.html
而开启enable-debug的话, 允许跟踪PostgreSQL内的所有C函数. 
在编译时指定enable-debug相当于设置CFLAGS 的-g开关. 同时关闭-O开关.
其他软件要开启debug, 允许systemtap进行跟踪的话, 与此类似.

gcc -g开关含义如下 : 

   Options for Debugging Your Program or GCC
       GCC has various special options that are used for debugging either your program or GCC:

       -g  Produce debugging information in the operating system’s native format (stabs, COFF, XCOFF, or DWARF 2).
           GDB can work with this debugging information.

           On most systems that use stabs format, -g enables use of extra debugging information that only GDB can use;
           this extra information makes debugging work better in GDB but will probably make other debuggers crash or
           refuse to read the program.  If you want to control for certain whether to generate the extra information,
           use -gstabs+, -gstabs, -gxcoff+, -gxcoff, or -gvms (see below).

           GCC allows you to use -g with -O.  The shortcuts taken by optimized code may occasionally produce
           surprising results: some variables you declared may not exist at all; flow of control may briefly move
           where you did not expect it; some statements may not be executed because they compute constant results or
           their values were already at hand; some statements may execute in different places because they were moved
           out of loops.  // gcc文档告诉我们-g不要和-O一同使用

           Nevertheless it proves possible to debug optimized output.  This makes it reasonable to use the optimizer
           for programs that might have bugs.

           The following options are useful when GCC is generated with the capability for more than one debugging
           format.



[参考]
1. man gcc
2. src/template/linux

  if test "$enable_debug" != yes; then
    CFLAGS="$CFLAGS -O"         # any optimization breaks debug
  fi


3. configure

  # if the user selected debug mode, don't use -O
  if test "$enable_debug" != yes; then
    CFLAGS="-O"
  fi
...
if test "$enable_debug" = yes && test "$ac_cv_prog_cc_g" = yes; then
  CFLAGS="$CFLAGS -g"
fi


4. configure

# Check whether --enable-dtrace was given.
if test "${enable_dtrace+set}" = set; then
  enableval=$enable_dtrace;
  case $enableval in
    yes)
      for ac_prog in dtrace
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:$LINENO: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if test "${ac_cv_prog_DTRACE+set}" = set; then
  $as_echo_n "(cached) " >&6
else
  if test -n "$DTRACE"; then
  ac_cv_prog_DTRACE="$DTRACE" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_prog_DTRACE="$ac_prog"
    $as_echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS


Flag Counter
