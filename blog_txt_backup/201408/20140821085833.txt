PostgreSQL research

PostgreSQL an stable hash library - pghashlib

2014-08-21 8:58:33   查看原文>>

一个稳定的哈希库, 对数据库来说是非常重要的, 例如我们有一个应用场景, 在数据库中存储了文本以及文本对应的哈希值. 
假设这个哈希值是通过hashtext函数得到的, 那么我们希望的是hashtext函数是稳定的, 例如任何时候传入一个相同的参数得到的哈希值是一样的.
如 : 
hashtext('abc') = -785388649
应用场景举例, 
1. 例如plproxy, 通过hashtext来路由数据.
2. 例如pg-xc, pg-xl的基于列的distribute算法. 也需要一个stable的算法. (当然, 这些在PG-XC,PG-XL中自己保证)
3. skytools中londiste3的split算法函数, 也需要一个稳定的算法. 

PostgreSQL 9.3.5 中 hashtext的代码如下, 显然它是依赖机器的ENDIAN的 : 

src/backend/access/hash/hashfunc.c

Datum
hashtext(PG_FUNCTION_ARGS)
{
        text       *key = PG_GETARG_TEXT_PP(0);
        Datum           result;

        /*
         * Note: this is currently identical in behavior to hashvarlena, but keep
         * it as a separate function in case we someday want to do something
         * different in non-C locales.  (See also hashbpchar, if so.)
         */
        result = hash_any((unsigned char *) VARDATA_ANY(key),
                                          VARSIZE_ANY_EXHDR(key));

        /* Avoid leaking memory for toasted inputs */
        PG_FREE_IF_COPY(key, 0);

        return result;
}

/*
 * hash_any() -- hash a variable-length key into a 32-bit value
 *              k               : the key (the unaligned variable-length array of bytes)
 *              len             : the length of the key, counting by bytes
 *
 * Returns a uint32 value.  Every bit of the key affects every bit of
 * the return value.  Every 1-bit and 2-bit delta achieves avalanche.
 * About 6*len+35 instructions. The best hash table sizes are powers
 * of 2.  There is no need to do mod a prime (mod is sooo slow!).
 * If you need less than 32 bits, use a bitmask.
 *
 * Note: we could easily change this function to return a 64-bit hash value
 * by using the final values of both b and c.  b is perhaps a little less
 * well mixed than c, however.
 */
Datum
hash_any(register const unsigned char *k, register int keylen)
{
        register uint32 a,
                                b,
                                c,
                                len;

        /* Set up the internal state */
        len = keylen;
        a = b = c = 0x9e3779b9 + len + 3923095;

        /* If the source pointer is word-aligned, we use word-wide fetches */
        if (((intptr_t) k & UINT32_ALIGN_MASK) == 0)
        {
                /* Code path for aligned source data */
                register const uint32 *ka = (const uint32 *) k;

                /* handle most of the key */
                while (len >= 12)
                {
                        a += ka[0];
                        b += ka[1];
                        c += ka[2];
                        mix(a, b, c);
                        ka += 3;
                        len -= 12;
                }

                /* handle the last 11 bytes */
                k = (const unsigned char *) ka;
#ifdef WORDS_BIGENDIAN
                switch (len)
                {
                        case 11:
                                c += ((uint32) k[10] << 8);
                                /* fall through */
                        case 10:
                                c += ((uint32) k[9] << 16);
                                /* fall through */
                        case 9:
                                c += ((uint32) k[8] << 24);
                                /* the lowest byte of c is reserved for the length */
                                /* fall through */
                        case 8:
                                b += ka[1];
                                a += ka[0];
                                break;
                        case 7:
                                b += ((uint32) k[6] << 8);
                                /* fall through */
                        case 6:
                                b += ((uint32) k[5] << 16);
                                /* fall through */
                        case 5:
                                b += ((uint32) k[4] << 24);
                                /* fall through */
                        case 4:
                                a += ka[0];
                                break;
                        case 3:
                                a += ((uint32) k[2] << 8);
                                /* fall through */
                        case 2:
                                a += ((uint32) k[1] << 16);
                                /* fall through */
                        case 1:
                                a += ((uint32) k[0] << 24);
                                /* case 0: nothing left to add */
                }
#else                                                   /* !WORDS_BIGENDIAN */
                switch (len)
                {
                        case 11:
                                c += ((uint32) k[10] << 24);
                                /* fall through */
                        case 10:
                                c += ((uint32) k[9] << 16);
                                /* fall through */
                        case 9:
                                c += ((uint32) k[8] << 8);
                                /* the lowest byte of c is reserved for the length */
                                /* fall through */
                        case 8:
                                b += ka[1];
                                a += ka[0];
                                break;
                        case 7:
                                b += ((uint32) k[6] << 16);
                                /* fall through */
                        case 6:
                                b += ((uint32) k[5] << 8);
                                /* fall through */
                        case 5:
                                b += k[4];
                                /* fall through */
                        case 4:
                                a += ka[0];
                                break;
                        case 3:
                                a += ((uint32) k[2] << 16);
                                /* fall through */
                        case 2:
                                a += ((uint32) k[1] << 8);
                                /* fall through */
                        case 1:
                                a += k[0];
                                /* case 0: nothing left to add */
                }
#endif   /* WORDS_BIGENDIAN */
        }
        else
        {
                /* Code path for non-aligned source data */

                /* handle most of the key */
                while (len >= 12)
                {
#ifdef WORDS_BIGENDIAN
                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
#else                                                   /* !WORDS_BIGENDIAN */
                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
#endif   /* WORDS_BIGENDIAN */
                        mix(a, b, c);
                        k += 12;
                        len -= 12;
                }

                /* handle the last 11 bytes */
#ifdef WORDS_BIGENDIAN
                switch (len)                    /* all the case statements fall through */
                {
                        case 11:
                                c += ((uint32) k[10] << 8);
                        case 10:
                                c += ((uint32) k[9] << 16);
                        case 9:
                                c += ((uint32) k[8] << 24);
                                /* the lowest byte of c is reserved for the length */
                        case 8:
                                b += k[7];
                        case 7:
                                b += ((uint32) k[6] << 8);
                        case 6:
                                b += ((uint32) k[5] << 16);
                        case 5:
                                b += ((uint32) k[4] << 24);
                        case 4:
                                a += k[3];
                        case 3:
                                a += ((uint32) k[2] << 8);
                        case 2:
                                a += ((uint32) k[1] << 16);
                        case 1:
                                a += ((uint32) k[0] << 24);
                                /* case 0: nothing left to add */
                }
#else                                                   /* !WORDS_BIGENDIAN */
                switch (len)                    /* all the case statements fall through */
                {
                        case 11:
                                c += ((uint32) k[10] << 24);
                        case 10:
                                c += ((uint32) k[9] << 16);
                        case 9:
                                c += ((uint32) k[8] << 8);
                                /* the lowest byte of c is reserved for the length */
                        case 8:
                                b += ((uint32) k[7] << 24);
                        case 7:
                                b += ((uint32) k[6] << 16);
                        case 6:
                                b += ((uint32) k[5] << 8);
                        case 5:
                                b += k[4];
                        case 4:
                                a += ((uint32) k[3] << 24);
                        case 3:
                                a += ((uint32) k[2] << 16);
                        case 2:
                                a += ((uint32) k[1] << 8);
                        case 1:
                                a += k[0];
                                /* case 0: nothing left to add */
                }
#endif   /* WORDS_BIGENDIAN */
        }

        final(a, b, c);

        /* report the result */
        return UInt32GetDatum(c);
}


其实除了endian 的依赖, 还存在一个不稳定因素, 例如跨版本, PostgreSQL 8.x和PostgreSQL 9.x可能存在不同(当然这个要自己去验证), 未来也不保证PostgreSQL的hashtext函数代码不变. 
那么问题就来了, 你的数据库如果迁移到其他endian架构, 或者数据库版本变迁都有可能带来hashtext结果的不一致问题. 从而导致存储的数据和新的hashtext得到的结果不一致.
为了解决hashtext不稳定因素, 我们需要一个不依赖数据库版本, 不依赖CPU架构的稳定库.
可以到 https://github.com/tvondra/pghashlib 下载.
支持的算法很多, 有些算法是不依赖CPU架构的, 有些算法是依赖CPU架构的, 使用时需要注意.
简单的测试 : 

[root@db-172-16-3-221 postgresql-9.3.5]# cd /opt/soft_bak/
[root@db-172-16-3-221 soft_bak]# git clone https://github.com/tvondra/pghashlib
Initialized empty Git repository in /opt/soft_bak/pghashlib/.git/
remote: Counting objects: 221, done.
remote: Total 221 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (221/221), 85.64 KiB, done.
Resolving deltas: 100% (96/96), done.
[root@db-172-16-3-221 soft_bak]# cd pghashlib/
[root@db-172-16-3-221 pghashlib]# export PATH=/opt/pgsql/bin:$PATH
[root@db-172-16-3-221 pghashlib]# which pg_config
/opt/pgsql/bin/pg_config
[root@db-172-16-3-221 pghashlib]# gmake clean
[root@db-172-16-3-221 pghashlib]# gmake && gmake install

创建extension
postgres@db-172-16-3-221-> psql
psql (9.3.5)
Type "help" for help.
digoal=# create extension hashlib;
CREATE EXTENSION

digoal=# \dx
                 List of installed extensions
  Name   | Version |   Schema   |         Description          
---------+---------+------------+------------------------------
 hashlib | 1.1     | public     | Stable hash functions
 plpgsql | 1.0     | pg_catalog | PL/pgSQL procedural language
(2 rows)

digoal=# \df
                                 List of functions
 Schema |      Name      | Result data type |     Argument data types     |  Type  
--------+----------------+------------------+-----------------------------+--------
 public | hash128_string | bytea            | bytea, text                 | normal
 public | hash128_string | bytea            | bytea, text, bigint         | normal
 public | hash128_string | bytea            | bytea, text, bigint, bigint | normal
 public | hash128_string | bytea            | text, text                  | normal
 public | hash128_string | bytea            | text, text, bigint          | normal
 public | hash128_string | bytea            | text, text, bigint, bigint  | normal
 public | hash64_string  | bigint           | bytea, text                 | normal
 public | hash64_string  | bigint           | bytea, text, bigint         | normal
 public | hash64_string  | bigint           | bytea, text, bigint, bigint | normal
 public | hash64_string  | bigint           | text, text                  | normal
 public | hash64_string  | bigint           | text, text, bigint          | normal
 public | hash64_string  | bigint           | text, text, bigint, bigint  | normal
 public | hash_int4      | integer          | bigint, text                | normal
 public | hash_int4      | integer          | integer, text               | normal
 public | hash_int8      | bigint           | bigint, text                | normal
 public | hash_string    | integer          | bytea, text                 | normal
 public | hash_string    | integer          | bytea, text, integer        | normal
 public | hash_string    | integer          | text, text                  | normal
 public | hash_string    | integer          | text, text, integer         | normal
(19 rows)

digoal=# select hash64_string('abc','crc32');
 hash64_string 
---------------
     891568578
(1 row)



[其他]

rst2html README.rst > hashlib.html
/bin/sh: rst2html: command not found
gmake: *** [hashlib.html] Error 127
gmake: *** Deleting file `hashlib.html'
安装时如果遇到这个问题, 需要docutils包. (python-docutils)
yum install -y docutils



[参考]
1. https://github.com/tvondra/pghashlib
2. 

pghashlib

The goal of pghashlib is to provide stable hashes for PostgeSQL, "stable" in the sense that their implementation does not change, they are independent from PostgeSQL version.

Some string hashes may be dependent on CPU architecture, so that they return different return on big-endian architecture from little-endian architecture. It you want to be architectures-independent, then use algorithms that don't depend on endianess.

 Installation

You need PostgreSQL developent environment. Then simply:

$ make
$ make install
$ psql -d ... -c "create extension hashlib"

 Functions

 hash_string

hash_string(data text,  algo text [, initval int4]) returns int4
hash_string(data bytea, algo text [, initval int4]) returns int4

This hashes the data with specified algorithm, returns 32-bit result.

 hash64_string

hash64_string(data text, algo text, [, iv1 int8 [, iv2 int8]]) returns int8
hash64_string(data byte, algo text, [, iv1 int8 [, iv2 int8]]) returns int8

Uses same algorithms as hash_string() but returns 64-bit result.

 hash128_string

hash64_string(data text, algo text, [, initval int4]) returns bytea
hash64_string(data byte, algo text, [, initval int4]) returns bytea

Uses same algorithms as hash_string() but returns 128-bit result.

 hash_int4

hash_int4(val int4) returns int4

Hash 32-bit integer.

 hash_int8

hash_int8(val int8) returns int8

Hash 64-bit integer.

 String hashing algorithms

List of currently provided algorithms.

Algorithm  CPU-indep  Bits IV bits Partial           Description
city64     no         64   64      no      CityHash64
city128    no         128  128     no      CityHash128
crc32      yes        32   32      yes     CRC32
lookup2    no         64   32      no      Jenkins lookup2
lookup3be  yes        64   32      no      Jenkins lookup3 big-endian
lookup3le  yes        64   32      no      Jenkins lookup3 little-endian
lookup3    no         64   32      no      Jenkins lookup3 CPU-native
murmur3    no         32   32      no      MurmurHash v3, 32-bit variant
md5        yes        128  128     no      MD5
pgsql84    no         64   0       no      Hacked lookup3 in Postgres 8.4+
siphash24  yes        64   128     no      SipHash-2-4
spooky     no         128  128     no      SpookyHash

CPU-independence
    Whether hash output is independent of CPU endianess. If not, then hash result is different on little-endian machines (x86) and big-endian machines (sparc).
Bits
    Maximum number of output bits that hash can output. If longer result is requested, result will be zero-padded.
IV bits
    Maximum number of input bits for "initial value".
Partial hashing
    Whether long string can be hashed in smaller parts, by giving last value as initval to next hash call.

 Integer hashing algorithms

Algorithm  Bits           Description                      Notes
wang32     32   Thomas Wang hash32shift          
wang32mult 32   Thomas Wang hash32shiftmult      
jenkins    32   Bob Jenkins hash with 6 shifts   
wang64     64   Thomas Wang hash64shift          
wang64to32 64   Thomas Wang hash6432shift       Result can be cast to int4

All algorithms here have the property that they are "reversible", that means there is 1:1 mapping between input and output.

This propery is useful for creating well-defined "random" sort order over unique integer id's. Or picking up random row from table with unique id's.

 Links

  • Lookup2/3 hashes by Bob Jenkins.

  • MurmurHash by Austin Appleby.

  • Integer hashes by Bob Jenkins.

  • Integer hashes by Thomas Wang.

  • Google's CityHash. 64/128/256-bit output.

  • SpookyHash by Bob Jenkins. 128-bit output.

  • SipHash-2-4 by Jean-Philippe Aumasson and Daniel J. Bernstein.


Flag Counter
