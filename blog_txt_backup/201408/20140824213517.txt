PostgreSQL research

PostgreSQL has same block update conflict problem? NO problem.

2014-08-24 21:35:17   查看原文>>

数据库中shared buffer是非常宝贵的资源, 所以能省则省, 例如假设PostgreSQL数据库的单个数据块是8KB, 一个表有100万记录, 分布在5万个数据块, 每个数据块包含约20条记录. 大概占用400MB. 假设活跃数据有10000条, 如果这1万条数据分布在完全不同的数据块里面的话, 那么需要占用1万个数据块也就是78MB, 但是如果这10000条记录在连续的数据块的
话, 只需要20分之一的空间, 即4MB. 
那么问题来了, 如果这些记录不仅仅读取, 还需要更新的话, 同一个数据块经常更新会不会带来问题呢?
例如同一个数据块的20条记录, 被频繁的更新.
这个就要考虑MVCC了, 对于PostgreSQL来说, 更新会生成新的版本, 所以一旦发生更新, 这条记录就很有可能不在这个数据块了, 如果是并发的更新同一个数据块, PostgreSQL FSM机制会分配不同的空闲数据块给不同的会话, 这样更新一次后基本上就会不存在还在一个数据块的情况了 .
但是对于Oracle的话, 因为记录是在存储旧的记录到UNDO后, 直接在本身记录直接修改的(除非空间不够发生了行迁移), 所以在同一个数据块的记录, 频繁被更新的话, 可能存在块竞争的问题.

下面是PostgreSQL分散数据块记录和集中数据块记录的并发更新性能, 从结果来看, 确实不存在竞争问题.
分散数据块测试结果 : 

postgres=# create table t (id int primary key, info text);


postgres=# insert into t select generate_series(1,1000000),md5(random()::text);
postgres=# select substring(ctid::text from '([0-9]+),.*'), min(id) from t group by 1 order by substring(ctid::text from '([0-9]+),.*')::int limit 16;
 substring | min  
-----------+------
 0         |    1
 1         |  121
 2         |  241
 3         |  361
 4         |  481
 5         |  601
 6         |  721
 7         |  841
 8         |  961
 9         | 1081
 10        | 1201
 11        | 1321
 12        | 1441
 13        | 1561
 14        | 1681
 15        | 1801
(16 rows)
postgres=# delete from t where id not in (1,121,241,361,481,601,721,841,961,1081,1201,1321,1441,1561,1681,1801,1000000);
DELETE 999983
postgres=# vacuum analyze t;
VACUUM
postgres=# select ctid,id from t;
   ctid    |   id    
-----------+---------
 (0,1)     |       1
 (1,1)     |     121
 (2,1)     |     241
 (3,1)     |     361
 (4,1)     |     481
 (5,1)     |     601
 (6,1)     |     721
 (7,1)     |     841
 (8,1)     |     961
 (9,1)     |    1081
 (10,1)    |    1201
 (11,1)    |    1321
 (12,1)    |    1441
 (13,1)    |    1561
 (14,1)    |    1681
 (15,1)    |    1801
 (8333,40) | 1000000
(17 rows)

0到15号数据块, 分别留1条记录, 最后一条记录也留着, 这样数据块不够的时候, 有8000多个可用, 不需要extend.
extend会带来并发性能问题, 参考
http://blog.163.com/digoal@126/blog/static/163877040201392641033482/

postgres@150-> vi 1.sql
update t set info=info where id=1;
postgres@150-> vi 1.sql
update t set info=info where id=121;
....
postgres@150-> vi 16.sql
update t set info=info where id=1801;

postgres@150-> cat *.sql
update t set info=info where id=208;
update t set info=info where id=231;
update t set info=info where id=254;
update t set info=info where id=277;
update t set info=info where id=300;
update t set info=info where id=323;
update t set info=info where id=346;
update t set info=info where id=1;
update t set info=info where id=24;
update t set info=info where id=47;
update t set info=info where id=70;
update t set info=info where id=93;
update t set info=info where id=116;
update t set info=info where id=139;
update t set info=info where id=162;
update t set info=info where id=185;

postgres@150-> vi pgbench.sh
#!/bin/bash
pgbench -M prepared -n -r -f ./1.sql -c 1 -j 1 -T 30 postgres >>./1.log 2>&1 &
pgbench -M prepared -n -r -f ./2.sql -c 1 -j 1 -T 30 postgres >>./2.log 2>&1 &
pgbench -M prepared -n -r -f ./3.sql -c 1 -j 1 -T 30 postgres >>./3.log 2>&1 &
pgbench -M prepared -n -r -f ./4.sql -c 1 -j 1 -T 30 postgres >>./4.log 2>&1 &
pgbench -M prepared -n -r -f ./5.sql -c 1 -j 1 -T 30 postgres >>./5.log 2>&1 &
pgbench -M prepared -n -r -f ./6.sql -c 1 -j 1 -T 30 postgres >>./6.log 2>&1 &
pgbench -M prepared -n -r -f ./7.sql -c 1 -j 1 -T 30 postgres >>./7.log 2>&1 &
pgbench -M prepared -n -r -f ./8.sql -c 1 -j 1 -T 30 postgres >>./8.log 2>&1 &
pgbench -M prepared -n -r -f ./9.sql -c 1 -j 1 -T 30 postgres >>./9.log 2>&1 &
pgbench -M prepared -n -r -f ./10.sql -c 1 -j 1 -T 30 postgres >>./10.log 2>&1 &
pgbench -M prepared -n -r -f ./11.sql -c 1 -j 1 -T 30 postgres >>./11.log 2>&1 &
pgbench -M prepared -n -r -f ./12.sql -c 1 -j 1 -T 30 postgres >>./12.log 2>&1 &
pgbench -M prepared -n -r -f ./13.sql -c 1 -j 1 -T 30 postgres >>./13.log 2>&1 &
pgbench -M prepared -n -r -f ./14.sql -c 1 -j 1 -T 30 postgres >>./14.log 2>&1 &
pgbench -M prepared -n -r -f ./15.sql -c 1 -j 1 -T 30 postgres >>./15.log 2>&1 &
pgbench -M prepared -n -r -f ./16.sql -c 1 -j 1 -T 30 postgres >>./16.log 2>&1 &

postgres@150-> chmod 500 pgbench.sh 
postgres@150-> ./pgbench.sh
postgres@150-> cat *.log|grep tps
tps = 3672.873229 (including connections establishing)
tps = 3674.084633 (excluding connections establishing)
tps = 3685.650319 (including connections establishing)
tps = 3686.373174 (excluding connections establishing)
tps = 3653.782264 (including connections establishing)
tps = 3654.560790 (excluding connections establishing)
tps = 3670.157736 (including connections establishing)
tps = 3670.585236 (excluding connections establishing)
tps = 3719.693785 (including connections establishing)
tps = 3721.128932 (excluding connections establishing)
tps = 3657.118339 (including connections establishing)
tps = 3657.686863 (excluding connections establishing)
tps = 3654.958991 (including connections establishing)
tps = 3655.591042 (excluding connections establishing)
tps = 3719.656030 (including connections establishing)
tps = 3720.337811 (excluding connections establishing)
tps = 3693.337183 (including connections establishing)
tps = 3694.274766 (excluding connections establishing)
tps = 3716.171161 (including connections establishing)
tps = 3717.813401 (excluding connections establishing)
tps = 3675.841437 (including connections establishing)
tps = 3676.939467 (excluding connections establishing)
tps = 3707.384923 (including connections establishing)
tps = 3708.461362 (excluding connections establishing)
tps = 3708.588009 (including connections establishing)
tps = 3709.317135 (excluding connections establishing)
tps = 3699.878541 (including connections establishing)
tps = 3700.777084 (excluding connections establishing)
tps = 3722.057237 (including connections establishing)
tps = 3722.764437 (excluding connections establishing)
tps = 3712.575425 (including connections establishing)
tps = 3713.156881 (excluding connections establishing)

postgres=# select ctid,id from t where id in (1,121,241,361,481,601,721,841,961,1081,1201,1321,1441,1561,1681,1801,1000000) order by 1;
   ctid    |   id    
-----------+---------
 (93,73)   |    1321
 (131,95)  |     241
 (132,22)  |     841
 (133,87)  |       1
 (134,74)  |    1561
 (135,68)  |     121
 (136,40)  |     601
 (137,57)  |    1081
 (138,100) |    1801
 (139,91)  |     961
 (140,72)  |    1201
 (141,22)  |     481
 (142,103) |    1441
 (143,63)  |     721
 (144,35)  |     361
 (145,76)  |    1681
 (8333,40) | 1000000
(17 rows)



集中数据块测试结果 : 

postgres=# truncate t;
TRUNCATE TABLE
postgres=# insert into t select generate_series(1,1000000),md5(random()::text);
INSERT 0 1000000
postgres=# delete from t where id>16 and id<>1000000;
DELETE 999983
postgres=# vacuum analyze t;
VACUUM
postgres=# select ctid,id from t;
   ctid    |   id    
-----------+---------
 (0,1)     |       1
 (0,2)     |       2
 (0,3)     |       3
 (0,4)     |       4
 (0,5)     |       5
 (0,6)     |       6
 (0,7)     |       7
 (0,8)     |       8
 (0,9)     |       9
 (0,10)    |      10
 (0,11)    |      11
 (0,12)    |      12
 (0,13)    |      13
 (0,14)    |      14
 (0,15)    |      15
 (0,16)    |      16
 (8333,40) | 1000000
(17 rows)

postgres@150-> rm -f *.log
postgres@150-> vi 1.sql
update t set info=info where id=1;
postgres@150-> vi 2.sql
update t set info=info where id=2;
......
postgres@150-> vi 16.sql
update t set info=info where id=16;

postgres@150-> cat *.sql
update t set info=info where id=10;
update t set info=info where id=11;
update t set info=info where id=12;
update t set info=info where id=13;
update t set info=info where id=14;
update t set info=info where id=15;
update t set info=info where id=16;
update t set info=info where id=1;
update t set info=info where id=2;
update t set info=info where id=3;
update t set info=info where id=4;
update t set info=info where id=5;
update t set info=info where id=6;
update t set info=info where id=7;
update t set info=info where id=8;
update t set info=info where id=9;

postgres@150-> ./pgbench.sh 

postgres@150-> cat *.log|grep tps
tps = 3888.022965 (including connections establishing)
tps = 3889.158726 (excluding connections establishing)
tps = 3923.116595 (including connections establishing)
tps = 3923.860425 (excluding connections establishing)
tps = 3872.785025 (including connections establishing)
tps = 3873.557022 (excluding connections establishing)
tps = 3896.719305 (including connections establishing)
tps = 3897.583396 (excluding connections establishing)
tps = 3899.784823 (including connections establishing)
tps = 3900.417804 (excluding connections establishing)
tps = 3888.087169 (including connections establishing)
tps = 3889.095219 (excluding connections establishing)
tps = 3837.783625 (including connections establishing)
tps = 3838.628632 (excluding connections establishing)
tps = 3913.921265 (including connections establishing)
tps = 3914.976339 (excluding connections establishing)
tps = 3919.896441 (including connections establishing)
tps = 3921.285015 (excluding connections establishing)
tps = 3901.743906 (including connections establishing)
tps = 3902.875213 (excluding connections establishing)
tps = 3913.348143 (including connections establishing)
tps = 3914.736302 (excluding connections establishing)
tps = 3900.593759 (including connections establishing)
tps = 3901.597639 (excluding connections establishing)
tps = 3909.233257 (including connections establishing)
tps = 3910.714989 (excluding connections establishing)
tps = 3914.511060 (including connections establishing)
tps = 3915.443282 (excluding connections establishing)
tps = 3898.280379 (including connections establishing)
tps = 3899.420043 (excluding connections establishing)
tps = 3905.201198 (including connections establishing)
tps = 3905.983808 (excluding connections establishing)

postgres=# select ctid,id from t order by 1;
   ctid    |   id    
-----------+---------
 (23,63)   |      10
 (32,105)  |       4
 (33,85)   |       6
 (34,19)   |      12
 (35,107)  |      11
 (36,30)   |      13
 (37,51)   |      16
 (38,8)    |       7
 (39,43)   |       2
 (40,101)  |       9
 (41,41)   |       3
 (42,20)   |       8
 (43,77)   |       5
 (44,98)   |       1
 (45,12)   |      14
 (46,40)   |      15
 (8333,40) | 1000000
(17 rows)



分散数据块, reindex后的测试结果 : 

postgres=# reindex table t;
REINDEX
postgres=# vacuum analyze t;
VACUUM

postgres@150-> cat *.log|grep tps
tps = 3735.684435 (including connections establishing)
tps = 3736.550937 (excluding connections establishing)
tps = 3823.225305 (including connections establishing)
tps = 3823.810601 (excluding connections establishing)
tps = 3848.319864 (including connections establishing)
tps = 3849.356364 (excluding connections establishing)
tps = 3759.871676 (including connections establishing)
tps = 3761.049251 (excluding connections establishing)
tps = 3831.644315 (including connections establishing)
tps = 3833.049248 (excluding connections establishing)
tps = 3754.788360 (including connections establishing)
tps = 3755.528322 (excluding connections establishing)
tps = 3849.588836 (including connections establishing)
tps = 3850.083699 (excluding connections establishing)
tps = 3812.558787 (including connections establishing)
tps = 3813.416042 (excluding connections establishing)
tps = 3664.343948 (including connections establishing)
tps = 3665.407154 (excluding connections establishing)
tps = 3848.094869 (including connections establishing)
tps = 3849.160059 (excluding connections establishing)
tps = 3630.066603 (including connections establishing)
tps = 3631.600577 (excluding connections establishing)
tps = 3780.052566 (including connections establishing)
tps = 3780.731445 (excluding connections establishing)
tps = 3817.373533 (including connections establishing)
tps = 3818.071217 (excluding connections establishing)
tps = 3809.571428 (including connections establishing)
tps = 3810.561532 (excluding connections establishing)
tps = 3814.418711 (including connections establishing)
tps = 3815.272057 (excluding connections establishing)
tps = 3807.109222 (including connections establishing)
tps = 3807.699411 (excluding connections establishing)

postgres=# select ctid,id from t order by 1;
   ctid    |   id    
-----------+---------
 (0,8)     |    1441
 (1,50)    |     481
 (2,50)    |    1201
 (3,58)    |     721
 (21,35)   |     961
 (27,83)   |       1
 (29,91)   |     361
 (30,63)   |    1681
 (31,68)   |    1081
 (32,62)   |     121
 (33,7)    |     841
 (34,103)  |    1321
 (37,73)   |    1801
 (39,79)   |     601
 (41,31)   |    1561
 (42,42)   |     241
 (8333,40) | 1000000
(17 rows)



[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201392641033482/

Flag Counter
