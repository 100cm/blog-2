PostgreSQL research

performance for return distinct values case - By reduce sparse column's IO scan

2014-09-05 14:11:28   查看原文>>

今天一位以前的同事问到一个SQL调优的问题 : 

select distinct plugin_type from tbl 
  where status=1 
  and   imsi=$1   
  and plugin_type in   (    $2   ) ;


这个SQL执行时间挺长的, 如何缩短, plugin_type上已有索引, 执行时间需要1000多毫秒. 
假设PG用了最优的索引, 可能也要扫描较多的数据块来聚合最终的结果. (例如假设本例返回的count(*)结果集很大但是count(distinct plugin_type)结果集很小时)
我们这里要讲的优化方法是减少IO的扫描. 
优化手段其实挺简单, 因为最终要得到的是唯一的plugin_type字段的值, 并且这个字段已经圈定范围了plugin_type in   (    $2   ). 
那么只需要改成函数来操作即可, 每一个值只判断一次.
这个优化方法适合稀疏列/非连续列的优化, 不适合连续列的优化.

测试如下 : 

postgres=# create table t (id int, c1 int, c2 int, c3 int);
CREATE TABLE

postgres=# insert into t select 1,1,1,generate_series(1,10) from generate_series(1,1000000);
INSERT 0 10000000
Time: 19097.897 ms

postgres=# create index idx_t_1 on t(c3);

postgres=# explain analyze select count(distinct c3) from t where c3 in (1,2,3,100,200,300);
                                                                QUERY PLAN                                                          
      
------------------------------------------------------------------------------------------------------------------------------------
------
 Aggregate  (cost=165792.60..165792.61 rows=1 width=4) (actual time=6260.045..6260.046 rows=1 loops=1)
   ->  Bitmap Heap Scan on t  (cost=51817.60..158302.60 rows=2996000 width=4) (actual time=497.106..3092.664 rows=3000000 loops=1)
         Recheck Cond: (c3 = ANY ('{1,2,3,100,200,300}'::integer[]))
         Rows Removed by Index Recheck: 5968706
         ->  Bitmap Index Scan on idx_t_1  (cost=0.00..51068.60 rows=2996000 width=0) (actual time=494.466..494.466 rows=3000000 loo
ps=1)
               Index Cond: (c3 = ANY ('{1,2,3,100,200,300}'::integer[]))
 Total runtime: 6260.158 ms
(7 rows)
Time: 6260.905 ms
扫描的行比较多, 所以比较慢, 因此可以有优化空间.

postgres=# do language plpgsql $$
declare 
 i int;
 v int := null;
 c int := 0;
begin
  foreach i in array array[1,2,3,100,200,300] loop
    execute 'select c3 from t where c3=$1 limit 1' into v using i;
    if v is not null then 
      c := c+1;
      raise notice '%, %', clock_timestamp(),v; 
    end if;
  end loop; 
  raise notice '%, count: %', clock_timestamp(), c; 
end;
$$;
NOTICE:  2014-09-05 13:49:53.966491+08, 1
NOTICE:  2014-09-05 13:49:53.966679+08, 2
NOTICE:  2014-09-05 13:49:53.966821+08, 3
NOTICE:  2014-09-05 13:49:53.967225+08, count: 3
DO
Time: 1.894 ms


这里用动态SQL, 是因为plan cache机制会导致最后几个值走全表扫描. 所以改用动态SQL.
http://blog.163.com/digoal@126/blog/static/1638770402012112452432251/

这种方法可以拓展到非连续类型列(如int)的优化, 不适合连续类型列(如numeric)没有办法.
例如 : 

postgres=# explain analyze select count(distinct c3) from t where id=1;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=204055.00..204055.01 rows=1 width=4) (actual time=16591.637..16591.637 rows=1 loops=1)
   ->  Seq Scan on t  (cost=0.00..179055.00 rows=10000000 width=4) (actual time=0.012..2612.126 rows=10000000 loops=1)
         Filter: (id = 1)
 Total runtime: 16591.679 ms
(4 rows)
Time: 16592.360 ms
postgres=# select count(distinct c3) from t where id=1;
 count 
-------
    10
(1 row)
Time: 14951.048 ms
postgres=# select min(c3), max(c3) from t;
 min | max 
-----+-----
   1 |  10
(1 row)
Time: 0.847 ms
postgres=# do language plpgsql $$
declare 
 i int;
 v int := null;
 c int := 0; 
  v_min int; 
  v_max int;
begin 
  select min(c3),max(c3) into v_min, v_max from t;
  for i in v_min..v_max loop
    execute 'select c3 from t where c3=$1 and id=1 limit 1' into v using i;
    if v is not null then 
      c := c+1;
      raise notice '%, %', clock_timestamp(),v; 
    end if;
  end loop; 
  raise notice '%, count: %', clock_timestamp(), c; 
end;
$$;
NOTICE:  2014-09-05 14:08:59.170962+08, 1
NOTICE:  2014-09-05 14:08:59.171145+08, 2
NOTICE:  2014-09-05 14:08:59.171287+08, 3
NOTICE:  2014-09-05 14:08:59.171438+08, 4
NOTICE:  2014-09-05 14:08:59.171577+08, 5
NOTICE:  2014-09-05 14:08:59.171716+08, 6
NOTICE:  2014-09-05 14:08:59.171855+08, 7
NOTICE:  2014-09-05 14:08:59.171994+08, 8
NOTICE:  2014-09-05 14:08:59.172132+08, 9
NOTICE:  2014-09-05 14:08:59.172271+08, 10
NOTICE:  2014-09-05 14:08:59.172328+08, count: 10
DO
Time: 2.763 ms


类似的优化案例
http://blog.163.com/digoal@126/blog/static/16387704020129851138327/
http://blog.163.com/digoal@126/blog/static/163877040201411152640383

Flag Counter
