PostgreSQL research

pg_class.relfilenode=0 stored in pg_filenode.map per database

2014-09-30 10:47:39   查看原文>>

在PostgreSQL里面, 一般我们查找对象对应的filenode可以通过pg_class.relfilenode直接得到, 或者使用pg_relation_filenode函数来获取. 
你可能会发现有些对象的pg_class.relfilenode=0, 例如pg_class, pg_database等.

postgres=# select relkind,relname,relfilenode from pg_class where relfilenode=0 order by 1,2;
 relkind |                 relname                 | relfilenode 
---------+-----------------------------------------+-------------
 i       | pg_attribute_relid_attnam_index         |           0
 i       | pg_attribute_relid_attnum_index         |           0
 i       | pg_auth_members_member_role_index       |           0
 i       | pg_auth_members_role_member_index       |           0
 i       | pg_authid_oid_index                     |           0
 i       | pg_authid_rolname_index                 |           0
 i       | pg_class_oid_index                      |           0
 i       | pg_class_relname_nsp_index              |           0
 i       | pg_database_datname_index               |           0
 i       | pg_database_oid_index                   |           0
 i       | pg_db_role_setting_databaseid_rol_index |           0
 i       | pg_pltemplate_name_index                |           0
 i       | pg_proc_oid_index                       |           0
 i       | pg_proc_proname_args_nsp_index          |           0
 i       | pg_shdepend_depender_index              |           0
 i       | pg_shdepend_reference_index             |           0
 i       | pg_shdescription_o_c_index              |           0
 i       | pg_shseclabel_object_index              |           0
 i       | pg_tablespace_oid_index                 |           0
 i       | pg_tablespace_spcname_index             |           0
 i       | pg_toast_1255_index                     |           0
 i       | pg_toast_2396_index                     |           0
 i       | pg_toast_2964_index                     |           0
 i       | pg_type_oid_index                       |           0
 i       | pg_type_typname_nsp_index               |           0
 r       | pg_attribute                            |           0
 r       | pg_auth_members                         |           0
 r       | pg_authid                               |           0
 r       | pg_class                                |           0
 r       | pg_database                             |           0
 r       | pg_db_role_setting                      |           0
 r       | pg_pltemplate                           |           0
 r       | pg_proc                                 |           0
 r       | pg_shdepend                             |           0
 r       | pg_shdescription                        |           0
 r       | pg_shseclabel                           |           0
 r       | pg_tablespace                           |           0
 r       | pg_type                                 |           0
 t       | pg_toast_1255                           |           0
 t       | pg_toast_2396                           |           0
 t       | pg_toast_2964                           |           0
(41 rows)


这些对象的relfilenode=0是怎么回事呢?
来看一段代码注释就知道了 : 

 * However, that obviously won't work for pg_class
 * itself, nor for the other "nailed" catalogs for which we have to be able
 * to set up working Relation entries without access to pg_class.  It also
 * does not work for shared catalogs, since there is no practical way to
 * update other databases' pg_class entries when relocating a shared catalog.
 * Therefore, for these special catalogs (henceforth referred to as "mapped
 * catalogs") we rely on a separately maintained file that shows the mapping
 * from catalog OIDs to filenode numbers.  Each database has a map file for
 * its local mapped catalogs, and there is a separate map file for shared
 * catalogs.  Mapped catalogs have zero in their pg_class.relfilenode entries.


因为一些跨集群的共享对象, 以及pg_class本身无法将relfilenode存储在每个库的pg_class中(或者不方便这么做).
这些对象的relfilenode标记为0, 存储在每个库的pg_filenode.map文件中.
例如 : 

postgres@39-> cd $PGDATA
postgres@39-> cd base/1
postgres@39-> ll pg_filenode.map 
-rw-------. 1 postgres postgres 512 Jul 28 07:35 pg_filenode.map

postgres@39-> cd ..
postgres@39-> cd pg_tblspc/
postgres@39-> ll
total 0
lrwxrwxrwx. 1 postgres postgres 17 Jul 28 07:39 16384 -> /data01/tbs_ovirt
postgres@39-> cd 16384/
postgres@39-> ll
total 0
drwx------. 3 postgres postgres 18 Jul 28 07:39 PG_9.3_201306121
postgres@39-> cd PG_9.3_201306121/
postgres@39-> ll
total 36K
drwx------. 2 postgres postgres 16K Aug  1 17:13 16385
postgres@39-> cd 16385/
postgres@39-> ll pg_filenode.map 
-rw-------. 1 postgres postgres 512 Jul 28 07:39 pg_filenode.map


通过RelationMapOidToFilenode函数, 来获取pg_filenode.map的内容, 具体参见
src/backend/utils/cache/relmapper.c

以下是pg_relation_filenode函数对应的代码, 

                case RELKIND_RELATION:
                case RELKIND_MATVIEW:
                case RELKIND_INDEX:
                case RELKIND_SEQUENCE:
                case RELKIND_TOASTVALUE:
                        /* okay, these have storage */
                        if (relform->relfilenode)
                                result = relform->relfilenode;
                        else    /* Consult the relation mapper */
                                result = RelationMapOidToFilenode(relid,
                                                                                                  relform->relisshared);
                        break;


所以我们要获取任何对象的filenode, 使用pg_relation_filenode函数即可, 不建议直接读取pg_class.relfilenode.

postgres=# \df pg_relation_filenode
                                  List of functions
   Schema   |         Name         | Result data type | Argument data types |  Type  
------------+----------------------+------------------+---------------------+--------
 pg_catalog | pg_relation_filenode | oid              | regclass            | normal
(1 row)

postgres=# select pg_relation_filenode('pg_class');
 pg_relation_filenode 
----------------------
                12658
(1 row)



[参考]
1. src/backend/utils/cache/relmapper.c
 * relmapper.c

 *        Catalog-to-filenode mapping
 *
 * For most tables, the physical file underlying the table is specified by
 * pg_class.relfilenode.  However, that obviously won't work for pg_class
 * itself, nor for the other "nailed" catalogs for which we have to be able
 * to set up working Relation entries without access to pg_class.  It also
 * does not work for shared catalogs, since there is no practical way to
 * update other databases' pg_class entries when relocating a shared catalog.
 * Therefore, for these special catalogs (henceforth referred to as "mapped
 * catalogs") we rely on a separately maintained file that shows the mapping
 * from catalog OIDs to filenode numbers.  Each database has a map file for
 * its local mapped catalogs, and there is a separate map file for shared
 * catalogs.  Mapped catalogs have zero in their pg_class.relfilenode entries.
 *
 * Relocation of a normal table is committed (ie, the new physical file becomes
 * authoritative) when the pg_class row update commits.  For mapped catalogs,
 * the act of updating the map file is effectively commit of the relocation.
 * We postpone the file update till just before commit of the transaction
 * doing the rewrite, but there is necessarily a window between.  Therefore
 * mapped catalogs can only be relocated by operations such as VACUUM FULL
 * and CLUSTER, which make no transactionally-significant changes: it must be
 * safe for the new file to replace the old, even if the transaction itself
 * aborts.  An important factor here is that the indexes and toast table of
 * a mapped catalog must also be mapped, so that the rewrites/relocations of
 * all these files commit in a single map file update rather than being tied
 * to transaction commit.
#define RELMAPPER_FILENAME              "pg_filenode.map"
/*
 * RelationMapOidToFilenode
 *
 * The raison d' etre ... given a relation OID, look up its filenode.
 *
 * Although shared and local relation OIDs should never overlap, the caller
 * always knows which we need --- so pass that information to avoid useless
 * searching.
 *
 * Returns InvalidOid if the OID is not known (which should never happen,
 * but the caller is in a better position to report a meaningful error).
 */
Oid
RelationMapOidToFilenode(Oid relationId, bool shared)
{
        const RelMapFile *map;
        int32           i;

        /* If there are active updates, believe those over the main maps */
        if (shared)
        {
                map = &active_shared_updates;
                for (i = 0; i < map->num_mappings; i++)
                {
                        if (relationId == map->mappings[i].mapoid)
                                return map->mappings[i].mapfilenode;
                }
                map = &shared_map;
                for (i = 0; i < map->num_mappings; i++)
                {
                        if (relationId == map->mappings[i].mapoid)
                                return map->mappings[i].mapfilenode;
                }
        }
        else
        {
                map = &active_local_updates;
                for (i = 0; i < map->num_mappings; i++)
                {
                        if (relationId == map->mappings[i].mapoid)
                                return map->mappings[i].mapfilenode;
                }
                map = &local_map;
                for (i = 0; i < map->num_mappings; i++)
                {
                        if (relationId == map->mappings[i].mapoid)
                                return map->mappings[i].mapfilenode;
                }
        }

        return InvalidOid;
}



2. src/backend/utils/adt/dbsize.c

/*
 * Get the filenode of a relation
 *
 * This is expected to be used in queries like
 *              SELECT pg_relation_filenode(oid) FROM pg_class;
 * That leads to a couple of choices.  We work from the pg_class row alone
 * rather than actually opening each relation, for efficiency.  We don't
 * fail if we can't find the relation --- some rows might be visible in
 * the query's MVCC snapshot but already dead according to SnapshotNow.
 * (Note: we could avoid using the catcache, but there's little point
 * because the relation mapper also works "in the now".)  We also don't
 * fail if the relation doesn't have storage.  In all these cases it
 * seems better to quietly return NULL.
 */
Datum
pg_relation_filenode(PG_FUNCTION_ARGS)
{
        Oid                     relid = PG_GETARG_OID(0);
        Oid                     result;
        HeapTuple       tuple;
        Form_pg_class relform;

        tuple = SearchSysCache1(RELOID, ObjectIdGetDatum(relid));
        if (!HeapTupleIsValid(tuple))
                PG_RETURN_NULL();
        relform = (Form_pg_class) GETSTRUCT(tuple);

        switch (relform->relkind)
        {
                case RELKIND_RELATION:
                case RELKIND_MATVIEW:
                case RELKIND_INDEX:
                case RELKIND_SEQUENCE:
                case RELKIND_TOASTVALUE:
                        /* okay, these have storage */
                        if (relform->relfilenode)
                                result = relform->relfilenode;
                        else    /* Consult the relation mapper */
                                result = RelationMapOidToFilenode(relid,
                                                                                                  relform->relisshared);
                        break;

                default:
                        /* no storage, return NULL */
                        result = InvalidOid;
                        break;
        }

        ReleaseSysCache(tuple);

        if (!OidIsValid(result))
                PG_RETURN_NULL();

        PG_RETURN_OID(result);
}




Flag Counter
