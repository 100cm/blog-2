PostgreSQL research

PostgreSQL column based store in foreign table contributed by citusdb

2014-05-14 11:01:54   查看原文>>

cstore_fdw是citusdb推出的一个外部表插件, 支持列存储以及压缩.
支持的OPTIONS如下 : 

The following parameters can be set on a cstore foreign table object.

filename: The absolute path to the location for storing table data. Before creating your columnar tables, you may want to choose and create a directory to keep your cstore files.
compression: The compression used for compressing value streams. Valid options are none and pglz. The default is none.
stripe_row_count: Number of rows per stripe. The default is 150000. Reducing this decreases the amount memory used for loading data and querying, but also decreases the performance.
block_row_count: Number of rows per column block. The default is 10000. cstore_fdw compresses, creates skip indexes, and reads from disk at the block granularity. Increasing this value helps with compression and results in fewer reads from disk. However, higher values also reduce the probability of skipping over unrelated row blocks.

You can use PostgreSQL's COPY command to load or append data into the table. You can use PostgreSQL's ANALYZE table_name command to collect statistics about the table. These statistics help the query planner to help determine the most efficient execution plan for each query.

Note. We currently don't support updating table using INSERT, DELETE, and UPDATE commands.


目前可以通过COPY将数据拷贝到cstore外部表, 数据存储在磁盘中, 结合citusdb使用的话, 可以将其存储在HDFS中.

-- load extension first time after install
CREATE EXTENSION cstore_fdw;

-- create server object
CREATE SERVER cstore_server FOREIGN DATA WRAPPER cstore_fdw;

-- create foreign table
CREATE FOREIGN TABLE customer_reviews
(
    customer_id TEXT,
    review_date DATE,
    review_rating INTEGER,
    review_votes INTEGER,
    review_helpful_votes INTEGER,
    product_id CHAR(10),
    product_title TEXT,
    product_sales_rank BIGINT,
    product_group TEXT,
    product_category TEXT,
    product_subcategory TEXT,
    similar_product_ids CHAR(10)[]
)
DISTRIBUTE BY APPEND(customer_reviews)
SERVER cstore_server
OPTIONS(filename '', compression 'pglz');


在普通的PostgreSQL中使用的话, 也是可以的.
下面我演示一下在普通的PostgreSQL中使用的方法.
以PostgreSQL 9.3.3和CentOS 6.x x64为例 : 
首先要添加一个YUM源, 用以安装protobuf-c-devel, 这个是cstore依赖的包.

[root@db-172-16-3-150 ]# wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
[root@db-172-16-3-150 ]# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
[root@db-172-16-3-150 ]# sudo rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm

[root@db-172-16-3-150 ]# vi /etc/yum.repos.d/CentOS-Base.repo
name=Les RPM de remi pour Enterprise Linux $releasever - $basearch
#baseurl=http://rpms.famillecollet.com/enterprise/$releasever/remi/$basearch/
mirrorlist=http://rpms.famillecollet.com/enterprise/$releasever/remi/mirror
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi
failovermethod=priority

[root@db-172-16-3-150 ]# yum install -y protobuf-c-devel


接下来下载cstore_fdw, 并安装 : 

[root@db-172-16-3-150 ]# git clone https://github.com/citusdata/cstore_fdw

[root@db-172-16-3-150 cstore_fdw]# cd cstore_fdw/
[root@db-172-16-3-150 cstore_fdw]# export PATH=/home/pg93/pgsql9.3.3/bin:$PATH
[root@db-172-16-3-150 cstore_fdw]# which pg_config
/home/pg93/pgsql9.3.3/bin/pg_config
[root@db-172-16-3-150 cstore_fdw]# gmake clean
[root@db-172-16-3-150 cstore_fdw]# gmake
[root@db-172-16-3-150 cstore_fdw]# gmake install


将cstore_fdw动态链接库加载到PostgreSQL的preload库参数中, 重启数据库, 创建extension : 

[root@db-172-16-3-150 cstore_fdw]# su - pg93
pg93@db-172-16-3-150-> cd $PGDATA
pg93@db-172-16-3-150-> vi postgresql.conf 
shared_preload_libraries = 'cstore_fdw,pg_stat_statements,auto_explain' 

pg93@db-172-16-3-150-> pg_ctl restart -m fast
waiting for server to shut down.... done
server stopped
server starting
pg93@db-172-16-3-150-> LOG:  00000: loaded library "cstore_fdw"
LOCATION:  load_libraries, miscinit.c:1296
LOG:  00000: loaded library "pg_stat_statements"
LOCATION:  load_libraries, miscinit.c:1296
LOG:  00000: loaded library "auto_explain"
LOCATION:  load_libraries, miscinit.c:1296
LOG:  00000: redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".
LOCATION:  SysLogger_Start, syslogger.c:649

pg93@db-172-16-3-150-> psql
psql (9.3.3)
Type "help" for help.

digoal=# CREATE EXTENSION cstore_fdw;
CREATE EXTENSION


测试 : 

digoal=# CREATE SERVER cstore_server FOREIGN DATA WRAPPER cstore_fdw;
CREATE SERVER


创建一个本地表

digoal=# create table local (id int, info text, crt_time timestamp);
CREATE TABLE


插入1000万条测试记录

digoal=# insert into local select generate_series(1,10000000),md5(random()::text),clock_timestamp();
INSERT 0 10000000


创建外部表, filename指定存储到哪个文件, postgresql操作系统的启动用户对这个文件的目录必须有写权限.

digoal=# create foreign table cstore_tbl (id int, info text, crt_time timestamp)
digoal-#   server cstore_server
digoal-#   options (filename '/ssd3/pg93/cstore_tbl.cstore', compression 'pglz');
CREATE FOREIGN TABLE


将本地表的数据拷贝到一个外部文件中, 并导入到cstore表.

digoal=# copy local to '/ssd3/pg93/local.dmp';
COPY 10000000
digoal=# copy cstore_tbl from '/ssd3/pg93/local.dmp';
COPY 10000000


查看一下本地表的大小, cstore表的大小, 文件的大小, 可以看到cstore在使用了pglz压缩后明显小多了.

digoal=# \dt+ local 
                    List of relations
 Schema | Name  | Type  |  Owner   |  Size  | Description 
--------+-------+-------+----------+--------+-------------
 public | local | table | postgres | 727 MB | 
(1 row)

pg93@db-172-16-3-150-> ll
total 1.1G
-rw------- 1 pg93 pg93 392M May 14 10:38 cstore_tbl.cstore
-rw------- 1 pg93 pg93 1.2K May 14 10:38 cstore_tbl.cstore.footer
-rw-r--r-- 1 pg93 pg93 647M May 14 10:37 local.dmp



分析本地表和外部表, 分析效率本地表要高很多.

digoal=# analyze local;
ANALYZE
Time: 499.031 ms
digoal=# analyze cstore_tbl ;
ANALYZE
Time: 4677.271 ms



对比几个查询的效率, 字符串查询效率差不多, 但是固定长度的数据类型查询效率明显提高 : 

digoal=# select count(*) from local 
digoal-# ;
  count   
----------
 10000000
(1 row)
Time: 1686.153 ms
digoal=# select count(*) from cstore_tbl ;
  count   
----------
 10000000
(1 row)
Time: 1655.827 ms

digoal=# select * from cstore_tbl where id=1;
 id |               info               |         crt_time          
----+----------------------------------+---------------------------
  1 | d4863ea74e73def99e1ccbf585af97f6 | 2014-05-14 10:33:44.11643
(1 row)
Time: 40.174 ms
digoal=# select * from local where id=1;
 id |               info               |         crt_time          
----+----------------------------------+---------------------------
  1 | d4863ea74e73def99e1ccbf585af97f6 | 2014-05-14 10:33:44.11643
(1 row)
Time: 1722.087 ms

digoal=# select * from local where info='d4863ea74e73def99e1ccbf585af97f6';
 id |               info               |         crt_time          
----+----------------------------------+---------------------------
  1 | d4863ea74e73def99e1ccbf585af97f6 | 2014-05-14 10:33:44.11643
(1 row)
Time: 2319.669 ms
digoal=# select * from cstore_tbl where info='d4863ea74e73def99e1ccbf585af97f6';
 id |               info               |         crt_time          
----+----------------------------------+---------------------------
  1 | d4863ea74e73def99e1ccbf585af97f6 | 2014-05-14 10:33:44.11643
(1 row)
Time: 5378.137 ms

digoal=# select * from cstore_tbl where crt_time='2014-05-14 10:33:44.11643';
 id |               info               |         crt_time          
----+----------------------------------+---------------------------
  1 | d4863ea74e73def99e1ccbf585af97f6 | 2014-05-14 10:33:44.11643
(1 row)
Time: 40.382 ms
digoal=# select * from local where crt_time='2014-05-14 10:33:44.11643';
 id |               info               |         crt_time          
----+----------------------------------+---------------------------
  1 | d4863ea74e73def99e1ccbf585af97f6 | 2014-05-14 10:33:44.11643
(1 row)
Time: 1876.504 ms



[参考]
1. https://gigaom.com/2014/04/04/citus-data-builds-a-column-store-for-postgres/
2. http://www.citusdata.com/blog/76-postgresql-columnar-store-for-analytics
3. https://github.com/citusdata/cstore_fdw
4. http://citusdata.com/docs/foreign-data#cstore-wrapper
5. http://www.rackspace.com/knowledge_center/article/installing-rhel-epel-repo-on-centos-5x-or-6x
6. http://www.translattice.com/
7. http://gigaom.com/2014/05/13/database-vendor-open-sources-postgres-xl-for-scale-out-workloads/



Flag Counter

评论

LuckyYear - 2015-01-09 16:33:51

博主，看了你关于列存储的实践测试，真是非常感谢，里面有个小小的问题，

列存储性能，就我个人使用过的经验看，是只会在你select 的列比较少时才会体现。

所以，个人建议下次有机会是否可以改为select count(1) 这样测试，也许会有很大的不同。

另外，我现在要做一个百亿级的数据分析，想用pgsql的列存储到hdfs，有两个问题想咨询下
1. pgsql行存储和oracle的行存储的数据分析性能，你认为哪个强一些?
2. pgsql的列存储，我之前就有关注，这个的发展好像比较缓慢，不知道是否有生产的应用实践过，稳定性如何？

德哥@Digoal 回复 LuckyYear - 2015-01-09 16:33:51

HI, 列存储的话你可以考虑一下monetDB.
和ORA比, 目前PG还不支持多核操作, 所以性能会弱很多, 另外目前PG分析函数库也没有ORA那么强大, 你可以考虑一下greenplum.
和hdfs结合的话, 也是一个不错的方向, 当作pg的外部表来操作.
pg的foreign data wrap接口非常不错, 已有的FDW你可以参考一下https://wiki.postgresql.org/wiki/Fdw, 如果不能满足需求, 可以自己写FDW.

德哥@Digoal 回复 LuckyYear - 2015-01-09 16:33:51

count的问题, 对列操作的话可能会快一些(假设不需要扫所有的列).
