PostgreSQL research

PostgreSQL 9.4 New Feature - Improve scalability of WAL insertions

2014-05-06 9:26:24   查看原文>>

PostgreSQL 9.4正在紧锣密鼓的发布中, 这几天git.postgresql.org满是9.4发布前奏的commit.
9.4的release note中提到了大量9.4相关的新特性, 升级注意事项, 兼容性注意事项, 性能改进, 新增的模块等.
不过大部分介绍过于简单, 为了更好的帮助大家了解9.4的新特性, 我接下来会对其中的特性进行整理, 找到对应的代码提交信息和手册部分的信息, 帮助大家消化理解. 大家有什么需要的话也可以直接回帖或给我发邮件.
本文要说的这个特性是Heikki Linnakangas提交的, 关于WAL文件的并行插入的一个特性, 方法是通过增加wal的insert slot, 使得多个backend可以并行的像wal写数据, 增加了高并发下WAL的写速度, 从而提升写的TPS.
同时这个补丁还有一项改进, 在用户使用pg_switch_xlog()切换日志时, 自动填充0到未写满的xlog文件末尾. 那么后期不需要再使用pg_clearxlogtail工具来维护wal文件.

Improve scalability of WAL insertions.
author  Heikki Linnakangas <heikki.linnakangas@iki.fi>
Mon, 8 Jul 2013 08:23:56 +0000 (11:23 +0300)
committer       Heikki Linnakangas <heikki.linnakangas@iki.fi>
Mon, 8 Jul 2013 08:23:56 +0000 (11:23 +0300)
commit  9a20a9b21baa819df1760b36f3c36f25d11fc27b
tree    d4990fa07af24d6d9544ff5e1b7e4edfb5dd6c12        tree | snapshot
parent  5372275b4b5fc183c6c6dd4517cfd74d5b641446        commit | diff
Improve scalability of WAL insertions.

This patch replaces WALInsertLock with a number of WAL insertion slots,
allowing multiple backends to insert WAL records to the WAL buffers
concurrently. This is particularly useful for parallel loading large amounts
of data on a system with many CPUs.

This has one user-visible change: switching to a new WAL segment with
pg_switch_xlog() now fills the remaining unused portion of the segment with
zeros. This potentially adds some overhead, but it has been a very common
practice by DBA's to clear the "tail" of the segment with an external
pg_clearxlogtail utility anyway, to make the WAL files compress better.
With this patch, it's no longer necessary to do that.

This patch adds a new GUC, xloginsert_slots, to tune the number of WAL
insertion slots. Performance testing suggests that the default, 8, works
pretty well for all kinds of worklods, but I left the GUC in place to allow
others with different hardware to test that easily. We might want to remove
that before release.

Reviewed by Andres Freund.


后来slot改成了lock.
http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=68a2e52bbaf98f136a96b3a0d734ca52ca440a95

Replace the XLogInsert slots with regular LWLocks.
author  Heikki Linnakangas <heikki.linnakangas@iki.fi>
Fri, 21 Mar 2014 14:06:08 +0000 (15:06 +0100)
committer       Heikki Linnakangas <heikki.linnakangas@iki.fi>
Fri, 21 Mar 2014 14:10:48 +0000 (15:10 +0100)
commit  68a2e52bbaf98f136a96b3a0d734ca52ca440a95
tree    bf1d45f3055d659e9df2f1c023ede044078cdb21        tree | snapshot
parent  af930e606a3217db3909029c6c3f8d003ba70920        commit | diff
Replace the XLogInsert slots with regular LWLocks.

The special feature the XLogInsert slots had over regular LWLocks is the
insertingAt value that was updated atomically with releasing backends
waiting on it. Add new functions to the LWLock API to do that, and replace
the slots with LWLocks. This reduces the amount of duplicated code.
(There's still some duplication, but at least it's all in lwlock.c now.)

Reviewed by Andres Freund.


对应的配置项 : 
src/backend/utils/misc/guc.c

        {
                {"xloginsert_locks", PGC_POSTMASTER, WAL_SETTINGS,
                        gettext_noop("Sets the number of locks used for concurrent xlog insertions."),
                        NULL,
                        GUC_NOT_IN_SAMPLE
                },
                &num_xloginsert_locks,
                8, 1, 1000,
                NULL, NULL, NULL
        },


这个参数是一个隐含的参数, 所以并没有放在postgresql.conf中.

src/include/access/xlog.h:extern int    num_xloginsert_locks;
src/backend/access/transam/xlog.c:int                   num_xloginsert_locks = 8;
src/backend/access/transam/xlog.c:       * determined by the num_xloginsert_locks GUC. When an inserter crosses a
src/backend/access/transam/xlog.c:              lockToTry = MyProc->pgprocno % num_xloginsert_locks;
src/backend/access/transam/xlog.c:              lockToTry = (lockToTry + 1) % num_xloginsert_locks;
src/backend/access/transam/xlog.c:      for (i = 0; i < num_xloginsert_locks - 1; i++)
src/backend/access/transam/xlog.c:              for (i = 0; i < num_xloginsert_locks; i++)
src/backend/access/transam/xlog.c:              LWLockUpdateVar(&WALInsertLocks[num_xloginsert_locks - 1].l.lock,
src/backend/access/transam/xlog.c:                                              &WALInsertLocks[num_xloginsert_locks - 1].l.insertingAt,
src/backend/access/transam/xlog.c:      for (i = 0; i < num_xloginsert_locks; i++)
src/backend/access/transam/xlog.c:      size = add_size(size, mul_size(sizeof(WALInsertLockPadded), num_xloginsert_locks + 1));
src/backend/access/transam/xlog.c:      allocptr += sizeof(WALInsertLockPadded) * num_xloginsert_locks;
src/backend/access/transam/xlog.c:      for (i = 0; i < num_xloginsert_locks; i++)
Binary file src/backend/access/transam/xlog.o matches
Binary file src/backend/postgres matches
src/backend/utils/misc/guc.c:           {"xloginsert_locks", PGC_POSTMASTER, WAL_SETTINGS,
src/backend/utils/misc/guc.c:           &num_xloginsert_locks,



接下来测试一下, 首先我们下载一个最新的镜像.
http://git.postgresql.org/gitweb/?p=postgresql.git;a=snapshot;h=14ea89366fe321609afc5838ff9fe2ded1cd707d;sf=tgz
安装 : 

# tar -zxvf postgresql-14ea893.tar.gz
# cd postgresql-14ea893
# ./configure --prefix=/home/pg94/pgsql9.4devel --with-pgport=1933 --with-perl --with-tcl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --enable-dtrace --enable-debug && gmake && gmake install
[root@db-172-16-3-150 postgresql-14ea893]# cd contrib/
[root@db-172-16-3-150 contrib]# make && make install
# su - pg94
$ initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W
$ cd $PGDATA
$ vi postgresql.conf
listen_addresses = '0.0.0.0'
unix_socket_directories = '.'
log_destination = 'csvlog'
logging_collector = on
log_truncate_on_rotation = on
shared_buffers = 2048MB
checkpoint_segments = 128

$ pg_ctl start


默认的xloginsert_locks是8, 如果要修改的话, 可以在postgresql.conf中追加.

vi postgresql.conf
xloginsert_locks = 16
-- 然后重启数据库.
pg94@db-172-16-3-150-> psql
psql (9.4devel)
Type "help" for help.

digoal=# show xloginsert_locks;
 xloginsert_locks 
------------------
 16
(1 row)


我们来测试一下并发分别为16, 96的时候, 不同的xloginsert_locks的性能区别.
xloginsert_locks = 16

pg94@db-172-16-3-150-> psql
psql (9.4devel)
Type "help" for help.
digoal=# create table test(id int);
CREATE TABLE

pg94@db-172-16-3-150-> vi test.sql
insert into test values (1);

pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 30 s
number of transactions actually processed: 543243
latency average: 0.884 ms
tps = 18106.626121 (including connections establishing)
tps = 18113.859453 (excluding connections establishing)
statement latencies in milliseconds:
        0.881253        insert into test values (1);
pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 96 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 96
number of threads: 4
duration: 30 s
number of transactions actually processed: 1301440
latency average: 2.213 ms
tps = 43361.713603 (including connections establishing)
tps = 43448.296572 (excluding connections establishing)
statement latencies in milliseconds:
        2.205792        insert into test values (1);



xloginsert_locks = 8

pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 30 s
number of transactions actually processed: 547108
latency average: 0.877 ms
tps = 18234.757319 (including connections establishing)
tps = 18241.764817 (excluding connections establishing)
statement latencies in milliseconds:
        0.875033        insert into test values (1);
pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 96 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 96
number of threads: 4
duration: 30 s
number of transactions actually processed: 1395674
latency average: 2.064 ms
tps = 46495.319599 (including connections establishing)
tps = 46589.876394 (excluding connections establishing)
statement latencies in milliseconds:
        2.056935        insert into test values (1);



xloginsert_locks = 1

pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 30 s
number of transactions actually processed: 545997
latency average: 0.879 ms
tps = 18198.777135 (including connections establishing)
tps = 18206.206934 (excluding connections establishing)
statement latencies in milliseconds:
        0.876758        insert into test values (1);
pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 96 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 96
number of threads: 4
duration: 30 s
number of transactions actually processed: 1379191
latency average: 2.088 ms
tps = 45948.152409 (including connections establishing)
tps = 46039.888239 (excluding connections establishing)
statement latencies in milliseconds:
        2.081494        insert into test values (1);



实际测试结果并没有太大的改进, 显然瓶颈没有出现在xlog buffer insert层面, 所以看不到改进.
已经和heikki.linnakangas@iki.fi联系. 得到的回复是在单条SQL产生的xlog比较多时会有较大提升. (copy除外)

COPY contains a more specialized optimization to reduce XLogInsert 
contention, where it inserts all rows that fit on the heap page as a 
single WAL-logged operation. IOW, copy only creates one WAL record per 
page, not one per record. So copy rarely gets bottlenecked on WAL 
insertions (since version 9.2, where the optimization was added).
 
The optimization in COPY does not apply, if the table contains any 
per-row triggers, or volatile DEFAULT expression, though. So you could 
try creating the table e.g. like "CREATE TABLE test (id int4, ts 
timestamp default clock_timestamp())".



以下SQL一次插入10万条记录, 这样的话有了明显的提升.
xloginsert_locks = 1

pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -t 3
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
number of transactions per client: 3
number of transactions actually processed: 48/48
latency average: 0.000 ms
tps = 6.431977 (including connections establishing)
tps = 6.441740 (excluding connections establishing)
statement latencies in milliseconds:
        2393.804062     insert into test select generate_series(1,100000);


xloginsert_locks = 16

pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -t 3
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
number of transactions per client: 3
number of transactions actually processed: 48/48
latency average: 0.000 ms
tps = 13.386877 (including connections establishing)
tps = 13.429989 (excluding connections establishing)
statement latencies in milliseconds:
        1156.441188     insert into test select generate_series(1,100000);



批量导入的测试, 首先排除heap page extended lock的影响后的测试结果, 有些许的性能提升, 原因heikki已说明, 见上面 : 

digoal=# select ctid from test order by ctid desc limit 1;
     ctid     
--------------
 (1488286,73)
(1 row)
digoal=# delete from test where ctid<>'(1488286,73)';
DELETE 336350639
digoal=# vacuum analyze test;
VACUUM
digoal=# \dt+ test
                   List of relations
 Schema | Name | Type  |  Owner   | Size  | Description 
--------+------+-------+----------+-------+-------------
 public | test | table | postgres | 11 GB | 
(1 row)
digoal=# checkpoint;

xloginsert_locks = 16
pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -t 3
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
number of transactions per client: 3
number of transactions actually processed: 48/48
latency average: 0.000 ms
tps = 0.673150 (including connections establishing)
tps = 0.673258 (excluding connections establishing)
statement latencies in milliseconds:
        23648.140604    copy test from '/home/pg94/test.dmp';

xloginsert_locks = 1
pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -t 3
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
number of transactions per client: 3
number of transactions actually processed: 48/48
latency average: 0.000 ms
tps = 0.646814 (including connections establishing)
tps = 0.646913 (excluding connections establishing)
statement latencies in milliseconds:
        24672.854896    copy test from '/home/pg94/test.dmp';



[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=9a20a9b21baa819df1760b36f3c36f25d11fc27b
2. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=68a2e52bbaf98f136a96b3a0d734ca52ca440a95
3. http://www.postgresql.org/docs/devel/static/release-9-4.html
4. src/backend/utils/misc/guc.c
Flag Counter
