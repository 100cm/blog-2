PostgreSQL research

PostgreSQL extract points in polygon & path type

2014-05-09 10:47:21   查看原文>>

早上群里的一位兄弟问到如何将polygon多边形的交点取出来.
首先查一下手册有没有对应的转换函数, 显然是没有的, 大家可以翻阅如下 : 
http://www.postgresql.org/docs/devel/static/functions-geometry.html
然后查对应的cstring格式输出 : 

digoal=# \df *.*poly*
                                             List of functions
   Schema   |         Name         | Result data type |            Argument data types            |  Type  
------------+----------------------+------------------+-------------------------------------------+--------
 pg_catalog | dist_cpoly           | double precision | circle, polygon                           | normal
 pg_catalog | gist_poly_compress   | internal         | internal                                  | normal
 pg_catalog | gist_poly_consistent | boolean          | internal, polygon, integer, oid, internal | normal
 pg_catalog | poly_above           | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_below           | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_center          | point            | polygon                                   | normal
 pg_catalog | poly_contain         | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_contain_pt      | boolean          | polygon, point                            | normal
 pg_catalog | poly_contained       | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_distance        | double precision | polygon, polygon                          | normal
 pg_catalog | poly_in              | polygon          | cstring                                   | normal
 pg_catalog | poly_left            | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_npoints         | integer          | polygon                                   | normal
 pg_catalog | poly_out             | cstring          | polygon                                   | normal
 pg_catalog | poly_overabove       | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_overbelow       | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_overlap         | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_overleft        | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_overright       | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_recv            | polygon          | internal                                  | normal
 pg_catalog | poly_right           | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_same            | boolean          | polygon, polygon                          | normal
 pg_catalog | poly_send            | bytea            | polygon                                   | normal
 pg_catalog | polygon              | polygon          | box                                       | normal
 pg_catalog | polygon              | polygon          | circle                                    | normal
 pg_catalog | polygon              | polygon          | integer, circle                           | normal
 pg_catalog | polygon              | polygon          | path                                      | normal
 pg_catalog | pt_contained_poly    | boolean          | point, polygon                            | normal
(28 rows)

digoal=# select poly_out(polygon '((0,0),(1,1),(2,0))');
      poly_out       
---------------------
 ((0,0),(1,1),(2,0))
(1 row)



查看对应的代码
src/backend/utils/adt/geo_ops.c
得知polygon其实就是闭环的path, 在内部数据存储上也是相同的.
PostgreSQL平面几何类型的cstring表述 : 

 105  * Data representation is as follows:
 106  *  point:              (x,y)
 107  *  line segment:       [(x1,y1),(x2,y2)]
 108  *  box:                (x1,y1),(x2,y2)
 109  *  open path:          [(x1,y1),...,(xn,yn)]
 110  *  closed path:        ((x1,y1),...,(xn,yn))
 111  *  polygon:            ((x1,y1),...,(xn,yn))



polygon转换成cstring的代码, 显然先转换成了path.

3478 /*---------------------------------------------------------------
3479  * poly_out - convert internal POLYGON representation to the
3480  *            character string format "((f8,f8),...,(f8,f8))"
3481  *---------------------------------------------------------------*/
3482 Datum
3483 poly_out(PG_FUNCTION_ARGS)
3484 {
3485     POLYGON    *poly = PG_GETARG_POLYGON_P(0);
3486 
3487     PG_RETURN_CSTRING(path_encode(PATH_CLOSED, poly->npts, poly->p));
3488 }



好了, 我们知道cstring格式了, 就可以对它做分析处理了, 当然最高效的是在geo_ops.c 中加一个C的转换函数.
对于一般使用者则可以选择使用规则表达式来达到目的.
例如 : 

digoal=# select regexp_replace(regexp_replace(regexp_replace(textin(poly_out(polygon '((0,0),(1,1),(2,0))')), '^\((.*)\)$', '{\1}'), '\(', '"(', 'g'), '\)', ')"', 'g')::point[];
      regexp_replace       
---------------------------
 {"(0,0)","(1,1)","(2,0)"}
(1 row)


分解一下 : 
polygon类型输出 : 

digoal=# select polygon '((0,0),(1,1),(2,0))';
       polygon       
---------------------
 ((0,0),(1,1),(2,0))
(1 row)


polygon转换成cstring

digoal=# select poly_out(polygon '((0,0),(1,1),(2,0))');
      poly_out       
---------------------
 ((0,0),(1,1),(2,0))
(1 row)


cstring转化成text

digoal=# select textin(poly_out(polygon '((0,0),(1,1),(2,0))'));
       textin        
---------------------
 ((0,0),(1,1),(2,0))
(1 row)


替换cstring表述中的最外面的一组小括号为大括号

digoal=# select regexp_replace(textin(poly_out(polygon '((0,0),(1,1),(2,0))')), '^\((.*)\)$', '{\1}');
   regexp_replace    
---------------------
 {(0,0),(1,1),(2,0)}
(1 row)


替换所有(为"(

digoal=# select regexp_replace(regexp_replace(textin(poly_out(polygon '((0,0),(1,1),(2,0))')), '^\((.*)\)$', '{\1}'), '\(', '"(', 'g');
     regexp_replace     
------------------------
 {"(0,0),"(1,1),"(2,0)}
(1 row)


替换所有)为)", 变成规范的point[]格式.

digoal=# select regexp_replace(regexp_replace(regexp_replace(textin(poly_out(polygon '((0,0),(1,1),(2,0))')), '^\((.*)\)$', '{\1}'), '\(', '"(', 'g'), '\)', ')"', 'g');
      regexp_replace       
---------------------------
 {"(0,0)","(1,1)","(2,0)"}
(1 row)



[参考]
1. src/backend/utils/adt/geo_ops.c
2. http://www.postgresql.org/docs/devel/static/functions-geometry.html




Flag Counter
