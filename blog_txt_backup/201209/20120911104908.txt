PostgreSQL research

PostgreSQL fork_process.c write process's oom_adj and oom_score_adj BUG?

2012-09-11 10:49:08   查看原文>>

PostgreSQL 9.2.0 在教师节那天发布了. 非常高兴.
看到PostgreSQL 9.2.0的release notes里面有一条消息如下 : 

Support Linux's /proc/self/oom_score_adj API (Tom Lane)


这个的用意是防止Linux的out of memory kill机制把postmaster进程杀掉(因为Postmaster进程下挂了一堆的子进程, linux 会认为它占用了太多资源, 优先干掉他.)
那么DBA怎么防止postmaster进程被干掉的呢?

su - root
echo -17 > /proc/self/oom_adj
su - postgres -c "pg_ctl start"


通过以上命令启动postgreSQL数据库的话, postmaster以及它的子进程都将会继承oom_adj值, 也就是root shell的-17.
所以postmaster和它的子进程都不会被优先oom kill掉.
但是我们并不想看到这样的结果, 
我们应该是希望postmaster进程是安全的, 但是postmaster的子进程(如与client进行通讯的server backend)允许被oom kill掉. 
但同时也应该保护另外一些子进程, (除主进程外的一些系统子进程) 例如 : 

postgres: writer process
postgres: wal writer process
postgres: autovacuum launcher process
postgres: stats collector process


那么PostgreSQL 怎么与Linux oom结合的呢？
来看看它的源码 :
postgresql-9.2.0/src/backend/postmaster/fork_process.c

                /*
                 * By default, Linux tends to kill the postmaster in out-of-memory
                 * situations, because it blames the postmaster for the sum of child
                 * process sizes *including shared memory*.  (This is unbelievably
                 * stupid, but the kernel hackers seem uninterested in improving it.)
                 * Therefore it's often a good idea to protect the postmaster by
                 * setting its oom_score_adj value negative (which has to be done in a
                 * root-owned startup script). If you just do that much, all child
                 * processes will also be protected against OOM kill, which might not
                 * be desirable.  You can then choose to build with
                 * LINUX_OOM_SCORE_ADJ #defined to 0, or to some other value that you
                 * want child processes to adopt here.
                 */
#ifdef LINUX_OOM_SCORE_ADJ
                {
                        /*
                         * Use open() not stdio, to ensure we control the open flags. Some
                         * Linux security environments reject anything but O_WRONLY.
                         */
                        int                     fd = open("/proc/self/oom_score_adj", O_WRONLY, 0);

                        /* We ignore all errors */
                        if (fd >= 0)
                        {
                                char            buf[16];
                                int                     rc;

                                snprintf(buf, sizeof(buf), "%d\n", LINUX_OOM_SCORE_ADJ);
                                rc = write(fd, buf, strlen(buf));
                                (void) rc;
                                close(fd);
                        }
                }
#endif   /* LINUX_OOM_SCORE_ADJ */

                /*
                 * Older Linux kernels have oom_adj not oom_score_adj.  This works
                 * similarly except with a different scale of adjustment values.
                 * If it's necessary to build Postgres to work with either API,
                 * you can define both LINUX_OOM_SCORE_ADJ and LINUX_OOM_ADJ.
                 */
#ifdef LINUX_OOM_ADJ
                {
                        /*
                         * Use open() not stdio, to ensure we control the open flags. Some
                         * Linux security environments reject anything but O_WRONLY.
                         */
                        int                     fd = open("/proc/self/oom_adj", O_WRONLY, 0);

                        /* We ignore all errors */
                        if (fd >= 0)
                        {
                                char            buf[16];
                                int                     rc;

                                snprintf(buf, sizeof(buf), "%d\n", LINUX_OOM_ADJ);
                                rc = write(fd, buf, strlen(buf));
                                (void) rc;
                                close(fd);
                        }
                }
#endif   /* LINUX_OOM_ADJ */


用意是postgres在fork子进程时, 去设置子进程自己的/proc/self/oom_adj或者/proc/self/oom_score_adj的值.
具体的操作是需要在编译的时候设置CPPFLAGS或者CFLAGS
如 : 

CPPFLAGS="-DLINUX_OOM_SCORE_ADJ=0 -DLINUX_OOM_ADJ=0" ./configure --prefix=/opt/pgsql9.2.0 --with-pgport=9200 --with-perl --with-tcl 
--with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=16 &
& gmake world


那么这样做行不行得通呢? 显然是有点问题的, 因为PostgreSQL 进程是在普通用户下启动的. 例如postgres用户, 而普通用户在Linux下面不允许修改/proc/self/oom_adj或者/proc/self/oom_score_adj的值. 也就是说上面的代码没有效果.
例如我们修改一下上面的代码来track一下 : 
添加如下 : 

// 在#include <unistd.h>下面添加
#include <string.h>
#include <errno.h>
//                                在 rc = write(fd, buf, strlen(buf)); 下面添加
                                if (rc == -1)
                                  fprintf(stderr, "modify oom error:%s\n", strerror(errno));


重新编译后, 启动数据库就会报如下信息 : 
root@db-172-16-3-150-> modify oom error:Operation not permitted

LOG:  database system was shut down at 2012-09-11 10:14:54 CST
modify oom error:Operation not permitted
modify oom error:Operation not permitted
modify oom error:Operation not permitted
modify oom error:Operation not permitted
LOG:  autovacuum launcher started
LOG:  database system is ready to accept connections


这是数据库在fork以下几个进程造成的 : 

pg9.2.0  20241 20239  0 10:25 ?        00:00:00 postgres: checkpointer process   
pg9.2.0  20242 20239  0 10:25 ?        00:00:00 postgres: writer process    
pg9.2.0  20243 20239  0 10:25 ?        00:00:00 postgres: wal writer process   
pg9.2.0  20244 20239  0 10:25 ?        00:00:00 postgres: autovacuum launcher process   
pg9.2.0  20245 20239  0 10:25 ?        00:00:00 postgres: stats collector process


好了, 知道原因后, 应该怎么解决呢? 一下列举两种方法.
1. 让root用户启动PostgreSQL, 参考《use Linux root user start PostgreSQL cluster》
http://blog.163.com/digoal@126/blog/static/163877040201281111553769/

2. 按如下方法启动数据库

su - root
echo 0 > /proc/self/oom_adj
su - postgres -c "pg_ctl start"
然后找到postgres的进程和几个它的系统子进程. 分别执行
echo -17 > /proc/$postmaster/oom_adj
echo -17 > /proc/$checkpointer/oom_adj
echo -17 > /proc/$writerprocess/oom_adj
echo -17 > /proc/$walwriterprocess/oom_adj
echo -17 > /proc/$autovacuum launcher process/oom_adj
echo -17 > /proc/$stats collector process/oom_adj
后面产生的子进程都会以oom_adj=0的值启动, 在发生oom kill时这些子进程将可能被kill掉, 而postmaster等进程则不会被kill掉.



