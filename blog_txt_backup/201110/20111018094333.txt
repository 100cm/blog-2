PostgreSQL research

PostgreSQL pg_trgm usage,字符串拆分,相似匹配,模糊查询

2011-10-18 9:43:33   查看原文>>

pg_trgm是一个比较有意思的模块, 主要功能是比较两个字符串的相似度, 可以使用GIN或者GIST索引。
要比较字符串的相似度，首先要对原来的字符串进行拆分：
下面是trigram or trigraph 拆分规则(不区分大小写) ：
字符串被前置两个空格，后置一个空格，然后按3个连续的字符为分组进行拆分。
例如：

digoal=> select show_trgm('digoal');
              show_trgm              
-------------------------------------
 {"  d"," di","al ",dig,goa,igo,oal}
(1 row)

digoal=> select show_trgm('DIGOAL123456');
                          show_trgm                          
-------------------------------------------------------------
 {"  d"," di",123,234,345,456,"56 ",al1,dig,goa,igo,l12,oal}
(1 row)



拆分完后, 比较两个字符的相似度，算法是(两个字符串相同trigram的个数)除以(总共被拆成多少个trigram)，
例如上面两个字符串'digoal'和'DIGOAL123456'的相似度=6/14

digoal=> select similarity('digoal','DIGOAL123456');
 similarity 
------------
   0.428571
(1 row)

digoal=> select 6/14.0;
        ?column?        
------------------------
 0.42857142857142857143
(1 row)



接下来看看pg_trgm这个extension新增的几个常用的函数和操作符 : 
similarity(text, text)
前面的例子已经用到了这个函数，用来计算两个字符串的相似度。
show_trgm(text)
前面的例子已经用到了这个函数，用来返回字符串拆分后的trigram。
show_limit()
这个函数用来返回目前系统中设置的相似度阈值，大于或者等于这个阈值的两个字符串，similarity_op(text, text)或字符串1 % 字符串2 返回true.
例如：


digoal=> select similarity('diga','digoal1');
 similarity 
------------
        0.3
(1 row)
digoal=> select similarity_op('diga','digoal1');
 similarity_op 
---------------
 t
(1 row)

digoal=> select 'diga' % 'digoal1';
 ?column? 
----------
 t
(1 row)
digoal=> select show_limit();
 show_limit 
------------
        0.3
(1 row)



set_limit(real)
这个函数用来设置相似度阈值。
例如：

digoal=> select set_limit(0.4);
 set_limit 
-----------
       0.4
(1 row)
digoal=> select 'diga' % 'digoal1';
 ?column? 
----------
 f
(1 row)
digoal=> select similarity_op('diga','digoal1');
 similarity_op 
---------------
 f
(1 row)



接下来看看pg_trgm新增的两个操作符 : 
% 这个操作符前面的例子已经使用到了，用来返回两个字符串是否相似。
<-> 这个操作符返回两个字符串相似度的距离。（1减两个字符串的相似度）
例如：

digoal=> select 'digoal' <-> 'digoal';
 ?column? 
----------
        0
(1 row)


表示两个字符串相同。

接下来要看的时pg_trgm新增的几个索引操作类：

-- create the operator class for gist
CREATE OPERATOR CLASS gist_trgm_ops
FOR TYPE text USING gist
AS
        OPERATOR      1       % (text, text),
        FUNCTION        1       gtrgm_consistent (internal, text, int, oid, internal),
        FUNCTION        2       gtrgm_union (bytea, internal),
        FUNCTION        3       gtrgm_compress (internal),
        FUNCTION        4       gtrgm_decompress (internal),
        FUNCTION        5       gtrgm_penalty (internal, internal, internal),
        FUNCTION        6       gtrgm_picksplit (internal, internal),
        FUNCTION        7       gtrgm_same (gtrgm, gtrgm, internal),
        STORAGE         gtrgm;

-- Add operators and support functions that are new in 9.1.  We do it like
-- this, leaving them "loose" in the operator family rather than bound into
-- the gist_trgm_ops opclass, because that's the only state that can be
-- reproduced during an upgrade from 9.0 (see pg_trgm--unpackaged--1.0.sql).

ALTER OPERATOR FAMILY gist_trgm_ops USING gist ADD
        OPERATOR        2       <-> (text, text) FOR ORDER BY pg_catalog.float_ops,
        OPERATOR        3       pg_catalog.~~ (text, text),
        OPERATOR        4       pg_catalog.~~* (text, text),
        FUNCTION        8 (text, text)  gtrgm_distance (internal, text, int, oid);


因此where 条件使用 % (text, text) , pg_catalog.~~ (text, text) , pg_catalog.~~* (text, text) 时可以使用gist索引。
<-> (text, text) FOR ORDER BY pg_catalog.float_ops 用于排序。

例如：

digoal=> create table test_pg_trgm (id serial primary key,info text);
NOTICE:  CREATE TABLE will create implicit sequence "test_pg_trgm_id_seq" for serial column "test_pg_trgm.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_pg_trgm_pkey" for table "test_pg_trgm"
CREATE TABLE
digoal=> insert into test_pg_trgm (info) select generate_series(1,1000000)||'digoal';
INSERT 0 1000000


相似度匹配查询

digoal=>  select count(*) from test_pg_trgm where info % '%123%oal%';
 count 
-------
  1144
(1 row)
Time: 2958.313 ms


全表扫描2958毫秒.

digoal=> create index idx_test_pg_trgm_1 on test_pg_trgm using gist (info gist_trgm_ops); 
CREATE INDEX
digoal=>  select count(*) from test_pg_trgm where info % '%123%oal%';
 count 
-------
  1144
(1 row)
Time: 276.247 ms


走索引276毫秒。
模糊查询

digoal=> select count(*) from test_pg_trgm where info ilike '%123444%al%';
 count 
-------
     1
(1 row)

Time: 577.213 ms


全表扫描577毫秒.

digoal=> select count(*) from test_pg_trgm where info ilike '%123444%al%';
 count 
-------
     1
(1 row)
Time: 17.080 ms


走索引17毫秒。
如果结果集大的情况下，和其他索引扫描一样可能比全表慢。
接下来是排序操作符<->的例子：

digoal=> explain verbose select * from test_pg_trgm order by info <-> '1234digoal' limit 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..0.05 rows=1 width=16)
   Output: id, info, ((info <-> '1234digoal'::text))
   ->  Index Scan using idx_test_pg_trgm_1 on digoal.test_pg_trgm  (cost=0.00..54110.46 rows=1010000 width=16)
         Output: id, info, (info <-> '1234digoal'::text)
         Order By: (test_pg_trgm.info <-> '1234digoal'::text)
(5 rows)
Time: 0.372 ms
digoal=> select * from test_pg_trgm order by info <-> '1234digoal' limit 1;
  id   |    info    
-------+------------
 11234 | 1234digoal
(1 row)
Time: 28.504 ms


走索引28毫秒。

digoal=> drop index idx_test_pg_trgm_1 ;
DROP INDEX
Time: 71.590 ms
digoal=> select * from test_pg_trgm order by info <-> '1234digoal' limit 1;
  id  |    info    
------+------------
 1234 | 1234digoal
(1 row)
Time: 3219.032 ms


全表扫描3219毫秒。

下面看看GIN相关。

-- create the operator class for gin
CREATE OPERATOR CLASS gin_trgm_ops
FOR TYPE text USING gin
AS
        OPERATOR      1       % (text, text),
        FUNCTION        1       btint4cmp (int4, int4),
        FUNCTION        2       gin_extract_value_trgm (text, internal),
        FUNCTION        3       gin_extract_query_trgm (text, internal, int2, internal, internal, internal, internal),
        FUNCTION        4       gin_trgm_consistent (internal, int2, text, int4, internal, internal, internal, internal),
        STORAGE         int4;

-- Add operators that are new in 9.1.

ALTER OPERATOR FAMILY gin_trgm_ops USING gin ADD
        OPERATOR        3       pg_catalog.~~ (text, text),
        OPERATOR        4       pg_catalog.~~* (text, text);


相比GIST，排序少了<->操作符。
例如：

digoal=> create index idx_test_pg_trgm_1 on test_pg_trgm using gin (info gin_trgm_ops); 
CREATE INDEX
Time: 12918.872 ms
digoal=> explain verbose select * from test_pg_trgm order by info <-> '1234digoal' limit 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit  (cost=24003.00..24003.00 rows=1 width=16)
   Output: id, info, ((info <-> '1234digoal'::text))
   ->  Sort  (cost=24003.00..26528.00 rows=1010000 width=16)
         Output: id, info, ((info <-> '1234digoal'::text))
         Sort Key: ((test_pg_trgm.info <-> '1234digoal'::text))
         ->  Seq Scan on digoal.test_pg_trgm  (cost=0.00..18953.00 rows=1010000 width=16)
               Output: id, info, (info <-> '1234digoal'::text)
(7 rows)
Time: 0.707 ms
digoal=> select * from test_pg_trgm order by info <-> '1234digoal' limit 1;
  id  |    info    
------+------------
 1234 | 1234digoal
(1 row)
Time: 3220.476 ms


由于GIN没有<-> order by操作符，所以全表扫描，耗时3220毫秒。
相似度和模糊查询依然可以走GIN索引，如下。

digoal=> select count(*) from test_pg_trgm where info like '%123444%al%';
 count 
-------
     1
(1 row)
Time: 4.318 ms
digoal=> select count(*) from test_pg_trgm where info ilike '%123444%al%';
 count 
-------
     1
(1 row)
Time: 4.318 ms
digoal=> select count(*) from test_pg_trgm where info % '123444al';
 count 
-------
    22
(1 row)
Time: 369.328 ms



pg_trgm的另一个应用场景是全文扫描的辅助，用于修正拼写错误的匹配。如digoal,拼写成dagoal，全文扫描无法匹配。但是用近似匹配就可以。

不常用的请参考pg_trgm--1.0.sql


【参考】
extension : 
pg_trgm--1.0.sql
pg_trgm.control
pg_trgm--unpackaged--1.0.sql
http://www.postgresql.org/docs/9.1/static/pgtrgm.html

评论

benhaben - 2014-04-26 14:32:48

LZ您好，我相对中文做相似度搜索，pg默认并不支持，您有解决方案吗？

德哥@Digoal 回复 benhaben - 2014-04-26 14:32:48

HI, pg_trgm本身就支持.

德哥@Digoal 回复 benhaben - 2014-04-26 14:32:48

只要collate不为C即可支持 wchar.
如果是分词的全文检索, 可以使用全文检索的插件. 
 参考
http://blog.163.com/digoal@126/blog/static/163877040201422410175698

tulong199 - 2012-08-02 11:17:33

LZ 你好我现在使用postgreSQL9.1（Win7环境）建立Gin 和Gist索引的时候一直提示“处理方法 "gin_trgm_ops" 的操作符类 "gin" 不存在”
 CREATE INDEX all_countries_index ON "AllCountries" USING gin ("字段4" gin_trgm_ops) 这是我的语句       。。。   这是怎么回事儿呢？

德哥@Digoal 回复 tulong199 - 2012-08-02 11:17:33

please create extension pg_trgm first.
