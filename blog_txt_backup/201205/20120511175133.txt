PostgreSQL research

explain autovacuum_naptime

2012-05-11 17:51:33   查看原文>>

autovacuum_naptime 这个参数到底是什么意思? 
简单来说它是autovacuum launcher进程的在一次autovacuum巡回过程中可以随眠的总时间.

比如autovacuum_naptime配了1分钟.
其实在一个时间点，内存中的一个区域按照vacuum优先级存储了一个需要被触发autovacuum的数据库列表。
打个比方，PostgreSQL 集群中有10个数据库，但是某时刻只有2个库里面有表需要触发autovacuum.
那么这个list在这个时刻就只包含了2个库.
每次只能触发一个autovacuum worker进程，比如这个LIST里面有两个库，但是不能同时触发autovacuum worker. 
d1 库在18:10:10触发, d2库可能在18:10:40秒触发, 然后d1库又可能在18:11:10被触发.
怎么来理解呢，就是说 autovacuum_naptime 是均摊到这个LIST里面的库的一个sleep时间.
还有一个需要注意的是, 一个库只会有一个autovacuum worker进程为他干活, 比如某个库有很多个表需要vacuum, 也只会有一个autovacuum worker进程为他干活, 不会起多个. 这个库的所有需要VACUUM的表都VACUUM了之后, worker进程就会自动关闭掉. 等待下一次autovacuum launcher进程去触发它.
来看个例子 : 
-- 创建5个测试库

postgres=# create database d1;
CREATE DATABASE
postgres=# create database d2;
CREATE DATABASE
postgres=# create database d3;
CREATE DATABASE
postgres=# create database d4;
CREATE DATABASE
postgres=# create database d5;
CREATE DATABASE


-- 在5个测试库中分别创建3个测试表, 插入100条记录

\c d1 digoal
create table t1 (id int primary key);
create table t2 (id int primary key);
create table t3 (id int primary key);
insert into t1 select generate_series(1,100);
insert into t2 select generate_series(1,100);
insert into t3 select generate_series(1,100);
\c d2 digoal
create table t1 (id int primary key);
create table t2 (id int primary key);
create table t3 (id int primary key);
insert into t1 select generate_series(1,100);
insert into t2 select generate_series(1,100);
insert into t3 select generate_series(1,100);
\c d3 digoal
create table t1 (id int primary key);
create table t2 (id int primary key);
create table t3 (id int primary key);
insert into t1 select generate_series(1,100);
insert into t2 select generate_series(1,100);
insert into t3 select generate_series(1,100);
\c d4 digoal
create table t1 (id int primary key);
create table t2 (id int primary key);
create table t3 (id int primary key);
insert into t1 select generate_series(1,100);
insert into t2 select generate_series(1,100);
insert into t3 select generate_series(1,100);
\c d5 digoal
create table t1 (id int primary key);
create table t2 (id int primary key);
create table t3 (id int primary key);
insert into t1 select generate_series(1,100);
insert into t2 select generate_series(1,100);
insert into t3 select generate_series(1,100);


-- 修改workers参数到15, 确保同一时刻有足够的worker进程可以在系统中允许.

autovacuum_max_workers = 15             # max number of autovacuum subprocesses


-- 睡眠时间1分钟

autovacuum_naptime = 1min 


-- 记录所有的autovacuum操作

log_autovacuum_min_duration = 0


-- 重启数据库生效

pg_ctl stop -m fast
pg_ctl start



-- 测试脚本

postgres@db-172-16-3-33-> cat update.sql 
update t1 set id=2 where id=2;
update t2 set id=2 where id=2;
update t3 set id=2 where id=2;



第一种测试
5个库全测,

pgbench -M prepared -c 1 -f ./update.sql -n -j 1 -r -T 900 -U digoal d1 -h 127.0.0.1 &
pgbench -M prepared -c 1 -f ./update.sql -n -j 1 -r -T 900 -U digoal d2 -h 127.0.0.1 &
pgbench -M prepared -c 1 -f ./update.sql -n -j 1 -r -T 900 -U digoal d3 -h 127.0.0.1 &
pgbench -M prepared -c 1 -f ./update.sql -n -j 1 -r -T 900 -U digoal d4 -h 127.0.0.1 &
pgbench -M prepared -c 1 -f ./update.sql -n -j 1 -r -T 900 -U digoal d5 -h 127.0.0.1 &


测试过程中查看日志中autovacuum的进程启动时间以及进程号,
注意看下面的记录, 我这里记录了一个轮循，5个库的autovacuum worker进程号分别是18793, 18795, 18798, 18801, 18806.
可以看出一个库只起了一个autovacuum worker, 并且VACUUM完后就释放掉了.
第一个轮循的第一个autovacuum worker进程的启动时间是16:55:27.847
然后下一个轮循的第一个autovacuum worker进程号是18809, 启动时间16:56:27.989
两个轮循的间隔刚好1分钟. 


2012-05-11 16:55:27.847 CST,,,18793,,4facd3ff.4969,1,,2012-05-11 16:55:27 CST,8/244,0,LOG,00000,"automatic vacuum of table ""d4.public.t1"": index scans: 1
2012-05-11 16:55:28.072 CST,,,18793,,4facd3ff.4969,3,,2012-05-11 16:55:27 CST,8/247,0,LOG,00000,"automatic vacuum of table ""d4.public.t2"": index scans: 1
2012-05-11 16:55:28.084 CST,,,18793,,4facd3ff.4969,5,,2012-05-11 16:55:27 CST,8/250,0,LOG,00000,"automatic vacuum of table ""d4.public.t3"": index scans: 1
2012-05-11 16:55:36.321 CST,,,18795,,4facd408.496b,1,,2012-05-11 16:55:36 CST,8/255,0,LOG,00000,"automatic vacuum of table ""d3.public.t1"": index scans: 1
2012-05-11 16:55:36.452 CST,,,18795,,4facd408.496b,3,,2012-05-11 16:55:36 CST,8/258,0,LOG,00000,"automatic vacuum of table ""d3.public.t2"": index scans: 1
2012-05-11 16:55:36.464 CST,,,18795,,4facd408.496b,5,,2012-05-11 16:55:36 CST,8/261,0,LOG,00000,"automatic vacuum of table ""d3.public.t3"": index scans: 1
2012-05-11 16:55:45.197 CST,,,18798,,4facd411.496e,2,,2012-05-11 16:55:45 CST,8/268,0,LOG,00000,"automatic vacuum of table ""d2.public.t2"": index scans: 0
2012-05-11 16:55:45.209 CST,,,18798,,4facd411.496e,4,,2012-05-11 16:55:45 CST,8/271,0,LOG,00000,"automatic vacuum of table ""d2.public.t3"": index scans: 0
2012-05-11 16:55:53.507 CST,,,18801,,4facd419.4971,1,,2012-05-11 16:55:53 CST,8/276,0,LOG,00000,"automatic vacuum of table ""d1.public.t1"": index scans: 1
2012-05-11 16:55:53.779 CST,,,18801,,4facd419.4971,3,,2012-05-11 16:55:53 CST,8/279,0,LOG,00000,"automatic vacuum of table ""d1.public.t2"": index scans: 1
2012-05-11 16:55:53.792 CST,,,18801,,4facd419.4971,5,,2012-05-11 16:55:53 CST,8/282,0,LOG,00000,"automatic vacuum of table ""d1.public.t3"": index scans: 1
2012-05-11 16:56:19.277 CST,,,18806,,4facd433.4976,1,,2012-05-11 16:56:19 CST,8/291,0,LOG,00000,"automatic vacuum of table ""d5.public.t1"": index scans: 1
2012-05-11 16:56:19.343 CST,,,18806,,4facd433.4976,3,,2012-05-11 16:56:19 CST,8/294,0,LOG,00000,"automatic vacuum of table ""d5.public.t2"": index scans: 0
2012-05-11 16:56:19.354 CST,,,18806,,4facd433.4976,5,,2012-05-11 16:56:19 CST,8/297,0,LOG,00000,"automatic vacuum of table ""d5.public.t3"": index scans: 0
2012-05-11 16:56:27.989 CST,,,18809,,4facd43b.4979,3,,2012-05-11 16:56:27 CST,8/306,0,LOG,00000,"automatic vacuum of table ""d4.public.t3"": index scans: 0



第二种测试
只测试2个库

pgbench -M prepared -c 1 -f ./update.sql -n -j 1 -r -T 900 -U digoal d1 -h 127.0.0.1 &
pgbench -M prepared -c 1 -f ./update.sql -n -j 1 -r -T 900 -U digoal d5 -h 127.0.0.1 &


测试过程中查看日志中autovacuum的进程启动时间以及进程号,
注意看下面的记录, 我这里记录了一个轮循，2个库的autovacuum worker进程号分别是19225, 19259.
可以看出一个库只起了一个autovacuum worker, 并且VACUUM完后就释放掉了.
第一个轮循的第一个autovacuum worker进程的启动时间是17:28:54.224
然后下一个轮循的第一个autovacuum worker进程号是19268, 启动时间17:29:54.092
两个轮循的间隔也刚好1分钟. 

2012-05-11 17:28:54.224 CST,,,19255,,4facdbd6.4b37,1,,2012-05-11 17:28:54 CST,5/6524754,109838983,LOG,00000,"automatic vacuum of tab
le ""d1.public.t1"": index scans: 1
2012-05-11 17:28:54.371 CST,,,19255,,4facdbd6.4b37,3,,2012-05-11 17:28:54 CST,5/6524757,0,LOG,00000,"automatic vacuum of table ""d1.
public.t2"": index scans: 0
2012-05-11 17:28:54.382 CST,,,19255,,4facdbd6.4b37,5,,2012-05-11 17:28:54 CST,5/6524760,0,LOG,00000,"automatic vacuum of table ""d1.
public.t3"": index scans: 0
2012-05-11 17:29:19.499 CST,,,19259,,4facdbef.4b3b,1,,2012-05-11 17:29:19 CST,5/6524769,0,LOG,00000,"automatic vacuum of table ""d5.
public.t1"": index scans: 1
2012-05-11 17:29:19.533 CST,,,19259,,4facdbef.4b3b,3,,2012-05-11 17:29:19 CST,5/6524772,0,LOG,00000,"automatic vacuum of table ""d5.
public.t2"": index scans: 1
2012-05-11 17:29:19.544 CST,,,19259,,4facdbef.4b3b,5,,2012-05-11 17:29:19 CST,5/6524775,0,LOG,00000,"automatic vacuum of table ""d5.
public.t3"": index scans: 1
2012-05-11 17:29:54.092 CST,,,19268,,4facdc12.4b44,1,,2012-05-11 17:29:54 CST,5/6524786,0,LOG,00000,"automatic vacuum of table ""d1.
public.t1"": index scans: 1



【小结】
从测试中我们可以看出autovacuum_naptime指autovacuum launcher process进程的一个轮循的总睡眠时间，而不是针对单个库的睡眠时间。

