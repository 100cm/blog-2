PostgreSQL research

compare tps performance between 8k 16k 64k wal_blocksize

2012-05-04 9:04:07   查看原文>>

-- 以下是我的一台服务器的fsync测试结果, 后面分别针对open_sync和fdatasync测试不同大小的wal块, 性能差别有多少.

pg_test_fsync 
2000 operations per test
O_DIRECT supported on this platform for open_datasync and open_sync.

Compare file sync methods using one 8kB write:
(in wal_sync_method preference order, except fdatasync
is Linux's default)
        open_datasync                                 n/a
        fdatasync                        3777.334 ops/sec
        fsync                            3502.161 ops/sec
        fsync_writethrough                            n/a
        open_sync                        3753.183 ops/sec

Compare file sync methods using two 8kB writes:
(in wal_sync_method preference order, except fdatasync
is Linux's default)
        open_datasync                                 n/a
        fdatasync                        2957.193 ops/sec
        fsync                            2732.009 ops/sec
        fsync_writethrough                            n/a
        open_sync                          85.246 ops/sec

Compare open_sync with different write sizes:
(This is designed to compare the cost of writing 16kB
in different write open_sync sizes.)
        16kB open_sync write             3213.868 ops/sec
         8kB open_sync writes              82.948 ops/sec
         4kB open_sync writes              75.057 ops/sec
         2kB open_sync writes              76.292 ops/sec
         1kB open_sync writes              66.495 ops/sec

Test if fsync on non-write file descriptor is honored:
(If the times are similar, fsync() can sync data written
on a different descriptor.)
        write, fsync, close              3330.303 ops/sec
        write, close, fsync              3580.559 ops/sec

Non-Sync'ed 8kB writes:
        write                           242630.110 ops/sec




-- 测试表

create table test(id serial primary key,crt_time timestamp);
create index idx_crt_time on test(crt_time);




一、open_sync 同步写方法测试:

--with-wal-blocksize=8测试

useradd k8
su - k8
vi .bash_profile
# add
export PS1="$USER@`/bin/hostname -s`-> "
export PGPORT=5432
export PGDATA=/home/k8/pg_root
export LANG=en_US.utf8
export PGHOME=/opt/pgsqlk8
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
export DATE=`date +"%Y%m%d%H%M"`
export PATH=$PGHOME/bin:$PATH:.
export MANPATH=$PGHOME/share/man:$MANPATH
alias rm='rm -i'
alias ll='ls -lh'

cd $PG_SOURCE
./configure --prefix=/opt/pgsqlk8 --with-pgport=5432 --with-perl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=8 && gmake world
su - root
cd $PG_SOURCE
gmake install-world

su - k8
initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W
vi $PGDATA/postgresql.conf
wal_sync_method = open_sync
checkpoint_segments = 32

pg_ctl start
psql postgres postgres
create table test(id serial primary key,crt_time timestamp);
create index idx_crt_time on test(crt_time);

vi test8k.sql
insert into test (crt_time) values (now());

pgbench -M prepared -c 1 -f ./test8k.sql -n -j 1 -r -T 60 -U postgres postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 60 s
number of transactions actually processed: 66378
tps = 1106.273191 (including connections establishing)
tps = 1106.312299 (excluding connections establishing)
statement latencies in milliseconds:
        0.902769        insert into test (crt_time) values (now());

iostat -x 1
Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
cciss/c0d0        0.00     0.00  0.00 1124.00     0.00 18640.00    16.58     0.88    0.78   0.78  88.00
cciss/c0d0p1      0.00     0.00  0.00 1124.00     0.00 18640.00    16.58     0.88    0.78   0.78  88.00



--with-wal-blocksize=16测试

useradd k16
su - k16
./configure --prefix=/opt/pgsqlk16 --with-pgport=5433 --with-perl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=16 && gmake world
su - root
gmake install-world

initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W
vi postgresql.conf
wal_sync_method = open_sync
checkpoint_segments = 32

vi test16k.sql
insert into test (crt_time) values (now());


pgbench -M prepared -c 1 -f ./test16k.sql -n -j 1 -r -T 60 -U postgres postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 60 s
number of transactions actually processed: 85610
tps = 1426.806010 (including connections establishing)
tps = 1426.871169 (excluding connections establishing)
statement latencies in milliseconds:
        0.699351        insert into test (crt_time) values (now());


iostat -x 1
Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
cciss/c0d0        0.00     0.00  0.00 1508.00     0.00 49152.00    32.59     0.89    0.59   0.59  88.60
cciss/c0d0p1      0.00     0.00  0.00 1508.00     0.00 49152.00    32.59     0.89    0.59   0.59  88.60




--with-wal-blocksize=64测试

useradd k64
su - k64
./configure --prefix=/opt/pgsqlk64 --with-pgport=5434 --with-perl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=64 && gmake world
su - root
gmake install-world

initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W
vi postgresql.conf
wal_sync_method = open_sync
checkpoint_segments = 32

vi test64k.sql
insert into test (crt_time) values (now());


pgbench -M prepared -c 1 -f ./test64k.sql -n -j 1 -r -T 60 -U postgres postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 60 s
number of transactions actually processed: 65781
tps = 1096.315667 (including connections establishing)
tps = 1096.349050 (excluding connections establishing)
statement latencies in milliseconds:
        0.910967        insert into test (crt_time) values (now());

iostat -x 1
Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
cciss/c0d0        0.00    49.33  0.00 1311.67     0.00 168728.00   128.64     0.88    0.67   0.65  84.70
cciss/c0d0p1      0.00    49.33  0.00 1311.67     0.00 168728.00   128.64     0.88    0.67   0.65  84.70




二、fdatasync 同步写方法测试:
-- 使用k8, k16, k64用户测试, 只是把参数修改一下. 重启数据库

wal_sync_method = fdatasync




-- 8k


transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 60 s
number of transactions actually processed: 68638
tps = 1143.953797 (including connections establishing)
tps = 1143.991930 (excluding connections establishing)
statement latencies in milliseconds:
        0.872975        insert into test (crt_time) values (now());

Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
cciss/c0d0        0.00  1242.00  0.00 1126.67     0.00 18949.33    16.82     1.38    1.23   0.79  89.27
cciss/c0d0p1      0.00  1242.00  0.00 1126.67     0.00 18949.33    16.82     1.38    1.23   0.79  89.27



-- 16k


transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 60 s
number of transactions actually processed: 93292
tps = 1554.835518 (including connections establishing)
tps = 1554.887554 (excluding connections establishing)
statement latencies in milliseconds:
        0.641965        insert into test (crt_time) values (now());

Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
cciss/c0d0        0.00  4898.67  0.00 1596.00     0.00 51957.33    32.55     0.82    0.51   0.51  82.10
cciss/c0d0p1      0.00  4898.67  0.00 1596.00     0.00 51957.33    32.55     0.82    0.51   0.51  82.10




-- 64k


transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 60 s
number of transactions actually processed: 72556
tps = 1209.230128 (including connections establishing)
tps = 1209.271786 (excluding connections establishing)
statement latencies in milliseconds:
        0.825657        insert into test (crt_time) values (now());

Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
cciss/c0d0        0.00 18166.00  0.00 1204.67     0.00 154968.00   128.64     0.82    0.68   0.67  80.20
cciss/c0d0p1      0.00 18166.00  0.00 1204.67     0.00 154925.33   128.60     0.82    0.68   0.67  80.20


【小结】
1. 在linux 下面使用fdatasync比open_sync性能略有提升.
2. 测试中16k的wal block size性能最佳. 这个可能和我插入的每条记录的SIZE有关系, 如果每条记录的SIZE都非常大的话, 可能大一点的wal block size会更适合.

