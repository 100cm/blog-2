PostgreSQL research

PostgreSQL datafile backup and recovery case

2012-05-03 22:06:35   查看原文>>

 2DAY DBA的一个例子讲解, PPT实在写不下了. 移到这里
-- 备份

postgres=# select * from pg_start_backup('basebackup');
 pg_start_backup 
-----------------
 11/28000020
(1 row)


-- 创建备份目录, 修改目录权限

postgres@db-172-16-3-33-> mkdir pg_root_bak
postgres@db-172-16-3-33-> chmod 700 pg_root_bak
postgres@db-172-16-3-33-> cd pg_root


-- 备份

postgres@db-172-16-3-33-> cp -r backup_label base global pg_clog pg_hba.conf pg_ident.conf pg_multixact pg_notify pg_serial pg_stat_tmp pg_subtrans pg_twophase PG_VERSION postgresql.conf postmaster.opts recovery.done ../pg_root_bak/


-- 查看是否有表空间需要备份

postgres@db-172-16-3-33-> cd pg_tblspc/
postgres@db-172-16-3-33-> ll
total 0
postgres@db-172-16-3-33-> cd ../pg_root_bak


-- 创建表空间目录, pg_xlog目录

postgres@db-172-16-3-33-> mkdir pg_tblspc
postgres@db-172-16-3-33-> chmod 700 pg_tblspc
postgres@db-172-16-3-33-> mkdir pg_xlog
postgres@db-172-16-3-33-> chmod 700 pg_xlog



-- 备份完成执行pg_stop_backup()

postgres@db-172-16-3-33-> psql -h 127.0.0.1
postgres=# select * from pg_stop_backup();
NOTICE:  pg_stop_backup complete, all required WAL segments have been archived
 pg_stop_backup 
----------------
 11/280000D8
(1 row)


-- 创建检查点, 切换xlog文件, 以便还原时能找到需要的归档文件.

postgres=# checkpoint;
CHECKPOINT
postgres=# select * from pg_switch_xlog();
 pg_switch_xlog 
----------------
 11/2C0000D0
(1 row)


-- 创建记录restore point 的表

postgres=# \c digoal 
You are now connected to database "digoal" as user "postgres".
digoal=# create table restore_point(id serial, target text, crt_time timestamp without time zone);
NOTICE:  CREATE TABLE will create implicit sequence "restore_point_id_seq" for serial column "restore_point.id"
CREATE TABLE



-- 在事务中执行pg_create_restore_point('target1'), 创建还原点target1,并将信息记录到测试表中.

digoal=# begin;
BEGIN
digoal=# insert into restore_point (target,crt_time) values ('target1',now());
digoal=# insert into restore_point (target,crt_time) select pg_create_restore_point('target1'),now();
INSERT 0 1
digoal=# end;
COMMIT


-- 在事务中执行pg_create_restore_point('target2'), 创建还原点target2,并将信息记录到测试表中.

digoal=# begin;
BEGIN
digoal=# insert into restore_point (target,crt_time) values ('target2',now());
digoal=# insert into restore_point (target,crt_time) select pg_create_restore_point('target2'),now();
INSERT 0 1
digoal=# end;
COMMIT
digoal=# select * from restore_point;
 id |   target    |          crt_time          
----+-------------+----------------------------
  1 | target1     | 2012-05-03 21:15:15.075396
  2 | 11/340203F8 | 2012-05-03 21:15:15.075396
  3 | target2     | 2012-05-03 21:16:40.807265
  4 | 11/34020618 | 2012-05-03 21:16:40.807265



-- 新建检查点, 切换xlog, 确保这些日志已归档, 以便可以恢复到指定target name

postgres=# checkpoint;
CHECKPOINT
postgres=# select * from pg_switch_xlog();
 pg_switch_xlog 
----------------
 11/38000128
(1 row)



-- 关闭数据库

postgres@db-172-16-3-33-> pg_ctl stop -m fast


-- 将数据目录移走, 把前面备份的数据目录拷贝为$PGDATA

postgres@db-172-16-3-33-> cd $PGDATA/..
postgres@db-172-16-3-33-> mv pg_root pg_root_old
postgres@db-172-16-3-33-> cp -r pg_root_bak pg_root


-- 修改或新建recovery.conf文件, 准备还原到target1这个还原点.

postgres@db-172-16-3-33-> cd pg_root
mv recovery.done recovery.conf
vi recovery.conf
restore_command = 'cp /pgdata/digoal/1921/data01/pg_arch/%f %p'         # e.g. 'cp /mnt/server/archivedir/%f %p'
recovery_target_name = 'target1'  # e.g. 'daily backup 2011-01-26'
recovery_target_timeline = 'latest'
pause_at_recovery_target = true
standby_mode = on


-- 由于需要查看是否恢复到了我想要到的时间点, 所以需要开启hot_standby选项.

vi postgresql.conf
hot_standby = on



-- 开始恢复

pg_ctl start


-- 连接到hot_standby查看是否恢复到了所指定的时间点.

postgres@db-172-16-3-33-> psql -h 127.0.0.1 digoal postgres
digoal=# select * from restore_point;
 id | target | crt_time 
----+--------+----------
(0 rows)


-- 使用recovery_target_name作为目标时, 其实也是将还原点转换成xid, 还原到最临近的一个点, 而不包含执行pg_create_restore_point的事务.
-- 把目标修改为target2, 继续还原.

postgres@db-172-16-3-33-> pg_ctl stop -m fast
waiting for server to shut down.... done
server stopped

vi $PGDATA/recovery.conf


修改

recovery_target_name = 'target2'

digoal=# select * from restore_point;
 id |   target    |          crt_time          
----+-------------+----------------------------
  1 | target1     | 2012-05-03 21:15:15.075396
  2 | 11/340203F8 | 2012-05-03 21:15:15.075396
(2 rows)


-- 使用recovery_target_name作为目标时, 其实也是将还原点转换成xid, 还原到最临近的一个点, 而不包含执行pg_create_restore_point的事务.
-- 接下来指定时间来恢复, 指定时间也会将时间转换成xid作为目标来恢复.

postgres@db-172-16-3-33-> pg_ctl stop -m fast


# 注释recovery_target_name = 'target2'
recovery_target_time = '2012-05-03 21:26:40.807265+8'
recovery_target_inclusive = true



-- 启动数据库开始恢复

postgres@db-172-16-3-33-> pg_ctl start
digoal=# select * from restore_point;
 id |   target    |          crt_time          
----+-------------+----------------------------
  1 | target1     | 2012-05-03 21:15:15.075396
  2 | 11/340203F8 | 2012-05-03 21:15:15.075396
  3 | target2     | 2012-05-03 21:16:40.807265
  4 | 11/34020618 | 2012-05-03 21:16:40.807265



-- 推荐使用target_name或target_xid比较精确.
-- 到目前为止数据库都是处于恢复模式

postgres@db-172-16-3-33-> pg_controldata 
pg_control version number:            903
Catalog version number:               201105231
Database system identifier:           5717347709989993843
Database cluster state:               in archive recovery
pg_control last modified:             Thu 03 May 2012 09:46:42 PM CST
Latest checkpoint location:           11/34000020
Prior checkpoint location:            11/34000020
Latest checkpoint's REDO location:    11/34000020
Latest checkpoint's TimeLineID:       4
Latest checkpoint's NextXID:          0/66037084
Latest checkpoint's NextOID:          32794
Latest checkpoint's NextMultiXactId:  1
Latest checkpoint's NextMultiOffset:  0
Latest checkpoint's oldestXID:        1670
Latest checkpoint's oldestXID's DB:   1
Latest checkpoint's oldestActiveXID:  0
Time of latest checkpoint:            Thu 03 May 2012 09:01:43 PM CST
Minimum recovery ending location:     11/340205B0
Backup start location:                0/0
Current wal_level setting:            hot_standby
Current max_connections setting:      1000
Current max_prepared_xacts setting:   0
Current max_locks_per_xact setting:   64
Maximum data alignment:               8
Database block size:                  8192
Blocks per segment of large relation: 131072
WAL block size:                       8192
Bytes per WAL segment:                67108864
Maximum length of identifiers:        64
Maximum columns in an index:          32
Maximum size of a TOAST chunk:        1996
Date/time type storage:               64-bit integers
Float4 argument passing:              by value
Float8 argument passing:              by value


-- 激活数据库

postgres@db-172-16-3-33-> psql -h 127.0.0.1 digoal postgres
digoal=# select pg_xlog_replay_resume();


-- 如果指定的恢复目标不能达到, 即把所有的归档文件都恢复后还是不能达到时, 数据库将无法使用pg_xlog_replay_resume激活. 这时需要修改recovery.conf降低目标或者不使用目标来恢复.
-- 例如

#recovery_target_time = '2012-05-03 21:26:16.075397+8'
#recovery_target_inclusive = true
#pause_at_recovery_target = true


-- 都注释掉.在重启数据库恢复, 将恢复到最后的一致状态. 
-- 如果一直处于等待XLOG的状态, 可以把需要的XLOG拷贝到pg_xlog目录进行恢复
-- 或者使用pg_ctl promote激活数据库.
-- 激活后数据库进入新的时间线

postgres@db-172-16-3-33-> pg_controldata 
pg_control version number:            903
Catalog version number:               201105231
Database system identifier:           5717347709989993843
Database cluster state:               in production
pg_control last modified:             Thu 03 May 2012 09:58:56 PM CST
Latest checkpoint location:           11/3C000020
Prior checkpoint location:            11/380000B0
Latest checkpoint's REDO location:    11/3C000020
Latest checkpoint's TimeLineID:       5
Latest checkpoint's NextXID:          0/66037089
Latest checkpoint's NextOID:          32803
Latest checkpoint's NextMultiXactId:  1
Latest checkpoint's NextMultiOffset:  0
Latest checkpoint's oldestXID:        1670
Latest checkpoint's oldestXID's DB:   1
Latest checkpoint's oldestActiveXID:  0
Time of latest checkpoint:            Thu 03 May 2012 09:58:55 PM CST
Minimum recovery ending location:     0/0
Backup start location:                0/0
Current wal_level setting:            hot_standby
Current max_connections setting:      1000
Current max_prepared_xacts setting:   0
Current max_locks_per_xact setting:   64
Maximum data alignment:               8
Database block size:                  8192
Blocks per segment of large relation: 131072
WAL block size:                       8192
Bytes per WAL segment:                67108864
Maximum length of identifiers:        64
Maximum columns in an index:          32
Maximum size of a TOAST chunk:        1996
Date/time type storage:               64-bit integers
Float4 argument passing:              by value
Float8 argument passing:              by value









