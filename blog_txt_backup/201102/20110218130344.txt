PostgreSQL research

Use generate_series fill up two column's range or row-column convert

2011-02-18 13:03:44   查看原文>>

假如有以下测试表，包含省份信息和IP段的信息。需要转换为省份+IPs的信息的信息。

digoal=> \d tbl_ip_info
           Table "digoal.tbl_ip_info"
   Column  |         Type          | Modifiers
 ----------+-----------------------+-----------
  id       | integer               |
  province | character varying(10) |  省份
  start_ip | inet                  |   开始IP
  end_ip   | inet                  |   结束IP



由于PostgreSQL中带了IP类型，所以做起来比较简单，在ORACLE中的话就比较复杂了。

比如192.168.1.1这个IP+256 = 192.168.2.1 ；在PG中可以轻松实现。

digoal=> select '192.168.1.1'::inet+256;
  ?column?  
-------------
 192.168.2.1
(1 row)



插入测试数据 :

digoal=> insert into tbl_ip_info values (1,'浙江','192.168.1.254','192.168.2.5');
digoal=> insert into tbl_ip_info values (2,'广东','192.168.2.254','192.168.3.5');
digoal=> insert into tbl_ip_info values (3,'湖南','192.168.3.254','192.168.4.5');


digoal=> select * from tbl_ip_info;
 id | province |   start_ip    |   end_ip   
----+----------+---------------+-------------
  1 | 浙江     | 192.168.1.254 | 192.168.2.5
  2 | 广东     | 192.168.2.254 | 192.168.3.5
  3 | 湖南     | 192.168.3.254 | 192.168.4.5
(3 rows)



转换为省份+IPs的信息的信息,

digoal=> select id,generate_series(0,end_ip-start_ip)+start_ip from tbl_ip_info ;
 id |   ?column?   
----+---------------
  1 | 192.168.1.254
  1 | 192.168.1.255
  1 | 192.168.2.0
  1 | 192.168.2.1
  1 | 192.168.2.2
  1 | 192.168.2.3
  1 | 192.168.2.4
  1 | 192.168.2.5
  2 | 192.168.2.254
  2 | 192.168.2.255
  2 | 192.168.3.0
  2 | 192.168.3.1
  2 | 192.168.3.2
  2 | 192.168.3.3
  2 | 192.168.3.4
  2 | 192.168.3.5
  3 | 192.168.3.254
  3 | 192.168.3.255
  3 | 192.168.4.0
  3 | 192.168.4.1
  3 | 192.168.4.2
  3 | 192.168.4.3
  3 | 192.168.4.4
  3 | 192.168.4.5
(24 rows)




如果是数字类型的范围转换更加方便。如下

digoal=> create table  tbl_student_info (id int,teacher_id int,class_start_id int,class_end_id int);
CREATE TABLE
Time: 1.090 ms
digoal=> insert into tbl_student_info values (1,1,1,10),(2,2,11,20),(3,3,21,30);
INSERT 0 3
Time: 0.362 ms
digoal=> select teacher_id,generate_series(class_start_id,class_end_id) class_id from tbl_student_info;
 teacher_id | class_id
------------+----------
          1 |        1
          1 |        2
          1 |        3
          1 |        4
          1 |        5
          1 |        6
          1 |        7
          1 |        8
          1 |        9
          1 |       10
          2 |       11
          2 |       12
          2 |       13
          2 |       14
          2 |       15
          2 |       16
          2 |       17
          2 |       18
          2 |       19
          2 |       20
          3 |       21
          3 |       22
          3 |       23
          3 |       24
          3 |       25
          3 |       26
          3 |       27
          3 |       28
          3 |       29
          3 |       30
(30 rows)



使用generate_series来做这种填充，消耗是非常小的

digoal=> explain select id,generate_series(0,end_ip-start_ip)+start_ip from tbl_ip_info ;
                          QUERY PLAN                          
---------------------------------------------------------------
 Seq Scan on tbl_ip_info  (cost=0.00..20.50 rows=600 width=68)
(1 row)



只需要一次全表扫描就可以产生所有需要的结果。

generate_series还可以设置步长，产生时间值等。类似的函数还有generate_subscripts。
  Flag Counter
