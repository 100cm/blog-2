PostgreSQL research

Using Database and User level parameter optimize PostgreSQL Database

2011-04-11 18:08:48   查看原文>>

在PostgreSQL中，参数的设置分为cluster级，命令级，数据库级，用户级，SESSION级，事务级（优先级别从低到高）。
粒度非常的细，但是一般session级和事务级在应用中实际使用比较少，因为写在应用端的话，使得应用的开发复杂度增加，且出现问题不好排查。命令级实际上就是数据库启动的时候命令行传入的参数。
CLUSTER级用得最普遍，也就是postgresql.conf中的配置。
数据库级和用户级的参数值对于一个共用的数据库来说提供了比较灵活的配置。
例如,
Using Database and User level parameter optimize PostgreSQL Database - 德哥@Digoal - The Heart,The World.
 

    当同一个数据库集群提供给多个应用使用时，某些应用可能对事务可靠性无要求（或者说允许数据库WAL异步提交），而某些应用要求数据可靠性非常高，提交后的事务必须写入到非易失存储。
   用户级和数据库级的设置重启数据库后有效。
    实际测试:
postgres@db-172-16-3-33-> cd $PGDATA
postgres@db-172-16-3-33-> grep synchronous_commit postgresql.conf
synchronous_commit = off                # immediate fsync at commit

postgres@db-172-16-3-33-> psql -h 127.0.0.1
postgres=# alter USER digoal set synchronous_commit=off;
ALTER ROLE
digoal=# alter database digoal set synchronous_commit=on;
ALTER DATABASE

digoal=> \c digoal digoal
You are now connected to database "digoal".
digoal=> show synchronous_commit;
 synchronous_commit
--------------------
 off
(1 row)

digoal=> \c digoal postgres
You are now connected to database "digoal" as user "postgres".
digoal=# show synchronous_commit;
 synchronous_commit
--------------------
 on
(1 row)

digoal=# insert into tbl_test select generate_series(1,9000000);
INSERT 0 9000000
Time: 20246.515 ms

digoal=> insert into tbl_test select generate_series(1,9000000);
INSERT 0 9000000
Time: 15979.985 ms
同步提交和异步提交差别明显。

哪些参数可以设置数据库级别和用户级别?
settable run-time parameter.

在混合场景的使用中，针对用户级别和数据库级别来调整参数可以达到更好的调优效果.
