PostgreSQL research

PostgreSQL EXPLAIN analyze buffers

2012-12-19 13:05:26   查看原文>>

昨天一位兄弟聊到怎么取PostgreSQL的buffer hit.
老版本的就不说了, 有兴趣的朋友可以去查对应的手册, 这里还是聊聊PostgreSQL 9.2.
PostgreSQL 有shared buffer内存区域, 在shared buffer中命中的block称为hit.
不在shared buffer中命中的有可能在OS CACHE中命中也有可能是去读取disk的. 但是PostgreSQL无法得知到底是读的os cache还是disk.
所以PostgreSQL的命中率高低不能完全说明是否内存不够, 还需要结合OS层的统计信息来定. 例如swap的使用率.
原文是这么说的 : 

The pg_statio_ views are primarily useful to determine the effectiveness of the buffer cache. 
When the number of actual disk reads is much smaller than the number of buffer hits, then the cache is satisfying most read requests without invoking a kernel call. 
However, these statistics do not give the entire story: due to the way in which PostgreSQL handles disk I/O, data that is not in the PostgreSQL buffer cache might still reside in the kernel's I/O cache, and might therefore still be fetched without requiring a physical read. 
Users interested in obtaining more detailed information on PostgreSQL I/O behavior are advised to use the PostgreSQL statistics collector in combination with operating system utilities that allow insight into the kernel's handling of I/O.


PostgreSQL收集统计信息相关的参数 : 

The parameter track_activities enables monitoring of the current command being executed by any server process.
The parameter track_counts controls whether statistics are collected about table and index accesses.
The parameter track_functions enables tracking of usage of user-defined functions.
The parameter track_io_timing enables monitoring of block read and write times.


默认值如下 : 

#track_activities = on
#track_counts = on
#track_io_timing = off
#track_functions = none                 # none, pl, all


常用的查看统计信息的视图如pg_statio_all_tables : 
PostgreSQL EXPLAIN analyze buffers - 德哥@Digoal - The Heart,The World.
这里的heap_blks_read 虽然说明是disk blocks read. 实际上是除了shared buffer中的读以外的所有读, 所以包含了os cache里的读. 
heap_blks_hit 是shared buffer中的读
idx_blks_read和idx_blks_hit 指这个表的所有索引的统计信息的总和.
因为一个表包含了heap, index, toast, toast_index, vm(table and index 分开), fsm(table and index 分开) 这些数据部分, 所以在pg_statio_all_tables中除了vm, fsm之外都有统计信息.
下面举个例子 : 
注意这些视图在事务中看到的都是snapshot, 所以多次查询都是一致的数据. 除非调用pg_stat_clear_snapshot() 清除.
事务开启

digoal=> begin;
BEGIN
digoal=> select * from pg_statio_all_tables where relname='ocz_test';
-[ RECORD 1 ]---+------------
relid           | 24719
schemaname      | digoal
relname         | ocz_test
heap_blks_read  | 9558621031
heap_blks_hit   | 27591501902
idx_blks_read   | 8064554837
idx_blks_hit    | 64222030859
toast_blks_read | 0
toast_blks_hit  | 0
tidx_blks_read  | 0
tidx_blks_hit   | 0


下面的查询结果只有一条记录, 因为这个表只有1个索引. 索引统计信息的总和就等于pg_statio_all_tables中的值.

digoal=> select * from pg_statio_all_indexes where relname='ocz_test';
-[ RECORD 1 ]-+--------------
relid         | 24719
indexrelid    | 24725
schemaname    | digoal
relname       | ocz_test
indexrelname  | ocz_test_pkey
idx_blks_read | 8064554837
idx_blks_hit  | 64222030859


我这里开了pgbench对这个表进行不停的更新. 但是在事务中查询, 这些统计信息值不会发生变化. 

digoal=> select * from pg_statio_all_tables where relname='ocz_test';
-[ RECORD 1 ]---+------------
relid           | 24719
schemaname      | digoal
relname         | ocz_test
heap_blks_read  | 9558621031
heap_blks_hit   | 27591501902
idx_blks_read   | 8064554837
idx_blks_hit    | 64222030859
toast_blks_read | 0
toast_blks_hit  | 0
tidx_blks_read  | 0
tidx_blks_hit   | 0
digoal=> select * from pg_statio_all_indexes where relname='ocz_test';
-[ RECORD 1 ]-+--------------
relid         | 24719
indexrelid    | 24725
schemaname    | digoal
relname       | ocz_test
indexrelname  | ocz_test_pkey
idx_blks_read | 8064554837
idx_blks_hit  | 64222030859


调用pg_stat_clear_snapshot()后可以清除当前值, 进入下一个snapshot.

digoal=> select pg_stat_clear_snapshot();
-[ RECORD 1 ]----------+-
pg_stat_clear_snapshot | 
digoal=> select * from pg_statio_all_indexes where relname='ocz_test';
-[ RECORD 1 ]-+--------------
relid         | 24719
indexrelid    | 24725
schemaname    | digoal
relname       | ocz_test
indexrelname  | ocz_test_pkey
idx_blks_read | 8073145886
idx_blks_hit  | 64288889852
digoal=> select pg_stat_clear_snapshot();
-[ RECORD 1 ]----------+-
pg_stat_clear_snapshot | 
digoal=> select * from pg_statio_all_indexes where relname='ocz_test';
-[ RECORD 1 ]-+--------------
relid         | 24719
indexrelid    | 24725
schemaname    | digoal
relname       | ocz_test
indexrelname  | ocz_test_pkey
idx_blks_read | 8073198956
idx_blks_hit  | 64289301744
digoal=> select * from pg_statio_all_tables where relname='ocz_test';
-[ RECORD 1 ]---+------------
relid           | 24719
schemaname      | digoal
relname         | ocz_test
heap_blks_read  | 9568053620
heap_blks_hit   | 27620023959
idx_blks_read   | 8073198956
idx_blks_hit    | 64289301744
toast_blks_read | 0
toast_blks_hit  | 0
tidx_blks_read  | 0
tidx_blks_hit   | 0


所有的统计信息表如下, 这里不一一介绍了, 有兴趣的朋友看一下手册 : 
PostgreSQL EXPLAIN analyze buffers - 德哥@Digoal - The Heart,The World.

如果要看单条SQL的统计信息那就要用到explain analyze了.
下面以PostgreSQL 9.2为例讲解一下 EXPLAIN的输出.
首先是explain命令的语法 : 

digoal=> \h explain
Command:     EXPLAIN
Description: show the execution plan of a statement
Syntax:
EXPLAIN [ ( option [, ...] ) ] statement
EXPLAIN [ ANALYZE ] [ VERBOSE ] statement

where option can be one of:

    ANALYZE [ boolean ]
    VERBOSE [ boolean ]
    COSTS [ boolean ]
    BUFFERS [ boolean ]
    TIMING [ boolean ]
    FORMAT { TEXT | XML | JSON | YAML }


我们要看的buffers信息来自BufferUsage结构的数据, 源码在这个地方 : 
src/backend/commands/explain.c

        /* Show buffer usage */
        if (es->buffers)
        {
                const BufferUsage *usage = &planstate->instrument->bufusage;

                if (es->format == EXPLAIN_FORMAT_TEXT)
                {
                        bool            has_shared = (usage->shared_blks_hit > 0 ||
                                                                          usage->shared_blks_read > 0 ||
                                                                          usage->shared_blks_dirtied > 0 ||
                                                                          usage->shared_blks_written > 0);
                        bool            has_local = (usage->local_blks_hit > 0 ||
                                                                         usage->local_blks_read > 0 ||
                                                                         usage->local_blks_dirtied > 0 ||
                                                                         usage->local_blks_written > 0);
                        bool            has_temp = (usage->temp_blks_read > 0 ||
                                                                        usage->temp_blks_written > 0);
                        bool            has_timing = (!INSTR_TIME_IS_ZERO(usage->blk_read_time) ||
                                                                 !INSTR_TIME_IS_ZERO(usage->blk_write_time));
...
略


BufferUsage 的数据结构如下 : 
src/include/executor/instrument.h

00019 typedef struct BufferUsage
00020 {
00021     long        shared_blks_hit;    /* # of shared buffer hits */
00022     long        shared_blks_read;       /* # of shared disk blocks read */
00023     long        shared_blks_dirtied;    /* # of shared blocks dirtied */
00024     long        shared_blks_written;    /* # of shared disk blocks written */
00025     long        local_blks_hit; /* # of local buffer hits */
00026     long        local_blks_read;    /* # of local disk blocks read */
00027     long        local_blks_dirtied;     /* # of shared blocks dirtied */
00028     long        local_blks_written;     /* # of local disk blocks written */
00029     long        temp_blks_read; /* # of temp blocks read */
00030     long        temp_blks_written;      /* # of temp blocks written */
00031     instr_time  blk_read_time;  /* time spent reading */
00032     instr_time  blk_write_time; /* time spent writing */
00033 } BufferUsage;


要让explain打开buffers则必须同时要打开analyze, 但是使用analyze需要注意, 
analyze 不要用在update, delete, insert, 等会对数据库造成修改的SQL语句上, 因为它会执行这条SQL, 对数据库造成修改.
如果一定要用, 那就在事务中使用, 然后rollback;
如下 : 
测试表的当前数据 : 

digoal=> select * from test ;
 id 
----
  1
(1 row)


不带analyze的explain : 

digoal=> explain update test set id=id+1;
                          QUERY PLAN                           
---------------------------------------------------------------
 Update on test  (cost=0.00..40.00 rows=2400 width=10)
   ->  Seq Scan on test  (cost=0.00..40.00 rows=2400 width=10)
(2 rows)


不对数据库造成修改 : 

digoal=> select * from test ;
 id 
----
  1
(1 row)


带analyze的explain : 

digoal=> explain analyze update test set id=id+1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Update on test  (cost=0.00..40.00 rows=2400 width=10) (actual time=0.067..0.067 rows=0 loops=1)
   ->  Seq Scan on test  (cost=0.00..40.00 rows=2400 width=10) (actual time=0.048..0.049 rows=1 loops=1)
 Total runtime: 0.092 ms
(3 rows)


对数据库造成了修改 : 

digoal=> select * from test ;
 id 
----
  2
(1 row)


BUFFERS输出的内容介绍, 原文如下 : 

BUFFERS
Include information on buffer usage.
Specifically, include :
the number of shared blocks hit, read, dirtied, and written,
the number of local blocks hit, read, dirtied, and written,
the number of temp blocks read and written.

  1. Shared blocks contain data from regular tables and indexes;
  2. local blocks contain data from temporary tables and indexes;
  3. while temp blocks contain short-term working data used in sorts, hashes, Materialize plan nodes, and similar cases.

  1. A hit means that a read was avoided because the block was found already in cache when needed.
  2. read : shared disk blocks read
  3. The number of blocks dirtied indicates the number of previously unmodified blocks that were changed by this query;
  4. while the number of blocks written indicates the number of previously-dirtied blocks evicted from cache by this backend during query processing.
The number of blocks shown for an upper-level node includes those used by all its child nodes.
In text format, only non-zero values are printed. This parameter may only be used when ANALYZE is also enabled. It defaults to FALSE.


先看个例子, 再作介绍, 因为text模式不打印值=0的, 所以后面我们要用到JSON输出 : 
下面是text格式输出 : 

digoal=# explain (analyze on, verbose on, buffers on, timing on, costs on) update dimension_tab set sales_value=sales_value+1;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Update on public.dimension_tab  (cost=0.00..88.00 rows=1000 width=28) (actual time=58.962..58.962 rows=0 loops=1)
   Buffers: shared hit=1619 read=68 dirtied=5 written=7
   ->  Seq Scan on public.dimension_tab  (cost=0.00..88.00 rows=1000 width=28) (actual time=0.077..3.940 rows=1000 loops=1)
         Output: fact_1_id, fact_2_id, fact_3_id, fact_4_id, (sales_value + 1::numeric), ctid
         Buffers: shared hit=10 read=63 written=5
 Total runtime: 58.996 ms
(6 rows)


下面是JSON格式输出 : 

digoal=# explain (analyze on, verbose on, buffers on, timing on, costs on, format json) update dimension_tab set sales_value=sales_value+1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 [                                                                                                              +
   {                                                                                                            +
     "Plan": {                                                                                                  +
       "Node Type": "ModifyTable",                                                                              +
       "Operation": "Update",                                                                                   +
       "Relation Name": "dimension_tab",                                                                        +
       "Schema": "public",                                                                                      +
       "Alias": "dimension_tab",                                                                                +
       "Startup Cost": 0.00,                                                                                    +
       "Total Cost": 88.00,                                                                                     +
       "Plan Rows": 1000,                                                                                       +
       "Plan Width": 28,                                                                                        +
       "Actual Startup Time": 168.809,                                                                          +
       "Actual Total Time": 168.809,                                                                            +
       "Actual Rows": 0,                                                                                        +
       "Actual Loops": 1,                                                                                       +
       "Shared Hit Blocks": 1618,                                                                               +
       "Shared Read Blocks": 77,                                                                                +
       "Shared Dirtied Blocks": 27,                                                                             +
       "Shared Written Blocks": 23,                                                                             +
       "Local Hit Blocks": 0,                                                                                   +
       "Local Read Blocks": 0,                                                                                  +
       "Local Dirtied Blocks": 0,                                                                               +
       "Local Written Blocks": 0,                                                                               +
       "Temp Read Blocks": 0,                                                                                   +
       "Temp Written Blocks": 0,                                                                                +
       "I/O Read Time": 0.000,                                                                                  +
       "I/O Write Time": 0.000,                                                                                 +
       "Plans": [                                                                                               +
         {                                                                                                      +
           "Node Type": "Seq Scan",                                                                             +
           "Parent Relationship": "Member",                                                                     +
           "Relation Name": "dimension_tab",                                                                    +
           "Schema": "public",                                                                                  +
           "Alias": "dimension_tab",                                                                            +
           "Startup Cost": 0.00,                                                                                +
           "Total Cost": 88.00,                                                                                 +
           "Plan Rows": 1000,                                                                                   +
           "Plan Width": 28,                                                                                    +
           "Actual Startup Time": 6.602,                                                                        +
           "Actual Total Time": 72.165,                                                                         +
           "Actual Rows": 1000,                                                                                 +
           "Actual Loops": 1,                                                                                   +
           "Output": ["fact_1_id", "fact_2_id", "fact_3_id", "fact_4_id", "(sales_value + 1::numeric)", "ctid"],+
           "Shared Hit Blocks": 0,                                                                              +
           "Shared Read Blocks": 73,                                                                            +
           "Shared Dirtied Blocks": 0,                                                                          +
           "Shared Written Blocks": 20,                                                                         +
           "Local Hit Blocks": 0,                                                                               +
           "Local Read Blocks": 0,                                                                              +
           "Local Dirtied Blocks": 0,                                                                           +
           "Local Written Blocks": 0,                                                                           +
           "Temp Read Blocks": 0,                                                                               +
           "Temp Written Blocks": 0,                                                                            +
           "I/O Read Time": 0.000,                                                                              +
           "I/O Write Time": 0.000                                                                              +
         }                                                                                                      +
       ]                                                                                                        +
     },                                                                                                         +
     "Triggers": [                                                                                              +
     ],                                                                                                         +
     "Total Runtime": 171.540                                                                                   +
   }                                                                                                            +
 ]
(1 row)


对比以上text和JSON的输出, 
显然text没有打印值=0的统计信息.
实际上BUFFERS输出包含了12个部分的信息, 也就是BufferUsage数据结构中存储的信息.
解释如下 : 
Shared 部分的值包含了普通表和索引的统计信息.
Local 部分的值包含了临时表和索引的统计信息.
Temp 部分的值包含了在sort, hash, materialize或类似阶段用到的工作数据的统计信息.
I/O Read Time 涉及的所有数据块的读时间开销.
I/O Write Time 涉及的所有数据块的写时间开销.

Hit Blocks : 在shared buffer中命中的数据块.
Read Blocks : 在disk中读到的数据块(包括os cache的部分).
Dirtied Blocks : 在当前QUERY中被修改了的并且此前是未修改过的数据块.
Written Blocks : 在整个QUERY过程中, 被当前QUERY的backend process从shared buffer中驱逐出去的此前是dirtied的数据块.

从JSON的结果来看, 这个SQL有73个数据块读取是从OScache或者disk来的. 并且有20个脏块被刷出了shared buffer.

【参考】
src/backend/commands/explain.c
src/include/executor/instrument.h
http://www.postgresql.org/docs/9.2/static/sql-explain.html
http://www.postgresql.org/docs/current/static/monitoring-stats.html
http://blog.163.com/digoal@126/blog/static/163877040201041111499884/
http://blog.163.com/digoal@126/blog/static/163877040201041111454178/
http://blog.163.com/digoal@126/blog/static/16387704020111152495686/?suggestedreading&wumii

