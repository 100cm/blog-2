PostgreSQL research

CASE: PostgreSQL sync stream replication by pseudo standby(pg_receivexlog) & real standby

2014-12-14 20:20:17   查看原文>>

    我们知道, PostgreSQL HA的方案可以通过共享存储, 共享分布式存储, DRBD, 流复制(同步) 来实现0丢失.
    异步流复制可能导致数据丢失, 不推荐使用.
    本文来分析一下使用同步流复制需要注意的问题, 以及解决办法.
    首先, 在事务提交时, 同步流复制STANDBY节点(应用或接收到)的XLOG OFFSET必须大于等于事务产生的XLOG位置信息. 事务才算成功, 如果同步流复制STANDBY节点异常, 会导致主节点处于等待状态. 那么问题来了, 如果只有1个流复制节点, 那么风险会比较大, 因为流复制节点异常(或者网络异常)的话, 会导致主几点HANG住.
    有什么好的办法来解决这个问题呢?
    1. 当流复制网络或流复制STANDBY节点等等出现问题时, 同步切成异步, 使主库不至于HANG住. (这么做是有问题的, 一旦切换成异步后, 主节点也异常的话, 备节点和主节点有存在差异的风险) 

    2. 使用多个standby的同步流复制方案, 当sync standby节点异常时会自动将sync standby角色转嫁给其他standby中的一员, 这么做降低了standby异常带来的风险, 但是会增加较大的成本, 每个standby需要的存储空间和主节点一致. 

    3. XLOG同步写多份(存放在主,备节点都能访问到的地方), 以此来保证XLOG的安全, 同时使用异步流复制取代同步流复制. 并且在FAILOVER前 , 即激活STANDBY前, fence主节点, 并拷贝完整的XLOG恢复, 所以主备同样能够达到一致的状态.  这样做解决了主备一致性问题, 同时占用的空间比较小.

    4. 方法和3类似, 使用一个STANDBY, 加使用pg_receivexlog. 相比第二点, 好处是省了一部分STANDBY的容量成本. (这种方法必须让主节点认为pg_receivexlog也是一个standby节点, 需改代码) , 且在FAILOVER前 , fence主节点, 并且判断当前standby节点的offset是否比pg_receivexlog的节点新, 如果不是, 则从pg_receivexlog拷贝XLOG过来, 应用后即
激活STANDBY, 所以主备同样能够达到一致的状态. 这样做解决了主备一致性问题, 同时占用的空间比较小.

[参考]
1. man pg_receivexlog

Flag Counter
