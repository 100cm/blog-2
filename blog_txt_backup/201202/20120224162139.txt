PostgreSQL research

execute plan difference between Oracle and PostgreSQL's partition table

2012-02-24 16:21:39   查看原文>>

Oracle和PostgreSQL在分区表的执行计划方面略有不同。
Oracle在执行计划方面显然占据了有事。
大家来看个例子 : 
以下是PostgreSQL中的测试 : 
首先constraint_exclusion 这个参数需要配置为partition或on. 具体我就不解释了, 不了解的同学可以去翻看以下手册. 
创建测试表 : 

digoal=> create table t(id int primary key);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_pkey" for table "t"
CREATE TABLE


创建子表, 用于存储分区数据 . 

digoal=> create table t1(like t including all) inherits(t);
NOTICE:  merging column "id" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t1_pkey" for table "t1"
CREATE TABLE
digoal=> create table t2(like t including all) inherits(t);
NOTICE:  merging column "id" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t2_pkey" for table "t2"
CREATE TABLE
digoal=> create table t3(like t including all) inherits(t);
NOTICE:  merging column "id" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t3_pkey" for table "t3"
CREATE TABLE
digoal=> create table t4(like t including all) inherits(t);
NOTICE:  merging column "id" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t4_pkey" for table "t4"
CREATE TABLE


添加约束, 你可以理解为ORACLE创建分区表时写的partition 子句。

digoal=> alter table t1 add constraint ck_t1_1 check(id<0);
ALTER TABLE
digoal=> alter table t2 add constraint ck_t2_1 check(id>=0 and id<100);
ALTER TABLE
digoal=> alter table t3 add constraint ck_t3_1 check(id>=100 and id<200);
ALTER TABLE
digoal=> alter table t4 add constraint ck_t4_1 check(id>=200);
ALTER TABLE


但是请注意, PostgreSQL的子表和子表之间的约束是没有任何关系的, 所以也可以有重叠, 即非全局约束.
这是和Oracle差别的关键所在.

接下来看一组执行计划 : 
分区字段传入常量, 执行时扫描的是父表和约束对应的子表 : 

digoal=> explain select * from t where id=10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Result  (cost=0.00..8.54 rows=2 width=4)
   ->  Append  (cost=0.00..8.54 rows=2 width=4)
         ->  Index Only Scan using t_pkey on t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = 10)
         ->  Index Only Scan using t2_pkey on t2 t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = 10)



分区字段传入变量, 执行时扫描的是父表和约束对应的子表 : 

digoal=> prepare p_test as select * from t where id=$1;
PREPARE

digoal=> explain execute p_test(1);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Result  (cost=0.00..8.54 rows=2 width=4)
   ->  Append  (cost=0.00..8.54 rows=2 width=4)
         ->  Index Only Scan using t_pkey on t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = 1)
         ->  Index Only Scan using t2_pkey on t2 t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = 1)
(6 rows)



子句查询, 执行时扫描的是父表和所有子表,  
注意这里使用的子查询是子表的查询, 理论上应该是扫描父表和该子表 : 
所以这个是不优的计划, 后面我会来讲如何避免这种情况.

digoal=> explain select * from t where id=(select id from t1 limit 1);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Result  (cost=0.02..21.36 rows=5 width=4)
   InitPlan 1 (returns $0)
     ->  Limit  (cost=0.00..0.02 rows=1 width=4)
           ->  Index Only Scan using t1_pkey on t1  (cost=0.00..58.25 rows=2400 width=4)
   ->  Append  (cost=0.00..21.34 rows=5 width=4)
         ->  Index Only Scan using t_pkey on t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = $0)
         ->  Index Only Scan using t1_pkey on t1 t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = $0)
         ->  Index Only Scan using t2_pkey on t2 t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = $0)
         ->  Index Only Scan using t3_pkey on t3 t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = $0)
         ->  Index Only Scan using t4_pkey on t4 t  (cost=0.00..4.27 rows=1 width=4)
               Index Cond: (id = $0)
(15 rows)


在PostgreSQL 中, 因为没有全局约束, 所以这个子查询不能被分解成仅仅查询父表和该子表, 而是扫描了所有子表.

你可以很清晰的发现, ORACLE只扫描了单个分区, 而不是所有分区.
这是Oracle全局约束起的作用.

SQL> create table t(id int) partition by range(id) 
  2  (partition t1 values less than (0),
  3  partition t2 values less than (100),
  4  partition t3 values less than (200),
  5  partition t4 values less than (300));

Table created.

SQL> explain plan for select * from t where id = (select id from t partition (t1) where rownum=1);

Explained.

SQL> select * from table(dbms_xplan.display);

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------
Plan hash value: 4145048349

--------------------------------------------------------------------------------------------------
| Id  | Operation                 | Name | Rows  | Bytes | Cost (%CPU)| Time     | Pstart| Pstop |
--------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT          |      |     1 |    13 |     4   (0)| 00:00:01 |       |       |
|   1 |  PARTITION RANGE SINGLE   |      |     1 |    13 |     2   (0)| 00:00:01 |   KEY |   KEY |
|*  2 |   TABLE ACCESS FULL       | T    |     1 |    13 |     2   (0)| 00:00:01 |   KEY |   KEY |
|*  3 |    COUNT STOPKEY          |      |       |       |            |          |       |       |
|   4 |     PARTITION RANGE SINGLE|      |     1 |    13 |     2   (0)| 00:00:01 |     1 |     1 |
|   5 |      TABLE ACCESS FULL    | T    |     1 |    13 |     2   (0)| 00:00:01 |     1 |     1 |
--------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("ID"= (SELECT /*+ */ "ID" FROM "T" "T" WHERE ROWNUM=1))
   3 - filter(ROWNUM=1)

Note
-----
   - dynamic sampling used for this statement

22 rows selected.



接下来我们来回到PostgreSQL, 看看如何规避那个不优的执行计划.
即子句的输出要化为变量, 让优化器知道这个变量的值来选择合适的分区.
这里通过创建一个函数来处理.
在实际使用中, 你可能会使用一个变量来保存子句的输出, 在传入SQL. 
我这里通过在t4中插入几百万条记录, 通过执行时间来分辨它是否是全子表扫描还是单子表扫描, 从执行时间来看是单子表扫描.

digoal=> create or replace function f_test(i_id int) returns setof int as $$
declare
v_id int;
begin
  select id into v_id from t1 limit 1;
  return query select id from t where id = v_id;
end;
$$ language plpgsql;

digoal=> select * from f_test(1);
 f_test 
--------
     -1
(1 row)

Time: 0.926 ms

删除t4的约束后, t4介入扫描, 时间变长.
digoal=> alter table t4 drop constraint ck_t4_1;
ALTER TABLE
Time: 1.190 ms
digoal=> select * from f_test(1);
 f_test 
--------
     -1
(1 row)

Time: 715.849 ms


评论

越狱迷失 - 2012-03-23 12:51:12

感谢德哥,把分区查询讲解的这么详细[face1]
