PostgreSQL research

mongodb data model and query language introduction

2010-12-04 14:26:39   查看原文>>

首先介绍几个mongodb的概念或术语 :

  • A Mongo system holds a set of databases
  • A database holds a set of collections
  • A collection holds a set of documents
  • A document is a set of fields
  • A field is a key-value pair
  • A key is a name (strin
  • A value is a
      □ basic type like string, integer, float, timestamp, binary, etc.,
      □ a document, or
      □ an array of values

注意,在mongodb中大小写敏感,另外,在mongodb中database,collection都不是显性创建的,怎么说呢?
如,在PostgreSQL中,database要先建好之后才能在这个库上新建table，并且table也是需要先写好定义建立之后，才可以往表里面插数据的.
但是mongodb中,数据库和collection是在写了数据之后自动生成的,如:
use test
db.auth("digoal","DIGOAL")
> show collections
system.indexes
system.users
tbl_test
db.tbl.insert({id:1,name:{first:"zhou",last:"digoal"}})
> db.tbl.find()
{ "_id" : ObjectId("4cf9b9b6f39b42ae4e61ed81"), "id" : 1, "name" : { "first" : "zhou", "last" : "digoal" } }
> show collections
system.indexes
system.users
tbl
tbl_test
本例由于开启了AUTH模式，所以数据库中新建了一个用户，新建用户后会多一个system.users collection,此时数据库就自动创建了。
表tbl在插数据前是没有的，插了数据之后就自动创建了..

例2:
[root@db6 ~]# /opt/mongodb-linux-x86_64-1.6.4/bin/mongo 127.0.0.1:5281/test
MongoDB shell version: 1.6.4
connecting to: 127.0.0.1:5281/test
> db.auth("digoal","DIGOAL")
1 （1返回值,表示用户已经过该数据库认证）
> show collections
system.indexes
system.users
tbl_test
(这里显示有三个collection)
> db.system.users.find()
{ "_id" : ObjectId("4cf845fc131d94431264db86"), "user" : "digoal", "readOnly" : false, "pwd" : "db08460445abfa18a72ac0172f49b360" }
(这里使用find()取出collection中的值,以上一行显示的是document，"_id" : ObjectId("4cf845fc131d94431264db86")是一个field, _id为key,ObjectId("4cf845fc131d94431264db86")为value,key和value是成对出现的，":"冒号在这里是key和value的连接符.","逗号是field的分隔符,"""双引号用作string的包围符,{}大括号在这里是document的包围符,)

Query Language Introduction :

To retrieve certain documents from a db collection, you supply a query document containing the fields the desired documents should match. For example, {name: {first: 'John', last: 'Doe'}} will match all documents in the collection with name of John Doe. Likewise, {name.last: 'Doe'} will match all documents with last
name of Doe. Also, {name.last: /^D/} will match all documents with last name starting with 'D' (regular expression match).

Queries will also match inside embedded arrays. For example, {keywords: 'storage'} will match all documents with 'storage' in its keywords array. Likewise, {keywords: {$in: ['storage', 'DBMS']}} will match all documents with 'storage' or 'DBMS' in its keywords array.

If you have lots of documents in a collection and you want to make a query fast then build an index for that query. For example, ensureIndex({name.last: 1}) or ensureIndex({keywords: 1}). Note, indexes occupy space and slow down updates a bit, so use them only when the tradeoff is worth it.

field[s]必须用{}包围.

find()对应SQL中的select，举例:

db.tbl_test.find()  == select * from tbl_test;

db.tbl_test.find({},{a:1}) == select _id,a from tbl_test;  注意 _id 是默认被加载的.

db.tbl_test.find({},{_id:0,a:1,b:1}) == select a,b from tbl_test;

db.tbl_test.find({a:1}) == db.tbl_test.find({a:1},{}) select * from tbl_test where a=1;

解释:

find()第一个参数是条件限制参数,类似SQL中的where条件,

find()的第二个参数默认是{}即全部字段或称为keyword,{key:1}表示select key from ....，{key:0}表示选择除key以外的字段被包含在输出列中.多个的话使用逗号分开

findOne() == find().limit(1) 其他和find()一样，只是限制输出一行.

find()中的WHERE条件不接受变量如,select * from tbl_test where a=b 转成 db.tbl_test.find({a:tbl_test.b})是不允许的,除非在程序中实现.

条件筛选举例1:

$lt,$gt,$lte,$gte等同<,>,<=,>=  (less than,great than,less than or equal to,great than or equal to)

例如:

db.tbl_test.find({a:{$gt:1,$lt:10}}) == select * from tbl_test where a>1 and a<10

条件筛选举例2:

$in,$nin,$or  (或者使用[]中括号圈定筛选值)

db.tbl_test.find({a:{$in:[1,2,3,4]}}) == select * from tbl_test wher a in (1,2,3,4);

db.tbl_test.find({a:{$nin:[1,2,3,4]}}) == select * from tbl_test wher a not in (1,2,3,4);

db.tbl_test.find({$or : [{a:{$in:[1,2,3,4]}},{b:"digoal"}]}) == select * from tbl_test where a in (1,2,3,4) or b="digoal";

(AND和OR的使用优化,and的话尽量将第一个条件选择为更可能为FALSE的,OR的话相反,尽量将第一个条件放更可能为TRUE的，减少判断的次数)

条件筛选举例3:

$not

db.users.find({id_num:{$mod:[5,1]}}) == select * from users where mod(id_num,5)=1;

db.users.find({id_num:{$not : {$mod:[5,1]}}}) == select * from users where mod(id_num,5)<>1;

另外,$not还可用作规则表达式模式,

另外关于查询和更新，条件符位置刚好相反:

In the query,
"$lt" is in the inner document; in the update, "$inc" is the key for the outer document.
This generally holds true: conditionals are an inner document key, and modifiers are
always a key in the outer document.

db.users.find({"age" : {"$lt" : 30, "$gt" : 20}})

> db.tbl.find()                                                                                                                   
{ "_id" : ObjectId("4cf9b9b6f39b42ae4e61ed81"), "id" : 1, "name" : { "first" : "zhou", "last" : "digoal" } }

> db.tbl.update({_id:ObjectId("4cf9b9b6f39b42ae4e61ed81")},{$inc:{id:2}})

> db.tbl.find()                                                         
{ "_id" : ObjectId("4cf9b9b6f39b42ae4e61ed81"), "id" : 3, "name" : { "first" : "zhou", "last" : "digoal" } }
> db.tbl.update({_id:ObjectId("4cf9b9b6f39b42ae4e61ed81")},{$set:{id:2}})
> db.tbl.find()                                                         
{ "_id" : ObjectId("4cf9b9b6f39b42ae4e61ed81"), "id" : 2, "name" : { "first" : "zhou", "last" : "digoal" } }
>

条件筛选例4：（null表示空.）

> db.tbl1.insert({a:1,b:null})

> db.tbl1.insert({a:2,b:"digoal"})

> db.tbl1.find()                 
{ "_id" : ObjectId("4cf9ca6ff39b42ae4e61ed82"), "a" : 1, "b" : null }
{ "_id" : ObjectId("4cf9ca80f39b42ae4e61ed83"), "a" : 2, "b" : "digoal" }
> db.tbl1.find({b:null})
{ "_id" : ObjectId("4cf9ca6ff39b42ae4e61ed82"), "a" : 1, "b" : null }
> 

接下来要查找一个不存在的KEY：null的情况，看看MONGODB会给出什么样的结果:

> db.tbl1.find({c:null})
{ "_id" : ObjectId("4cf9ca6ff39b42ae4e61ed82"), "a" : 1, "b" : null }
{ "_id" : ObjectId("4cf9ca80f39b42ae4e61ed83"), "a" : 2, "b" : "digoal" }

是的,不会报错，并且给出了所有结果,因为c这个key是不存在的，换句话说c:null是true的.

如果要再加一个c这个KEY是否存在的判断，如下:

> db.tbl1.find({c:{$in:[null],$exists:true}})
>

这时就没有返回了,

以上写法还可以如下:

> db.tbl1.find({c:null,c:{$exists:true}})
>

条件筛选例5：规则表达式

mongodb支持PCRE,Perl Compatible Regular Expression.

> db.tbl1.find()                 
{ "_id" : ObjectId("4cf9ca6ff39b42ae4e61ed82"), "a" : 1, "b" : null }
{ "_id" : ObjectId("4cf9ca80f39b42ae4e61ed83"), "a" : 2, "b" : "digoal" }
{ "_id" : ObjectId("4cf9cc40f39b42ae4e61ed84"), "a" : 3, "b" : "david" }
{ "_id" : ObjectId("4cf9cc6ff39b42ae4e61ed85"), "a" : 3, "b" : "DIGOAL" }
> db.tbl1.find({b:/dig/})
{ "_id" : ObjectId("4cf9ca80f39b42ae4e61ed83"), "a" : 2, "b" : "digoal" }
> db.tbl1.find({b:/dig/i}) #忽略大小写
{ "_id" : ObjectId("4cf9ca80f39b42ae4e61ed83"), "a" : 2, "b" : "digoal" }
{ "_id" : ObjectId("4cf9cc6ff39b42ae4e61ed85"), "a" : 3, "b" : "DIGOAL" }

> db.tbl1.find({b:/^d/}) #首字母d，这种模式支持INDEX检索
{ "_id" : ObjectId("4cf9ca80f39b42ae4e61ed83"), "a" : 2, "b" : "digoal" }
{ "_id" : ObjectId("4cf9cc40f39b42ae4e61ed84"), "a" : 3, "b" : "david" }

同时规则表达式还支持自匹配，如下：

> db.tbl1.insert({a:1,b:/abc/})
> db.tbl1.find({b:/abc/})
{ "_id" : ObjectId("4cf9cd40f39b42ae4e61ed86"), "a" : 1, "b" : /abc/ }

条件筛选6：队列相关操作

( array队列,element队列中的元素 )

6.1 普通匹配:

> db.tbl2.insert({fruit:["apple","banana","peach"]})
> db.tbl2.find({fruit:"apple"})
{ "_id" : ObjectId("4cf9cdfef39b42ae4e61ed87"), "fruit" : [ "apple", "banana", "peach" ] }

     精确匹配:

> db.tbl2.find({fruit:"apple",fruit:"peach",fruit:"banana"})                                                                      
{ "_id" : ObjectId("4cf9cdfef39b42ae4e61ed87"), "fruit" : [ "apple", "banana", "peach" ] }

> db.tbl2.find({fruit:"apple",fruit:"peach",fruit:"other"})
> 无结果

6.2 使用$all替换前面的写法:

> db.tbl2.find({})                              
{ "_id" : ObjectId("4cf9cdfef39b42ae4e61ed87"), "fruit" : [ "apple", "banana", "peach" ] }
{ "_id" : ObjectId("4cf9d0d1f39b42ae4e61ed88"), "fruit" : [ "apple", "orange", "kumquat" ] }
{ "_id" : ObjectId("4cf9d0e0f39b42ae4e61ed89"), "fruit" : [ "apple", "banana", "cherry" ] }
> db.tbl2.find({fruit:{$all:["apple","banana"]}})
{ "_id" : ObjectId("4cf9cdfef39b42ae4e61ed87"), "fruit" : [ "apple", "banana", "peach" ] }
{ "_id" : ObjectId("4cf9d0e0f39b42ae4e61ed89"), "fruit" : [ "apple", "banana", "cherry" ] }

注意以上的FIND都是无序的，即不判断元素在队列中的位置, 如果要判断位置匹配，如下:

> db.tbl2.find({"fruit.2":"peach"})             
{ "_id" : ObjectId("4cf9cdfef39b42ae4e61ed87"), "fruit" : [ "apple", "banana", "peach" ] }

元素在队列的的INDEX从0开始编号.

6.3 使用$size判断队列中元素的个数:

> db.tbl2.insert({fruit:["apple","banana"]})
> db.tbl2.find({})
{ "_id" : ObjectId("4cf9cdfef39b42ae4e61ed87"), "fruit" : [ "apple", "banana", "peach" ] }
{ "_id" : ObjectId("4cf9d0d1f39b42ae4e61ed88"), "fruit" : [ "apple", "orange", "kumquat" ] }
{ "_id" : ObjectId("4cf9d0e0f39b42ae4e61ed89"), "fruit" : [ "apple", "banana", "cherry" ] }
{ "_id" : ObjectId("4cf9d1e0f39b42ae4e61ed8a"), "fruit" : [ "apple", "banana" ] }

> db.tbl2.find({"fruit":{"$size":2}})  #选出含有两个元素
{ "_id" : ObjectId("4cf9d1e0f39b42ae4e61ed8a"), "fruit" : [ "apple", "banana" ] }
> db.tbl2.find({"fruit":{"$size":3}})  #选出含有三个元素
{ "_id" : ObjectId("4cf9cdfef39b42ae4e61ed87"), "fruit" : [ "apple", "banana", "peach" ] }
{ "_id" : ObjectId("4cf9d0d1f39b42ae4e61ed88"), "fruit" : [ "apple", "orange", "kumquat" ] }
{ "_id" : ObjectId("4cf9d0e0f39b42ae4e61ed89"), "fruit" : [ "apple", "banana", "cherry" ] }

遗憾的是,$size不能和其他$符一起使用,如下,是没有结果返回的，按照理解应该是队列元素大于2的返回,可是这是不支持的.

> db.tbl2.find({"fruit":{"$size":{"$gt":2}}})

妥协的做法是在DOCUMENT中加入一个size keyword，存储元素的大小.

如:

> db.tbl4.insert({"fruit":["apple"],"size":1})

> db.tbl4.find()
{ "_id" : ObjectId("4cf9d4b9f39b42ae4e61ed8c"), "fruit" : [ "apple" ], "size" : 1 }

> db.tbl4.update({"_id":ObjectId("4cf9d4b9f39b42ae4e61ed8c")},{"$push":{"fruit":"banana"},"$inc":{"size":1}})
> db.tbl4.find()                                                                                            
{ "_id" : ObjectId("4cf9d4b9f39b42ae4e61ed8c"), "fruit" : [ "apple", "banana" ], "size" : 2 }
> db.tbl4.update({"_id":ObjectId("4cf9d4b9f39b42ae4e61ed8c")},{"$push":{"fruit":"peach"},"$inc":{"size":1}})
> db.tbl4.find()                                                                                           
{ "_id" : ObjectId("4cf9d4b9f39b42ae4e61ed8c"), "fruit" : [ "apple", "banana", "peach" ], "size" : 3 }
> 

注意$push一个元素到ARRAY中的时候不能使用[],元素直接""就可以.

6.4 使用$slice ,返回队列中的分片元素,

> db.blog.posts.find()
{ "_id" : ObjectId("4cf9d7ccf39b42ae4e61ed8d"), "title" : "a mongodb introduction", "content" : "........", "comments" : [
        {
                "name" : "digoal1",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal2",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal3",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal4",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal5",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal6",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal7",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal8",
                "email" : "digoal@126.com",
                "content" : "good post."
        }
] }

> db.blog.posts.find({},{"comments":{"$slice":1}})
{ "_id" : ObjectId("4cf9d7ccf39b42ae4e61ed8d"), "title" : "a mongodb introduction", "content" : "........", "comments" : [
        {
                "name" : "digoal1",
                "email" : "digoal@126.com",
                "content" : "good post."
        }
] }

> db.blog.posts.find({},{"comments":{"$slice":[2,2]}})
{ "_id" : ObjectId("4cf9d7ccf39b42ae4e61ed8d"), "title" : "a mongodb introduction", "content" : "........", "comments" : [
        {
                "name" : "digoal3",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal4",
                "email" : "digoal@126.com",
                "content" : "good post."
        }
] }

> db.blog.posts.find({},{"comments":{"$slice":[-2,2]}})
{ "_id" : ObjectId("4cf9d7ccf39b42ae4e61ed8d"), "title" : "a mongodb introduction", "content" : "........", "comments" : [
        {
                "name" : "digoal7",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal8",
                "email" : "digoal@126.com",
                "content" : "good post."
        }
] }

> db.blog.posts.find({},{"comments":{"$slice":-2}})    
{ "_id" : ObjectId("4cf9d7ccf39b42ae4e61ed8d"), "title" : "a mongodb introduction", "content" : "........", "comments" : [
        {
                "name" : "digoal7",
                "email" : "digoal@126.com",
                "content" : "good post."
        },
        {
                "name" : "digoal8",
                "email" : "digoal@126.com",
                "content" : "good post."
        }
] }

开始位置可以是正向多少，也可以是反过来数多少，但是取方向必须是正向的.如下报错

> db.blog.posts.find({},{"comments":{"$slice":[-2,-2]}})
error: { "$err" : "$slice limit must be positive", "code" : 13100 }

官方示例:

db.posts.find({}, {comments:{$slice: 5}}) // first 5 comments
db.posts.find({}, {comments:{$slice: -5}}) // last 5 comments
db.posts.find({}, {comments:{$slice: [20, 10]}}) // skip 20, limit 10
db.posts.find({}, {comments:{$slice: [-20, 10]}}) // 20 from end, limit 10


