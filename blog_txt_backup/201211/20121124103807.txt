PostgreSQL research

PostgreSQL window function last_value's & first_value's evaluate range is frame not partition

2012-11-24 10:38:07   查看原文>>

昨天PostgreSQL 交流中kenyon带来的window function中, 有一个last_value的函数, 在执行结果中看起来好像不对.
所以被误以为是一个BUG, 但其实不然, 对照源代码以及手册上的叙述, 我后面再解释原因.
先拿个例子来看看 : 

postgres=# \c digoal digoal
You are now connected to database "digoal" as user "digoal".
digoal=> CREATE TABLE empsalary(
digoal(>   depname varchar,
digoal(>   empno bigint,
digoal(>   salary int,
digoal(>   enroll_date date
digoal(> );
CREATE TABLE
digoal=> INSERT INTO empsalary VALUES('develop',10, 5200, '2007/08/01');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('sales', 1, 5000, '2006/10/01');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('personnel', 5, 3500, '2007/12/10');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('sales', 4, 4800, '2007/08/08');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('sales', 6, 5500, '2007/01/02');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('personnel', 2, 3900, '2006/12/23');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('develop', 7, 4200, '2008/01/01');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('develop', 9, 4500, '2008/01/01');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('sales', 3, 4800, '2007/08/01');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('develop', 8, 6000, '2006/10/01');
INSERT 0 1
digoal=> INSERT INTO empsalary VALUES('develop', 11, 5200, '2007/08/15');
INSERT 0 1


digoal=> select first_value(salary)over(partition by depname order by salary desc),* from empsalary;
 first_value |  depname  | empno | salary | enroll_date 
-------------+-----------+-------+--------+-------------
        6000 | develop   |     8 |   6000 | 2006-10-01
        6000 | develop   |    10 |   5200 | 2007-08-01
        6000 | develop   |    11 |   5200 | 2007-08-15
        6000 | develop   |     9 |   4500 | 2008-01-01
        6000 | develop   |     7 |   4200 | 2008-01-01
        3900 | personnel |     2 |   3900 | 2006-12-23
        3900 | personnel |     5 |   3500 | 2007-12-10
        5500 | sales     |     6 |   5500 | 2007-01-02
        5500 | sales     |     1 |   5000 | 2006-10-01
        5500 | sales     |     3 |   4800 | 2007-08-01
        5500 | sales     |     4 |   4800 | 2007-08-08
(11 rows)


注意first_value(salary)这里看到的是partition 中的第一条记录的salary值.


digoal=> select last_value(salary)over(partition by depname order by salary desc),* from empsalary;
 last_value |  depname  | empno | salary | enroll_date 
------------+-----------+-------+--------+-------------
       6000 | develop   |     8 |   6000 | 2006-10-01
       5200 | develop   |    10 |   5200 | 2007-08-01
       5200 | develop   |    11 |   5200 | 2007-08-15
       4500 | develop   |     9 |   4500 | 2008-01-01
       4200 | develop   |     7 |   4200 | 2008-01-01
       3900 | personnel |     2 |   3900 | 2006-12-23
       3500 | personnel |     5 |   3500 | 2007-12-10
       5500 | sales     |     6 |   5500 | 2007-01-02
       5000 | sales     |     1 |   5000 | 2006-10-01
       4800 | sales     |     3 |   4800 | 2007-08-01
       4800 | sales     |     4 |   4800 | 2007-08-08
(11 rows)


这里注意last_value(salary)并不是partition中的最后一条记录的salary值. 看起来像是个当前值.
那就引起误会了, 是不是BUG呢?
当然不是 : 
首先看看源码里面这两个窗口函数的部分 : 
src/backend/utils/adt/windowfuncs.c

/*
 * first_value
 * return the value of VE evaluated on the first row of the
 * window frame, per spec.
 */
Datum
window_first_value(PG_FUNCTION_ARGS)
{
        WindowObject winobj = PG_WINDOW_OBJECT();
        Datum           result;
        bool            isnull;

        result = WinGetFuncArgInFrame(winobj, 0,
                                                                  0, WINDOW_SEEK_HEAD, true,
                                                                  &isnull, NULL);
        if (isnull)
                PG_RETURN_NULL();

        PG_RETURN_DATUM(result);
}

/*
 * last_value
 * return the value of VE evaluated on the last row of the
 * window frame, per spec.
 */
Datum
window_last_value(PG_FUNCTION_ARGS)
{
        WindowObject winobj = PG_WINDOW_OBJECT();
        Datum           result;
        bool            isnull;

        result = WinGetFuncArgInFrame(winobj, 0,
                                                                  0, WINDOW_SEEK_TAIL, true,
                                                                  &isnull, NULL);
        if (isnull)
                PG_RETURN_NULL();

        PG_RETURN_DATUM(result);
}


这里提到了一个概念, window frame.
我们看看什么是window frame,
http://www.postgresql.org/docs/9.2/static/tutorial-window.html

There is another important concept associated with window functions: for each row, there is a set of rows within its partition called its window frame. 
Many (but not all) window functions act only on the rows of the window frame, rather than of the whole partition. 
By default, if ORDER BY is supplied then the frame consists of all rows from the start of the partition up through the current row, plus any following rows that are equal to the current row according to the ORDER BY clause. 
When ORDER BY is omitted the default frame consists of all rows in the partition.


所以window frame在有order by时范围是从开始到当前行以及和当前行拥有所有字段都相同值的后面的行. 在没有order by是就是整个partition.
那就能够解释前面last_value和first_value的结果了.
接下来看看怎么修改window frame的范围 : 
http://www.postgresql.org/docs/9.2/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS

A window function call represents the application of an aggregate-like function over some portion of the rows selected by a query. Unlike regular aggregate function calls, this is not tied to grouping of the selected rows into a single output row — each row remains separate in the query output. However the window function is able to scan all the rows that would be part of the current row's group according to the grouping specification (PARTITION BY list) of the window function call. The syntax of a window function call is one of the following:

function_name ([expression [, expression ... ]]) OVER ( window_definition )
function_name ([expression [, expression ... ]]) OVER window_name
function_name ( * ) OVER ( window_definition )
function_name ( * ) OVER window_name
where window_definition has the syntax

[ existing_window_name ]
[ PARTITION BY expression [, ...] ]
[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]
[ frame_clause ]
and the optional frame_clause can be one of

[ RANGE | ROWS ] frame_start
[ RANGE | ROWS ] BETWEEN frame_start AND frame_end
where frame_start and frame_end can be one of

UNBOUNDED PRECEDING
value PRECEDING
CURRENT ROW
value FOLLOWING
UNBOUNDED FOLLOWING


也就是说前面的SQL稍微改造一下就可以了, 在带order by的情况下把window frame的范围放大到整个partition : 

digoal=> select last_value(salary)over(partition by depname order by salary desc range between unbounded preceding and unbounded following),* from empsalary;
 last_value |  depname  | empno | salary | enroll_date 
------------+-----------+-------+--------+-------------
       4200 | develop   |     8 |   6000 | 2006-10-01
       4200 | develop   |    10 |   5200 | 2007-08-01
       4200 | develop   |    11 |   5200 | 2007-08-15
       4200 | develop   |     9 |   4500 | 2008-01-01
       4200 | develop   |     7 |   4200 | 2008-01-01
       3500 | personnel |     2 |   3900 | 2006-12-23
       3500 | personnel |     5 |   3500 | 2007-12-10
       4800 | sales     |     6 |   5500 | 2007-01-02
       4800 | sales     |     1 |   5000 | 2006-10-01
       4800 | sales     |     3 |   4800 | 2007-08-01
       4800 | sales     |     4 |   4800 | 2007-08-08
(11 rows)




