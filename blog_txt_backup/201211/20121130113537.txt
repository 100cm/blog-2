PostgreSQL research

Why PostgreSQL enjoy return resultset once?

2012-11-30 11:35:37   查看原文>>

昨天一位朋友聊到的一个场景.
他们使用的客户端程序是java开发的, 在取大表的数据时, 经常被oom掉.
这可能和返回的结果集太大有关, 导致java进程被系统KILL掉了.
我这里没有java环境, 所以用psql来模拟一下 : 
psql去查询1个40GB的表, 看看psql会占用多少内存.

digoal=> begin;
select * from ocz_test ;
BEGIN


执行过程中psql的内存缓慢的增长. 从TOP的输出可以看出, psql最终占了40GB内存. 怪不得java会被KILL掉.

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                
12496 ocz       25   0 41.8g  40g 1952 R 98.5 43.0   2:31.08 psql


在SELECT的过程中, 从select开始时直到SELECT开始返回数据给客户端, 或者这个select所在的事务获取事务号后开始直到这个事务结束. 这段时间内, vacuum都无法回收从select开始或者这个select所在的事务获取事务号以后系统中产生的任何垃圾数据. 除非truncate.
那么为什么psql会占用这么大的内存呢, 原因是psql一次将所有的记录get过来了, 然后再全部展示出来.
这对客户端程序来说可能不太妥当, 那么有没有办法让它分批次获取呢?
当然是有的, 例如使用游标.
不建议使用hold. 因为声明hold游标消耗更多的数据库资源, 同时事务结束后依旧存在, 如果这个SESSION一直存在并且游标忘记关闭, 引起垃圾回收的问题导致数据库膨胀.

digoal=> begin;
BEGIN


声明游标 : 

digoal=> declare test no scroll cursor without hold for select * from ocz_test ;
DECLARE CURSOR


查看当前声明的游标 : 

digoal=> select * from pg_cursor();
 name |                                statement                                | is_holdable | is_binary | is_scrollable |        c
reation_time         
------+-------------------------------------------------------------------------+-------------+-----------+---------------+---------
---------------------
 test | declare test no scroll cursor without hold for select * from ocz_test ; | f           | f         | f             | 2012-11-
30 09:41:05.27593+08
(1 row)


从游标中取数据 : 

digoal=> fetch FORWARD 10 from test;
    id    |                                                                                                                         
                       info                                                                                                         
                                       |          crt_time          
----------+-------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------+----------------------------
 67518035 | 2012-11-30 09:29:02.779353+082012-11-30 09:29:02.779353+082012-11-30 09:29:02.779353+082012-11-30 09:29:02.779353+082012
-11-30 09:29:02.779353+082012-11-30 09:29:02.779353+082012-11-30 09:29:02.779353+082012-11-30 09:29:02.779353+082012-11-30 09:29:02.
779353+082012-11-30 09:29:02.779353+08 | 2012-11-30 09:29:02.779359
 64609584 | 2012-11-30 04:59:58.854476+082012-11-30 04:59:58.854476+082012-11-30 04:59:58.854476+082012-11-30 04:59:58.854476+082012
-11-30 04:59:58.854476+082012-11-30 04:59:58.854476+082012-11-30 04:59:58.854476+082012-11-30 04:59:58.854476+082012-11-30 04:59:58.
854476+082012-11-30 04:59:58.854476+08 | 2012-11-30 04:59:58.854484
 49808795 | 2012-11-30 07:29:44.685951+082012-11-30 07:29:44.685951+082012-11-30 07:29:44.685951+082012-11-30 07:29:44.685951+082012
-11-30 07:29:44.685951+082012-11-30 07:29:44.685951+082012-11-30 07:29:44.685951+082012-11-30 07:29:44.685951+082012-11-30 07:29:44.
685951+082012-11-30 07:29:44.685951+08 | 2012-11-30 07:29:44.685957
 80556276 | 2012-11-30 02:53:48.140628+082012-11-30 02:53:48.140628+082012-11-30 02:53:48.140628+082012-11-30 02:53:48.140628+082012
-11-30 02:53:48.140628+082012-11-30 02:53:48.140628+082012-11-30 02:53:48.140628+082012-11-30 02:53:48.140628+082012-11-30 02:53:48.
140628+082012-11-30 02:53:48.140628+08 | 2012-11-30 02:53:48.140635
 56476518 | 2012-11-30 09:39:57.710581+082012-11-30 09:39:57.710581+082012-11-30 09:39:57.710581+082012-11-30 09:39:57.710581+082012
-11-30 09:39:57.710581+082012-11-30 09:39:57.710581+082012-11-30 09:39:57.710581+082012-11-30 09:39:57.710581+082012-11-30 09:39:57.
710581+082012-11-30 09:39:57.710581+08 | 2012-11-30 09:39:57.710587
 76607269 | 2012-11-30 09:33:07.913726+082012-11-30 09:33:07.913726+082012-11-30 09:33:07.913726+082012-11-30 09:33:07.913726+082012
-11-30 09:33:07.913726+082012-11-30 09:33:07.913726+082012-11-30 09:33:07.913726+082012-11-30 09:33:07.913726+082012-11-30 09:33:07.
913726+082012-11-30 09:33:07.913726+08 | 2012-11-30 09:33:07.913733
 48187718 | 2012-11-30 07:35:29.279959+082012-11-30 07:35:29.279959+082012-11-30 07:35:29.279959+082012-11-30 07:35:29.279959+082012
-11-30 07:35:29.279959+082012-11-30 07:35:29.279959+082012-11-30 07:35:29.279959+082012-11-30 07:35:29.279959+082012-11-30 07:35:29.
279959+082012-11-30 07:35:29.279959+08 | 2012-11-30 07:35:29.279966
 30986857 | 2012-11-30 00:07:19.829985+082012-11-30 00:07:19.829985+082012-11-30 00:07:19.829985+082012-11-30 00:07:19.829985+082012
-11-30 00:07:19.829985+082012-11-30 00:07:19.829985+082012-11-30 00:07:19.829985+082012-11-30 00:07:19.829985+082012-11-30 00:07:19.
829985+082012-11-30 00:07:19.829985+08 | 2012-11-30 00:07:19.829991
 42493720 | 2012-11-29 19:42:25.974969+082012-11-29 19:42:25.974969+082012-11-29 19:42:25.974969+082012-11-29 19:42:25.974969+082012
-11-29 19:42:25.974969+082012-11-29 19:42:25.974969+082012-11-29 19:42:25.974969+082012-11-29 19:42:25.974969+082012-11-29 19:42:25.
974969+082012-11-29 19:42:25.974969+08 | 2012-11-29 19:42:25.974975
 38207570 | 2012-11-30 05:21:54.31637+082012-11-30 05:21:54.31637+082012-11-30 05:21:54.31637+082012-11-30 05:21:54.31637+082012-11-
30 05:21:54.31637+082012-11-30 05:21:54.31637+082012-11-30 05:21:54.31637+082012-11-30 05:21:54.31637+082012-11-30 05:21:54.31637+08
2012-11-30 05:21:54.31637+08           | 2012-11-30 05:21:54.316376
(10 rows)


获取下一条 : 

digoal=> fetch forward from test;
    id    |                                                                                                                         
                       info                                                                                                         
                                       |          crt_time          
----------+-------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------+----------------------------
 70335365 | 2012-11-30 06:55:30.675203+082012-11-30 06:55:30.675203+082012-11-30 06:55:30.675203+082012-11-30 06:55:30.675203+082012
-11-30 06:55:30.675203+082012-11-30 06:55:30.675203+082012-11-30 06:55:30.675203+082012-11-30 06:55:30.675203+082012-11-30 06:55:30.
675203+082012-11-30 06:55:30.675203+08 | 2012-11-30 06:55:30.675211
(1 row)


关闭游标 : 

digoal=> close test;
CLOSE CURSOR


或者结束事务, 游标自动释放.

接下来要说的是, 为什么PostgreSQL更喜欢一次性将所有结果返回, 而不是分段返回呢?
来举个例子 : 
SESSION A : 

digoal=> begin;
BEGIN
digoal=> declare test no scroll cursor without hold for select * from ocz_test ;
DECLARE CURSOR



SESSION B : 

digoal=> select count(*) from test;
 count 
-------
   10
(1 row)

digoal=> begin;
BEGIN
digoal=> update test set id=4;
UPDATE 10
digoal=> end;
COMMIT
digoal=> vacuum verbose test ;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 0 removable, 20 nonremovable row versions in 1 out of 1 pages
DETAIL:  10 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM


注意看, SESSION B 中更新了test表的10条记录, 但是无法将老版本的tuple vacuum掉.
同样vacuum full也不能回收这部分空间.

digoal=> vacuum full verbose test;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 0 removable, 30 nonremovable row versions in 1 pages
DETAIL:  20 dead row versions cannot be removed yet.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM


将游标关闭后, vacuum 就可以回收这些空间了. 变成 0 dead row versions cannot be removed yet.
SESSION A : 

digoal=> close test;
CLOSE CURSOR



SESSION B : 

digoal=> vacuum verbose test ;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 0 removable, 10 nonremovable row versions in 1 out of 1 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.



那是为什么呢? 因为游标开着的情况下和SELECT正在查询的过程一样(不包含返回结果集的过程). vacuum不能在此时回收.
只有当select检索数据结束, (进入返回结果集的状态). 或者游标被关闭后. vacuum才可以回收这些垃圾空间.
因此使用游标必须注意这点, 别让游标开太久了, 否则从开启这个游标开始以后产生的垃圾数据都将无法回收.
而在此之前产生的垃圾数据是可以回收的. (根据txid_current_snapshot()的xmin来判断, 如果垃圾tuples的xmin以及xmax都小于这个xmin就可以回收)
例如 :
SESSION B : 

digoal=> update test set id=10;
UPDATE 10
digoal=# select * from txid_current_snapshot();
 txid_current_snapshot 
-----------------------
 171985835:171985835:
(1 row)



SESSION A : 

digoal=> begin;
BEGIN
digoal=> declare test no scroll cursor without hold for select * from ocz_test;
DECLARE CURSOR



SESSION B : 

digoal=# select * from txid_current_snapshot();
 txid_current_snapshot 
-----------------------
 171985835:171985835:
(1 row)


说明declare不分配事务号, 但是它同样会阻止vacuum回收垃圾. 只是阻止在此之后发生的DML产生的垃圾tuples的回收, 不阻止在此之前产生的垃圾tuples的回收.

看一下page 信息 : 

digoal=# select * from heap_page_items(get_raw_page('digoal.test',0));
 lp | lp_off | lp_flags | lp_len |  t_xmin   |  t_xmax   | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid 
----+--------+----------+--------+-----------+-----------+----------+--------+-------------+------------+--------+--------+-------
  1 |   8160 |        1 |     28 | 171985832 | 171985834 |        0 | (0,11) |       16385 |       8448 |     24 |        |      
  2 |   8128 |        1 |     28 | 171985832 | 171985834 |        0 | (0,12) |       16385 |       8448 |     24 |        |      
  3 |   8096 |        1 |     28 | 171985832 | 171985834 |        0 | (0,13) |       16385 |       8448 |     24 |        |      
  4 |   8064 |        1 |     28 | 171985832 | 171985834 |        0 | (0,14) |       16385 |       8448 |     24 |        |      
  5 |   8032 |        1 |     28 | 171985832 | 171985834 |        0 | (0,15) |       16385 |       8448 |     24 |        |      
  6 |   8000 |        1 |     28 | 171985832 | 171985834 |        0 | (0,16) |       16385 |       8448 |     24 |        |      
  7 |   7968 |        1 |     28 | 171985832 | 171985834 |        0 | (0,17) |       16385 |       8448 |     24 |        |      
  8 |   7936 |        1 |     28 | 171985832 | 171985834 |        0 | (0,18) |       16385 |       8448 |     24 |        |      
  9 |   7904 |        1 |     28 | 171985832 | 171985834 |        0 | (0,19) |       16385 |       8448 |     24 |        |      
 10 |   7872 |        1 |     28 | 171985832 | 171985834 |        0 | (0,20) |       16385 |       8448 |     24 |        |      
 11 |   7840 |        1 |     28 | 171985834 |         0 |        0 | (0,11) |       32769 |      10240 |     24 |        |      
 12 |   7808 |        1 |     28 | 171985834 |         0 |        0 | (0,12) |       32769 |      10240 |     24 |        |      
 13 |   7776 |        1 |     28 | 171985834 |         0 |        0 | (0,13) |       32769 |      10240 |     24 |        |      
 14 |   7744 |        1 |     28 | 171985834 |         0 |        0 | (0,14) |       32769 |      10240 |     24 |        |      
 15 |   7712 |        1 |     28 | 171985834 |         0 |        0 | (0,15) |       32769 |      10240 |     24 |        |      
 16 |   7680 |        1 |     28 | 171985834 |         0 |        0 | (0,16) |       32769 |      10240 |     24 |        |      
 17 |   7648 |        1 |     28 | 171985834 |         0 |        0 | (0,17) |       32769 |      10240 |     24 |        |      
 18 |   7616 |        1 |     28 | 171985834 |         0 |        0 | (0,18) |       32769 |      10240 |     24 |        |      
 19 |   7584 |        1 |     28 | 171985834 |         0 |        0 | (0,19) |       32769 |      10240 |     24 |        |      
 20 |   7552 |        1 |     28 | 171985834 |         0 |        0 | (0,20) |       32769 |      10240 |     24 |        |      
(20 rows)



接下来的vacuum说明了这个问题, 在声明cursor前产生的垃圾tuples已经被回收了.

digoal=# vacuum verbose digoal.test;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 10 removable, 10 nonremovable row versions in 1 out of 1 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM



再看看PAGE信息 : 

digoal=# select * from heap_page_items(get_raw_page('digoal.test',0));
 lp | lp_off | lp_flags | lp_len |  t_xmin   | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid 
----+--------+----------+--------+-----------+--------+----------+--------+-------------+------------+--------+--------+-------
  1 |     11 |        2 |      0 |           |        |          |        |             |            |        |        |      
  2 |     12 |        2 |      0 |           |        |          |        |             |            |        |        |      
  3 |     13 |        2 |      0 |           |        |          |        |             |            |        |        |      
  4 |     14 |        2 |      0 |           |        |          |        |             |            |        |        |      
  5 |     15 |        2 |      0 |           |        |          |        |             |            |        |        |      
  6 |     16 |        2 |      0 |           |        |          |        |             |            |        |        |      
  7 |     17 |        2 |      0 |           |        |          |        |             |            |        |        |      
  8 |     18 |        2 |      0 |           |        |          |        |             |            |        |        |      
  9 |     19 |        2 |      0 |           |        |          |        |             |            |        |        |      
 10 |     20 |        2 |      0 |           |        |          |        |             |            |        |        |      
 11 |   8160 |        1 |     28 | 171985834 |      0 |        0 | (0,11) |       32769 |      10496 |     24 |        |      
 12 |   8128 |        1 |     28 | 171985834 |      0 |        0 | (0,12) |       32769 |      10496 |     24 |        |      
 13 |   8096 |        1 |     28 | 171985834 |      0 |        0 | (0,13) |       32769 |      10496 |     24 |        |      
 14 |   8064 |        1 |     28 | 171985834 |      0 |        0 | (0,14) |       32769 |      10496 |     24 |        |      
 15 |   8032 |        1 |     28 | 171985834 |      0 |        0 | (0,15) |       32769 |      10496 |     24 |        |      
 16 |   8000 |        1 |     28 | 171985834 |      0 |        0 | (0,16) |       32769 |      10496 |     24 |        |      
 17 |   7968 |        1 |     28 | 171985834 |      0 |        0 | (0,17) |       32769 |      10496 |     24 |        |      
 18 |   7936 |        1 |     28 | 171985834 |      0 |        0 | (0,18) |       32769 |      10496 |     24 |        |      
 19 |   7904 |        1 |     28 | 171985834 |      0 |        0 | (0,19) |       32769 |      10496 |     24 |        |      
 20 |   7872 |        1 |     28 | 171985834 |      0 |        0 | (0,20) |       32769 |      10496 |     24 |        |      
(20 rows)


xid=171985832的数据都被vacuum掉了.

在声明游标后发生的UPDATE, 产生的垃圾数据, 无法被回收 : 
SESSION B : 

digoal=# update digoal.test set id=101;
UPDATE 10
digoal=# select * from txid_current_snapshot();
 txid_current_snapshot 
-----------------------
 171985836:171985836:
(1 row)

digoal=# select * from heap_page_items(get_raw_page('digoal.test',0));
 lp | lp_off | lp_flags | lp_len |  t_xmin   |  t_xmax   | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid 
----+--------+----------+--------+-----------+-----------+----------+--------+-------------+------------+--------+--------+-------
  1 |     11 |        2 |      0 |           |           |          |        |             |            |        |        |      
  2 |     12 |        2 |      0 |           |           |          |        |             |            |        |        |      
  3 |     13 |        2 |      0 |           |           |          |        |             |            |        |        |      
  4 |     14 |        2 |      0 |           |           |          |        |             |            |        |        |      
  5 |     15 |        2 |      0 |           |           |          |        |             |            |        |        |      
  6 |     16 |        2 |      0 |           |           |          |        |             |            |        |        |      
  7 |     17 |        2 |      0 |           |           |          |        |             |            |        |        |      
  8 |     18 |        2 |      0 |           |           |          |        |             |            |        |        |      
  9 |     19 |        2 |      0 |           |           |          |        |             |            |        |        |      
 10 |     20 |        2 |      0 |           |           |          |        |             |            |        |        |      
 11 |   8160 |        1 |     28 | 171985834 | 171985835 |        0 | (0,21) |       49153 |       8448 |     24 |        |      
 12 |   8128 |        1 |     28 | 171985834 | 171985835 |        0 | (0,22) |       49153 |       8448 |     24 |        |      
 13 |   8096 |        1 |     28 | 171985834 | 171985835 |        0 | (0,23) |       49153 |       8448 |     24 |        |      
 14 |   8064 |        1 |     28 | 171985834 | 171985835 |        0 | (0,24) |       49153 |       8448 |     24 |        |      
 15 |   8032 |        1 |     28 | 171985834 | 171985835 |        0 | (0,25) |       49153 |       8448 |     24 |        |      
 16 |   8000 |        1 |     28 | 171985834 | 171985835 |        0 | (0,26) |       49153 |       8448 |     24 |        |      
 17 |   7968 |        1 |     28 | 171985834 | 171985835 |        0 | (0,27) |       49153 |       8448 |     24 |        |      
 18 |   7936 |        1 |     28 | 171985834 | 171985835 |        0 | (0,28) |       49153 |       8448 |     24 |        |      
 19 |   7904 |        1 |     28 | 171985834 | 171985835 |        0 | (0,29) |       49153 |       8448 |     24 |        |      
 20 |   7872 |        1 |     28 | 171985834 | 171985835 |        0 | (0,30) |       49153 |       8448 |     24 |        |      
 21 |   7840 |        1 |     28 | 171985835 |         0 |        0 | (0,21) |       32769 |      10240 |     24 |        |      
 22 |   7808 |        1 |     28 | 171985835 |         0 |        0 | (0,22) |       32769 |      10240 |     24 |        |      
 23 |   7776 |        1 |     28 | 171985835 |         0 |        0 | (0,23) |       32769 |      10240 |     24 |        |      
 24 |   7744 |        1 |     28 | 171985835 |         0 |        0 | (0,24) |       32769 |      10240 |     24 |        |      
 25 |   7712 |        1 |     28 | 171985835 |         0 |        0 | (0,25) |       32769 |      10240 |     24 |        |      
 26 |   7680 |        1 |     28 | 171985835 |         0 |        0 | (0,26) |       32769 |      10240 |     24 |        |      
 27 |   7648 |        1 |     28 | 171985835 |         0 |        0 | (0,27) |       32769 |      10240 |     24 |        |      
 28 |   7616 |        1 |     28 | 171985835 |         0 |        0 | (0,28) |       32769 |      10240 |     24 |        |      
 29 |   7584 |        1 |     28 | 171985835 |         0 |        0 | (0,29) |       32769 |      10240 |     24 |        |      
 30 |   7552 |        1 |     28 | 171985835 |         0 |        0 | (0,30) |       32769 |      10240 |     24 |        |      
(30 rows)



这些都无法被回收.

digoal=# vacuum verbose digoal.test;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 0 removable, 20 nonremovable row versions in 1 out of 1 pages
DETAIL:  10 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM



将所有数据fetch掉, 再次回收, 依然无法回收
SESISON A : 

digoal=> fetch all from test ;


SESISON B : 

digoal=# vacuum verbose digoal.test;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 0 removable, 20 nonremovable row versions in 1 out of 1 pages
DETAIL:  10 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM


关闭游标, 可以回收.
SESSION A : 

digoal=> close test;
CLOSE CURSOR



SESSION B : 

digoal=# vacuum verbose digoal.test;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 10 removable, 10 nonremovable row versions in 1 out of 1 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 10 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM



另一种情况是查询大表, 在数据扫描过程中, 返回结果集前, 这段时间内vacuum是无法回收在这些SQL语句开始之后产生的垃圾tuples的.

最后一种情况是获得了xid的事务, 例如update, delete, insert. 或者执行txid_current()后. 
这些事务只要不关闭, vacuum就无法回收在此事务之后产生的垃圾tuples.
在此之前产生的垃圾tuples是可以被回收的.
例如 : 
SESSION A : 

digoal=> begin;
BEGIN



SESSION B : 

digoal=# update digoal.test set id=101;
UPDATE 10



SESSION A : 

digoal=> select txid_current();
 txid_current 
--------------
    171985838
(1 row)



SESSION B : 

digoal=# select * from txid_current_snapshot();
 txid_current_snapshot 
-----------------------
 171985838:171985838:
(1 row)
digoal=# vacuum verbose digoal.test;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 10 removable, 10 nonremovable row versions in 1 out of 1 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM


在SESSION A执行了txid_current()后产生的垃圾tuples就无法回收了.
SESSION B : 

digoal=# update digoal.test set id=101;
UPDATE 10
digoal=# vacuum verbose digoal.test;
INFO:  vacuuming "digoal.test"
INFO:  "test": found 0 removable, 20 nonremovable row versions in 1 out of 1 pages
DETAIL:  10 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM



以上所有测试基于版本PostgreSQL 9.2.

【小结】
以下情况vacuum无法回收一部分垃圾tuples.
1. 系统中存在执行过insert,update,delete并且未结束的事务;
    直到事务结束, 都无法回收从拿到事务号开始所产生的垃圾tuples. (指整个数据库产生的垃圾, 而非事务本身)
2. 系统中存在任何分配了事务号的并且未结束的事务(例如txid_current);
    直到事务结束, 都无法回收从拿到事务号开始所产生的垃圾tuples. (指整个数据库产生的垃圾, 而非事务本身)
3. 系统中存在正在处理的SQL语句, 
    (例如正在select一个很大的表, 不包括返回结果集的过程, 注意很大的表, 返回结果集也是需要很久的.);
    直到SQL开始返回结果集结束, 都无法回收SQL语句执行过程中产生的垃圾tuples. (指整个数据库产生的垃圾, 而非事务本身)
4. 事务中有未关闭的游标;
    直到游标被close, 都无法回收从游标被声明的时刻到游标被close之间所产生的垃圾tuples. (指整个数据库产生的垃圾, 而非事务本身)
相比游标, 一次性取完所有数据能节约时间, 对整体的垃圾回收影响较之更小.
当然如果你本来就只需要取部分数据, 或者遇到客户端OOM的情况, 还是需要游标来解决的.

【参考】
1. http://blog.163.com/digoal@126/blog/static/163877040201011162912604/
2. src/backend/utils/adt/txid.c

/*
 * txid_current() returns int8
 *
 *      Return the current toplevel transaction ID as TXID
 *      If the current transaction does not have one, one is assigned.
 */
Datum
txid_current(PG_FUNCTION_ARGS)
{
        txid            val;
        TxidEpoch       state;

        /*
         * Must prevent during recovery because if an xid is not assigned we try
         * to assign one, which would fail. Programs already rely on this function
         * to always return a valid current xid, so we should not change this to
         * return NULL or similar invalid xid.
         */
        PreventCommandDuringRecovery("txid_current()");

        load_xid_epoch(&state);

        val = convert_xid(GetTopTransactionId(), &state);

        PG_RETURN_INT64(val);
}

/*
 * txid_current_snapshot() returns txid_snapshot
 *
 *              Return current snapshot in TXID format
 *
 * Note that only top-transaction XIDs are included in the snapshot.
 */
Datum
txid_current_snapshot(PG_FUNCTION_ARGS)
{
        TxidSnapshot *snap;
        uint32          nxip,
                                i,
                                size;
        TxidEpoch       state;
        Snapshot        cur;

        cur = GetActiveSnapshot();
        if (cur == NULL)
                elog(ERROR, "no active snapshot set");

        load_xid_epoch(&state);

        /* allocate */
        nxip = cur->xcnt;
        size = TXID_SNAPSHOT_SIZE(nxip);
        snap = palloc(size);
        SET_VARSIZE(snap, size);

        /* fill */
        snap->xmin = convert_xid(cur->xmin, &state);
        snap->xmax = convert_xid(cur->xmax, &state);
        snap->nxip = nxip;
        for (i = 0; i < nxip; i++)
                snap->xip[i] = convert_xid(cur->xip[i], &state);

        /* we want them guaranteed to be in ascending order */
        sort_snapshot(snap);

        PG_RETURN_POINTER(snap);
}



3. src/backend/commands/vacuum.c
4. http://blog.163.com/digoal@126/blog/static/16387704020129248105943/
5. http://blog.163.com/digoal@126/blog/static/16387704020114273265960/
