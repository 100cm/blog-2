PostgreSQL research

choose bigint or text or timestamp(tz) type store datetime type?

2012-11-14 13:34:13   查看原文>>

群里一位兄弟纠结于用什么存储datetime类型, 是bigint存储秒呢(他认为效率高), 还是text存储（他说兼容性好）. 还是用timestamp(tz)来存储呢?

一、首先用BIGINT和timestamp(tz)来比较, BIGINT效率高吗?
分2个方面：
1. insert ，和存储消耗的空间有关.
BIGINT在PostgreSQL中消耗8个字节, 并且是有符号类型, 所以实际上正数可用的只有2^63-1.
timestamp(tz)类型有两种可能, 存储为double或者long int 如下 : 
实际占用多少空间和你的机器以及系统有关, 我用的intel x86, rhel 5.x 64bit上占用8字节.
所以和BIGINT一致. 所以insert 没有效率上的差别.
src/include/datatype/timestamp.h:

#ifdef HAVE_INT64_TIMESTAMP

typedef int64 Timestamp;
typedef int64 TimestampTz;
typedef int64 TimeOffset;
typedef int32 fsec_t;                   /* fractional seconds (in microseconds) */
#else

typedef double Timestamp;
typedef double TimestampTz;
typedef double TimeOffset;
typedef double fsec_t;                  /* fractional seconds (in seconds) */
#endif


c.h:

typedef long int int64;


可用通过pg_controldata来查看你的PostgreSQL用的是long int还是double存储timestamp(tz) : 
pg9.2.0@db-172-16-3-150-> pg_controldata 

Date/time type storage:               64-bit integers



2. select，和operator息息相关, 比如=, <, >, >=, <=, order by等等.
以下测试一下=这个操作符的查询效率. 
从结果来看 timestamp(6) 相比 int8 效率低9%左右 : 
测试表 : 

digoal=> create table time_int_test (c1 bigint, c2 timestamp);
CREATE TABLE


测试数据 : 

digoal=> insert into time_int_test select generate_series(1,10000000),clock_timestamp();
INSERT 0 10000000


索引 : 

digoal=> create index idx_time_int_test_1 on time_int_test (c1);
CREATE INDEX
digoal=> create index idx_time_int_test_2 on time_int_test (c2);
CREATE INDEX


用于查询的测试记录 : 

digoal=> select ctid,cmin,cmax,xmin,xmax,* from time_int_test where c1=5000000;
   ctid    | cmin | cmax |   xmin    | xmax |   c1    |             c2             
-----------+------+------+-----------+------+---------+----------------------------
 (27027,5) |    0 |    0 | 171985501 |    0 | 5000000 | 2012-11-14 10:25:45.824705
(1 row)
digoal=> select ctid,cmin,cmax,xmin,xmax,* from time_int_test where c2=timestamp '2012-11-14 10:25:45.824705';
   ctid    | cmin | cmax |   xmin    | xmax |   c1    |             c2             
-----------+------+------+-----------+------+---------+----------------------------
 (27027,5) |    0 |    0 | 171985501 |    0 | 5000000 | 2012-11-14 10:25:45.824705
(1 row)


确认一下都是走索引扫描的 : 

digoal=> explain select ctid,cmin,cmax,xmin,xmax,* from time_int_test where c2=timestamp '2012-11-14 10:25:45.824705';
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Index Scan using idx_time_int_test_2 on time_int_test  (cost=0.00..35204.99 rows=50000 width=38)
   Index Cond: (c2 = '2012-11-14 10:25:45.824705'::timestamp without time zone)
(2 rows)
digoal=> explain select ctid,cmin,cmax,xmin,xmax,* from time_int_test where c1=5000000;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Index Scan using idx_time_int_test_1 on time_int_test  (cost=0.00..35204.99 rows=50000 width=38)
   Index Cond: (c1 = 5000000)
(2 rows)


确认timestamp(tz)和bigint的存储消耗一致8字节 : 

digoal=> select pg_column_size(c1),pg_column_size(c2),c1,c2 from time_int_test limit 1;
 pg_column_size | pg_column_size | c1 |             c2             
----------------+----------------+----+----------------------------
              8 |              8 |  1 | 2012-11-14 10:25:35.024625
(1 row)


确认存储格式都是plain的.

digoal=> \d+ time_int_test 
                              Table "digoal.time_int_test"
 Column |            Type             | Modifiers | Storage | Stats target | Description 
--------+-----------------------------+-----------+---------+--------------+-------------
 c1     | bigint                      |           | plain   |              | 
 c2     | timestamp without time zone |           | plain   |              | 
Indexes:
    "idx_time_int_test_1" btree (c1)
    "idx_time_int_test_2" btree (c2)
Has OIDs: no



bigint对应的测试脚本 : 

pg9.2.0@db-172-16-3-150-> vi pgbench.sql 
select * from time_int_test where c1 = :var;
结果 : 
pg9.2.0@db-172-16-3-150-> pgbench -M prepared -D var=5000000 -f ./pgbench.sql -n -r -c 8 -j 8 -T 60 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 6986211
tps = 116436.248413 (including connections establishing)
tps = 116450.599662 (excluding connections establishing)
statement latencies in milliseconds:
        0.066672        select * from time_int_test where c1 = :var;



timestamp(tz)对应的测试脚本 : 

pg9.2.0@db-172-16-3-150-> vi pgbench.sql 
select * from time_int_test where c2 = :var;
结果 : 
pg9.2.0@db-172-16-3-150-> pgbench -M prepared -D var='2012-11-14 10:25:45.824705' -f ./pgbench.sql -n -r -c 8 -j 8 -T 60 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 6347205
tps = 105783.421348 (including connections establishing)
tps = 105794.996279 (excluding connections establishing)
statement latencies in milliseconds:
        0.073562        select * from time_int_test where c2 = :var;


虽然timestamp(tz)类型的=操作比bigint的效率低了9%, 但是已经有10.58W每秒的qps了, 为了这9%的性能可能你将丢失更多的其他特性, 在做数据转换( int8 to timestamp(tz) )时带来的损耗绝对比这里损耗掉的9%还要多, 那真是得不偿失.

二、接下来text和timestamp(tz)来比较?
略, text虽然灵活, 但是太不推荐使用了. 
格式得程序来保证, 而且排序什么都成问题, 函数支持也非常少, 还要考虑编码和collate的问题.
所以就不测试了. 

三、timestamp(tz)存储datetime独有的好处.
1. timestamp(tz)类型系统自带的function非常多, 给使用带来了很多便利.
2. constraint, 时间格式自然只能存时间, 如果是text或者bigint, 在程序中不加约束的话, 可能存进去的就不是时间值了, 这个对后期的处理也是非常麻烦的.
3. time zone, 可以存储时区, 但是bigint 是无法做到的.
4. 时间可以精确到microsecond, bigint也是无法做到的.
5. others...
所以在数据库的使用中, 类型的选择还是遵循存储的值来选择合适的类型比较普遍, 除非是非常特殊的场景.

【参考】
1. http://www.postgresql.org/docs/9.2/static/datatype-datetime.html
2. http://www.postgresql.org/docs/9.2/static/functions-datetime.html
