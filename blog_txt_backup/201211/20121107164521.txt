PostgreSQL research

use window function avoid table's self compare contain or not contain

2012-11-07 16:45:21   查看原文>>

今天群里的兄弟问到的问题如下 : 
该表为历史数据表
两个ID字段的关系是，ID1内包含ID2（ID1等于1或者2或者其他，ID2是1或者2或者其他）
VAR的值表示ID2的值是否有效.
表如下

ID1    ID2    VAR
1       1      a
1       2      0
1       3      0
2       1      a
2       2      a
1       1      0
1       2      a
1       3      0
3       1      0
4       1      a


VAR的值只要出现过一次a值，表示ID1,ID2的组合正确
现要查询错误的ID2,ID1组合。
以上数据结果为

ID1   ID2  
1       3
3       1



这种需求要用到排他, 子查询.
在PostgreSQL中有几种写法 : 
创建测试表和测试数据 : 

create table tbl (id1 int, id2 int, var text);
insert into tbl values (1,       1,      'a'),
 (1,       2,      '0'),
 (1,       3,      '0'),
 (2,       1,      'a'),
 (2,       2,      'a'),
 (1,       1,      '0'),
 (1,       2,      'a'),
 (1,       3,      '0'),
 (3,       1,      '0'),
 (4,      1,      'a');
INSERT 0 10



1. 用子查询 : 

digoal=# select id1,id2 from tbl where (id1,id2) not in (select id1,id2 from tbl where var='a') group by id1,id2;
 id1 | id2 
-----+-----
   1 |   3
   3 |   1
(2 rows)



2. 用WITH语法 : 

digoal=# with t1 as 
digoal-# (
digoal(# select id1,id2 from tbl where var='a'
digoal(# )
digoal-# select id1,id2 from tbl where (id1,id2) not in (select id1,id2 from t1) group by id1,id2;
 id1 | id2 
-----+-----
   1 |   3
   3 |   1
(2 rows)



3. 用窗口函数, 这个用法比较灵活, 首先进行分组, 然后进行排序, 把'a'排到最前面, 这样的话只要排除row_number=1 并且 var<>'a'的.
但是怎么让'a'排到第一行呢, 这里要借助NULL值的排序, NULLS FIRST.
所以最终的SQL如下 : 

select id1,id2 from 
  (select row_number() over (partition by id1,id2 order by (case var when 'a' then NULL when NULL then 'x' else var end) nulls first) as rn,id1,id2,var from tbl) as t 
  where rn=1 and var<>'a';


这里的 case var when 'a' then NULL when NULL then 'x' else var end 便是把var的'a'值转成了NULL, NULL转成其他值. 这var='a'的值就可以通过nulls first 上升到第一行了.
  所以rn=1 并且 var<>'a' 的行就是最终所需要的行。

digoal=# select id1,id2 from (select row_number() over (partition by id1,id2 order by (case var when 'a' then NULL when NULL then 'x' else var end) nulls first) as rn,id1,id2,var from tbl) as t where rn=1 and var<>'a';
 id1 | id2 
-----+-----
   1 |   3
   3 |   1
(2 rows)


这就是写SQL有意思的地方, 实现一个场景有各种玩法.
