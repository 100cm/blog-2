PostgreSQL research

PostgreSQL rotate table like mongoDB's capped collection

2012-11-01 10:49:30   查看原文>>

前面一个篇BLOG介绍了闪电狗的业务从mongoDB转到PostgreSQL, javascript用PostgreSQL的plpgsql来替代的方案.
也遗留了一个问题, mongoDB支持capped collection, 可以限制表的容量或者记录数. 但是PostgreSQL没有这样的表.
所以需要自己来解决这个问题.
在PostgreSQL中要解决这个问题需要用到数据库的统计信息, 来了解记录数以及占用空间的情况.
同时PostgreSQL的MVCC机制, 表在经过UPDATE和DELETE后里面实际上是有部分剩余空间的, 所以通过删除记录来限制空间的增长需要考虑到这一点. 需要计算出表中实际存在的ROWs实际占用的空间而不仅仅是表占用的空间. 

requirement : 
1. 需要pageinspect来分析抽取的数据块中平均每条记录占用的空间, 这里需要用到超级用户的权限.
2. 使用pg_class的reltuples来评估表的记录数, 注意reltuples是real类型的, 不是非常精确, 但是比count(*) 评估出来的开销小 . 如果你很计较精确性的话可提高采样值(default_statistics_target) 或者干脆就count(*)来替代这个. 我这里用到的是reltuples+500的采样值.
3. 使用pg_class的relpages以及pg_settings的block_size来评估表的大小 . 
4. 表上需要有个时间字段, 按照记录的新旧程度来删除老的记录. 你可以根据你自己的规则来制定删除计划.
5. 使用Plpgsql函数来处理rotate, 需要用到游标和delete where current of 游标来删除记录.
6. 用到pg_is_in_recovery()判断是否standby数据库, 如果是standby则不往下执行. 这个适应于cluster环境中.

测试 : 
1. 创建测试表 : 

digoal=> create table test (id int primary key, info text, create_time timestamp without time zone);
CREATE TABLE
digoal=> create index idx_test_1 on test (create_time);
CREATE INDEX



2. 插入测试数据 : 

digoal=> insert into test select generate_series(1,50000), 'digoal test capped table in postgresql', clock_timestamp();
INSERT 0 50000



3. 创建pageinspect extension.

\c digoal postgres
create extension pageinspect ;



4. 创建测试脚本 : 
下面使用DO测试脚本, 现在SIZE为1024000, 如下 : 

DO LANGUAGE plpgsql $$
declare
  v_block_size int8;
  v_size_bytes int8;
  v_tuples real;
  v_nspname name;
  v_relname name;
  v_size_bytes_limit int8;
  v_tuples_limit int8;
  v_limit_content text;
  v_ref refcursor;
  v_delete_tuples int8;
  v_orderby_column name;
  v_result record;
  v_tuples_avg_size numeric;
  v_blockid int;
begin
  v_nspname := 'digoal';
  v_relname := 'test';
  v_size_bytes_limit := 1024000;
  v_tuples_limit := 10000;
  v_limit_content := 'size';
  v_orderby_column := 'create_time';
if (pg_is_in_recovery()) then 
  raise notice 'This db is in recovery.';
  return;
else
  set local default_statistics_target to 500;
  execute 'analyze '||v_nspname||'.'||v_relname;
  select setting::int into v_block_size from pg_settings where name='block_size';
  select relpages * v_block_size, reltuples into v_size_bytes, v_tuples from pg_class 
    where relnamespace=(select oid from pg_namespace where nspname=v_nspname) 
    and relname=v_relname;
  raise notice 'START: v_nspname:%, v_relname:%, v_size_bytes:%, v_tuples:% .', v_nspname, v_relname, v_size_bytes, v_tuples;
  if (v_limit_content = 'size') then
    raise notice 'rotate with %:% .', v_limit_content, v_size_bytes_limit;
    if (v_size_bytes > v_size_bytes_limit) then
      execute $_$select substring(ctid::text, '([[:digit:]]+)') from $_$||v_nspname||'.'||v_relname||' order by '||v_orderby_column||' desc limit 1' into v_blockid ;
      -- 这里少计算了PAGE HEAD的大小, 所以不是非常精确, 需要精确的朋友可以把page head也算进去.
      select avg(lp_len) into v_tuples_avg_size from heap_page_items(get_raw_page(v_nspname||'.'||v_relname,v_blockid));
      if ( (v_tuples_avg_size*v_tuples) > v_size_bytes_limit ) then
        v_delete_tuples := (((v_tuples_avg_size*v_tuples)-v_size_bytes_limit)/(v_tuples_avg_size::numeric))::int8;
        raise notice 'rotate with %:%, v_delete_tuples:%', v_limit_content, v_size_bytes_limit, v_delete_tuples;
 raise notice 'v_tuples:%, v_delete_tuples:%, v_size_bytes:%, v_size_bytes_limit:%', v_tuples, v_delete_tuples, v_size_bytes, v_size_bytes_limit;
        open v_ref for execute 'select * from '||v_nspname||'.'||v_relname||' order by '||v_orderby_column ;
        loop
          fetch v_ref into v_result;
          if (found and (v_delete_tuples > 0) ) then
     v_delete_tuples := v_delete_tuples - 1;
            execute 'delete from '||v_nspname||'.'||v_relname||' where current of '||quote_ident(v_ref::text);
   else 
     exit;
   end if;
        end loop;
      else
 raise notice 'Do not need rotate with %:%, beacuse v_tuples_avg_size*v_tuples=%<=%.', v_limit_content, v_size_bytes_limit, v_tuples_avg_size*v_tuples, v_size_bytes_limit;
      end if;
    end if;
    execute 'analyze '||v_nspname||'.'||v_relname;
  elsif (v_limit_content = 'tuples') then
    if (v_tuples > v_tuples_limit) then
      v_delete_tuples := (v_tuples - v_tuples_limit);
      raise notice 'rotate with %:%, v_delete_tuples:%', v_limit_content, v_tuples_limit, v_delete_tuples;
      raise notice 'v_tuples:%, v_delete_tuples:%, v_size_bytes:%, v_size_bytes_limit:%', v_tuples, v_delete_tuples, v_size_bytes, v_size_bytes_limit;
      open v_ref for execute 'select * from '||v_nspname||'.'||v_relname||' order by '||v_orderby_column ;
      loop
        fetch v_ref into v_result;
        if (found and (v_delete_tuples > 0) ) then
   v_delete_tuples := v_delete_tuples - 1;
          execute 'delete from '||v_nspname||'.'||v_relname||' where current of '||quote_ident(v_ref::text);
 else
   exit;
 end if;
      end loop;
    else
      raise notice 'Do not need rotate with %:% .', v_limit_content, v_tuples_limit;
    end if;
    execute 'analyze '||v_nspname||'.'||v_relname;
  else
    raise notice 'please enter "size" or "tuples" in i_limit_content parameter.';
  end if;
  select setting::int into v_block_size from pg_settings where name='block_size';
  select relpages * v_block_size, reltuples into v_size_bytes, v_tuples from pg_class 
    where relnamespace=(select oid from pg_namespace where nspname=v_nspname) 
    and relname=v_relname;
  raise notice 'END: v_nspname:%, v_relname:%, v_size_bytes:%, v_tuples:% .', v_nspname, v_relname, v_size_bytes, v_tuples;
end if;
return;
end;
$$;


结果 : 

NOTICE:  START: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:50000 .
NOTICE:  rotate with size:1024000 .
NOTICE:  rotate with size:1024000, v_delete_tuples:37200
NOTICE:  v_tuples:50000, v_delete_tuples:37200, v_size_bytes:4227072, v_size_bytes_limit:1024000
NOTICE:  END: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:12800 .
DO


执行前后表的大小都是4227072字节, 根据每条记录的平均大小, 计算出需要删除37200条记录. 删除前记录数=50000. 删除后记录数=12800.
删除的规则是按照create_time字段排序, 从时间最早的记录开始删. 
再次执行以上DO脚本的话, 虽然表的大小4227072超过了限制大小1024000, 但是不会做出删除动作. 因为tuples实际占用的空间小于1024000. 多余的空间是可以被新插入的记录复用的, 所以不需要DELETE.
再次执行的结果如下 : 

NOTICE:  START: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:12800 .
NOTICE:  rotate with size:1024000 .
NOTICE:  Do not need rotate with size:1024000, beacuse v_tuples_avg_size*v_tuples=1024000<=1024000.
NOTICE:  END: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:12800 .
DO



5. 下面测试一下tuples为限制条件的rotate, 测试10000条为限制条件 : 

DO LANGUAGE plpgsql $$
declare
  v_block_size int8;
  v_size_bytes int8;
  v_tuples real;
  v_nspname name;
  v_relname name;
  v_size_bytes_limit int8;
  v_tuples_limit int8;
  v_limit_content text;
  v_ref refcursor;
  v_delete_tuples int8;
  v_orderby_column name;
  v_result record;
  v_tuples_avg_size numeric;
  v_blockid int;
begin
  v_nspname := 'digoal';
  v_relname := 'test';
  v_size_bytes_limit := 1024000;
  v_tuples_limit := 10000;
  v_limit_content := 'tuples';
  v_orderby_column := 'create_time';
if (pg_is_in_recovery()) then 
  raise notice 'This db is in recovery.';
  return;
else
  set local default_statistics_target to 500;
  execute 'analyze '||v_nspname||'.'||v_relname;
  select setting::int into v_block_size from pg_settings where name='block_size';
  select relpages * v_block_size, reltuples into v_size_bytes, v_tuples from pg_class 
    where relnamespace=(select oid from pg_namespace where nspname=v_nspname) 
    and relname=v_relname;
  raise notice 'START: v_nspname:%, v_relname:%, v_size_bytes:%, v_tuples:% .', v_nspname, v_relname, v_size_bytes, v_tuples;
  if (v_limit_content = 'size') then
    raise notice 'rotate with %:% .', v_limit_content, v_size_bytes_limit;
    if (v_size_bytes > v_size_bytes_limit) then
      execute $_$select substring(ctid::text, '([[:digit:]]+)') from $_$||v_nspname||'.'||v_relname||' order by '||v_orderby_column||' desc limit 1' into v_blockid ;
      select avg(lp_len) into v_tuples_avg_size from heap_page_items(get_raw_page(v_nspname||'.'||v_relname,v_blockid));
      if ( (v_tuples_avg_size*v_tuples) > v_size_bytes_limit ) then
        v_delete_tuples := (((v_tuples_avg_size*v_tuples)-v_size_bytes_limit)/(v_tuples_avg_size::numeric))::int8;
        raise notice 'rotate with %:%, v_delete_tuples:%', v_limit_content, v_size_bytes_limit, v_delete_tuples;
 raise notice 'v_tuples:%, v_delete_tuples:%, v_size_bytes:%, v_size_bytes_limit:%', v_tuples, v_delete_tuples, v_size_bytes, v_size_bytes_limit;
        open v_ref for execute 'select * from '||v_nspname||'.'||v_relname||' order by '||v_orderby_column ;
        loop
          fetch v_ref into v_result;
          if (found and (v_delete_tuples > 0) ) then
     v_delete_tuples := v_delete_tuples - 1;
            execute 'delete from '||v_nspname||'.'||v_relname||' where current of '||quote_ident(v_ref::text);
   else 
     exit;
   end if;
        end loop;
      else
 raise notice 'Do not need rotate with %:%, beacuse v_tuples_avg_size*v_tuples=%<=%.', v_limit_content, v_size_bytes_limit, v_tuples_avg_size*v_tuples, v_size_bytes_limit;
      end if;
    end if;
    execute 'analyze '||v_nspname||'.'||v_relname;
  elsif (v_limit_content = 'tuples') then
    if (v_tuples > v_tuples_limit) then
      v_delete_tuples := (v_tuples - v_tuples_limit);
      raise notice 'rotate with %:%, v_delete_tuples:%', v_limit_content, v_tuples_limit, v_delete_tuples;
      raise notice 'v_tuples:%, v_delete_tuples:%, v_size_bytes:%, v_size_bytes_limit:%', v_tuples, v_delete_tuples, v_size_bytes, v_size_bytes_limit;
      open v_ref for execute 'select * from '||v_nspname||'.'||v_relname||' order by '||v_orderby_column ;
      loop
        fetch v_ref into v_result;
        if (found and (v_delete_tuples > 0) ) then
   v_delete_tuples := v_delete_tuples - 1;
          execute 'delete from '||v_nspname||'.'||v_relname||' where current of '||quote_ident(v_ref::text);
 else
   exit;
 end if;
      end loop;
    else
      raise notice 'Do not need rotate with %:% .', v_limit_content, v_tuples_limit;
    end if;
    execute 'analyze '||v_nspname||'.'||v_relname;
  else
    raise notice 'please enter "size" or "tuples" in i_limit_content parameter.';
  end if;
  select setting::int into v_block_size from pg_settings where name='block_size';
  select relpages * v_block_size, reltuples into v_size_bytes, v_tuples from pg_class 
    where relnamespace=(select oid from pg_namespace where nspname=v_nspname) 
    and relname=v_relname;
  raise notice 'END: v_nspname:%, v_relname:%, v_size_bytes:%, v_tuples:% .', v_nspname, v_relname, v_size_bytes, v_tuples;
end if;
return;
end;
$$;


执行结果如下 : 

NOTICE:  START: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:12800 .
NOTICE:  rotate with tuples:10000, v_delete_tuples:2800
NOTICE:  v_tuples:12800, v_delete_tuples:2800, v_size_bytes:4227072, v_size_bytes_limit:1024000
NOTICE:  END: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:10000 .
DO


当前记录数是12800超过了限制2800条, 所以将被删除. 删除后剩余10000条.
再次执行, 因为已经剩余10000条记录了, 所以不会有删除的动作 : 

NOTICE:  START: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:10000 .
NOTICE:  Do not need rotate with tuples:10000 .
NOTICE:  END: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:10000 .
DO


6. 测试完毕, 接下来把DO转换成函数, 方便以后执行 : 

create or replace function rotate_table 
( i_nspname name, 
  i_relname name, 
  i_size_bytes_limit int8, 
  i_tuples_limit int8, 
  i_limit_content text, 
  i_orderby_column name
) 
returns void LANGUAGE plpgsql as
$$
declare
  v_block_size int8;
  v_size_bytes int8;
  v_tuples real;
  v_nspname name;
  v_relname name;
  v_size_bytes_limit int8;
  v_tuples_limit int8;
  v_limit_content text;
  v_ref refcursor;
  v_delete_tuples int8;
  v_orderby_column name;
  v_result record;
  v_tuples_avg_size numeric;
  v_blockid int;
begin
  v_nspname := i_nspname;
  v_relname := i_relname;
  v_size_bytes_limit := i_size_bytes_limit;
  v_tuples_limit := i_tuples_limit;
  v_limit_content := i_limit_content;
  v_orderby_column := i_orderby_column;
if (pg_is_in_recovery()) then 
  raise notice 'This db is in recovery.';
  return;
else
  set local default_statistics_target to 500;
  execute 'analyze '||v_nspname||'.'||v_relname;
  select setting::int into v_block_size from pg_settings where name='block_size';
  select relpages * v_block_size, reltuples into v_size_bytes, v_tuples from pg_class 
    where relnamespace=(select oid from pg_namespace where nspname=v_nspname) 
    and relname=v_relname;
  raise notice 'START: v_nspname:%, v_relname:%, v_size_bytes:%, v_tuples:% .', v_nspname, v_relname, v_size_bytes, v_tuples;
  if (v_limit_content = 'size') then
    raise notice 'rotate with %:% .', v_limit_content, v_size_bytes_limit;
    if (v_size_bytes > v_size_bytes_limit) then
      execute $_$select substring(ctid::text, '([[:digit:]]+)') from $_$||v_nspname||'.'||v_relname||' order by '||v_orderby_column||' desc limit 1' into v_blockid ;
      select avg(lp_len) into v_tuples_avg_size from heap_page_items(get_raw_page(v_nspname||'.'||v_relname,v_blockid));
      if ( (v_tuples_avg_size*v_tuples) > v_size_bytes_limit ) then
        v_delete_tuples := (((v_tuples_avg_size*v_tuples)-v_size_bytes_limit)/(v_tuples_avg_size::numeric))::int8;
        raise notice 'rotate with %:%, v_delete_tuples:%', v_limit_content, v_size_bytes_limit, v_delete_tuples;
 raise notice 'v_tuples:%, v_delete_tuples:%, v_size_bytes:%, v_size_bytes_limit:%', v_tuples, v_delete_tuples, v_size_bytes, v_size_bytes_limit;
        open v_ref for execute 'select * from '||v_nspname||'.'||v_relname||' order by '||v_orderby_column ;
        loop
          fetch v_ref into v_result;
          if (found and (v_delete_tuples > 0) ) then
     v_delete_tuples := v_delete_tuples - 1;
            execute 'delete from '||v_nspname||'.'||v_relname||' where current of '||quote_ident(v_ref::text);
   else 
     exit;
   end if;
        end loop;
      else
 raise notice 'Do not need rotate with %:%, beacuse v_tuples_avg_size*v_tuples=%<=%.', v_limit_content, v_size_bytes_limit, v_tuples_avg_size*v_tuples, v_size_bytes_limit;
      end if;
    end if;
    execute 'analyze '||v_nspname||'.'||v_relname;
  elsif (v_limit_content = 'tuples') then
    if (v_tuples > v_tuples_limit) then
      v_delete_tuples := (v_tuples - v_tuples_limit);
      raise notice 'rotate with %:%, v_delete_tuples:%', v_limit_content, v_tuples_limit, v_delete_tuples;
      raise notice 'v_tuples:%, v_delete_tuples:%, v_size_bytes:%, v_size_bytes_limit:%', v_tuples, v_delete_tuples, v_size_bytes, v_size_bytes_limit;
      open v_ref for execute 'select * from '||v_nspname||'.'||v_relname||' order by '||v_orderby_column ;
      loop
        fetch v_ref into v_result;
        if (found and (v_delete_tuples > 0) ) then
   v_delete_tuples := v_delete_tuples - 1;
          execute 'delete from '||v_nspname||'.'||v_relname||' where current of '||quote_ident(v_ref::text);
 else
   exit;
 end if;
      end loop;
    else
      raise notice 'Do not need rotate with %:% .', v_limit_content, v_tuples_limit;
    end if;
    execute 'analyze '||v_nspname||'.'||v_relname;
  else
    raise notice 'please enter "size" or "tuples" in i_limit_content parameter.';
  end if;
  select setting::int into v_block_size from pg_settings where name='block_size';
  select relpages * v_block_size, reltuples into v_size_bytes, v_tuples from pg_class 
    where relnamespace=(select oid from pg_namespace where nspname=v_nspname) 
    and relname=v_relname;
  raise notice 'END: v_nspname:%, v_relname:%, v_size_bytes:%, v_tuples:% .', v_nspname, v_relname, v_size_bytes, v_tuples;
end if;
return;
end;
$$;


7. 接下来就可以方便的使用函数进行rotate : 

digoal=# select * from rotate_table('digoal', 'test', 1024000, 8000, 'tuples', 'create_time');
NOTICE:  START: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:10000 .
NOTICE:  rotate with tuples:8000, v_delete_tuples:2000
NOTICE:  v_tuples:10000, v_delete_tuples:2000, v_size_bytes:4227072, v_size_bytes_limit:1024000
NOTICE:  END: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:8000 .
 rotate_table 
--------------
(1 row)


8. 最后, 把这个弄成一个shell脚本, 在Linux crontab中添加一个条目, 让它定期自动执行.
vi rotate_table.sh

#!/bin/bash
export PGPORT=9300
export PGUSER=postgres
export PGDATA=/data04/pgdev/pg_root
export LANG=en_US.utf8
export PGHOME=/home/pgdev/pgsql9.3
export PGHOST=$PGDATA
export LD_LIBRARY_PATH=/opt/uuid-1.6.2/lib:$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
export PATH=$PGHOME/bin:$PATH:.
date +%F%T
# 限制digoal.test表的记录数为8000条.
psql -h 127.0.0.1 -p 9300 -U postgres digoal -c "select * from rotate_table('digoal', 'test', 1024000, 8000, 'tuples', 'create_time');"
# 限制digoal.test表的容量为1024000字节.
psql -h 127.0.0.1 -p 9300 -U postgres digoal -c "select * from rotate_table('digoal', 'test', 1024000, 8000, 'size', 'create_time');"
date +%F%T


修改脚本权限 : 

chmod 500 rotate_table.sh


编辑执行计划(例如每分钟执行一次.) : 

crontab -e
* * * * * /home/pgdev/rotate_table.sh >>/home/pgdev/rotate_table.log 2>&1


过一会就能看到日志输出了, 如下 : 
cat /home/pgdev/rotate_table.log

2012-11-0110:48:01
NOTICE:  START: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:8000 .
NOTICE:  Do not need rotate with tuples:8000 .
NOTICE:  END: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:8000 .
 rotate_table 
--------------
 
(1 row)

NOTICE:  START: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:8000 .
NOTICE:  rotate with size:1024000 .
NOTICE:  Do not need rotate with size:1024000, beacuse v_tuples_avg_size*v_tuples=640000<=1024000.
NOTICE:  END: v_nspname:digoal, v_relname:test, v_size_bytes:4227072, v_tuples:8000 .
 rotate_table 
--------------
 
(1 row)

2012-11-0110:48:01



【参考】
1.《Use pageinspect EXTENSION view PostgreSQL Page's raw infomation》
http://blog.163.com/digoal@126/blog/static/16387704020114273265960/
2.《pageinspect analyze index item migrated within btree pages》
http://blog.163.com/digoal@126/blog/static/16387704020129248105943/
3.《use pg_filedump dump block contents》
http://blog.163.com/digoal@126/blog/static/163877040201142610215685/
4.《mongoDB javascript TO PostgreSQL DO language》
http://blog.163.com/digoal@126/blog/static/163877040201293082737559/
5. sky_pg_cluster
https://github.com/digoal/sky_postgresql_cluster
Flag Counter
