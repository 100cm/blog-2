PostgreSQL research

PostgreSQL cursor in batch commit use case

2013-07-30 17:35:35   查看原文>>

一位网友问到的问题如下 : 


Hello,
       德哥，我想请您请教一个关于postgresql批量提交方面的问题。 
       由于我们现在的项目是在从oracle转pg，所以遇到了很多oracle中曾经写批量提交方面的问题，
       类似如下情况：
       FOR c IN cur LOOP   ---游标
       --更新 
      UPDATE tbname s
      SET col1 = now(),
          col2 = now(),
          col3 = to_char(SYSDATE, 'yyyymmdd') ,
          col4 = c.orgcode_temp
      WHERE s.id = c.id;
    
      --计算,每500提交一次
      i := i + 1;
      IF MOD(i, 500) = 0 THEN
        COMMIT;
      END IF;
      IF MOD(i, 5000) = 0 THEN
        dbms_lock.sleep(10);
      END IF;
    
    END LOOP;
    COMMIT; --提交

类似这种的问题，现在想问问您，对于这种批量提交有什么好的方法吗？



由于PostgreSQL函数在处理时是作为一个事务来处理的, 不能像Oracle那样在函数中使用commit做部分提交. 
除非写在exception中, 那会回滚前面的非exception部分, 执行exception部分, 同样无法达到以上目的.

所以不能单纯依靠PostgreSQL函数来解决以上问题. 需要在外部声明with hold游标, 在函数中使用这个游标. 这样是可以的.
以下均为autocommit模式. 即自动提交
1. 创建以下函数替换以上函数

create or replace function f_batch(b int, c refcursor) returns void as $$
declare
  i int := 0;
  rec record;
begin
  loop
    fetch c into rec;
    if not found then
      raise notice 'cursor is empty. close it';
      close c;
      return;
    end if;
    raise notice 'do some thing , rec:%', rec;
    if i>=b then
      raise notice 'reach batch limit.';
      return;
    end if;
    i := i+1;
  end loop;
  return;
end;
$$ language plpgsql strict;


2. 在会话中声明游标, 

digoal=# declare c1 cursor with hold for select relname from pg_class;
DECLARE CURSOR


3. 通过多次调用函数来实现, 每次调用为一次事务.

digoal=# select f_batch(5,'c1');
NOTICE:  do some thing , rec:(pg_statistic,11,10818,0,10,0,12550,0,15,387,15,2840,0,t,f,p,r,26,0,f,f,f,f,f,t,1674,1,{postgres=arwdDxt/postgres},)
NOTICE:  do some thing , rec:(pg_type,11,71,0,10,0,0,0,8,334,8,0,0,t,f,p,r,30,0,t,f,f,f,f,t,1674,1,{=r/postgres},)
NOTICE:  do some thing , rec:(pg_toast_2619,99,11050,0,10,0,12552,0,2,10,2,0,2841,t,f,p,t,3,0,f,f,f,f,f,t,1674,1,,)
NOTICE:  do some thing , rec:(pg_toast_2619_index,99,0,0,10,403,12554,0,2,10,0,0,0,f,f,p,i,2,0,f,f,f,f,f,t,0,0,,)
NOTICE:  do some thing , rec:(pg_authid_rolname_index,11,0,0,10,403,0,1664,2,1,0,0,0,f,t,p,i,1,0,f,f,f,f,f,t,0,0,,)
NOTICE:  do some thing , rec:(pg_authid_oid_index,11,0,0,10,403,0,1664,2,1,0,0,0,f,t,p,i,1,0,f,f,f,f,f,t,0,0,,)
NOTICE:  reach batch limit.
 f_batch 
---------
 
(1 row)

digoal=# select f_batch(5,'c1');
NOTICE:  do some thing , rec:(pg_attribute_relid_attnam_index,11,0,0,10,403,0,0,16,2281,0,0,0,f,f,p,i,2,0,f,f,f,f,f,t,0,0,,)
NOTICE:  do some thing , rec:(pg_attribute_relid_attnum_index,11,0,0,10,403,0,0,11,2281,0,0,0,f,f,p,i,2,0,f,f,f,f,f,t,0,0,,)
NOTICE:  do some thing , rec:(pg_toast_1255,99,11047,0,10,0,0,0,0,0,0,0,2837,t,f,p,t,3,0,f,f,f,f,f,t,1674,1,,)
NOTICE:  do some thing , rec:(pg_toast_1255_index,99,0,0,10,403,0,0,1,0,0,0,0,f,f,p,i,2,0,f,f,f,f,f,t,0,0,,)
NOTICE:  do some thing , rec:(pg_toast_2604,99,11044,0,10,0,12586,0,0,0,0,0,2831,t,f,p,t,3,0,f,f,f,f,f,t,1674,1,,)
NOTICE:  do some thing , rec:(pg_toast_2604_index,99,0,0,10,403,12588,0,1,0,0,0,0,f,f,p,i,2,0,f,f,f,f,f,t,0,0,,)
NOTICE:  reach batch limit.
 f_batch 
---------
 
(1 row)

digoal=# select f_batch(500,'c1');
中间省略
NOTICE:  do some thing , rec:(pg_toast_12392_index,99,0,0,10,403,12782,0,1,0,0,0,0,f,f,p,i,2,0,f,f,f,f,f,t,0,0,,)
NOTICE:  do some thing , rec:(sql_packages,12269,12408,0,10,0,12793,0,1,10,1,12409,0,f,f,p,r,5,0,f,f,f,f,f,t,1674,1,"{postgres=arwdDxt/postgres,=r/postgres}",)
NOTICE:  do some thing , rec:(pg_toast_12412_index,99,0,0,10,403,12802,0,1,0,0,0,0,f,f,p,i,2,0,f,f,f,f,f,t,0,0,,)
NOTICE:  cursor is empty. close it
 f_batch 
---------
 
(1 row)


游标已关闭.

digoal=# select f_batch(5,'c1');
ERROR:  cursor "c1" does not exist
CONTEXT:  PL/pgSQL function f_batch(integer,refcursor) line 7 at FETCH



使用这种方法需要注意关闭游标, 因为其他会话看不到这个游标, 也无法去关闭这个游标. 只有声明这个游标的会话可以关闭它.
游标长时间不关闭会影响vacuum回收垃圾. 这个PostgreSQL的mvcc机制有关. 例如 : 
SESSION A : 

digoal=# declare c1 cursor with hold for select * from pg_class;
digoal=# select * from pg_cursors ;
 name |                        statement                        | is_holdable | is_binary | is_scrollable |         creation_time   
      
------+---------------------------------------------------------+-------------+-----------+---------------+-------------------------
------
 c1   | declare c1 cursor with hold for select * from pg_class; | t           | f         | t             | 2013-07-30 17:23:35.3859
97+08
(1 row)



SESSION B : 

digoal=# insert into t select generate_series(1,10000);
INSERT 0 10000
digoal=# delete from t;
DELETE 10002
digoal=# vacuum verbose t;
INFO:  vacuuming "public.t"
INFO:  "t": found 0 removable, 10002 nonremovable row versions in 45 out of 45 pages
DETAIL:  10002 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM



SESSION A : 

fetch 10000 from c1;
digoal=# fetch 100000 from c1;
 relname | relnamespace | reltype | reloftype | relowner | relam | relfilenode | reltablespace | relpages | reltuples | relallvisibl
e | reltoastrelid | reltoastidxid | relhasindex | relisshared | relpersistence | relkind | relnatts | relchecks | relhasoids | relha
spkey | relhasrules | relhastriggers | relhassubclass | relispopulated | relfrozenxid | relminmxid | relacl | reloptions 
---------+--------------+---------+-----------+----------+-------+-------------+---------------+----------+-----------+-------------
--+---------------+---------------+-------------+-------------+----------------+---------+----------+-----------+------------+------
------+-------------+----------------+----------------+----------------+--------------+------------+--------+------------
(0 rows)



SESSION B : 

digoal=# vacuum verbose t;
INFO:  vacuuming "public.t"
INFO:  "t": found 0 removable, 10002 nonremovable row versions in 45 out of 45 pages
DETAIL:  10002 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM



SESSOIN A : 

digoal=# close c1;
CLOSE CURSOR



SESSION B : 

digoal=# vacuum verbose t;
INFO:  vacuuming "public.t"
INFO:  "t": removed 0 row versions in 44 pages
INFO:  "t": found 0 removable, 58 nonremovable row versions in 45 out of 45 pages
DETAIL:  58 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM


评论

yaojieya - 2013-07-31 9:03:51

谢谢德哥的神速回复！[face1]

德哥@Digoal 回复 yaojieya - 2013-07-31 9:03:51

[face1],多多交流.
