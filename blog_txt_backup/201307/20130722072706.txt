PostgreSQL research

PostgreSQL 9.4 add support ALTER TABLE ... ALTER CONSTRAINT

2013-07-22 7:27:06   查看原文>>

PostgreSQL 9.4将增加修改约束的检查属性(SQL执行后马上检查 OR 整个事务结束的末尾检查). 

While fiddling with FK tuning, it was useful to be able to enable and
disable the DEFERRED mode of constraints.

That is not currently possible in SQL, so I wrote this patch. Without
this you have to drop and then re-add a constraint, which is
impractical for large tables.

e.g.
CREATE TABLE fktable (id integer, fk integer REFERENCES pktable (id));

ALTER TABLE foo
   ALTER CONSTRAINT fktable_fk_fkey DEFERRED INITIALLY IMMEDIATE;

Includes docs and tests.

Currently works for FKs only. Potentially other constraints can be
supported in future.

--
 Simon Riggs                   http://www.2ndQuadrant.com/
 PostgreSQL Development, 24x7 Support, Training & Services


感谢Simon Riggs提供的补丁. 目前的补丁仅支持对foreign key约束的check属性修改. 未来会加入对其他约束属性的在线修改.
在没有这个补丁前, 对约束的修改只能是删除约束后重新添加, 如果数据量很大的话重新添加约束时性能损耗极大.
下面测试一下这个补丁 : 

pg94@db-172-16-3-33-> psql
psql (9.4devel)
Type "help" for help.
digoal=# create table test1 (id int primary key, info text);
CREATE TABLE
digoal=# create table test2 (f_id int references test1(id), crt_time timestamp);
CREATE TABLE
digoal=# \d test2
                Table "public.test2"
  Column  |            Type             | Modifiers 
----------+-----------------------------+-----------
 f_id     | integer                     | 
 crt_time | timestamp without time zone | 
Foreign-key constraints:
    "test2_f_id_fkey" FOREIGN KEY (f_id) REFERENCES test1(id)


默认情况下外键约束的检查在每条SQL后马上检查.

digoal=# select conname,condeferrable,condeferred from pg_constraint where conname='test2_f_id_fkey';
-[ RECORD 1 ]-+----------------
conname       | test2_f_id_fkey
condeferrable | f
condeferred   | f


因此如下事务中报错.

digoal=# begin;
BEGIN
digoal=# insert into test2 values (1,now());
ERROR:  insert or update on table "test2" violates foreign key constraint "test2_f_id_fkey"
DETAIL:  Key (f_id)=(1) is not present in table "test1".
digoal=# rollback;
ROLLBACK


在事务中设置约束检查首先这个约束本身要支持deferrable.

digoal=# begin;
BEGIN
digoal=# set constraints test2_f_id_fkey deferred;
ERROR:  constraint "test2_f_id_fkey" is not deferrable
digoal=# rollback;
ROLLBACK


将该外键约束修改为deferrable. 

digoal=# alter table test2 alter constraint test2_f_id_fkey deferrable;
ALTER TABLE
digoal=# select conname,condeferrable,condeferred from pg_constraint where conname='test2_f_id_fkey';
-[ RECORD 1 ]-+----------------
conname       | test2_f_id_fkey
condeferrable | t
condeferred   | f


注意condeferred=false, 因此默认是每条SQL后检查的,

digoal=# begin;
BEGIN
digoal=# set constraints test2_f_id_fkey deferred;
SET CONSTRAINTS
digoal=# insert into test2 values (1,now());
INSERT 0 1
digoal=# commit;
ERROR:  insert or update on table "test2" violates foreign key constraint "test2_f_id_fkey"
DETAIL:  Key (f_id)=(1) is not present in table "test1".


此时可以设置该约束的deferrable属性. 延迟检查后这个约束的检查将在事务结束的末尾进行.

digoal=# begin;
BEGIN
digoal=# set constraints test2_f_id_fkey deferred;
SET CONSTRAINTS
digoal=# insert into test2 values (1,now());
INSERT 0 1
digoal=# insert into test1 values (1,'test');
INSERT 0 1
digoal=# end;
COMMIT


把默认的检查放到事务末尾, initially deferred.

digoal=# alter table test2 alter constraint test2_f_id_fkey deferrable initially deferred;
ALTER TABLE
digoal=# select conname,condeferrable,condeferred from pg_constraint where conname='test2_f_id_fkey';
-[ RECORD 1 ]-+----------------
conname       | test2_f_id_fkey
condeferrable | t
condeferred   | t


此时不需要使用set constraints进行修改.

digoal=# begin;
BEGIN
digoal=# insert into test2 values (100,now());
INSERT 0 1
digoal=# insert into test1 values (100,'test');
INSERT 0 1
digoal=# commit;
COMMIT



[参考]
1. http://www.postgresql.org/message-id/flat/CA+U5nML4d_HJfp2+hcbYQcGA_Y30nxt+Yu-44KVtQgcSJB09+w@mail.gmail.com#CA+U5nML4d_HJfp2+hcbYQcGA_Y30nxt+Yu-44KVtQgcSJB09+w@mail.gmail.com
2. http://www.postgresql.org/docs/devel/static/sql-altertable.html
3. http://www.postgresql.org/docs/devel/static/sql-createtable.html
4. http://www.postgresql.org/docs/devel/static/sql-set-constraints.html
