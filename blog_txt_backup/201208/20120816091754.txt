PostgreSQL research

why execl() and execle() dynamic arguments must end with NULL

2012-08-16 9:17:54   查看原文>>

exec() functions replace the current process : 

    A process is just a program running in memory. If you type taskmgr on Windows or ps -ef on most other machines, you’ll see the processes running on your system. The operating system tracks each process with a number called the process identifier (PID). 
    The exec() functions replace the current process by running some other program. You can say which command-line arguments or environment variables to use, and when the new program starts it will have exactly the same PID as the old one. It’s like a relay race, where your program hands over its process to the new program.


如图 : 
why execl() and execle() dynamic arguments must end with NULL - 德哥@Digoal - The Heart,The World.
 

exec语法 : 

NAME
       execl, execlp, execle, execv, execvp - execute a file

SYNOPSIS
       #include <unistd.h>

       extern char **environ;

       int execl(const char *path, const char *arg, ...);
       int execlp(const char *file, const char *arg, ...);
       int execle(const char *path, const char *arg,
                  ..., char * const envp[]);
       int execv(const char *path, char *const argv[]);
       int execvp(const char *file, char *const argv[]);


这几种exec的用法如图 : 
why execl() and execle() dynamic arguments must end with NULL - 德哥@Digoal - The Heart,The World.
 

可以看到execl, execlp, execle 都用到了... dynamic arguments.  这些arguments必须以NULL结尾.
如 : 
why execl() and execle() dynamic arguments must end with NULL - 德哥@Digoal - The Heart,The World.
 
why execl() and execle() dynamic arguments must end with NULL - 德哥@Digoal - The Heart,The World.
 
那么为什么要以NULL结尾呢?
我认为是这个系统调用函数为了用NULL来分辨dynamic arguments是否结束的标记.
下面是一个以NULL为结束标记的例子.

[root@db-172-16-3-150 zzz]# cat a.c
#include <stdio.h>
#include <string.h>
#include <unistd.h>

void display(char **a) {
  int i = 0;
  do {
    if( *(a+i) == NULL ) { 
      break;
    }
    fprintf(stdout, "*(a+%i):%s\n", i, *(a+i));
    i++;
  } while (1);
}

int main() {
  char *city[] = {"hangzhou", "changsha", NULL};
  display(city);
  return 0;
}

[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./a.c -o a && ./a
*(a+0):hangzhou
*(a+1):changsha



下面来验证一下exec执行后如果成功的话,exec后面的代码都不会被执行.
而system这一点则与exec不一样, 它不会向接力棒一样交给另一个进程来完成. system() run programs in a separate process.

[root@db-172-16-3-150 zzz]# cat a.c
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>

int main() {
  char cmd[100]="ls";
  execlp(cmd, cmd, "-la", "/tmp", NULL);
  fprintf(stdout,"error: %s\n", strerror(errno));
  return 0;
}
结果如下, execlp执行成功, 因此fprintf(stdout,"error: %s\n", strerror(errno)); 不会执行.
[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./a.c -o a && ./a
total 92
drwxrwxrwt 10 root root  4096 Aug 16 15:36 .
drwxr-xr-x 31 root root  4096 Jun 14 12:42 ..
-rw-------  1 pg91 root   163 Aug  8 14:07 crontab.XXXXVvpnuy
drwxrwxrwt  2 root root  4096 Jun 14 12:42 .font-unix
drwxr-xr-x  2 root root  4096 Jun 27 11:06 hsperfdata_root
-rw-r--r--  1 root root     1 Aug 16 15:36 i4jdaemon__opt_soft_bak_teampostgresql_misc_teampostgresql-service
drwxrwxrwt  2 root root  4096 Jun 14 12:42 .ICE-unix
-rw-rw-r--  1 pg91 pg91 28660 Aug  8 13:55 pgstatreport_francs_1_8.txt
srwxrwxrwx  1 pg91 pg91     0 Aug 16 15:35 .s.PGSQL.1919
-rw-------  1 pg91 pg91    50 Aug 16 15:35 .s.PGSQL.1919.lock
srwxrwxrwx  1 pg92 pg92     0 Aug 16 14:39 .s.PGSQL.1920
-rw-------  1 pg92 pg92    45 Aug 16 14:39 .s.PGSQL.1920.lock
drwx------  2 root root  4096 Aug 16 13:24 ssh-FyItEH8304
drwx------  2 pg91 pg91  4096 Aug 16 14:16 ssh-gGHOMN9986
drwx------  2 root root  4096 Aug 15 13:19 ssh-HdpxR15412
drwx------  2 root root  4096 Aug 15 12:45 ssh-OeSDD14316
drwx------  2 root root  4096 Aug 16 12:52 ssh-xZxVDz7642


当execlp执行异常时,   fprintf(stdout,"error: %s", strerror(errno));才会执行, 如下 : 

[root@db-172-16-3-150 zzz]# cat a.c
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>

int main() {
  char cmd[100]="ls";
  execlp(cmd, cmd, "-la", "/tm", NULL);
  fprintf(stdout,"error: %s\n", strerror(errno));
  return 0;
}
结果 :
[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./a.c -o a && ./a
ls: /tm: No such file or directory



system()不管执行是否成功, 后面的步骤继续走下去.

[root@db-172-16-3-150 zzz]# cat a.c
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>

int main() {
  //execlp(cmd, cmd, "-la", "/tm", NULL);
  system("ls -la /tmp");
  fprintf(stdout,"error: %s\n", strerror(errno));
  return 0;
}
结果 :
[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./a.c -o a && ./a
total 92
drwxrwxrwt 10 root root  4096 Aug 16 15:38 .
drwxr-xr-x 31 root root  4096 Jun 14 12:42 ..
-rw-------  1 pg91 root   163 Aug  8 14:07 crontab.XXXXVvpnuy
drwxrwxrwt  2 root root  4096 Jun 14 12:42 .font-unix
drwxr-xr-x  2 root root  4096 Jun 27 11:06 hsperfdata_root
-rw-r--r--  1 root root     1 Aug 16 15:38 i4jdaemon__opt_soft_bak_teampostgresql_misc_teampostgresql-service
drwxrwxrwt  2 root root  4096 Jun 14 12:42 .ICE-unix
-rw-rw-r--  1 pg91 pg91 28660 Aug  8 13:55 pgstatreport_francs_1_8.txt
srwxrwxrwx  1 pg91 pg91     0 Aug 16 15:35 .s.PGSQL.1919
-rw-------  1 pg91 pg91    50 Aug 16 15:35 .s.PGSQL.1919.lock
srwxrwxrwx  1 pg92 pg92     0 Aug 16 15:37 .s.PGSQL.1920
-rw-------  1 pg92 pg92    45 Aug 16 15:37 .s.PGSQL.1920.lock
drwx------  2 root root  4096 Aug 16 13:24 ssh-FyItEH8304
drwx------  2 pg91 pg91  4096 Aug 16 14:16 ssh-gGHOMN9986
drwx------  2 root root  4096 Aug 15 13:19 ssh-HdpxR15412
drwx------  2 root root  4096 Aug 15 12:45 ssh-OeSDD14316
drwx------  2 root root  4096 Aug 16 12:52 ssh-xZxVDz7642
error: Success
[root@db-172-16-3-150 zzz]# 



【参考】
variable number of arguments : 
http://blog.163.com/digoal@126/blog/static/1638770402012714102818672/

环境变量相关函数 : 

NAME
       getenv - get an environment variable

SYNOPSIS
       #include <stdlib.h>

       char *getenv(const char *name);

DESCRIPTION
       The  getenv()  function  searches the environment list for a string that matches the string pointed to by name.
       The strings are of the form name = value.

RETURN VALUE
       The getenv() function returns a pointer to the value in the environment, or NULL if there is no match.

CONFORMING TO
       SVr4, POSIX.1-2001, 4.3BSD, C89

SEE ALSO
       clearenv(3), putenv(3), setenv(3), unsetenv(3), environ(7)

GNU                               1993-04-03                         GETENV(3)


