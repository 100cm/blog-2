PostgreSQL research

Test PostgreSQL 9.1's group commit

2011-11-22 14:41:45   查看原文>>

许久以前针对PostgreSQL在release中指出的merge duplicate fsync IO请求做了简单的测试,链接如下 : 
http://blog.163.com/digoal@126/blog/static/16387704020117243337487/
同时, PostgreSQL 9.1还有另一方面的性能增强, 类似merge duplicate fsync 带来的效果. 如下 : 

Improve performance of commit_siblings (Greg Smith)

This allows the use of commit_siblings with less overhead.

其实与此效果类似的还有异步提交,synchronous_commit = off; 异步提交带来的效果是立竿见影的, 可惜异步提交如果数据库异常DOWN机可能丢失约10MS的事务. 而group commit和merge duplicate fsync是没有丢失问题的.

下面分别测试如下场景 : 
1. 同步提交, 无分组提交

synchronous_commit = on
commit_delay = 0


2. 同步提交, 分组提交

synchronous_commit = on
commit_delay = 10
commit_siblings = 16 (来自前面的最高峰时的连接数, 一般可以设置为2倍CPU核数.)


3. 异步提交, 不分组提交

synchronous_commit = off
commit_delay = 0



测试SQL分别为 : 

SQL-1 : 
BEGIN;
INSERT INTO group_commit_test (id,info) values (1,'digoal');
COMMIT;

SQL-2 : 
INSERT INTO group_commit_test (id,info) values (1,'digoal');



测试SHELL : 

#!/bin/bash
for i in 4 8 16 32 64 128 256 512
do 
pgbench -M extended -c $i -f /home/postgres/group_commit_test.sql -j $i -n -r -T 120 -h 127.0.0.1 -p 1921 -U digoal digoal >>//home/postgres/group_commit_test.log 2>&1
psql -h 127.0.0.1 -c "checkpoint;"
done



测试用机 : 
DELL R610, 24GMEM, 8核, 146G SAS.

测试结果 : 
Test PostgreSQL 9.1s group commit - 德哥@Digoal - The Heart,The World.
 

  按照5.8W的TPS来算，一台这样的测试机一天可以入50亿的数据。据说浙江省移动的彩信用的IBM小型机+ORACLE一天录15亿数据, 数据库负载已经比较高了。现在没有什么可比性，下次问朋友要一下对应的表结构和索引，看看PG能做到什么程度。

【小结】
1. 异步提交适合性能要求高, 但是容忍数据库异常DOWN机丢失10MS左右数据的场景。
2. 分组提交适合并发连接多, 同一时刻ACTIVE事务多并且XLOG磁盘组的IO能力已经达到极限的场景。
3. BEGIN; 和COMMIT; 带来的数据库overhead太严重了, 没有多SQL事务建议使用autocommit模式; 多SQL事务建议用函数替代。
4. 为什么异步提交的TPS能这么高, 原因就是不需要等待IO. 所以在异步提交测试的适合CPU IDLE几乎为0, 此时的瓶颈是CPU, 连接数超过CPU核数之后TPS开始下降。
5. 而同步提交的场景CPU空闲都在50%左右, 分组提交的IO等待为0, 不分组提交的IO等待为4左右。
6. 最高TPS，异步提交场景连接数等于CPU核数时达到最高点，而同步提交场景连接数为2倍CPU核数时达到TPS最高点。

【附件】
详细测试输出.
另外提供一下这台测试机的fsync调用测试. 我在测试中使用的是fdatasync. 
开启了RAID卡写缓存。

postgres@digoal -> pg_test_fsync 
2000 operations per test
O_DIRECT supported on this platform for open_datasync and open_sync.

Compare file sync methods using one 8kB write:
(in wal_sync_method preference order, except fdatasync
is Linux's default)
        open_datasync                                 n/a
        fdatasync                       12839.525 ops/sec
        fsync                           12936.025 ops/sec
        fsync_writethrough                            n/a
        open_sync                       14160.094 ops/sec

Compare file sync methods using two 8kB writes:
(in wal_sync_method preference order, except fdatasync
is Linux's default)
        open_datasync                                 n/a
        fdatasync                        8953.834 ops/sec
        fsync                            8966.318 ops/sec
        fsync_writethrough                            n/a
        open_sync                        7124.537 ops/sec

Compare open_sync with different write sizes:
(This is designed to compare the cost of writing 16kB
in different write open_sync sizes.)
        16kB open_sync write            10694.901 ops/sec
         8kB open_sync writes            7130.557 ops/sec
         4kB open_sync writes            4233.333 ops/sec
         2kB open_sync writes            2324.192 ops/sec
         1kB open_sync writes            1195.532 ops/sec

Test if fsync on non-write file descriptor is honored:
(If the times are similar, fsync() can sync data written
on a different descriptor.)
        write, fsync, close             11850.447 ops/sec
        write, close, fsync             11924.850 ops/sec

Non-Sync'ed 8kB writes:
        write                           206100.577 ops/sec



【参考】
http://blog.163.com/digoal@126/blog/static/16387704020117243337487/

commit_delay (integer)


    When the commit data for a transaction is flushed to disk, any additional commits ready at that time are also flushed out. commit_delay adds a time delay, set in microseconds, before a transaction attempts to flush the WAL buffer out to disk. A nonzero delay can allow more transactions to be committed with only one flush operation, if system load is high enough that additional transactions become ready to commit within the given interval. But the delay is just wasted if no other transactions become ready to commit. Therefore, the delay is only performed if at least commit_siblings other transactions are active at the instant that a server process has written its commit record. The default commit_delay is zero (no delay). Since all pending commit data will be written at every flush regardless of this setting, it is rare that adding delay by increasing this parameter will actually improve performance.


commit_siblings (integer)


    Minimum number of concurrent open transactions to require before performing the commit_delay delay. A larger value makes it more probable that at least one other transaction will become ready to commit during the delay interval. The default is five transactions.


