PostgreSQL research

PostgreSQL 9.4 Logical decoding

2014-03-25 13:53:20   查看原文>>

PostgreSQL 9.4添加了逻辑SQL复制的基础模块, logical decoding , 未来可以在此基础之上增加逻辑复制的功能.
架构很清晰明了:
1. 在发送端的节点配置xlog级别, logical, 将在XLOG文件中记录下用于SQL复制的信息.
2. 在数据库中创建SLOT, slot记录下当时的xlog位置.
3. 接收端通过流复制协议连接到发送端节点对应的slot, 从对应的xlog位置开始接收XLOG, 可以从中取出需要的信息, 例如redo SQL.
一个数据库可以创建多个slot, 一个slot不能同时多个客户端接收. 
slot的信息只包含了lsn位置信息, 实际的复制需要的信息存储在xlog中, 所以即使数据库重启, 也不会受到影响, 只要xlog还在.

测试 : 
下载最新的镜像

http://git.postgresql.org/gitweb/?p=postgresql.git;a=snapshot;h=6c5ced1526b189ed98baa0d195a7078d1afd112e;sf=tgz
tar -zxvf postgresql-6c5ced1.tar.gz
cd postgresql-6c5ced1
./configure --prefix=/home/pg94/pgsql9.4devel --with-pgport=1933 --with-perl --with-tcl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=64 --with-blocksize=32 --enable-dtrace --enable-debug && gmake && gmake install
cd contrib/
gmake && gmake install
initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W


配置postgresql.conf

max_connections = 100                   # (change requires restart)
unix_socket_directories = '.'   # comma-separated list of directories
shared_buffers = 128MB                  # min 128kB
dynamic_shared_memory_type = posix # the default is the first option
wal_level = logical                     # minimal, archive, hot_standby or logical
max_wal_senders = 32            # max number of walsender processes
max_replication_slots = 32      # max number of replication slots.
log_destination = 'csvlog'              # Valid values are combinations of
logging_collector = on          # Enable capturing of stderr and csvlog
log_timezone = 'PRC'
datestyle = 'iso, mdy'
timezone = 'PRC'
lc_messages = 'C'                       # locale for system error message
lc_monetary = 'C'                       # locale for monetary formatting
lc_numeric = 'C'                        # locale for number formatting
lc_time = 'C'                           # locale for time formatting
default_text_search_config = 'pg_catalog.english'


启动数据库, 在目标库创建slot.

digoal=# select pg_create_logical_replication_slot('test','test_decoding');
 pg_create_logical_replication_slot 
------------------------------------
 (test,0/199C738)
(1 row)
postgres=# select * from pg_replication_slots ;
 slot_name |    plugin     | slot_type | datoid | database | active | xmin | catalog_xmin | restart_lsn 
-----------+---------------+-----------+--------+----------+--------+------+--------------+-------------
 test      | test_decoding | logical   |  16384 | digoal   | f      |      |         1812 | 0/199C738
(1 row)


我们可以使用test_decoding插件来测试, 目前这个slot中没有消息.

digoal=# SELECT * FROM pg_logical_slot_get_changes('test', NULL, NULL, 'include-xids', '0');
 location | xid | data 
----------+-----+------
(0 rows)
digoal=# create table test(id int primary key, info text, crt_time timestamp);
CREATE TABLE


DDL不包含在消息中

digoal=# SELECT * FROM pg_logical_slot_get_changes('test', NULL, NULL, 'include-xids', '0');
 location  | xid  |  data  
-----------+------+--------
 0/199C7C8 | 1812 | BEGIN
 0/19F0A80 | 1812 | COMMIT
(2 rows)


DML包含在消息中.

digoal=# insert into test select generate_series(1,10),md5(random()::text),clock_timestamp();
INSERT 0 10
digoal=# SELECT * FROM pg_logical_slot_get_changes('test', NULL, NULL, 'include-xids', '0');
 location  | xid  |                                                                            data                                 
                                           
-----------+------+-----------------------------------------------------------------------------------------------------------------
-------------------------------------------
 0/19F0B90 | 1813 | BEGIN
 0/19F0B90 | 1813 | table public.test: INSERT: id[integer]:1 info[text]:'e5b1bd6948292facf2592b65d0521e34' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.891618'
 0/19F0CC0 | 1813 | table public.test: INSERT: id[integer]:2 info[text]:'3dcaf5e9267fa4962f877fa8dfcdffe3' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.892116'
 0/19F0D78 | 1813 | table public.test: INSERT: id[integer]:3 info[text]:'0c67db0c8a6a41596b9aec67e1c7a3ab' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.892134'
 0/19F0E30 | 1813 | table public.test: INSERT: id[integer]:4 info[text]:'d1b8b8517d247d938303e14a629e578b' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.892145'
 0/19F0EE8 | 1813 | table public.test: INSERT: id[integer]:5 info[text]:'5395e8bfb04452e012ad459882e02b91' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.892153'
 0/19F0FA0 | 1813 | table public.test: INSERT: id[integer]:6 info[text]:'ad534ae3e377b16abfda4ba697f6b338' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.892162'
 0/19F1058 | 1813 | table public.test: INSERT: id[integer]:7 info[text]:'789d56b13e482d05f533c8d1e2272e42' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.892171'
 0/19F1110 | 1813 | table public.test: INSERT: id[integer]:8 info[text]:'a5e99d5d566bb25df66be3bf500d8a2a' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.89218'
 0/19F11C8 | 1813 | table public.test: INSERT: id[integer]:9 info[text]:'ff8b420286fa1543f66fdd2e968d1951' crt_time[timestamp withou
t time zone]:'2014-03-25 11:50:22.892189'
 0/19F1280 | 1813 | table public.test: INSERT: id[integer]:10 info[text]:'20d17fbe89bc145dc2302bd1fe22bdfd' crt_time[timestamp witho
ut time zone]:'2014-03-25 11:50:22.892213'
 0/19F1378 | 1813 | COMMIT
(12 rows)



使用pg_recvlogical程序, 流复制协议从wal sender进程接收逻辑消息.

vi pg_hba.conf
local replication postgres trust
pg_ctl reload
pg94@db-172-16-3-150-> pg_recvlogical -f - -d digoal -h $PGDATA -U postgres -P test_decoding -s 1 -S test --start


在psql中执行插入 : 

digoal=# insert into test select generate_series(11,20),md5(random()::text),clock_timestamp();
INSERT 0 10


pg_recvlogical 输出如下 : 

BEGIN 1814
table public.test: INSERT: id[integer]:11 info[text]:'ae72f7f96ceeecaa29a735d703a3f242' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.25136'
table public.test: INSERT: id[integer]:12 info[text]:'f012366afd80d25ce9dde8bcd607ec2e' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251436'
table public.test: INSERT: id[integer]:13 info[text]:'ffd8fef099c1d1d46ae15bc2028a832a' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251448'
table public.test: INSERT: id[integer]:14 info[text]:'35d3f9555922c08b541351a6075f8715' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251458'
table public.test: INSERT: id[integer]:15 info[text]:'49302bbc23356e5a06fb6ab9049bdd62' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251467'
table public.test: INSERT: id[integer]:16 info[text]:'c8e62f6a980a716c6738623a53505153' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251476'
table public.test: INSERT: id[integer]:17 info[text]:'972dc81c0a9dc8ba5a7c369c2961e020' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251485'
table public.test: INSERT: id[integer]:18 info[text]:'88a371022809ce0a01b260f7da0bcb8f' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251494'
table public.test: INSERT: id[integer]:19 info[text]:'1c968a48d87236a5f7da8cd7d7c3a61d' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251503'
table public.test: INSERT: id[integer]:20 info[text]:'b12aaf18d96180a00b3d77324850ba91' crt_time[timestamp without time zone]:'2014-03-25 11:53:50.251512'
COMMIT 1814



一个数据库的同一个slot不能被同时消费. 例如, 在前面的pg_recvlogical未中断的情况下, 我再开一个pg_recvlogical 连接同一个库的同一个slot则报错.

pg94@db-172-16-3-150-> pg_recvlogical -f - -d digoal -h $PGDATA -U postgres -P test_decoding -s 1 -S test --start
pg_recvlogical: could not send replication command "START_REPLICATION SLOT "test" LOGICAL 0/0": ERROR:  replication slot "test" is already active

pg_recvlogical: disconnected. Waiting 5 seconds to try again.
pg_recvlogical: could not send replication command "START_REPLICATION SLOT "test" LOGICAL 0/0": ERROR:  replication slot "test" is already active
pg_recvlogical: disconnected. Waiting 5 seconds to try again.


因为当前这个slot是活动的

digoal=# select * from pg_replication_slots ;
 slot_name |    plugin     | slot_type | datoid | database | active | xmin | catalog_xmin | restart_lsn 
-----------+---------------+-----------+--------+----------+--------+------+--------------+-------------
 test      | test_decoding | logical   |  16384 | digoal   | t      |      |         1815 | 0/19F1BF8
(1 row)



但是一个库可以创建多个slot.

digoal=# select pg_create_logical_replication_slot('test1','test_decoding');
 pg_create_logical_replication_slot 
------------------------------------
 (test1,0/19F1C68)
(1 row)



当存在多个slot时, 每个SLOT从对应的lsn开始接受消息.

slot test : 
BEGIN 1815
table public.test: INSERT: id[integer]:21 info[text]:'68be6296c89edf64864ada9a6397ef36' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.622989'
table public.test: INSERT: id[integer]:22 info[text]:'c434ec7f839d1031dc1cb1b75478569d' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623059'
table public.test: INSERT: id[integer]:23 info[text]:'bfb079a6e998939db852a8e8bb0dff23' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.62307'
table public.test: INSERT: id[integer]:24 info[text]:'57e59156860f4644a44637f9103c6563' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623079'
table public.test: INSERT: id[integer]:25 info[text]:'e0fdf1d897d828c0f782f93538090217' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623088'
table public.test: INSERT: id[integer]:26 info[text]:'e04e24747cb6356a493f257b83769577' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623097'
table public.test: INSERT: id[integer]:27 info[text]:'25f75f492daeb16a31e1001c90141c83' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623106'
table public.test: INSERT: id[integer]:28 info[text]:'9d825e383331f2caf271980fe1123586' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623115'
table public.test: INSERT: id[integer]:29 info[text]:'53472c00ffc4d1e4cfef73402daff0d9' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623124'
table public.test: INSERT: id[integer]:30 info[text]:'df19f5b2b81f1430c08a43e053359c81' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623133'
COMMIT 1815

slot test1 : 
pg94@db-172-16-3-150-> pg_recvlogical -f - -d digoal -h $PGDATA -U postgres -P test_decoding -s 1 -S test1 --start
BEGIN 1815
table public.test: INSERT: id[integer]:21 info[text]:'68be6296c89edf64864ada9a6397ef36' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.622989'
table public.test: INSERT: id[integer]:22 info[text]:'c434ec7f839d1031dc1cb1b75478569d' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623059'
table public.test: INSERT: id[integer]:23 info[text]:'bfb079a6e998939db852a8e8bb0dff23' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.62307'
table public.test: INSERT: id[integer]:24 info[text]:'57e59156860f4644a44637f9103c6563' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623079'
table public.test: INSERT: id[integer]:25 info[text]:'e0fdf1d897d828c0f782f93538090217' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623088'
table public.test: INSERT: id[integer]:26 info[text]:'e04e24747cb6356a493f257b83769577' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623097'
table public.test: INSERT: id[integer]:27 info[text]:'25f75f492daeb16a31e1001c90141c83' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623106'
table public.test: INSERT: id[integer]:28 info[text]:'9d825e383331f2caf271980fe1123586' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623115'
table public.test: INSERT: id[integer]:29 info[text]:'53472c00ffc4d1e4cfef73402daff0d9' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623124'
table public.test: INSERT: id[integer]:30 info[text]:'df19f5b2b81f1430c08a43e053359c81' crt_time[timestamp without time zone]:'2014-03-25 11:57:02.623133'
COMMIT 1815


其他消息举例, 包括更新PK.

digoal=# update test set info='new' where id<10;
UPDATE 9
digoal=# update test set id=0 where id=1;
UPDATE 1
digoal=# delete from test where id<5;
DELETE 4

BEGIN 1821
table public.test: UPDATE: id[integer]:1 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.891618'
table public.test: UPDATE: id[integer]:2 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.892116'
table public.test: UPDATE: id[integer]:3 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.892134'
table public.test: UPDATE: id[integer]:4 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.892145'
table public.test: UPDATE: id[integer]:5 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.892153'
table public.test: UPDATE: id[integer]:6 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.892162'
table public.test: UPDATE: id[integer]:7 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.892171'
table public.test: UPDATE: id[integer]:8 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.89218'
table public.test: UPDATE: id[integer]:9 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.892189'
COMMIT 1821
BEGIN 1822
table public.test: UPDATE: old-key: id[integer]:1 new-tuple: id[integer]:0 info[text]:'new' crt_time[timestamp without time zone]:'2014-03-25 11:50:22.891618'
COMMIT 1822
BEGIN 1823
table public.test: DELETE: id[integer]:0
table public.test: DELETE: id[integer]:2
table public.test: DELETE: id[integer]:3
table public.test: DELETE: id[integer]:4
COMMIT 1823




把两个接收消息的客户端断开后, 查看SLOT状态为inactive

digoal=# select * from pg_replication_slots ;
 slot_name |    plugin     | slot_type | datoid | database | active | xmin | catalog_xmin | restart_lsn 
-----------+---------------+-----------+--------+----------+--------+------+--------------+-------------
 test      | test_decoding | logical   |  16384 | digoal   | f      |      |         1817 | 0/19F4FF0
 test1     | test_decoding | logical   |  16384 | digoal   | f      |      |         1816 | 0/19F3C50
(2 rows)

digoal=# insert into test select generate_series(41,400000),md5(random()::text),clock_timestamp();
INSERT 0 399960
digoal=# select * from pg_replication_slots ;
 slot_name |    plugin     | slot_type | datoid | database | active | xmin | catalog_xmin | restart_lsn 
-----------+---------------+-----------+--------+----------+--------+------+--------------+-------------
 test      | test_decoding | logical   |  16384 | digoal   | f      |      |         1817 | 0/19F4FF0
 test1     | test_decoding | logical   |  16384 | digoal   | f      |      |         1816 | 0/19F3C50
(2 rows)



restart_lsn记录了消息被接收的XLOG的最后位置. 所以checkpoint不会自动删除这个XLOG, 也就是说, 如果这个slot一直没有被drop掉, 并且以后也不来消费的话, 问题会很严重.
例如刚才断开之后, 产生了70MB日志, 这些日志不能被重复利用, 所以如果不把这两个slot删除或者接受掉这些消息的话, 会导致pg_xlog膨胀 : 

digoal=# select *,pg_xlog_location_diff(pg_current_xlog_insert_location(),restart_lsn)/1024/1024 from pg_replication_slots ;
 slot_name |    plugin     | slot_type | datoid | database | active | xmin | catalog_xmin | restart_lsn |      ?column?       
-----------+---------------+-----------+--------+----------+--------+------+--------------+-------------+---------------------
 test      | test_decoding | logical   |  16384 | digoal   | f      |      |         1817 | 0/19F4FF0   | 70.9814147949218750
 test1     | test_decoding | logical   |  16384 | digoal   | f      |      |         1816 | 0/19F3C50   | 70.9862060546875000
(2 rows)


一直膨胀

digoal=# insert into test select generate_series(400001,1000000),md5(random()::text),clock_timestamp();
INSERT 0 600000
digoal=# select *,pg_xlog_location_diff(pg_current_xlog_insert_location(),restart_lsn)/1024/1024 from pg_replication_slots ;
 slot_name |    plugin     | slot_type | datoid | database | active | xmin | catalog_xmin | restart_lsn |       ?column?       
-----------+---------------+-----------+--------+----------+--------+------+--------------+-------------+----------------------
 test      | test_decoding | logical   |  16384 | digoal   | f      |      |         1817 | 0/19F4FF0   | 177.4674835205078125
 test1     | test_decoding | logical   |  16384 | digoal   | f      |      |         1816 | 0/19F3C50   | 177.4722747802734375
(2 rows)


消息是按事务接收的, 如果事务产生的消息非常巨大, 在接收完这个事务的消息前, restart_lsn不会被更新.

删除slot

digoal=# select pg_drop_replication_slot('test');
 pg_drop_replication_slot 
--------------------------
 
(1 row)

digoal=# select pg_drop_replication_slot('test1');
 pg_drop_replication_slot 
--------------------------
 
(1 row)



[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=b89e151054a05f0f6d356ca52e3b725dd0505e53
2. http://www.postgresql.org/docs/devel/static/logicaldecoding.html
3. http://www.postgresql.org/docs/devel/static/sql-altertable.html#SQL-CREATETABLE-REPLICA-IDENTITY
4. http://www.postgresql.org/docs/devel/static/protocol-replication.html
5. http://www.postgresql.org/docs/devel/static/runtime-config-wal.html#GUC-WAL-LEVEL
6. http://www.postgresql.org/docs/devel/static/runtime-config-replication.html#GUC-MAX-REPLICATION-SLOTS
7. http://www.postgresql.org/docs/devel/static/functions-admin.html#FUNCTIONS-REPLICATION
8. http://www.postgresql.org/docs/devel/static/app-pgrecvlogical.html
9. http://www.postgresql.org/docs/devel/static/catalog-pg-replication-slots.html
10. http://www.postgresql.org/docs/devel/static/monitoring-stats.html#MONITORING-STATS-VIEWS-TABLE
11. http://www.postgresql.org/docs/devel/static/test-decoding.html
12. src/backend/replication/logical/logicalfuncs.c
Flag Counter
