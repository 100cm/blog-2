PostgreSQL research

Attention PostgreSQL MD5 password cleared because of role rename

2014-03-03 13:15:12   查看原文>>

PostgreSQL 密码存储为MD5值时, 如果修改用户名, MD5值将被自动清除, 所以会造成无法登录的现象.
例如 : 

digoal=# create role digoal login encrypted password '123';
CREATE ROLE
digoal=# select md5('123digoal');
               md5                
----------------------------------
 33270c2f9ab466190afe845611e6e53b
(1 row)


存储的md5值 : 密码+用户名的md5值.

digoal=# select usename,passwd from pg_shadow where usename='digoal';
 usename |               passwd                
---------+-------------------------------------
 digoal  | md533270c2f9ab466190afe845611e6e53b
(1 row)


把用户名修改为d后, 提示MD5密码被清除了, 因为用户名变更后MD5码也被变更了.

digoal=# alter role digoal rename to d;
NOTICE:  MD5 password cleared because of role rename
ALTER ROLE
digoal=# select usename,passwd from pg_shadow where usename='d';
 usename | passwd 
---------+--------
 d       | 
(1 row)


所以使用新用户不能正常验证.

digoal=# \q
pg93@db-172-16-3-150-> psql -h 172.16.3.150 -p 1921 -U d digoal
Password for user d: 
psql: FATAL:  password authentication failed for user "d"
pg93@db-172-16-3-150-> psql
psql (9.3.3)
Type "help" for help.


必须再次设置新用户的密码才行.

digoal=# alter role d encrypted password '123';
ALTER ROLE
digoal=# select usename,passwd from pg_shadow where usename='d';
 usename |               passwd                
---------+-------------------------------------
 d       | md5182c2cebc9bea720ae4e00272a12c478
(1 row)


新的MD5码

digoal=# select md5('123d');
               md5                
----------------------------------
 182c2cebc9bea720ae4e00272a12c478
(1 row)


PostgreSQL为什么不把修改用户名做成自动修改MD5码呢? 
这样省得后期来修改.

[参考]
1. src/backend/commands/user.c

/*
 * Rename role
 */
Oid
RenameRole(const char *oldname, const char *newname)
{
        HeapTuple       oldtuple,
                                newtuple;
        TupleDesc       dsc;
        Relation        rel;
        Datum           datum;
        bool            isnull;
        Datum           repl_val[Natts_pg_authid];
        bool            repl_null[Natts_pg_authid];
        bool            repl_repl[Natts_pg_authid];
        int                     i;
        Oid                     roleid;

        rel = heap_open(AuthIdRelationId, RowExclusiveLock);
        dsc = RelationGetDescr(rel);

        oldtuple = SearchSysCache1(AUTHNAME, CStringGetDatum(oldname));
        if (!HeapTupleIsValid(oldtuple))
                ereport(ERROR,
                                (errcode(ERRCODE_UNDEFINED_OBJECT),
                                 errmsg("role \"%s\" does not exist", oldname)));

        /*
         * XXX Client applications probably store the session user somewhere, so
         * renaming it could cause confusion.  On the other hand, there may not be
         * an actual problem besides a little confusion, so think about this and
         * decide.      Same for SET ROLE ... we don't restrict renaming the current
         * effective userid, though.
         */

        roleid = HeapTupleGetOid(oldtuple);
        if (roleid == GetSessionUserId())
                ereport(ERROR,
                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                                 errmsg("session user cannot be renamed")));
        if (roleid == GetOuterUserId())
                ereport(ERROR,
                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                                 errmsg("current user cannot be renamed")));

        /* make sure the new name doesn't exist */
        if (SearchSysCacheExists1(AUTHNAME, CStringGetDatum(newname)))
                ereport(ERROR,
                                (errcode(ERRCODE_DUPLICATE_OBJECT),
                                 errmsg("role \"%s\" already exists", newname)));

        if (strcmp(newname, "public") == 0 ||
                strcmp(newname, "none") == 0)
                ereport(ERROR,
                                (errcode(ERRCODE_RESERVED_NAME),
                                 errmsg("role name \"%s\" is reserved",
                                                newname)));

        /*
         * createrole is enough privilege unless you want to mess with a superuser
         */
        if (((Form_pg_authid) GETSTRUCT(oldtuple))->rolsuper)
        {
                if (!superuser())
                        ereport(ERROR,
                                        (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                                         errmsg("must be superuser to rename superusers")));
        }
        else
        {
                if (!have_createrole_privilege())
                        ereport(ERROR,
                                        (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                                         errmsg("permission denied to rename role")));
        }

        /* OK, construct the modified tuple */
        for (i = 0; i < Natts_pg_authid; i++)
                repl_repl[i] = false;

        repl_repl[Anum_pg_authid_rolname - 1] = true;
        repl_val[Anum_pg_authid_rolname - 1] = DirectFunctionCall1(namein,
                                                                                                   CStringGetDatum(newname));
        repl_null[Anum_pg_authid_rolname - 1] = false;

        datum = heap_getattr(oldtuple, Anum_pg_authid_rolpassword, dsc, &isnull);

        if (!isnull && isMD5(TextDatumGetCString(datum)))
        {
                /* MD5 uses the username as salt, so just clear it on a rename */
                repl_repl[Anum_pg_authid_rolpassword - 1] = true;
                repl_null[Anum_pg_authid_rolpassword - 1] = true;

                ereport(NOTICE,
                                (errmsg("MD5 password cleared because of role rename")));
        }

        newtuple = heap_modify_tuple(oldtuple, dsc, repl_val, repl_null, repl_repl);
        simple_heap_update(rel, &oldtuple->t_self, newtuple);

        CatalogUpdateIndexes(rel, newtuple);

        InvokeObjectPostAlterHook(AuthIdRelationId, roleid, 0);

        ReleaseSysCache(oldtuple);

        /*
         * Close pg_authid, but keep lock till commit.
         */
        heap_close(rel, NoLock);

        return roleid;
}


