PostgreSQL research

PostgreSQL 9.4 new data type jsonb - do not need to reparser when used

2014-03-25 9:55:03   查看原文>>

Introduce jsonb, a structured format for storing json.

author    Andrew Dunstan <andrew@dunslane.net>
          Sun, 23 Mar 2014 20:40:19 +0000 (16:40 -0400)
committer Andrew Dunstan <andrew@dunslane.net>
          Sun, 23 Mar 2014 20:40:19 +0000 (16:40 -0400)
commit    d9134d0a355cfa447adc80db4505d5931084278a
tree      cefe155d0f0f71b9279444a86eab4b1b1facafdb        tree | snapshot
parent    b2b2491b06074e68fc7c96148cb0fdf0c8eb0469        commit | diff

Introduce jsonb, a structured format for storing json.

The new format accepts exactly the same data as the json type. However, it is
stored in a format that does not require reparsing the orgiginal text in order
to process it, making it much more suitable for indexing and other operations.
Insignificant whitespace is discarded, and the order of object keys is not
preserved. Neither are duplicate object keys kept - the later value for a given
key is the only one stored.

The new type has all the functions and operators that the json type has,
with the exception of the json generation functions (to_json, json_agg etc.)
and with identical semantics. In addition, there are operator classes for
hash and btree indexing, and two classes for GIN indexing, that have no
equivalent in the json type.

This feature grew out of previous work by Oleg Bartunov and Teodor Sigaev, which
was intended to provide similar facilities to a nested hstore type, but which
in the end proved to have some significant compatibility issues.

Authors: Oleg Bartunov,  Teodor Sigaev, Peter Geoghegan and Andrew Dunstan.
Review: Andres Freund
jsonb类型和json的类型最主要的差别是, jsonb存储的是parser 后的类型, 而json 存储的是未parser的类型, 所以在使用上, jsonb更高效, 因为不需要reparser了. 而json类型在使用时需要reparse. 
在写入效率上, jsonb 比 json略差, 因为有parser的开销.
同样的内容, 依据写法的不一, jsonb需要的存储空间也比json更小, 例如重复key的情况, jsonb仅存储最后一个key-value. 
另一方面, jsonb不需要reparser所以在使用索引和操作符方面更加便利, 使用索引的@>查询效率估计和mongoDB不相上下.
目前jsonb还有一些不足, 例如内嵌对象无法使用GIN索引如.

However, the index could not be used for queries like the following, due to the aforementioned nesting restriction:

SELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc -> 'tags' ? 'qui';



Great news: PostgreSQL introduced jsonb support, which is real data type with binary storage and indexing !

This work is a confluence of two projects - our hstore and json, which were existed in PostgreSQL for years in somewhat incomplete forms - hstore (10 years old!) implements key-value storage with binary storage and indexing, while json - document storage implemented as a text. I and Teodor Sigaev have started working
on nested hstore more than year ago with support of Engine Yard and got working prototype with everything document-oriented storage needed (see our presentations in Ottawa, 2013, Dublin, 2013, http://www.sai.msu.su/~megera/postgres/talks/), which eventually happens to be binary storage for jsonb - a new data type,
introduced by Andrew Dunstan, which has everything from json, but performs better, thanks to binary representation and indexing ! jsonb doesn't preserve an order of keys and keys are unique ( the last win). Later, we decided to leave hstore unchanged and moved all nesting stuff (binary storage and indexing) to
PostgreSQL core in favor to jsonb, which is now is a diamond in the crown of PostgreSQL 9.4. Peter Geoghegan has joined the project and did the last push to the jsonb, which was great, since we were already tired and get bored with long and killimg work. Andrew forgot to say, that Alexander Korotkov introduced an
elegant hash opclass for GIN, which competes with MongoDB performance in contains operator (see our presentation in Dublin). Also, I'd mention David Wheeler, who supported us in nested hstore project, Josh Berkus, who actually was a jsonb driver and shaked me and Teodor in the middle of russian long NY holidays.
Andres Freund criticized the code, which is very necessary in such a complex project.

Jsonb has several missing useful features (from nested hstore), but that could be added later as an extension.

I hope all database people understand, what that project mean for PostgreSQL - 99.9% percent of projects don't need MongoDB and could be nicely implemented in relational model. Now, PostgreSQL (AFAIK, the first considerable RDBMS) introduced the real support for semi-structured data, which are common in nowaday world.

For historical reason, we saved our nested hstore (hstore v2.0) in separate repository (http://www.sigaev.ru/git/gitweb.cgi?p=hstore.git;a=summary).

PS.

I, Teodor and Alexander are working on better jsonb indexing. Hope, we'll have something to show at PGCon in Ottawa this year, stay tuned !

This is a screenshot of my message to Teodor Sigaev, which starts our nested hstore project.

这个差异在json和jsonb的输出和输入函数中可见一斑.
jsonb的输出
37 /*
38  * jsonb type input function
39  */
40 Datum
41 jsonb_in(PG_FUNCTION_ARGS)
42 {
43     char       *json = PG_GETARG_CSTRING(0);
44
45     return jsonb_from_cstring(json, strlen(json));
46 }

json的输出
170 /*
171  * Input.
172  */
173 Datum
174 json_in(PG_FUNCTION_ARGS)
175 {
176     char       *json = PG_GETARG_CSTRING(0);
177     text       *result = cstring_to_text(json);
178     JsonLexContext *lex;
179
180     /* validate it */
181     lex = makeJsonLexContext(result, false);
182     pg_parse_json(lex, &nullSemAction);
183
184     /* Internal representation is the same as text, for now */
185     PG_RETURN_TEXT_P(result);
186 }

[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=d9134d0a355cfa447adc80db4505d5931084278a
2. http://www.postgresql.org/docs/devel/static/datatype-json.html#JSON-CONTAINMENT
3. http://www.postgresql.org/docs/devel/static/functions-json.html
4. http://www.postgresql.org/docs/devel/static/functions-aggregate.html
5. http://www.postgresql.org/docs/devel/static/hstore.html
6. http://blog.163.com/digoal@126/blog/static/1638770402012112832614918/
7. http://blog.163.com/digoal@126/blog/static/16387704020121150212379/
8. http://blog.163.com/digoal@126/blog/static/163877040201321333759270/
9. http://blog.163.com/digoal@126/blog/static/1638770402013045395446/
10. http://blog.163.com/digoal@126/blog/static/163877040201341003544706/
