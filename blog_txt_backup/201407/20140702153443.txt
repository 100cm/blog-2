PostgreSQL research

PostgreSQL ODBC Data transfer compressed by SSL

2014-07-02 15:34:43   查看原文>>

今天群里一位兄弟聊到的一个话题, PostgreSQL ODBC是否可以像MySQL的ODBC那样支持数据传输的压缩功能.
我看了一下, 应该是不需要额外开发的, 因为ODBC支持SSL连接数据库, SSL是可以选择是否需要压缩的(默认压缩).

[参考]
1. http://www.postgresql.org/docs/9.3/static/libpq-connect.html#LIBPQ-CONNECT-SSLCOMPRESSION

requiressl
This option is deprecated in favor of the sslmode setting.
If set to 1, an SSL connection to the server is required (this is equivalent to sslmode require). libpq will then refuse to connect if the server does not accept an SSL connection. If set to 0 (default), libpq will negotiate the connection type with the server (equivalent to sslmode prefer). This option is only available if PostgreSQL is compiled with SSL support.

sslcompression
If set to 1 (default), data sent over SSL connections will be compressed (this requires OpenSSL version 0.9.8 or later). If set to 0, compression will be disabled (this requires OpenSSL 1.0.0 or later). This parameter is ignored if a connection without SSL is made, or if the version of OpenSSL used does not support it.

Compression uses CPU time, but can improve throughput if the network is the bottleneck. Disabling compression can improve response time and throughput if CPU performance is the limiting factor.


2. http://psqlodbc.projects.pgfoundry.org/
3. psqlodbc-09.03.0300/connection.c

        if (libpqopt)
        {
                switch (ci->sslmode[0])
                {
                        case '\0':
                                break;
                        case SSLLBYTE_VERIFY:
                                opts[cnt] = "sslmode";
                                switch (ci->sslmode[1])
                                {
                                        case 'f':
                                                vals[cnt++] = SSLMODE_VERIFY_FULL;
                                                        break;
                                        case 'c':
                                                vals[cnt++] = SSLMODE_VERIFY_CA;
                                                        break;
                                        default:
                                                vals[cnt++] = ci->sslmode;
                                }
                                break;
                        default:
                                opts[cnt] = "sslmode";
                                vals[cnt++] = ci->sslmode;
                }



Flag Counter
