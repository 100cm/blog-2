PostgreSQL research

Ruby Study 11 : Blocks, Procs, and Lambdas

2012-03-22 15:59:02   查看原文>>

Block在前面的讲解中已经多次用到, 这个章节来详细讲解一下.
需要注意的是Block在1.8和1.9中有一些特性是截然不同的, 所以需要特别注意. 尽量避免发生这样的情况, 否则你的代码在1.8可以跑, 1.9就有可能出问题了
1. What is a Block?
看个例子 : 

3.times do |i|
    puts( i )
end

3.times { |i|
    puts( i )
}


蓝底的部分就是Block. 即do end,和{}的部分.
Block由声明部分和代码部分组成, 声明部分是do end或{}. 代码部分包含Block parameters ( ||中的就是Block parameters, 多个用逗号隔开如|a,b| )和代码.
Block parameter的值来自调用这个Block的方法, 或者由yield方法的参数传递.
例如 : 

b1 = proc{|x| x+1}
p b1.yield(1)


执行结果

2



2. Line Breaks are Significant
指接收Block的方法和Block的首定义如do或{ 必须在同一行, 否则会报语法错误.
例如, 正确的写法 : 

3.times do |i|
    puts( i )
end
或
3.times { |i|
    puts( i )
}


错误的写法 : 

3.times 
do |i|
    puts( i )
end
或
3.times 
{ |i|
    puts( i )
}



3. Nameless Function
Block非常像没有名字的方法, 例如 : 

{ |i|
    puts( i )
}


它对应有名字的方法 : 

def aMethod( i )
   puts( i )
end


它们的调用场景 : 

for i in (0..2) do
    aMethod(i)
end

(0..2).each do |x|
    puts(x)
end


得到的结果是一样的 : 

0
1
2



4. Look Familiar?
前面的章节已经列举过一些例子, 很多Ruby自带的class的public instance method 都可以接收Block. 处理一些iterate的操作.
例如 : 

(0..2).each { |x| puts(x) }
3.times { |x| puts(x) }
0.upto(2) { |x| puts(x) }
2.downto(0) { |x| puts(x) }
[1,2,3,4].each { |x| puts(x) }


另一种是loop方法, 在Kernel类中定义的方法. 大部分类都继承自Kernel所以可以使用该方法.

arr = [1,2,3,4]
i = 0
loop do
  puts(arr[i])
  i += 1
  if ( i == arr.length ) then
    break
  end
end



5. Blocks and Arrays
接下来列举一些Array类使用BLOCK的例子,
collect方法可以用于产生一个新的对象, 其他的如each不会产生一个新对象. 下面的例子就可以看出.

b1 = [1,2,3].collect {|x| x*2}
p b1
结果
[2, 4, 6]


b2 = ['hello','i','am','digoal'].collect {|x| x.capitalize}
p b2
结果
["Hello", "I", "Am", "Digoal"]


each的例子 : 

b2 = ['hello','i','am','digoal'].each {|x| x.capitalize}
p b2
结果
["hello", "i", "am", "digoal"]


使用修改接收方法的对象的方法.

b2 = ['hello','i','am','digoal'].each {|x| x.capitalize!}
p b2
结果
["Hello", "I", "Am", "Digoal"]


但是请注意capitalize!方法如果对象没有被改变则返回nil. 例如,本来就是首字母大写的, 或者空格.

p 'A'.capitalize!
p ' '.capitalize!
p 'Abc'.capitalize!
结果
nil
nil
nil


另外需要注意的是nil无法转换为string, 所以当把nil强加到String对象的时候会报错

p 'abc' << nil
报错
can't convert nil into String (TypeError)


String有一个比较好玩的方法each_byte.它会把字符串每个字符转换成ASCII, Fixnum的chr方法则可以吧数字转化成字符.
例如 : 

"hello world".each_byte{|x| p x.chr.capitalize}
p 10.chr
结果
"H"
"E"
"L"
"L"
"O"
" "
"W"
"O"
"R"
"L"
"D"
"\n"



6. Procs and Lambdas
Block在Ruby中不是一个对象, 也不能独立存在. 

print({|x| x*2}.calss)
报错 : 
C:/Users/digoal/Desktop/new.rb:1: syntax error, unexpected '|', expecting '}'
print({|x| x*2}.calss)
        ^
C:/Users/digoal/Desktop/new.rb:1: syntax error, unexpected '}', expecting $end
print({|x| x*2}.calss)
               ^


以上为什么会报错呢, 因为block不能独立存在, 在参数中穿进去的Ruby会认为是一个Hash对象. 所以这里会报语法错误.
但是可以使用Proc的对象来存储块.

p1 = Proc.new {|x| x*2}
p2 = proc {|x| x*3}
p3 = lambda {|x| x*4}
p p1,p2,p3
结果 : 
#<Proc:0x1f2cab0@C:/Users/digoal/Desktop/new.rb:1>
#<Proc:0x1f2ca98@C:/Users/digoal/Desktop/new.rb:2>
#<Proc:0x1f2ca80@C:/Users/digoal/Desktop/new.rb:3 (lambda)>


注意以下写法都是错误的 , block一般不能作为一个普通的argument传递给方法, 除非是后面讲到的&方法来传递或者传递Proc对象.

p1 = Proc.new( {|x| x*2} )
p2 = proc( {|x| x*3} )
p3 = lambda( {|x| x*4} )



7. Block or Hash
Block和Hash对象都可以用大括号来定义.
所以Block不是作为参数传递给方法的, 因此不会在方法后使用括弧把传递的block包围起来.
而Hash既可以不用括弧也可以使用括弧. 因此就有点糊涂了 , 到底定义的是一个Hash对象还是Block呢?

puts( {1=>2}.class )     #<= Hash
puts( {}.class )         #<= Hash


但是

puts{}.class
print{}.class 


这两个是当做block处理的. 因此等同于

(puts{}).class
(print{}).class 



8. Creating Objects from Blocks
虽然block不是对象, 但是可以通过Proc类来存储block. 换句话说block就是Proc对象.
创建Proc对象有三个方法 : 

Proc.new
proc
lambda


它们可以通过call来执行block中的内容.
其中lambda和proc(ruby 1.8)创建的Proc对象在调用时会检查block的block argument. 
proc(ruby 1.9)和Proc.new创建的block在调用时不检查.

a = Proc.new{|x,y,z| x = y*z; puts(x) }
a.call(2,5,10,100)        # This is not an error
b = lambda{|x,y,z| x = y*z; puts(x) }
b.call(2,5,10,100)        # This is an error
puts('---Block #2---' )
c = proc{|x,y,z| x = y*z; puts(x) }
c.call(2,5,10,100)        # This is an error in Ruby 1.8
                          # Not an error in Ruby 1.9



9. What Is a Closure
Closure指的是它在创建完后就锁定了它带的本地变量和实例变量等的作用域. 而不是在使用这个Closure时的作用域.
例如 : 

x = "hello world"
ablock = Proc.new { puts( x ) }
def aMethod( aBlockArg )
    x = "goodbye"
    aBlockArg.call
end
puts( x )
ablock.call
aMethod( ablock )
ablock.call
puts( x )
执行结果 : 
hello world
hello world
hello world
hello world
hello world


x是main对象的本地变量, ablock这个Proc对象在创建的时候, 它的x 这个变量指的是main对象的x本地变量.
所以在方法aMethod中调用这个BLOCK时, 虽然aMethod中也有一个x本地变量, 但是它和main对象的x变量其实是两个变量.
ablock对象打印的是main的x变量. 因为它是在创建的时候就已经决定了的.

10. yield
要让一个方法可以接收block消息. 其中的一种方法是在这个方法中使用yield方法.
yield( 这里的参数将传递给block argument )
例如 : 

def aMethod
    yield
end
aMethod{ puts( "Good morning" ) }


def m1(x)
    yield(x)
end
m1(10) {|i| p i*2}
结果
20


前面已经讲过了, block和hash的定义都使用了大括号, 所以当作为参数传递时, block不在方法的括弧内传递, 而是在括弧外或不使用括弧. hash对象则在括弧内传递.
例如以下将报错 : 

def m1
    yield
end
m1( {|i| p i*2} )
报错 : 
C:/Users/digoal/Desktop/new.rb:4: syntax error, unexpected '|', expecting '}'
m1( {|i| p i*2} )
      ^
C:/Users/digoal/Desktop/new.rb:4: syntax error, unexpected tIDENTIFIER, expecting keyword_do or '{' or '('
m1( {|i| p i*2} )
            ^
C:/Users/digoal/Desktop/new.rb:4: syntax error, unexpected '}', expecting $end
m1( {|i| p i*2} )
               ^



11. Blocks Within Blocks
在block中使用block的例子: 

def m1(x)
    yield(x)
end
[1,2,3,4].each do |x|
    m1(x) {|i| puts(x*2)}
end
输出
2
4
6
8



12. Passing Named Proc Arguments
前面的例子都是使用yield来接收block消息的. 它不能作为参数传递给方法.  接下来的例子是作为参数传递给方法的. 因此需要传递的是Proc对象.
另一种是在参数名前面加一个&表示这个参数必须是一个Proc对象或匿名block. 因此传递给它的时候可以使用 &Proc对象名或者在括弧外传递匿名block.
对于&定义的参数, 在方法中使用时, 可以用参数名.call 或 yield来接收.
例1 : 

def abc( a, b, c )
    a.call
    b.call
    c.call
    yield
end
a = lambda{ puts "one" }
b = lambda{ puts "two" }
c = proc{ puts "three" }
abc(a, b, c ){ puts "four" }


结果 : 
one
two
three
four


例2 : 

def abc2( &d )
    d.call("call")   # 当参数为&定义的时候, call可以接收匿名块或者用&定义的参数传递进来的Proc对象.
    yield("yield")   # yield可以接收匿名块或者用&定义的参数传递进来的Proc对象.
end

p1 = lambda {|x| puts "digoal " + x}

abc2(&p1)
abc2 {|x| puts "digoal " + x}
结果 : 
digoal call
digoal yield
digoal call
digoal yield


例3 : 

def abc3( a, b, c, &d)
    a.call
    b.call
    c.call
    d.call        # first call block &d
    yield         # then yield block &d
end


最后需要注意的是, 在块中使用的block argument. 也就是在||中的变量名, 最好不要和外部的变量名重名.
因为在1.8中, 外面是能看到block的本地变量的, 也就是说block的本地变量和外部的本地变量是想通的, 如果重名block argument的值变动后将影响到外部的变量.
但是在1.9中, block 的本地变量和外部的变量是完全隔离的. 相互不会影响. 除非是直接修改对象, 也就是object_id相同的情况下, 对这个object的原始值进行修改.
1.9 例如 : 

x = "hello"
p1 = lambda {|x| x = x + " world"}
p2 = lambda {|x| x = x << " world"}
p1.call(x)  # 在block内部, 赋值的时候产生了一个新的对象. 因此=号左边的x指向了新对象, 是个新的object_id,
p x
p2.call(x)  # 在block内部, 赋值的时候没有产生一个新的对象. 因此=号左边的x指向的还是接收到的x的object_id.
p x
结果
"hello"
"hello world"


1.9 另一个例子 : 

x = "hello"
p1 = lambda {|x| y = x 
    y = y + " world"}
p2 = lambda {|x| y = x
    y = y << " world"}
p1.call(x)
p x
p2.call(x)
p x
结果 : 
"hello"
"hello world"


另一个例子, 说明1.8和1.9的不同 : 

a = "hello world"
def foo
    yield 100
end
puts( a )
foo{ |a| puts( a ) }
puts( a )
结果 : 
Ruby 1.8 displays this: 说明1.8的block中的变量和外面的变量重名是很危险的.
hello world
100
100

Ruby 1.9 displays this:
hello world
100
hello world



13. Precedence Rules
前面已经讲过block可以使用do end或者{}来定义. 但是他们的优先级是不一样的.
例如
foo bar do |s| puts( s ) end 相当于 foo(bar) do |s| puts( s ) end
foo bar{ |s| puts(s) } 相当于 foo( bar{ |s| puts(s) } )


def foo( b )
    puts("---in foo---")
    a = 'foo'
    if block_given?
        puts( "(Block passed to foo)" )
        yield( a )
    else
        puts( "(no block passed to foo)" )
    end
    puts( "in foo, arg b = #{b}" )
    return "returned by " << a
end
def bar
    puts("---in bar---")
    a = 'bar'
    if block_given?
        puts( "(Block passed to bar)" )
        yield( a )
    else
        puts( "(no block passed to bar)" )
    end
    return "returned by " << a
end
foo bar do |s| puts( s ) end       # 1) do..end block
puts("!!!!!next!!!!!")
foo bar{ |s| puts(s) }             # 2) {..} block


执行结果 : 

---in bar---
(no block passed to bar)
---in foo---
(Block passed to foo)
foo
in foo, arg b = returned by bar
!!!!!next!!!!!
---in bar---
(Block passed to bar)
bar
---in foo---
(no block passed to foo)
in foo, arg b = returned by bar


这个例子中用到了Kernel的public instance method : block_given?

block_given? → true or false iterator? → true or  false click to toggle source



Returns true if yield would execute a block in the current  context. The iterator? form is mildly deprecated.


   def try      if block_given?        yield      else        "no block"      end    end    try                  #=> "no block"    try { "hello" }      #=> "hello"    try do "hello" end   #=> "hello"

14. Blocks as Iterators

Block经常用在重复调用的场合, 例如 3.times { ... } , [1,2,3].each { ... } 等. 当然还可以写自己的类来应用这种重复的工作.

def timesRepeat( aNum )     for i in 1..aNum do          yield i     end end timesRepeat( 3 ){  |i| puts("[#{i}] hello world") }

结果

[1] hello world [2] hello world [3] hello world

class MyArray < Array     def initialize( anArray )         super( anArray )     end     def timesRepeat( aNum )         aNum.times{   # start block 1...              | num |              self.each{   # start block 2...                   | anitem |                   yield( "[#{num}] :: '#{anitem}'" )              }            # ...end block 2         }             # ...end block 1     end end  numarr = MyArray.new( [1,2,3] ) numarr.timesRepeat( 2  ){ |x| puts(x) }

结果

[0] :: '1' [0] :: '2' [0] :: '3' [1] :: '1' [1] :: '2' [1] :: '3'

multiarr =  [ ['one','two','three','four'],   [1,    2,    3,      4     ],   [:a,   :b,   :c,    :d     ]     ]  multiarr.each{ |arr|     multiarr[0].length.times{|i|         puts(arr[i])     } }  puts("!!!! next !!!!")  multiarr[0].length.times{|i|     multiarr.each{ |arr|         puts(arr[i])     } }

结果 :

one two three four 1 2 3 4 a b c d !!!! next !!!! one 1 a two 2 b three 3 c four 4 d

15. Returning Blocks from Methods

为什么要讲从方法中返回block呢, 还记不记得前面讲过的Block是Closure, 它的本地变量对应的是这个Closure创建时所在的范围内的本地变量.

这个特性也叫creatively.

x = "hello world" ablock = Proc.new { puts( x ) }

def aMethod( aBlockArg )     x = "goodbye"     aBlockArg.call            #=> "hello world" end

返回Proc对象的例子 :

def calcTax( taxRate )     return lambda{         |subtotal|             subtotal * taxRate     }  end salesTax = calcTax( 0.10 ) vat = calcTax( 0.175 ) print( "Tax due on book = ") print( salesTax.call( 10 ) )       #=> 1.0 print( "\nVat due on DVD = ") print( vat.call( 10 ) )            #=> 1.75



16. Blocks and Instance Variables

了解了Block具有Creatively特性之后 , 在想一想如果block中用到了instance variable的时候, 这个instance variable如何和调用这个block的对象里面的instance method重名了, block会使用哪个instance variable呢.

答案还是Creatively.

例如 :

aClos = lambda{      @hello << " yikes!"     puts("in #{self} object of class #{self.class}, @hello = #{@hello}") }  def aFunc( aClosure )     @hello = "hello world"     aClosure.call end  aFunc(aClos)  puts('!!!! next !!!!')  class X     def y( b )         @hello = "I say, I say, I say!!!"         puts( "   [In X.y]" )         puts("in #{self} object of class #{self.class}, @hello = #{@hello}")         puts( "   [In X.y] when block is called..." )         b.call     end end  x = X.new  x.y( aClos )

结果
in main object of class Object, @hello = hello world yikes! !!!! next !!!! [In X.y] in #<X:0x1e8c040> object of class X, @hello = I say, I say, I say!!! [In X.y] when block is called... in main object of class Object, @hello = hello world yikes! yikes!


17. Blocks and Local Variables
1.8和1.9的不同之处是,
1.9 block外部的本地变量和block argument同名时, 在block内部这个变量的值被改变时不影响外面的值. (直接修改原对象的除外, 前面有例子了)
1.8 block外部的本地变量和block argument同名时, 在block内部这个变量的值被改变后, 外面的变量的值也随之修改.
例如 :

c3 = proc{
    |x|
    x + 100
}


x = 3000
someval=1000
someval=c3.call(someval); puts(someval)    #=> 1100
someval=c3.call(someval); puts(someval)    #=> 1200
puts( x ) # Ruby 1.8, x = 1100. Ruby 1.9, x = 3000


但是, 不管在1.8还是1.9中.
外部都不能访问block的内部变量(就是说外面没有与之同名的变量名).

c3 = proc{      |x|     z = x + 100 } x = 3000 someval=1000 someval=c3.call(someval); puts(someval)    #=> 1100 someval=c3.call(someval); puts(someval)    #=> 1200 puts( x ) # Ruby 1.8, x = 1100. Ruby 1.9, x = 3000 print("x=[#{defined?(x)}],z=[#{defined?(z)}]") puts(z)
结果
C:/Users/digoal/Desktop/new.rb:11:in `<main>': undefined local variable or method `z' for main:Object (NameError) 1100 1200 3000 x=[local-variable],z=[]


又一个例子 : 

def foo
    a = 100
    [1,2,3].each do |b|
        c = b 
        a = b
        print("a=#{a}, b=#{b}, c=#{c}\n")
    end
    print("Outside block: a=#{a}\n") # Can't print #{b} and #{c} here!!!
end
foo
结果
a=1, b=1, c=1
a=2, b=2, c=2
a=3, b=3, c=3
Outside block: a=3


再看一个例子

x = "digoal"
p x.object_id

p1 = proc do |x|
    p x
    p x.object_id  # 等于block外面的x的object_id
    x = x + " hello"  # 赋值是新增了一个对象,所以不等于x的object_id
    p x.object_id
    p x
end

p2 = proc do |y|
    y << " hello"  # 将直接修改原始值, 因此block外部的x的值将被修改
end

p1.call(x)
p x.object_id  # x的object_id与开始时一致
p x  # 与开始时一致

p2.call(x)
p x.object_id  # x的object_id与开始时一致
p x  # 是修改后的值



最后是一个特例, 在for do end的block中这种情况不存在, 它这里的BLOCK中的本地变量可被外部访问 : 

def foo2
    a = 100
    for b in [1,2,3] do 
        c = b 
        a = b
        print("a=#{a}, b=#{b}, c=#{c}\n")
    end
    print("Outside block: a=#{a}, b=#{b}, c=#{b}\n")   
end
foo2
结果 : 
a=1, b=1, c=1
a=2, b=2, c=2
a=3, b=3, c=3
Outside block: a=3, b=3, c=3


也就是是for接收的block里面的本地变量在外部可以访问.

【参考】
The Book Of Ruby
Ruby 1.9.3 API
