PostgreSQL research

PostgreSQL 9.5 new feature - create type transform between pl/lang and PostgreSQL

2015-05-25 16:55:40   查看原文>>

当我们使用过程语言时，让过程语言处理PostgreSQL的一些特殊类型可能会遇到一些麻烦，例如plpython过程语言来处理hstore类型，因为python里面没有hstore类型对应的类型，通常情况下，在python中我们可能要把hstore作为字符串来处理。
为了提高编程效率，PostgreSQL 9.5新增了数据类型转换接口，允许用户自定义数据库和过程语言之间的类型转换方法。
语法如下：

CREATE [ OR REPLACE ] TRANSFORM FOR type_name LANGUAGE lang_name (
    FROM SQL WITH FUNCTION from_sql_function_name (argument_type [, ...]),
    TO SQL WITH FUNCTION to_sql_function_name (argument_type [, ...])
);


type_name 是需要转换的数据库类型，例如hstore
lang_name 是过程语言，例如plpythonu
from_sql_function_name  是将数据库类型转换为过程语言中对应类型的处理函数
to_sql_function_name   是将过程语言类型转换为数据库类型的处理函数

目前PostgreSQL contrib中自带了hstore类型在过程语言perl和python中的转换方法。
对应perl的 HV Hash Value以及python的dict。
我们可以参考一下：
contrib/hstore_plpython/hstore_plpython.c

#include "postgres.h"
#include "fmgr.h"
#include "plpython.h"
#include "plpy_typeio.h"
#include "hstore.h"

PG_MODULE_MAGIC;


PG_FUNCTION_INFO_V1(hstore_to_plpython);

Datum
hstore_to_plpython(PG_FUNCTION_ARGS)
{
        HStore     *in = PG_GETARG_HS(0);
        int                     i;
        int                     count = HS_COUNT(in);
        char       *base = STRPTR(in);
        HEntry     *entries = ARRPTR(in);
        PyObject   *dict;

        dict = PyDict_New();

        for (i = 0; i < count; i++)
        {
                PyObject   *key;

                key = PyString_FromStringAndSize(HS_KEY(entries, base, i), HS_KEYLEN(entries, i));
                if (HS_VALISNULL(entries, i))
                        PyDict_SetItem(dict, key, Py_None);
                else
                {
                        PyObject   *value;

                        value = PyString_FromStringAndSize(HS_VAL(entries, base, i), HS_VALLEN(entries, i));
                        PyDict_SetItem(dict, key, value);
                        Py_XDECREF(value);
                }
                Py_XDECREF(key);
        }

        return PointerGetDatum(dict);
}


PG_FUNCTION_INFO_V1(plpython_to_hstore);

Datum
plpython_to_hstore(PG_FUNCTION_ARGS)
{
        PyObject   *dict;
        volatile PyObject *items_v = NULL;
        int32           pcount;
        HStore     *out;

        dict = (PyObject *) PG_GETARG_POINTER(0);
        if (!PyMapping_Check(dict))
                ereport(ERROR,
                                (errcode(ERRCODE_WRONG_OBJECT_TYPE),
                                 errmsg("not a Python mapping")));

        pcount = PyMapping_Size(dict);
        items_v = PyMapping_Items(dict);

        PG_TRY();
        {
                int32           buflen;
                int32           i;
                Pairs      *pairs;
                PyObject   *items = (PyObject *) items_v;

                pairs = palloc(pcount * sizeof(*pairs));

                for (i = 0; i < pcount; i++)
                {
                        PyObject   *tuple;
                        PyObject   *key;
                        PyObject   *value;

                        tuple = PyList_GetItem(items, i);
                        key = PyTuple_GetItem(tuple, 0);
                        value = PyTuple_GetItem(tuple, 1);

                        pairs[i].key = PLyObject_AsString(key);
                        pairs[i].keylen = hstoreCheckKeyLen(strlen(pairs[i].key));
                        pairs[i].needfree = true;

                        if (value == Py_None)
                        {
                                pairs[i].val = NULL;
                                pairs[i].vallen = 0;
                                pairs[i].isnull = true;
                        }
                        else
                        {
                                pairs[i].val = PLyObject_AsString(value);
                                pairs[i].vallen = hstoreCheckValLen(strlen(pairs[i].val));
                                pairs[i].isnull = false;
                        }
                }
                Py_DECREF(items_v);

                pcount = hstoreUniquePairs(pairs, pcount, &buflen);
                out = hstorePairs(pairs, pcount, buflen);
        }
        PG_CATCH();
        {
                Py_DECREF(items_v);
                PG_RE_THROW();
        }
        PG_END_TRY();

        PG_RETURN_POINTER(out);
}


hstore_plpythonu--1.0.sql

CREATE FUNCTION hstore_to_plpython(val internal) RETURNS internal
LANGUAGE C STRICT IMMUTABLE
AS 'MODULE_PATHNAME';

CREATE FUNCTION plpython_to_hstore(val internal) RETURNS hstore
LANGUAGE C STRICT IMMUTABLE
AS 'MODULE_PATHNAME';

CREATE TRANSFORM FOR hstore LANGUAGE plpythonu (
    FROM SQL WITH FUNCTION hstore_to_plpython(internal),
    TO SQL WITH FUNCTION plpython_to_hstore(internal)
);

COMMENT ON TRANSFORM FOR hstore LANGUAGE plpythonu IS 'transform between hstore and Python dict';


这个transform实现了hstore类型和python dict类型的相互转换。

例子：

CREATE EXTENSION plpython2u;
CREATE EXTENSION hstore_plpython2u;
-- test hstore -> python
CREATE FUNCTION test1(val hstore) RETURNS int
LANGUAGE plpythonu
TRANSFORM FOR TYPE hstore
AS $$
assert isinstance(val, dict)
i = list(val.items())
i.sort()
plpy.info(i)
return len(val)
$$;
SELECT test1('aa=>bb, cc=>NULL'::hstore);
INFO:  [('aa', 'bb'), ('cc', None)]
CONTEXT:  PL/Python function "test1"
 test1 
-------
     2
(1 row)

-- the same with the versioned language name
CREATE FUNCTION test1n(val hstore) RETURNS int
LANGUAGE plpython2u
TRANSFORM FOR TYPE hstore
AS $$
assert isinstance(val, dict)
i = list(val.items())
i.sort()
plpy.info(i)
return len(val)
$$;
SELECT test1n('aa=>bb, cc=>NULL'::hstore);
INFO:  [('aa', 'bb'), ('cc', None)]
CONTEXT:  PL/Python function "test1n"
 test1n 
--------
      2
(1 row)

-- test hstore[] -> python
CREATE FUNCTION test1arr(val hstore[]) RETURNS int
LANGUAGE plpythonu
TRANSFORM FOR TYPE hstore
AS $$
plpy.info(repr(val))
return len(val)
$$;
SELECT test1arr(array['aa=>bb, cc=>NULL'::hstore, 'dd=>ee']);
INFO:  [{'aa': 'bb', 'cc': None}, {'dd': 'ee'}]
CONTEXT:  PL/Python function "test1arr"
 test1arr 
----------
        2
(1 row)

-- test python -> hstore
CREATE FUNCTION test2() RETURNS hstore
LANGUAGE plpythonu
TRANSFORM FOR TYPE hstore
AS $$
val = {'a': 1, 'b': 'boo', 'c': None}
return val
$$;
SELECT test2();
              test2              
---------------------------------
 "a"=>"1", "b"=>"boo", "c"=>NULL
(1 row)

-- test python -> hstore[]
CREATE FUNCTION test2arr() RETURNS hstore[]
LANGUAGE plpythonu
TRANSFORM FOR TYPE hstore
AS $$
val = [{'a': 1, 'b': 'boo', 'c': None}, {'d': 2}]
return val
$$;
 SELECT test2arr();
                           test2arr                           
--------------------------------------------------------------
 {"\"a\"=>\"1\", \"b\"=>\"boo\", \"c\"=>NULL","\"d\"=>\"2\""}
(1 row)

-- test as part of prepare/execute
CREATE FUNCTION test3() RETURNS void
LANGUAGE plpythonu
TRANSFORM FOR TYPE hstore
AS $$
rv = plpy.execute("SELECT 'aa=>bb, cc=>NULL'::hstore AS col1")
plpy.info(repr(rv[0]["col1"]))

val = {'a': 1, 'b': 'boo', 'c': None}
plan = plpy.prepare("SELECT $1::text AS col1", ["hstore"])
rv = plpy.execute(plan, [val])
plpy.info(repr(rv[0]["col1"]))
$$;
SELECT test3();
INFO:  {'aa': 'bb', 'cc': None}
CONTEXT:  PL/Python function "test3"
INFO:  '"a"=>"1", "b"=>"boo", "c"=>NULL'
CONTEXT:  PL/Python function "test3"
 test3 
-------
 
(1 row)

-- test trigger
CREATE TABLE test1 (a int, b hstore);
INSERT INTO test1 VALUES (1, 'aa=>bb, cc=>NULL');
SELECT * FROM test1;
 a |           b            
---+------------------------
 1 | "aa"=>"bb", "cc"=>NULL
(1 row)

CREATE FUNCTION test4() RETURNS trigger
LANGUAGE plpythonu
TRANSFORM FOR TYPE hstore
AS $$
plpy.info("Trigger row: {'a': %r, 'b': %r}" % (TD["new"]["a"], TD["new"]["b"]))
if TD["new"]["a"] == 1:
    TD["new"]["b"] = {'a': 1, 'b': 'boo', 'c': None}

return "MODIFY"
$$;
CREATE TRIGGER test4 BEFORE UPDATE ON test1 FOR EACH ROW EXECUTE PROCEDURE test4();
UPDATE test1 SET a = a;
INFO:  Trigger row: {'a': 1, 'b': {'aa': 'bb', 'cc': None}}
CONTEXT:  PL/Python function "test4"
SELECT * FROM test1;
 a |                b                
---+---------------------------------
 1 | "a"=>"1", "b"=>"boo", "c"=>NULL
(1 row)



[参考]
1. http://www.postgresql.org/docs/devel/static/sql-createtransform.html
2. contrib/hstore_plpython
3. contrib/hstore_plperl
Flag Counter
