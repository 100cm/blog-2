PostgreSQL research

PostgreSQL function's volatile & relation_excluded_by_constraints@src/backend/optimizer/util/plancat.c

2014-04-03 16:35:22   查看原文>>

今天一位网友提到一个关于约束和查询优化的问题, 为什么使用函数时某些子表不会被过滤呢?
我们看一个例子 : 

digoal=# create table test(id int, info text, crt_date date);
CREATE TABLE
digoal=# create table test1(like test including all) inherits (test);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "info" with inherited definition
NOTICE:  merging column "crt_date" with inherited definition
CREATE TABLE
digoal=# create table test2(like test including all) inherits (test);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "info" with inherited definition
NOTICE:  merging column "crt_date" with inherited definition
CREATE TABLE


给两个分表创建约束

digoal=# alter table test1 add constraint ck check(crt_date>'2013-01-01');
ALTER TABLE
digoal=# alter table test2 add constraint ck check(crt_date>'2015-01-01');
ALTER TABLE


constraint_exclusion 参数为partition. 允许检查约束.

constraint_exclusion = partition


使用current_date时, 显然没有过滤掉test2表的查询.
原因是current_date被转换成了('now'::cstring)::date), 这里的::是类型转换, 用到cstring_in, date_in函数.
而这date_in函数是stable的, 只有cstring是immutable的.
在relation_excluded_by_constraints@/opt/soft_bak/postgresql-9.3.3/src/backend/optimizer/util/plancat.c代码中, 已经说明只检查immutable函数. 

        /*
         * Check for self-contradictory restriction clauses.  We dare not make
         * deductions with non-immutable functions, but any immutable clauses that
         * are self-contradictory allow us to conclude the scan is unnecessary.
         *
         * Note: strip off RestrictInfo because predicate_refuted_by() isn't
         * expecting to see any in its predicate argument.
         */



在这个查询中, 除了current_date这个函数, 还有一个函数<号, 操作符对应的是函数, 是一个immutable函数.

postgres=# select oprcode from pg_operator where oprname='<' and oprleft=(select oid from pg_type where typname='date') and oprright=(select oid from pg_type where typname='date');
 oprcode 
---------
 date_lt
(1 row)
postgres=# select provolatile from pg_proc where proname='date_lt';
 provolatile 
-------------
 i
(1 row)



digoal=# explain select * from test where crt_date<current_date;
                           QUERY PLAN                           
----------------------------------------------------------------
 Append  (cost=0.00..183.45 rows=3115 width=40)
   ->  Seq Scan on test  (cost=0.00..0.00 rows=1 width=40)
         Filter: (crt_date < ('now'::cstring)::date)
   ->  Seq Scan on test1  (cost=0.00..91.73 rows=1557 width=40)
         Filter: (crt_date < ('now'::cstring)::date)
   ->  Seq Scan on test2  (cost=0.00..91.73 rows=1557 width=40)
         Filter: (crt_date < ('now'::cstring)::date)
(7 rows)


这里的话, 因为直接给出的是常量, test2当然可以被过滤.

digoal=# explain select * from test where crt_date<'2014-04-01';
                           QUERY PLAN                           
----------------------------------------------------------------
 Append  (cost=0.00..68.38 rows=1558 width=40)
   ->  Seq Scan on test  (cost=0.00..0.00 rows=1 width=40)
         Filter: (crt_date < '2014-04-01'::date)
   ->  Seq Scan on test1  (cost=0.00..68.38 rows=1557 width=40)
         Filter: (crt_date < '2014-04-01'::date)
(5 rows)


涉及的几个函数的稳定性如下 : 

digoal=# select proname,provolatile from pg_proc where proname ~ '^date' and provolatile='i';
       proname       | provolatile 
---------------------+-------------
 date_eq             | i
 date_le             | i
 date_ge             | i
 date_ne             | i
digoal=# \df+ *.*cstring*
                                                                   List of functions
   Schema   |     Name     | Result data type | Argument data types |  Type  | Security | Volatility |  Owner   | Language | Source 
code  | Description 
------------+--------------+------------------+---------------------+--------+----------+------------+----------+----------+--------
------+-------------
 pg_catalog | cstring_in   | cstring          | cstring             | normal | invoker  | immutable  | postgres | internal | cstring
_in   | I/O
 pg_catalog | cstring_out  | cstring          | cstring             | normal | invoker  | immutable  | postgres | internal | cstring
_out  | I/O
digoal=# \df+ date_in
                                                                List of functions
   Schema   |  Name   | Result data type | Argument data types |  Type  | Security | Volatility |  Owner   | Language | Source code 
| Description 
------------+---------+------------------+---------------------+--------+----------+------------+----------+----------+-------------
+-------------
 pg_catalog | date_in | date             | cstring             | normal | invoker  | stable     | postgres | internal | date_in     
| I/O
(1 row)


如果我们手工修改函数的稳定性, 将改变执行计划, 例如把date_in改成immutable的.
(生产系统不建议这么改, 这里只为了说明问题, 生产系统的话你可以自定义一个immutable函数来返回current_date的值)

digoal=# alter function date_in(cstring) immutable;
ALTER FUNCTION


这个时候, immtable函数将在optimize阶段就替换成常量, 因此被relation_excluded_by_constraints函数检测到. 过滤了test2表.

digoal=# explain select * from test where crt_date< current_date;
                           QUERY PLAN                           
----------------------------------------------------------------
 Append  (cost=0.00..68.38 rows=1558 width=40)
   ->  Seq Scan on test  (cost=0.00..0.00 rows=1 width=40)
         Filter: (crt_date < '2014-04-03'::date)
   ->  Seq Scan on test1  (cost=0.00..68.38 rows=1557 width=40)
         Filter: (crt_date < '2014-04-03'::date)
(5 rows)


因此, 如果把<号对应的函数变成stable, 那么test2无法被过滤了.

最近会针对数据库优化做一期培训视频, 届时请关注我的BLOG主页.
函数三态的总结 : 
VOLATILE
volatile函数没有限制, 可以修改数据(如执行delete, insert , update).
使用同样的参数调用可能返回不同的值.
volatile函数不能被优化器选择作为优化条件.(例如减少调用, 函数索引, 索引过滤条件中都无法使用volatile函数)
在同一个查询中, 同样参数的情况下可能被多次执行(QUERY有多行返回/扫描的情况下).
snapshot为函数内的每个query开始时的snapshot. 因此对在函数执行过程中, 外部已提交的数据可见.

STABLE
stable和immutable函数, 函数内不允许修改数据.(如PGver>=8.0 函数内不可执行非SELECT|PERFORM语句.)
使用同样的参数调用返回同样的结果, 在事务中有这个特性的也归属stable.
优化器可根据实际场景优化stable函数的调用次数, 同样的参数多次调用可减少成单次调用.
stable和immutable函数可用于优化器选择合适的索引扫描, 因为索引扫描仅评估被比较的表达式一次, 后多次与索引值进行比较.
stable和volatile函数都不能用于创建函数索引, 只有immutable函数可以用于创建函数索引.
stable和immutable函数, snapshot为外部调用函数的QUERY的snapshot, 函数内部始终保持这个snapshot, 外部会话带来的的数据变更不被反映到函数执行过程中.

IMMUTABLE
不允许修改数据, 使用同样的参数调用返回同样的结果.  
优化器在处理immutable函数时, 先评估函数结果, 将结果替换为常量.

STABLE和IMMUTABLE的区别
优化器对stable和immutable区别对待, where子句中一样, 但是在select子句中stable函数不被优化.
在prepared statement中的使用区别:
immutable函数在plan时以常量替代, stable函数在execute阶段被执行.
因此immutable函数参数为常量时, 在prepared statement场景只执行一次, 而stable函数被多次执行.

函数稳定性通过查看pg_proc.provolatile得到

[参考]
1. relation_excluded_by_constraints@/opt/soft_bak/postgresql-9.3.3/src/backend/optimizer/util/plancat.c
2. 使用stap或gdb跟踪relation_excluded_by_constraints

stap -e 'probe process("/home/pg93/pgsql9.3.3/bin/postgres").function("relation_excluded_by_constraints@/opt/soft_bak/postgresql-9.3.3/src/backend/optimizer/util/plancat.c") {
printf ("%s, %s\n", pp(), $$vars$$)
}'



Flag Counter

评论

一生有你 - 2014-05-26 19:50:40

也可以不改 date_in 属性，自己定义一个 immutable 函数，返回current_date，也能达到剪枝的目的
postgres=> create function curdate() returns date as
postgres-> $$
postgres$> begin
postgres$> return current_date;
postgres$> end;
postgres$> $$ language plpgsql immutable;
CREATE FUNCTION
postgres=>  explain select * from test where crt_date< curdate();
                          QUERY PLAN
---------------------------------------------------------------
 Append  (cost=0.00..24.50 rows=388 width=40)
   ->  Seq Scan on test  (cost=0.00..0.00 rows=1 width=40)
         Filter: (crt_date < '2014-05-26'::date)
   ->  Seq Scan on test1  (cost=0.00..24.50 rows=387 width=40)
         Filter: (crt_date < '2014-05-26'::date)

德哥@Digoal 回复一生有你 - 2014-05-26 19:50:40

是的都行.
