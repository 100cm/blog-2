PostgreSQL research

PostgreSQL combine SQLs update one tuple more than once Tuning To one tuple one update

2013-03-12 14:18:46   查看原文>>

昨天一位兄弟的数据更新需求如下 : 
-- 测试表

digoal=> create table test (id int primary key, c1 int, c2 int, c3 int, d1 int, d2 int, d3 int);
CREATE TABLE


-- 测试数据

digoal=> insert into test values (1,0,0,0,1,1,1);
INSERT 0 1
digoal=> insert into test values (2,1,1,1,1,1,1);
INSERT 0 1


-- 注意ctid的信息, 后面比对有用

digoal=> select ctid,* from test;
 ctid  | id | c1 | c2 | c3 | d1 | d2 | d3 
-------+----+----+----+----+----+----+----
 (0,1) |  1 |  0 |  0 |  0 |  1 |  1 |  1
 (0,2) |  2 |  1 |  1 |  1 |  1 |  1 |  1
(2 rows)


-- 更新数据的需求如下 : 
把所有d1=1的更新为c1的值.
把所有d2=1的更新为c2的值.
把所有d3=1的更新为c3的值.
正常情况下的SQL如下 : 

update test set d1=c1 where d1=1;
update test set d2=c2 where d2=1;
update test set d3=c3 where d3=1;


以上SQL需要更新6条tuple.
如下 : 

digoal=> update test set d1=c1 where d1=1;
UPDATE 2
digoal=> update test set d2=c2 where d2=1;
UPDATE 2
digoal=> update test set d3=c3 where d3=1;
UPDATE 2


-- 更新完后产生了6个垃圾版本.
-- 因为每执行1条以上任意SQL都会产生2个垃圾版本. 总共将产生6个垃圾版本.

digoal=> select ctid,* from test;
 ctid  | id | c1 | c2 | c3 | d1 | d2 | d3 
-------+----+----+----+----+----+----+----
 (0,7) |  1 |  0 |  0 |  0 |  0 |  0 |  0
 (0,8) |  2 |  1 |  1 |  1 |  1 |  1 |  1
(2 rows)


-- vacuum 信息如下, 回收了6个垃圾版本 : 

digoal=> vacuum verbose analyze test;
INFO:  00000: vacuuming "digoal.test"
LOCATION:  lazy_scan_heap, vacuumlazy.c:420
INFO:  00000: index "test_pkey" now contains 2 row versions in 2 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
LOCATION:  lazy_cleanup_index, vacuumlazy.c:1309
INFO:  00000: "test": found 6 removable, 2 nonremovable row versions in 1 out of 1 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 4 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
LOCATION:  lazy_scan_heap, vacuumlazy.c:1040
INFO:  00000: analyzing "digoal.test"
LOCATION:  do_analyze_rel, analyze.c:335
INFO:  00000: "test": scanned 1 of 1 pages, containing 2 live rows and 0 dead rows; 2 rows in sample, 2 estimated total rows
LOCATION:  acquire_sample_rows, analyze.c:1299
VACUUM


【优化】
对于这种需求减少垃圾版本是很有必要的, 可以将3条SQL合并成1条.

digoal=> drop table test;
DROP TABLE
digoal=> create table test (id int primary key, c1 int, c2 int, c3 int, d1 int, d2 int, d3 int);
CREATE TABLE
digoal=> insert into test values (1,0,0,0,1,1,1);
INSERT 0 1
digoal=> insert into test values (2,1,1,1,1,1,1);
INSERT 0 1
digoal=> update test set d1=(case d1 when 1 then c1 else d1 end), d2=(case d2 when 1 then c2 else d2 end), d3=(case d3 when 1 then c3 else d3 end) where d1=1 or d2=1 or d3=1;
UPDATE 2
digoal=> select ctid,* from test;
 ctid  | id | c1 | c2 | c3 | d1 | d2 | d3 
-------+----+----+----+----+----+----+----
 (0,3) |  1 |  0 |  0 |  0 |  0 |  0 |  0
 (0,4) |  2 |  1 |  1 |  1 |  1 |  1 |  1
(2 rows)


-- 使用这种方法只产生了2个垃圾版本, 一条TUPLE不会被多次更新.
-- 对PostgreSQL的mvcc方法有了解的朋友一定知道怎么来做并发控制的, 一个很重要的点就是行的版本.(xmin, xmax)
-- 减少行变更处理带来以上好处, 还可以减少索引的更新几率(HOT的情况下索引不需要更新).
