PostgreSQL research

PostgreSQL row , record , composite , table type used in array and prepared statement case

2013-03-06 22:40:49   查看原文>>

最近一位兄弟在使用复合类型的数组的绑定变量中遇到了一些问题, 无法做绑定变量.
下面就复合类型的数组做一些简单的介绍, 主要包括复合类型和行类型,表类型以及记录类型的关系. 数组的使用, 绑定变量等举例.
row构造器产生的实际上就是匿名的record类型.   
composite, table 类型可以认为是有名字并且已经定义好了结构的record类型.  
在创建表时, 默认会创建1个与表同名的复合类型, 如下 : 

digoal=> create table users(id int, info text, vip boolean, crt_time timestamp);
CREATE TABLE
digoal=> select * from pg_type where typname='users';
-[ RECORD 1 ]--+------------
typname        | users
typnamespace   | 3425987
typowner       | 3425936
typlen         | -1
typbyval       | f
typtype        | c
typcategory    | C
typispreferred | f
typisdefined   | t
typdelim       | ,
typrelid       | 3475837
typelem        | 0
typarray       | 3475838
typinput       | record_in
typoutput      | record_out
typreceive     | record_recv
typsend        | record_send
typmodin       | -
typmodout      | -
typanalyze     | -
typalign       | d
typstorage     | x
typnotnull     | f
typbasetype    | 0
typtypmod      | -1
typndims       | 0
typcollation   | 0
typdefaultbin  | 
typdefault     | 
typacl         | 


使用行构造器构造的值其实是匿名record类型的.

digoal=> select row(1,2,'abc',now());
                   row                   
-----------------------------------------
 (1,2,abc,"2013-03-07 08:24:30.8791+08")
(1 row)
digoal=> select row();
 row 
-----
 ()
(1 row)


当构造的匿名record至少包含1列时, row关键字可以省略.

digoal=> select ();
ERROR:  syntax error at or near ")"
LINE 1: select ();
                ^
digoal=> select (1);
 ?column? 
----------
        1
(1 row)
digoal=> select (1,2,'abc',now());
                    row                    
-------------------------------------------
 (1,2,abc,"2013-03-07 08:25:42.028076+08")
(1 row)


由于匿名record类型行描述符未定义, 所以无法使用.*或者.列名来引用, 将匿名record类型或者行类型转换成复合类型就可以了 : 

digoal=> select (row(1,'digoal', true, now())).*;
ERROR:  42809: record type has not been registered
LOCATION:  lookup_rowtype_tupdesc_internal, typcache.c:711


如下将row类型转换成建表时默认建立的复合类型users后, 使用.*可以了 .

digoal=> select (row(1,'digoal', true, now())::users).*;
-[ RECORD 1 ]------------------------
id       | 1
info     | digoal
vip      | t
crt_time | 2013-03-06 22:11:47.452729


同样建表时默认创建的复合类型users还可以用作建其他表的复合类型 , 与显示创建的效果一样.

digoal=> create table users_array(c1 users[]);
CREATE TABLE


显示创建的复合类型用在表字段的类型中 : 

digoal=> create type cu_users as (c1 int, c2 text, c3 boolean, c4 timestamp);
CREATE TYPE
digoal=> create table users_array_cu(c1 cu_users[]);
CREATE TABLE



使用构造行的方法构造复合类型, 其实就是多了一步转换的过程.

digoal=> select row(1,'digoal',true,now());
-[ RECORD 1 ]-------------------------------------
row | (1,digoal,t,"2013-03-06 22:20:29.106369+08")
digoal=> select row(1,'digoal',true,now())::users;
-[ RECORD 1 ]----------------------------------
row | (1,digoal,t,"2013-03-06 22:20:37.966585")
digoal=> select row(1,'digoal',true,now())::cu_users;
-[ RECORD 1 ]----------------------------------
row | (1,digoal,t,"2013-03-06 22:20:47.988029")



当然除了使用row构造器, 还可以使用传统的直接指定类型的输入方法, 如下 : 

digoal=> select users '(1, abc, true, 2012-10-10)';
-[ RECORD 1 ]-----------------------------
users | (1," abc",t,"2012-10-10 00:00:00")
digoal=> select '(1, abc, true, 2012-10-10)'::users;
-[ RECORD 1 ]-----------------------------
users | (1," abc",t,"2012-10-10 00:00:00")
digoal=> select cast ('(1, abc, true, 2012-10-10)' as users);
               users                
------------------------------------
 (1," abc",t,"2012-10-10 00:00:00")
(1 row)



构造复合类型的数组, 只要元素的输入方法与上面的构造方法一致即可 : 

digoal=> select array[row(1,'digoal',true,now())::users, row(1,'digoal',true,now())::users];
-[ RECORD 1 ]----------------------------------------------------------------------------------------
array | {"(1,digoal,t,\"2013-03-06 22:21:38.327608\")","(1,digoal,t,\"2013-03-06 22:21:38.327608\")"}
digoal=> select array['(1, abc, true, 2012-10-10)'::users];
                   array                    
--------------------------------------------
 {"(1,\" abc\",t,\"2012-10-10 00:00:00\")"}
(1 row)
digoal=> select array[cast('(1, abc, true, 2012-10-10)' as users)];
                   array                    
--------------------------------------------
 {"(1,\" abc\",t,\"2012-10-10 00:00:00\")"}
(1 row)
digoal=> select array[users '(1, abc, true, 2012-10-10)'];
                   array                    
--------------------------------------------
 {"(1,\" abc\",t,\"2012-10-10 00:00:00\")"}
(1 row)



绑定变量 : 

digoal=> create table users_info (c1 users[]);
CREATE TABLE
digoal=> prepare x (users[]) as insert into users_info values($1);
PREPARE


-- 使用array[]构造数组.

digoal=> execute x(array[row(1,'digoal',true,now())::users, row(2,'DIGOAL',false,clock_timestamp())::users]);
INSERT 0 1
digoal=> select * from users_info ;
                                              c1                                               
-----------------------------------------------------------------------------------------------
 {"(1,digoal,t,\"2013-03-06 22:30:27.088816\")","(2,DIGOAL,f,\"2013-03-06 22:30:27.089117\")"}
(1 row)
digoal=> select c1[1].id from users_info ;
 id 
----
  1
(1 row)
digoal=> select c1[1].* from users_info ;
 id |  info  | vip |          crt_time          
----+--------+-----+----------------------------
  1 | digoal | t   | 2013-03-06 22:30:27.088816
(1 row)


-- 所有构造复合类型的方法都适用.

digoal=> execute x(array[users '(1,digoal,true,2013-03-05)', row(2,'DIGOAL',false,clock_timestamp())::users]);
INSERT 0 1



程序中的使用 : 
在程序中使用绑定变量, 同样需要遵从以上的构造规则, 否则可能造成语法上的错误或者类型不匹配.
如果觉得在数组中每个元素都要写构造复合类型的语法太繁琐, 或者程序不支持如上拼写方法或者是不支持bind使用这种写法的话, 可以考虑将构造复合类型交给函数来完成, 那么绑定变量的参数将使用普通的数据类型.
例如 : 

digoal=> create or replace function con_users(int,text,boolean,timestamp) returns users as $$
digoal$>   select row($1,$2,$3,$4)::users;
digoal$> $$ language sql;
CREATE FUNCTION
digoal=> select con_users(1,'digoal',true,now()::timestamp);
                 con_users                 
-------------------------------------------
 (1,digoal,t,"2013-03-06 22:45:55.227019")
(1 row)
digoal=> select con_users(1,'digoal',true,'2012-03-01');
             con_users              
------------------------------------
 (1,digoal,t,"2012-03-01 00:00:00")
(1 row)


带时区的类型 : 

digoal=> create or replace function con_users(int,text,boolean,timestamp with time zone) returns users as $$
  select row($1,$2,$3,$4)::users;
$$ language sql;
CREATE FUNCTION
digoal=> select con_users(1,'digoal'::text,true,now());
                 con_users                 
-------------------------------------------
 (1,digoal,t,"2013-03-06 22:46:54.414916")
(1 row)



使用以上函数插入数组 : 

digoal=> execute x(array[con_users(1,'digoal',true,'2013-03-05'), con_users(2,'DIGOAL',false,clock_timestamp())]);
INSERT 0 1




【参考】
1. http://blog.163.com/digoal@126/blog/static/1638770402012989219190/
2. http://www.postgresql.org/docs/9.2/static/sql-expressions.html
3. http://www.postgresql.org/docs/9.2/static/functions-comparisons.html
4. http://www.postgresql.org/docs/9.2/static/functions-subquery.html
5. http://www.postgresql.org/docs/9.2/static/catalog-pg-type.html


Flag Counter
