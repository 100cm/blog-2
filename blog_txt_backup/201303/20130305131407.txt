PostgreSQL research

PostgreSQL Logarithm function

2013-03-05 13:14:07   查看原文>>

PostgreSQL 的两个函数: 自然对数, 10为底的对数.

                           List of functions
   Schema   |  Name  | Result data type | Argument data types |  Type  
------------+--------+------------------+---------------------+--------
 pg_catalog | dlog1  | double precision | double precision    | normal
 pg_catalog | dlog10 | double precision | double precision    | normal
(2 rows)


2为底的对数可以使用如下计算方法 : 

dlog1(x)/dlog1(2)
或者
dlog10(x)/dlog10(2)


n为底的对数可以使用如下计算方法 : 

dlog1(x)/dlog1(n)
或者
dlog10(x)/dlog10(n)



例如 : 

digoal=# select dlog1(1)/dlog1(2);
 ?column? 
----------
        0
(1 row)
Time: 1.760 ms
digoal=# select dlog1(2)/dlog1(2);
 ?column? 
----------
        1
(1 row)
Time: 1.918 ms
digoal=# select dlog1(4)/dlog1(2);
 ?column? 
----------
        2
(1 row)
Time: 1.925 ms
digoal=# select dlog1(8)/dlog1(2);
 ?column? 
----------
        3
(1 row)
Time: 2.032 ms



如果要经常使用, 分母可以用常数替代, 例如要经常计算2为底的对数. 这么写就可以了 : 

dlog1(x)/0.693147180559945


要经常计算3为底的对数. 这么写就可以了 : 

dlog1(9)/1.09861228866811
-- 例如 : 
digoal=# select dlog1(3);
      dlog1       
------------------
 1.09861228866811
(1 row)
Time: 1.932 ms
digoal=# select dlog1(9)/dlog1(3);
 ?column? 
----------
        2
(1 row)
Time: 2.151 ms
digoal=# select dlog1(9)/1.09861228866811;
 ?column? 
----------
        2
(1 row)
Time: 1.996 ms


【其他】
1. 其他的很多数学函数都可以在float.c中查到.
大部分来自<math.h>库.

【参考】
1. http://en.wikipedia.org/wiki/Log_(mathematics)
2. src/backend/utils/adt/float.c

01460 /*
01461  *      dlog1           - returns the natural logarithm of arg1
01462  */
01463 Datum
01464 dlog1(PG_FUNCTION_ARGS)
01465 {
01466     float8      arg1 = PG_GETARG_FLOAT8(0);
01467     float8      result;
01468 
01469     /*
01470      * Emit particular SQLSTATE error codes for ln(). This is required by the
01471      * SQL standard.
01472      */
01473     if (arg1 == 0.0)
01474         ereport(ERROR,
01475                 (errcode(ERRCODE_INVALID_ARGUMENT_FOR_LOG),
01476                  errmsg("cannot take logarithm of zero")));
01477     if (arg1 < 0)
01478         ereport(ERROR,
01479                 (errcode(ERRCODE_INVALID_ARGUMENT_FOR_LOG),
01480                  errmsg("cannot take logarithm of a negative number")));
01481 
01482     result = log(arg1);
01483 
01484     CHECKFLOATVAL(result, isinf(arg1), arg1 == 1);
01485     PG_RETURN_FLOAT8(result);
01486 }

01489 /*
01490  *      dlog10          - returns the base 10 logarithm of arg1
01491  */
01492 Datum
01493 dlog10(PG_FUNCTION_ARGS)
01494 {
01495     float8      arg1 = PG_GETARG_FLOAT8(0);
01496     float8      result;
01497 
01498     /*
01499      * Emit particular SQLSTATE error codes for log(). The SQL spec doesn't
01500      * define log(), but it does define ln(), so it makes sense to emit the
01501      * same error code for an analogous error condition.
01502      */
01503     if (arg1 == 0.0)
01504         ereport(ERROR,
01505                 (errcode(ERRCODE_INVALID_ARGUMENT_FOR_LOG),
01506                  errmsg("cannot take logarithm of zero")));
01507     if (arg1 < 0)
01508         ereport(ERROR,
01509                 (errcode(ERRCODE_INVALID_ARGUMENT_FOR_LOG),
01510                  errmsg("cannot take logarithm of a negative number")));
01511 
01512     result = log10(arg1);
01513 
01514     CHECKFLOATVAL(result, isinf(arg1), arg1 == 1);
01515     PG_RETURN_FLOAT8(result);
01516 }


3. man log

EXP(3)                     Linux Programmer’s Manual                    EXP(3)

NAME
       log, logf, logl - natural logarithmic function

SYNOPSIS
       #include <math.h>

       double log(double x);
       float logf(float x);
       long double logl(long double x);

       Link with -lm.

DESCRIPTION
       The log() function returns the natural logarithm of x.

ERRORS
       The log() function can return the following errors:

       EDOM   The argument x is negative.

       ERANGE The argument x is zero.  The log of zero is not defined (minus infinity).

CONFORMING TO
       SVr4, 4.3BSD, C89.  The float and long double variants are C99 requirements.

SEE ALSO
       cbrt(3), clog(3), log1p(3), sqrt(3)

                                  2002-07-27                            EXP(3)


