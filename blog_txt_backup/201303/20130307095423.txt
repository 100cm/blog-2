PostgreSQL research

PostgreSQL How small Table seq_scan faster than index scan.

2013-03-07 9:54:23   查看原文>>

今天早上QQ群里聊到小表走全表快还是走索引快的话题, 下面针对这个在数据库中做了一下压力测试.

测试表如下 : 

digoal=> create table tbl_small(id int, info text, crt_time timestamp);
CREATE TABLE



一、表只有1个数据块时 : 

digoal=> insert into tbl_small select generate_series(1,40),md5(clock_timestamp()::text),clock_timestamp();
INSERT 0 40
digoal=> select min(ctid),max(ctid) from tbl_small ;
  min  |  max   
-------+--------
 (0,1) | (0,40)
(1 row)



压力测试脚本 : 

ocz@db-172-16-3-150-> vi test.sql
\setrandom id 1 40
select * from tbl_small where id=:id;


1. 全表扫描压力测试结果 : 

ocz@db-172-16-3-150-> pgbench -M prepared -f ./test.sql -r -n -c 8 -j 2 -h $PGDATA -T 60 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 2
duration: 60 s
number of transactions actually processed: 4201144
tps = 70015.841270 (including connections establishing)
tps = 70030.797409 (excluding connections establishing)
statement latencies in milliseconds:
        0.001514        \setrandom id 1 40
        0.111214        select * from tbl_small where id=:id;


CPU开销截取 : 

 5598 ocz       15   0 8519m 4712 3112 R 66.1  0.0   0:27.28 postgres: digoal digoal [local] BIND                                   
 5605 ocz       16   0 8519m 4724 3124 R 64.1  0.0   0:20.95 postgres: digoal digoal [local] BIND                                   
 5600 ocz       15   0 8519m 4716 3116 S 59.8  0.0   0:24.62 postgres: digoal digoal [local] BILECT                                 
 5603 ocz       16   0 8519m 4716 3116 R 55.8  0.0   0:19.55 postgres: digoal digoal [local] SELECT                                 
 5599 ocz       15   0 8519m 4708 3108 R 54.8  0.0   0:23.43 postgres: digoal digoal [local] idle                                   
 5601 ocz       15   0 8519m 4712 3112 R 50.5  0.0   0:21.71 postgres: digoal digoal [local] idle                                   
 5602 ocz       15   0 8519m 4720 3120 R 48.1  0.0   0:21.77 postgres: digoal digoal [local] SELECT                                 
 5604 ocz       15   0 8519m 4712 3116 S 44.1  0.0   0:20.91 postgres: digoal digoal [local] BIND                                   



2. 索引扫描压力测试结果 : 

digoal=> create unique index idx_small_1 on tbl_small (id);
CREATE INDEX


关闭全表扫描, 强制索引 : 

vi $PGDATA/postgresql.conf
enable_seqscan = off
pg_ctl reload



ocz@db-172-16-3-150-> pgbench -M prepared -f ./test.sql -r -n -c 8 -j 2 -h $PGDATA -T 60 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 2
duration: 60 s
number of transactions actually processed: 4368406
tps = 72803.011245 (including connections establishing)
tps = 72819.600514 (excluding connections establishing)
statement latencies in milliseconds:
        0.001365        \setrandom id 1 40
        0.107018        select * from tbl_small where id=:id;


CPU开销截取 : 

 5740 ocz       15   0 8519m 4892 3264 S 54.8  0.0   0:15.80 postgres: digoal digoal [local] idle                                   
 5741 ocz       15   0 8519m 4888 3260 R 54.1  0.0   0:12.49 postgres: digoal digoal [local] idle                                   
 5742 ocz       15   0 8519m 4884 3256 S 50.4  0.0   0:14.77 postgres: digoal digoal [local] idle                                   
 5743 ocz       15   0 8519m 4892 3264 S 45.5  0.0   0:11.62 postgres: digoal digoal [local] idle                                   
 5744 ocz       15   0 8519m 4896 3268 S 42.1  0.0   0:14.11 postgres: digoal digoal [local] idle                                   
 5745 ocz       15   0 8519m 4896 3268 R 41.5  0.0   0:09.39 postgres: digoal digoal [local] SELECT                                 
 5746 ocz       15   0 8519m 4888 3260 S 41.1  0.0   0:13.46 postgres: digoal digoal [local] idle                                   
 5747 ocz       15   0 8519m 4896 3268 R 40.8  0.0   0:08.32 postgres: digoal digoal [local] idle                                   



二、数据增加到300条, 3个数据块 : 

digoal=> insert into tbl_small select generate_series(41,300),md5(clock_timestamp()::text),clock_timestamp();
INSERT 0 260
digoal=> select min(ctid),max(ctid) from tbl_small ;
  min  |  max   
-------+--------
 (0,1) | (2,86)
(1 row)



调整压力测试脚本 : 

ocz@db-172-16-3-150-> vi test.sql 
\setrandom id 1 300
select * from tbl_small where id=:id;


1. 索引扫描压力测试结果 : 

ocz@db-172-16-3-150-> pgbench -M prepared -f ./test.sql -r -n -c 8 -j 2 -h $PGDATA -T 60 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 2
duration: 60 s
number of transactions actually processed: 4176862
tps = 69611.811913 (including connections establishing)
tps = 69627.130480 (excluding connections establishing)
statement latencies in milliseconds:
        0.001544        \setrandom id 1 300
        0.111827        select * from tbl_small where id=:id;


CPU开销截取 : 

 6158 ocz       15   0 8519m 4940 3312 R 68.0  0.0   0:05.25 postgres: digoal digoal [local] idle                                   
 6156 ocz       15   0 8519m 4936 3308 R 67.7  0.0   0:05.78 postgres: digoal digoal [local] idle                                   
 6153 ocz       15   0 8519m 4956 3328 S 65.4  0.0   0:05.20 postgres: digoal digoal [local] idle                                   
 6154 ocz       15   0 8519m 4932 3304 R 65.0  0.0   0:05.46 postgres: digoal digoal [local] SELECT                                 
 6152 ocz       15   0 8519m 4932 3304 R 49.8  0.0   0:04.26 postgres: digoal digoal [local] idle                                   
 6155 ocz       15   0 8519m 4936 3308 S 46.1  0.0   0:03.84 postgres: digoal digoal [local] idle                                   
 6157 ocz       16   0 8519m 4936 3308 R 35.8  0.0   0:03.25 postgres: digoal digoal [local] BIND                                   
 6159 ocz       15   0 8519m 4944 3316 S 28.5  0.0   0:03.17 postgres: digoal digoal [local] idle                                   


2. 全表扫描压力测试结果 : 

digoal=> drop index idx_small_1 ;
DROP INDEX



ocz@db-172-16-3-150-> pgbench -M prepared -f ./test.sql -r -n -c 8 -j 2 -h $PGDATA -T 60 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 2
duration: 60 s
number of transactions actually processed: 2713441
tps = 45223.499611 (including connections establishing)
tps = 45232.694182 (excluding connections establishing)
statement latencies in milliseconds:
        0.001640        \setrandom id 1 300
        0.173621        select * from tbl_small where id=:id;


CPU开销截取 : 

 6126 ocz       15   0 8519m 4824 3208 S 66.7  0.0   0:12.98 postgres: digoal digoal [local] idle                                   
 6128 ocz       15   0 8519m 4824 3208 R 64.0  0.0   0:13.09 postgres: digoal digoal [local] idle                                   
 6132 ocz       15   0 8519m 4828 3212 R 63.4  0.0   0:12.54 postgres: digoal digoal [local] SELECT                                 
 6130 ocz       15   0 8519m 4832 3216 R 63.0  0.0   0:13.65 postgres: digoal digoal [local] SELECT                                 
 6127 ocz       15   0 8519m 4828 3212 S 53.8  0.0   0:11.19 postgres: digoal digoal [local] idle                                   
 6129 ocz       15   0 8519m 4828 3212 R 45.8  0.0   0:09.46 postgres: digoal digoal [local] idle                                   
 6131 ocz       15   0 8519m 4828 3212 R 37.8  0.0   0:07.90 postgres: digoal digoal [local] BIND                                   
 6133 ocz       15   0 8519m 4828 3212 R 37.8  0.0   0:07.38 postgres: digoal digoal [local] BIND                                   


三、数据增加到2万条记录, 181个数据块.

digoal=> insert into tbl_small select generate_series(1001,20000),md5(clock_timestamp()::text),clock_timestamp();
INSERT 0 19000
digoal=> select min(ctid),max(ctid) from tbl_small ;
  min  |   max    
-------+----------
 (0,1) | (180,40)
(1 row)



调整压力测试脚本 : 

ocz@db-172-16-3-150-> vi test.sql 
\setrandom id 1 20000
select * from tbl_small where id=:id;



1. 全表扫描压力测试结果 : 

ocz@db-172-16-3-150-> pgbench -M prepared -f ./test.sql -r -n -c 8 -j 2 -h $PGDATA -T 60 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 2
duration: 60 s
number of transactions actually processed: 136301
tps = 2271.530005 (including connections establishing)
tps = 2272.021164 (excluding connections establishing)
statement latencies in milliseconds:
        0.002457        \setrandom id 1 20000
        3.516204        select * from tbl_small where id=:id;


CPU开销截取 : 

 6078 ocz       25   0 8519m 6980 5364 R 99.2  0.0   0:06.27 postgres: digoal digoal [local] SELECT                                 
 6082 ocz       20   0 8519m 6964 5348 R 99.2  0.0   0:06.23 postgres: digoal digoal [local] SELECT                                 
 6083 ocz       25   0 8519m 6964 5348 R 98.6  0.0   0:06.23 postgres: digoal digoal [local] SELECT                                 
 6079 ocz       25   0 8519m 6960 5344 R 98.2  0.0   0:06.24 postgres: digoal digoal [local] SELECT                                 
 6081 ocz       20   0 8519m 6964 5348 R 98.2  0.0   0:06.22 postgres: digoal digoal [local] SELECT                                 
 6080 ocz       25   0 8519m 6964 5348 R 97.9  0.0   0:06.21 postgres: digoal digoal [local] SELECT                                 
 6084 ocz       25   0 8519m 6960 5344 R 97.6  0.0   0:06.07 postgres: digoal digoal [local] SELECT                                 
 6085 ocz       25   0 8519m 6968 5352 R 96.9  0.0   0:06.11 postgres: digoal digoal [local] SELECT


2. 索引扫描压力测试结果 : 

digoal=> create unique index idx_small_1 on tbl_small (id);
CREATE INDEX



ocz@db-172-16-3-150-> pgbench -M prepared -f ./test.sql -r -n -c 8 -j 2 -h $PGDATA -T 60 -U digoal digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 2
duration: 60 s
number of transactions actually processed: 3933247
tps = 65551.692347 (including connections establishing)
tps = 65564.556183 (excluding connections establishing)
statement latencies in milliseconds:
        0.001622        \setrandom id 1 20000
        0.118833        select * from tbl_small where id=:id;


CPU开销截取 : 

 6024 ocz       15   0 8519m 7700 6072 R 63.0  0.0   0:10.49 postgres: digoal digoal [local] idle                                   
 6026 ocz       15   0 8519m 7696 6068 S 58.1  0.0   0:09.89 postgres: digoal digoal [local] idle                                   
 6030 ocz       15   0 8519m 7704 6076 S 55.4  0.0   0:09.89 postgres: digoal digoal [local] idle                                   
 6028 ocz       15   0 8519m 7704 6076 S 55.1  0.0   0:09.74 postgres: digoal digoal [local] idle                                   
 6025 ocz       15   0 8519m 7692 6064 S 54.4  0.0   0:06.16 postgres: digoal digoal [local] idle                                   
 6027 ocz       15   0 8519m 7700 6072 S 40.5  0.0   0:05.17 postgres: digoal digoal [local] idle                                   
 6029 ocz       15   0 8519m 7700 6072 R 38.5  0.0   0:04.53 postgres: digoal digoal [local] idle                                   
 6031 ocz       15   0 8519m 7708 6080 S 30.2  0.0   0:04.08 postgres: digoal digoal [local] idle                                   


【小结】
1. 当表的记录数为40, 大小是1个数据块时, 走索引和走全表扫描的tps差别不大, CPU开销差别不大. 
2. 当表的记录数为300, 大小是3个数据块时, 走索引的效率明显比全表扫描高出很多, 差别主要体现在CPU的开销上. 
    走索引的CPU开销与数据量为40时差别不大.
3. 当表的记录数为20000, 大小是181个数据块时, 走索引的效率明显比全表扫描高出很多, 差别主要体现在CPU的开销上. 
    走索引的CPU开销与数据量为40时差别不大.

所以不管数据量多少, 在选择性很好的情况下使用索引是减轻CPU负担的好办法. 特别在高并发的查询下面, 全表扫描就是CPU杀手.  (因为每条记录都要处理一下, 即cpu_tuple_cost * tuples)
Flag Counter
