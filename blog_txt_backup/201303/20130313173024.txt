PostgreSQL research

PostgreSQL 9.3 JSON function enhanced

2013-03-13 17:30:24   查看原文>>

PostgreSQL 9.3 新增了几个JSON类型的函数
2个类型转换函数 : 
to_json, row_to_json
1个聚合函数 : 
json_agg
以及HSTORE扩展模块新增的2个类型转换函数 : 
hstore_to_json, hstore_to_json_loose
如下 : 

digoal=# create extension hstore;
CREATE EXTENSION
-- 加上已有的几个JSON函数, 目前9.3的json相关函数如下.
digoal=# \df *.*json*
                                  List of functions
   Schema   |         Name         | Result data type | Argument data types  |  Type  
------------+----------------------+------------------+----------------------+--------
 pg_catalog | array_to_json        | json             | anyarray             | normal
 pg_catalog | array_to_json        | json             | anyarray, boolean    | normal
 pg_catalog | json_agg             | json             | anyelement           | agg
 pg_catalog | json_agg_finalfn     | json             | internal             | normal
 pg_catalog | json_agg_transfn     | internal         | internal, anyelement | normal
 pg_catalog | json_in              | json             | cstring              | normal
 pg_catalog | json_out             | cstring          | json                 | normal
 pg_catalog | json_recv            | json             | internal             | normal
 pg_catalog | json_send            | bytea            | json                 | normal
 pg_catalog | row_to_json          | json             | record               | normal
 pg_catalog | row_to_json          | json             | record, boolean      | normal
 pg_catalog | to_json              | json             | anyelement           | normal
 public     | hstore_to_json       | json             | hstore               | normal
 public     | hstore_to_json_loose | json             | hstore               | normal
(14 rows)


新增函数的使用举例 : 
to_json : 

digoal=# select to_json(1);
 to_json 
---------
 1
(1 row)
digoal=# select to_json(true);
 to_json 
---------
 true
(1 row)
digoal=# select to_json('abc');
ERROR:  42804: could not determine polymorphic type because input has type "unknown"
LOCATION:  enforce_generic_type_consistency, parse_coerce.c:1733
digoal=# select to_json('abc'::text);
 to_json 
---------
 "abc"
(1 row)
digoal=# select to_json('ab:c'::text);
 to_json 
---------
 "ab:c"
(1 row)



row_to_json : 

digoal=# \d test
     Table "public.test"
 Column |  Type   | Modifiers 
--------+---------+-----------
 id     | integer | 
digoal=# select row_to_json(row(1));
 row_to_json 
-------------
 {"f1":1}
(1 row)
digoal=# select row_to_json(row(1,2));
   row_to_json   
-----------------
 {"f1":1,"f2":2}
(1 row)
digoal=# select row_to_json(row(1)::test);
 row_to_json 
-------------
 {"id":1}
(1 row)



json_agg : 

digoal=# select json_agg(i) from generate_series(1,10) i;
            json_agg             
---------------------------------
 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1 row)
digoal=# select json_agg(md5(i::text)) from generate_series(1,10) i;
                                                                                                                                    
                                             json_agg                                                                               
                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
 ["c4ca4238a0b923820dcc509a6f75849b", "c81e728d9d4c2f636f067f89cc14862c", "eccbc87e4b5ce2fe28308fd9f2a7baf3", "a87ff679a2f3e71d9181a
67b7542122c", "e4da3b7fbbce2345d7772b0674a318d5", "1679091c5a880faf6fb5e6087eb1b2dc", "8f14e45fceea167a5a36dedd4bea2543", "c9f0f895f
b98ab9159f51fd0297e236d", "45c48cce2e2d7fbdea1afc51c7c6ad26", "d3d9446802a44259755d38e6d163e820"]
(1 row)


hstore_to_json : 

digoal=# select hstore_to_json('name=>digoal, address=>hangzhou, age=>30'::hstore);
                     hstore_to_json
--------------------------------------------------------
 {"age": "30", "name": "digoal", "address": "hangzhou"}
(1 row)


hstore_to_json_loose : 

digoal=# select hstore_to_json_loose('name=>digoal, address=>hangzhou, age=>30'::hstore);
                 hstore_to_json_loose                 
------------------------------------------------------
 {"age": 30, "name": "digoal", "address": "hangzhou"}
(1 row)


这两个函数的区别在文章末尾.

当然对于开发人员来说, 这些函数还太弱了. 所以目前来说很多用到JSON类型的应用需要使用plv8语言来发挥.



【参考】
1. http://www.postgresql.org/docs/devel/static/functions-json.html
2. http://www.postgresql.org/docs/devel/static/datatype-json.html
3. http://www.postgresql.org/docs/devel/static/functions-aggregate.html
4. http://www.postgresql.org/docs/devel/static/hstore.html
5. http://blog.163.com/digoal@126/blog/static/16387704020120182349667/
6. http://blog.163.com/digoal@126/blog/static/16387704020121150212379/
7. http://blog.163.com/digoal@126/blog/static/163877040201293082737559/
8. http://blog.163.com/digoal@126/blog/static/1638770402012112832614918/
9. http://blog.163.com/digoal@126/blog/static/16387704020130165241651/
10. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=38fb4d978c5bfc377ef979e2595e3472744a3b05
11. json.c
to_json

01185 /*
01186  * SQL function to_json(anyvalue)
01187  */
01188 Datum
01189 to_json(PG_FUNCTION_ARGS)
01190 {
01191     Oid         val_type = get_fn_expr_argtype(fcinfo->flinfo, 0);
01192     StringInfo  result;
01193     Datum       orig_val,
01194                 val;
01195     TYPCATEGORY tcategory;
01196     Oid         typoutput;
01197     bool        typisvarlena;
01198     Oid         castfunc = InvalidOid;
01199
01200     if (val_type == InvalidOid)
01201         ereport(ERROR,
01202                 (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
01203                  errmsg("could not determine input data type")));
01204
01205
01206     result = makeStringInfo();
01207
01208     orig_val = PG_ARGISNULL(0) ? (Datum) 0 : PG_GETARG_DATUM(0);
01209
01210     getTypeOutputInfo(val_type, &typoutput, &typisvarlena);
01211
01212     if (val_type > FirstNormalObjectId)
01213     {
01214         HeapTuple   tuple;
01215         Form_pg_cast castForm;
01216
01217         tuple = SearchSysCache2(CASTSOURCETARGET,
01218                                 ObjectIdGetDatum(val_type),
01219                                 ObjectIdGetDatum(JSONOID));
01220         if (HeapTupleIsValid(tuple))
01221         {
01222             castForm = (Form_pg_cast) GETSTRUCT(tuple);
01223
01224             if (castForm->castmethod == COERCION_METHOD_FUNCTION)
01225                 castfunc = typoutput = castForm->castfunc;
01226
01227             ReleaseSysCache(tuple);
01228         }
01229     }
01230
01231     if (castfunc != InvalidOid)
01232         tcategory = TYPCATEGORY_JSON_CAST;
01233     else if (val_type == RECORDARRAYOID)
01234         tcategory = TYPCATEGORY_ARRAY;
01235     else if (val_type == RECORDOID)
01236         tcategory = TYPCATEGORY_COMPOSITE;
01237     else if (val_type == JSONOID)
01238         tcategory = TYPCATEGORY_JSON;
01239     else
01240         tcategory = TypeCategory(val_type);
01241
01242     /*
01243      * If we have a toasted datum, forcibly detoast it here to avoid memory
01244      * leakage inside the type's output routine.
01245      */
01246     if (typisvarlena && orig_val != (Datum) 0)
01247         val = PointerGetDatum(PG_DETOAST_DATUM(orig_val));
01248     else
01249         val = orig_val;
01250
01251     datum_to_json(val, false, result, tcategory, typoutput);
01252
01253     /* Clean up detoasted copy, if any */
01254     if (val != orig_val)
01255         pfree(DatumGetPointer(val));
01256
01257     PG_RETURN_TEXT_P(cstring_to_text(result->data));
01258 }

12. 
┌──────────────────────────┬────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────┐
│hstore_to_json(hstore)    │json│get hstore as a json value                                                                                      │hstore_to_json('"a key"=>1, b=>t, c=>null, d=>12345, e=>012345, f=>1.234, g=>     │{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g":      │
│                          │    │                                                                                                                │2.345e+4')                                                                        │"2.345e+4"}                                                                              │
├──────────────────────────┼────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────┤
│hstore_to_json_loose      │json│get hstore as a json value, but attempting to distinguish numerical and boolean values so they are unquoted in  │hstore_to_json('"a key"=>1, b=>t, c=>null, d=>12345, e=>012345, f=>1.234, g=>     │{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4} │
│(hstore)                  │    │the json                                                                                                        │2.345e+4')                                                                        │                                                                                         │
└──────────────────────────┴────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────┘
13. 
┌──────────────────────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬──────────────────────────────┬───────────────────┐
│           Function           │                                                                                                                Description                                                                                                                │           Example            │  Example Result   │
├──────────────────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────┼───────────────────┤
│array_to_json(anyarray [,     │Returns the array as JSON. A PostgreSQL multidimensional array becomes a JSON array of arrays. Line feeds will be added between dimension 1 elements if pretty_bool is true.                                                               │array_to_json('{{1,5},        │[[1,5],[99,100]]   │
│pretty_bool])                 │                                                                                                                                                                                                                                           │{99,100}}'::int[])            │                   │
├──────────────────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────┼───────────────────┤
│row_to_json(record [,         │Returns the row as JSON. Line feeds will be added between level 1 elements if pretty_bool is true.                                                                                                                                         │row_to_json(row(1,'foo'))     │{"f1":1,"f2":"foo"}│
│pretty_bool])                 │                                                                                                                                                                                                                                           │                              │                   │
├──────────────────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────┼───────────────────┤
│to_json(anyelement)           │Returns the value as JSON. If the data type is not builtin, and there is a cast from the type to json, the cast function will be used to perform the conversion. Otherwise, for any value other than a number, a boolean or NULL, the text │to_json('Fred said "Hi."'     │"Fred said \"Hi.\""│
│                              │representation will be used, escaped and quoted so that it is legal JSON.                                                                                                                                                                  │                              │                   │
└──────────────────────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────┴───────────────────┘
