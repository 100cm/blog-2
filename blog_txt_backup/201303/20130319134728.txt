PostgreSQL research

CitusDB TPC-H Data Warehouse Benchmark Test

2013-03-19 13:47:28   查看原文>>

上一篇介绍了CitusDB的安装, 本文将介绍一下TPC-H的测试.
安装CitusDB请参考 : 
http://blog.163.com/digoal@126/blog/static/1638770402013219840831/

1. 首先创建生成测试数据的目录.

[root@db-172-16-3-150 ~]# cd /data05
[root@db-172-16-3-150 data05]# mkdir citusdb
[root@db-172-16-3-150 data05]# chown citusdb:citusdb citusdb
[root@db-172-16-3-150 data05]# su - citusdb
citusdb@db-172-16-3-150-> cd /data05/citusdb


2. 下载测试脚本. 这个脚本由CitusDB提供.

citusdb@db-172-16-3-150-> wget http://examples.citusdata.com/tpch_2_13_0.tar.gz


3. 生成测试数据

citusdb@db-172-16-3-150-> tar -zxvf tpch_2_13_0.tar.gz
citusdb@db-172-16-3-150-> cd tpch_2_13_0
citusdb@db-172-16-3-150-> gmake


# 使用dbgen生成测试数据, 数据量多少根据-s来设置. 命令行帮助如下 : 

citusdb@db-172-16-3-150-> ./dbgen -h
TPC-H Population Generator (Version 2.13.0 build 4)
Copyright Transaction Processing Performance Council 1994 - 2010
USAGE:
dbgen [-{vf}][-T {pcsoPSOL}]
        [-s <scale>][-C <procs>][-S <step>]
dbgen [-v] [-O m] [-s <scale>] [-U <updates>]

Basic Options
===========================
-C <n> -- separate data set into <n> chunks (requires -S, default: 1)
-f     -- force. Overwrite existing files
-h     -- display this message
-q     -- enable QUIET mode
-s <n> -- set Scale Factor (SF) to  <n> (default: 1) 
-S <n> -- build the <n>th step of the data/update set (used with -C or -U)
-U <n> -- generate <n> update sets
-v     -- enable VERBOSE mode

Advanced Options
===========================
-b <s> -- load distributions for <s> (default: dists.dss)
-d <n> -- split deletes between <n> files (requires -U)
-i <n> -- split inserts between <n> files (requires -U)
-T c   -- generate cutomers ONLY
-T l   -- generate nation/region ONLY
-T L   -- generate lineitem ONLY
-T n   -- generate nation ONLY
-T o   -- generate orders/lineitem ONLY
-T O   -- generate orders ONLY
-T p   -- generate parts/partsupp ONLY
-T P   -- generate parts ONLY
-T r   -- generate region ONLY
-T s   -- generate suppliers ONLY
-T S   -- generate partsupp ONLY

To generate the SF=1 (1GB), validation database population, use:
        dbgen -vf -s 1

To generate updates for a SF=1 (1GB), use:
        dbgen -v -U 1 -s 1


# 生成测试数据 : 

citusdb@db-172-16-3-150-> ./dbgen -f -s 1
TPC-H Population Generator (Version 2.13.0)
Copyright Transaction Processing Performance Council 1994 - 2010


# 执行完后, 在当前目录下会生成以下数据文件 : 

citusdb@db-172-16-3-150-> ll *.tbl
-rw-rw-r-- 1 citusdb citusdb  24M Mar 19 12:26 customer.tbl
-rw-rw-r-- 1 citusdb citusdb 719M Mar 19 12:26 lineitem.tbl
-rw-rw-r-- 1 citusdb citusdb 2.2K Mar 19 12:26 nation.tbl
-rw-rw-r-- 1 citusdb citusdb 163M Mar 19 12:26 orders.tbl
-rw-rw-r-- 1 citusdb citusdb 113M Mar 19 12:26 partsupp.tbl
-rw-rw-r-- 1 citusdb citusdb  23M Mar 19 12:26 part.tbl
-rw-rw-r-- 1 citusdb citusdb  384 Mar 19 12:26 region.tbl
-rw-rw-r-- 1 citusdb citusdb 1.4M Mar 19 12:26 supplier.tbl


# 测试表的建表DDL如下 : 

citusdb@db-172-16-3-150-> cat dss_distributed.ddl 
-- Sccsid:     @(#)dss.ddl      2.1.8.1

CREATE TABLE nation
(
    n_nationkey  INTEGER not null,
    n_name       CHAR(25) not null,
    n_regionkey  INTEGER not null,
    n_comment    VARCHAR(152)
)
DISTRIBUTE BY APPEND (n_nationkey);


CREATE TABLE region
(
    r_regionkey  INTEGER not null,
    r_name       CHAR(25) not null,
    r_comment    VARCHAR(152)
)
DISTRIBUTE BY APPEND (r_regionkey);


CREATE TABLE part
(
    p_partkey     INTEGER not null,
    p_name        VARCHAR(55) not null,
    p_mfgr        CHAR(25) not null,
    p_brand       CHAR(10) not null,
    p_type        VARCHAR(25) not null,
    p_size        INTEGER not null,
    p_container   CHAR(10) not null,
    p_retailprice DECIMAL(15,2) not null,
    p_comment     VARCHAR(23) not null
)
DISTRIBUTE BY APPEND (p_partkey);


CREATE TABLE supplier
(
    s_suppkey     INTEGER not null,
    s_name        CHAR(25) not null,
    s_address     VARCHAR(40) not null,
    s_nationkey   INTEGER not null,
    s_phone       CHAR(15) not null,
    s_acctbal     DECIMAL(15,2) not null,
    s_comment     VARCHAR(101) not null
)
DISTRIBUTE BY APPEND (s_suppkey);


CREATE TABLE partsupp
(
    ps_partkey     INTEGER not null,
    ps_suppkey     INTEGER not null,
    ps_availqty    INTEGER not null,
    ps_supplycost  DECIMAL(15,2)  not null,
    ps_comment     VARCHAR(199) not null
)
DISTRIBUTE BY APPEND (ps_partkey);


CREATE TABLE customer
(
    c_custkey     INTEGER not null,
    c_name        VARCHAR(25) not null,
    c_address     VARCHAR(40) not null,
    c_nationkey   INTEGER not null,
    c_phone       CHAR(15) not null,
    c_acctbal     DECIMAL(15,2)   not null,
    c_mktsegment  CHAR(10) not null,
    c_comment     VARCHAR(117) not null
)
DISTRIBUTE BY APPEND (c_custkey);


CREATE TABLE ORDERS
(
    o_orderkey       BIGINT not null,
    o_custkey        INTEGER not null,
    o_orderstatus    CHAR(1) not null,
    o_totalprice     DECIMAL(15,2) not null,
    o_orderdate      DATE not null,
    o_orderpriority  CHAR(15) not null,  
    o_clerk          CHAR(15) not null, 
    o_shippriority   INTEGER not null,
    o_comment        VARCHAR(79) not null
)
DISTRIBUTE BY APPEND (o_orderkey);


CREATE TABLE LINEITEM
(
    l_orderkey    BIGINT not null,
    l_partkey     INTEGER not null,
    l_suppkey     INTEGER not null,
    l_linenumber  INTEGER not null,
    l_quantity    DECIMAL(15,2) not null,
    l_extendedprice  DECIMAL(15,2) not null,
    l_discount    DECIMAL(15,2) not null,
    l_tax         DECIMAL(15,2) not null,
    l_returnflag  CHAR(1) not null,
    l_linestatus  CHAR(1) not null,
    l_shipdate    DATE not null,
    l_commitdate  DATE not null,
    l_receiptdate DATE not null,
    l_shipinstruct CHAR(25) not null,
    l_shipmode     CHAR(10) not null,
    l_comment      VARCHAR(44) not null
)
DISTRIBUTE BY APPEND (l_orderkey);



4. 在主节点执行dss_distributed.ddl , 创建表.
创建DISTRIBUTE表需要超级用户, 调用几个CitusDB的C函数. 
# 将digoal改为超级用户权限

citusdb@db-172-16-3-150-> psql -h 127.0.0.1 -p 9900 -U postgres digoal
psql (9.2.1)
Type "help" for help.
digoal=# alter role digoal superuser;
ALTER ROLE


# 所有worker节点digoal用户权限调整 : 

citusdb@db-172-16-3-150-> psql -h 1.1.1.1 -p 9901 -U postgres digoal -c "alter role digoal superuser;"
ALTER ROLE
citusdb@db-172-16-3-150-> psql -h 1.1.1.1 -p 9902 -U postgres digoal -c "alter role digoal superuser;"
ALTER ROLE
citusdb@db-172-16-3-150-> psql -h 1.1.1.1 -p 9903 -U postgres digoal -c "alter role digoal superuser;"
ALTER ROLE
citusdb@db-172-16-3-150-> psql -h 1.1.1.1 -p 9904 -U postgres digoal -c "alter role digoal superuser;"
ALTER ROLE



# 主节点创建表, 调用dss_distributed.ddl 

citusdb@db-172-16-3-150-> psql -h 127.0.0.1 -p 9900 -U digoal digoal -f ./dss_distributed.ddl 
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE



5. 在主节点查看当前数据库中的表

citusdb@db-172-16-3-150-> psql -h 1.1.1.1 -p 9900 -U digoal digoal
psql (9.2.1)
Type "help" for help.
digoal=# \dt
              List of relations
 Schema |       Name       | Type  |  Owner   
--------+------------------+-------+----------
 public | customer         | table | digoal
 public | customer_reviews | table | postgres
 public | lineitem         | table | digoal
 public | nation           | table | digoal
 public | orders           | table | digoal
 public | part             | table | digoal
 public | partsupp         | table | digoal
 public | region           | table | digoal
 public | supplier         | table | digoal
(9 rows)
digoal=# select oid,relname,relkind from pg_class where relnamespace = (select oid from pg_namespace where nspname='public');
  oid  |      relname      | relkind 
-------+-------------------+---------
 16515 | customer_reviews  | r
 16521 | customer_id_index | i
 16551 | nation            | r
 16554 | region            | r
 16557 | part              | r
 16560 | supplier          | r
 16563 | partsupp          | r
 16566 | customer          | r
 16569 | orders            | r
 16572 | lineitem          | r
(10 rows)



6. 从worker节点使用psql 连接主节点, 导入数据.
# 修改shard的阈值, 表的大小超过128MB则分割成多个shard.

digoal=# SET shard_max_size TO '128MB';
SET
digoal=# \STAGE lineitem FROM '/data05/citusdb/tpch_2_13_0/lineitem.tbl' WITH DELIMITER '|';
digoal=# \STAGE orders FROM '/data05/citusdb/tpch_2_13_0/orders.tbl' WITH DELIMITER '|';


# 分区信息如下 : 

digoal=# select * from pg_dist_partition;
 logicalrelid | partmethod |                                                          partkey                                       
                   
--------------+------------+--------------------------------------------------------------------------------------------------------
-------------------
        16515 | a          | {VAR :varno 1 :varattno 2 :vartype 1082 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattn
o 2 :location 464}
        16551 | a          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 
1 :location 182}
        16554 | a          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 
1 :location 147}
        16557 | a          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 
1 :location 388}
        16560 | a          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 
1 :location 316}
        16563 | a          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 
1 :location 244}
        16566 | a          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 
1 :location 358}
        16569 | a          | {VAR :varno 1 :varattno 1 :vartype 20 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 
1 :location 407}
        16572 | a          | {VAR :varno 1 :varattno 1 :vartype 20 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 
1 :location 649}
(9 rows)


# shard信息如下 : 

digoal=# select * from pg_dist_shard;
 logicalrelid | shardid | shardstorage | shardalias | shardminvalue | shardmaxvalue 
--------------+---------+--------------+------------+---------------+---------------
        16467 |  102010 | t            |            | 1970-12-30    | 1998-12-31
        16467 |  102014 | t            |            | 1999-01-01    | 1999-12-31
        16478 |  102016 | t            |            | 1970-12-30    | 1998-12-31
        16467 |  102017 | t            |            | 1999-01-01    | 1999-12-31
        16467 |  102018 | t            |            | 1970-12-30    | 1998-12-31
        16515 |  102020 | t            |            | 1970-12-30    | 1998-12-31
        16515 |  102021 | t            |            | 1999-01-01    | 1999-12-31
        16572 |  102022 | t            |            | 1             | 1075520
        16572 |  102023 | t            |            | 1075520       | 2142211
        16572 |  102024 | t            |            | 2142211       | 3209632
        16572 |  102025 | t            |            | 3209632       | 4275712
        16572 |  102026 | t            |            | 4275713       | 5342467
        16572 |  102027 | t            |            | 5342468       | 6000000
        16569 |  102028 | t            |            | 1             | 4725991
        16569 |  102029 | t            |            | 4726016       | 6000000
(15 rows)


# shard的物理位置如下 : 

digoal=# select * from pg_dist_shard_placement;
 shardid | shardstate | shardlength | nodename | nodeport 
---------+------------+-------------+----------+----------
  102010 |          1 |   145932288 | work01   |     9901
  102010 |          1 |   145932288 | work04   |     9904
  102014 |          1 |   286695424 | work02   |     9902
  102014 |          1 |   286695424 | work03   |     9903
  102016 |          1 |   145932288 | work01   |     9901
  102016 |          1 |   145932288 | work02   |     9902
  102017 |          1 |   286695424 | work01   |     9901
  102017 |          1 |   286695424 | work02   |     9902
  102018 |          1 |   145932288 | work01   |     9901
  102018 |          1 |   145932288 | work04   |     9904
  102020 |          1 |   145932288 | work01   |     9901
  102020 |          1 |   145932288 | work02   |     9902
  102021 |          1 |   286695424 | work01   |     9901
  102021 |          1 |   286695424 | work03   |     9903
  102022 |          1 |   169689088 | work01   |     9901
  102022 |          1 |   169689088 | work04   |     9904
  102023 |          1 |   168288256 | work01   |     9901
  102023 |          1 |   168288256 | work02   |     9902
  102024 |          1 |   168280064 | work01   |     9901
  102024 |          1 |   168280064 | work04   |     9904
  102025 |          1 |   168280064 | work01   |     9901
  102025 |          1 |   168280064 | work02   |     9902
  102026 |          1 |   168296448 | work01   |     9901
  102026 |          1 |   168296448 | work03   |     9903
  102027 |          1 |   103792640 | work01   |     9901
  102027 |          1 |   103792640 | work03   |     9903
  102028 |          1 |   173293568 | work01   |     9901
  102028 |          1 |   173293568 | work04   |     9904
  102029 |          1 |    46702592 | work01   |     9901
  102029 |          1 |    46702592 | work04   |     9904
(30 rows)



# 配置shard_replication_factor=1, 则以下数据将只会导入1个worker节点. 换句话说就是只有1份数据.

digoal=# SET shard_replication_factor TO '1';
SET
digoal=# \STAGE nation FROM '/data05/citusdb/tpch_2_13_0/nation.tbl' WITH DELIMITER '|';
digoal=# \STAGE part FROM '/data05/citusdb/tpch_2_13_0/part.tbl' WITH DELIMITER '|';
digoal=# \STAGE partsupp FROM '/data05/citusdb/tpch_2_13_0/partsupp.tbl' WITH DELIMITER '|';
digoal=# \STAGE region FROM '/data05/citusdb/tpch_2_13_0/region.tbl' WITH DELIMITER '|';
digoal=# \STAGE supplier FROM '/data05/citusdb/tpch_2_13_0/supplier.tbl' WITH DELIMITER '|';



7. 查询导入的数据量.

digoal=# select count(*) from customer;
 count 
-------
      
(1 row)
digoal=# select count(*) from lineitem;
  count  
---------
 6001215
(1 row)
digoal=# select count(*) from nation;
 count 
-------
    25
(1 row)
digoal=# select count(*) from orders;
  count  
---------
 1500000
(1 row)
digoal=# select count(*) from part;
 count  
--------
 200000
(1 row)
digoal=# select count(*) from partsupp;
 count  
--------
 800000
(1 row)
digoal=# select count(*) from region;
 count 
-------
     5
(1 row)
digoal=# select count(*) from supplier;
 count 
-------
 10000
(1 row)


# 从shard的物理位置信息可以看出, 后面导入的5个表只有1份数据 : 

digoal=# select * from pg_dist_shard_placement;
 shardid | shardstate | shardlength | nodename | nodeport 
---------+------------+-------------+----------+----------
  102010 |          1 |   145932288 | work01   |     9901
  102010 |          1 |   145932288 | work04   |     9904
  102014 |          1 |   286695424 | work02   |     9902
  102014 |          1 |   286695424 | work03   |     9903
  102016 |          1 |   145932288 | work01   |     9901
  102016 |          1 |   145932288 | work02   |     9902
  102017 |          1 |   286695424 | work01   |     9901
  102017 |          1 |   286695424 | work02   |     9902
  102018 |          1 |   145932288 | work01   |     9901
  102018 |          1 |   145932288 | work04   |     9904
  102020 |          1 |   145932288 | work01   |     9901
  102020 |          1 |   145932288 | work02   |     9902
  102021 |          1 |   286695424 | work01   |     9901
  102021 |          1 |   286695424 | work03   |     9903
  102022 |          1 |   169689088 | work01   |     9901
  102022 |          1 |   169689088 | work04   |     9904
  102023 |          1 |   168288256 | work01   |     9901
  102023 |          1 |   168288256 | work02   |     9902
  102024 |          1 |   168280064 | work01   |     9901
  102024 |          1 |   168280064 | work04   |     9904
  102025 |          1 |   168280064 | work01   |     9901
  102025 |          1 |   168280064 | work02   |     9902
  102026 |          1 |   168296448 | work01   |     9901
  102026 |          1 |   168296448 | work03   |     9903
  102027 |          1 |   103792640 | work01   |     9901
  102027 |          1 |   103792640 | work03   |     9903
  102028 |          1 |   173293568 | work01   |     9901
  102028 |          1 |   173293568 | work04   |     9904
  102029 |          1 |    46702592 | work01   |     9901
  102029 |          1 |    46702592 | work04   |     9904
  102030 |          1 |        8192 | work01   |     9901
  102031 |          1 |    33579008 | work01   |     9901
  102032 |          1 |   143638528 | work01   |     9901
  102033 |          1 |        8192 | work01   |     9901
  102034 |          1 |     1826816 | work01   |     9901
(35 rows)


# 导入数据时调整了2个参数, 介绍如下 : 

Note that you changed two run-time configuration parameters in this example. 
First, you reduced the shard maximum size; 
    this change breaks up staged data into multiple shards and enables parallel execution of analytics queries across these shards. 
Second, you set the replication factor to 1 for the part table; 
    this ensures that only one worker node has this table's shard(s) and helps us demonstrate how shards are moved around during joins.



8. 测试查询 - 1

This simple query computes an aggregate across one year's worth of data. 
The query still needs to scan through the entire table though, as the table is distributed on the order key and doesn't yet have any indexes defined on the shipment date.

digoal=# \timing
Timing is on.
digoal=# SELECT 
    sum(l_extendedprice * l_discount) as revenue
FROM
    lineitem
WHERE
    l_shipdate >= date '1994-01-01' AND
    l_shipdate < date '1994-01-01' + interval '1' year AND
    l_discount between 0.06 - 0.01 AND 0.06 + 0.01 AND
    l_quantity < 24;
    revenue     
----------------
 123141078.2283
(1 row)
Time: 1204.323 ms


中间结果用到了临时表 : 

digoal=# \dt
                List of relations
  Schema   |       Name        | Type  |  Owner   
-----------+-------------------+-------+----------
 pg_temp_2 | pg_merge_job_0076 | table | postgres
digoal=# select * from pg_merge_job_0076 ;
 intermediate_column_0 
-----------------------
         22338213.4033
         21776107.6843
         21903335.4661
         22187630.0276
         21421253.2093
         13514538.4377
(6 rows)



9. 测试查询 - 2

This query includes a join between a large lineitem table and a small part table. 
The distinction between large and small tables is determined by the configuration entry large_table_shard_count; 
and tables whose shard count exceed this value are considered as large.
In this example, the part table's shard(s) are cached on all worker nodes the very first time the user issues a query. 
Subsequent queries that involve the part table then use these cached shards.


目前CitusDB支持大表和小表的JOIN. 大表和大表的JOIN有使用限制, 后面会提到.
CitusDB在处理JOIN时, 大小表的处理方式不一样, 其中小表的数据会拷贝到各个需要用到的Worder节点. 然后JOIN时使用这些拷贝.
CitusDB通过large_table_shard_count来区分大小表, 当表的shard数量>=large_table_shard_count时为大表.
注意大表和大表的JOIN必须在partition key上join, 否则会报错.

digoal=# SELECT
    100.00 *
    sum(case when p_type like 'PROMO%'
             then l_extendedprice * (1 - l_discount)
             else 0 end) /
    sum(l_extendedprice * (1 - l_discount)) AS promo_revenue
FROM
    lineitem,
    part
WHERE
    l_partkey = p_partkey AND
    l_shipdate >= date '1995-09-01' AND
    l_shipdate < date '1995-09-01' + interval '1' month;
    promo_revenue    
---------------------
 16.3807786263955401
(1 row)
Time: 2005.314 ms


# 中间结果用到临时表 : 

digoal=# \dt
                List of relations
  Schema   |       Name        | Type  |  Owner   
-----------+-------------------+-------+----------
 pg_temp_2 | pg_merge_job_0077 | table | postgres
digoal=# select * from pg_merge_job_0077 ;
 intermediate_column_0 | intermediate_column_1 
-----------------------+-----------------------
         79757784.8406 |        492691187.1877
         80940684.2199 |        499015015.2883
         79958247.6519 |        488094732.3602
         79837944.8834 |        486724756.3067
         82862404.5559 |        494397809.0203
         49071739.0784 |        301025828.0639
(6 rows)


# 中间结果每次调用SQL会重新生成

digoal=# SELECT
    100.00 *
    sum(case when p_type like 'PROMO%'
             then l_extendedprice * (1 - l_discount)
             else 0 end) /
    sum(l_extendedprice * (1 - l_discount)) AS promo_revenue
FROM
    lineitem,
    part
WHERE
    l_partkey = p_partkey AND
    l_shipdate >= date '1995-09-01' AND
    l_shipdate < date '1995-09-01' + interval '1' month;
    promo_revenue    
---------------------
 16.3807786263955401
(1 row)

digoal=# \dt
                List of relations
  Schema   |       Name        | Type  |  Owner   
-----------+-------------------+-------+----------
 pg_temp_2 | pg_merge_job_0077 | table | postgres
 pg_temp_2 | pg_merge_job_0078 | table | postgres



# 上面提到大表和大表的JOIN必须在partition key上join, 否则会报错.
# 以上SQL中关联的两个表是part和lineitem, 分别有1个和6个shard.
# 当前的large_table_shard_count=4; 所以以上SQL是小表和大表的JOIN. 

digoal=# select * from pg_dist_shard where logicalrelid='part'::regclass;
 logicalrelid | shardid | shardstorage | shardalias | shardminvalue | shardmaxvalue 
--------------+---------+--------------+------------+---------------+---------------
        16557 |  102031 | t            |            | 1             | 200000
(1 row)
digoal=# select * from pg_dist_shard where logicalrelid='lineitem'::regclass;
 logicalrelid | shardid | shardstorage | shardalias | shardminvalue | shardmaxvalue 
--------------+---------+--------------+------------+---------------+---------------
        16572 |  102027 | t            |            | 5342468       | 6000000
        16572 |  102026 | t            |            | 4275713       | 5342467
        16572 |  102025 | t            |            | 3209632       | 4275712
        16572 |  102024 | t            |            | 2142211       | 3209632
        16572 |  102023 | t            |            | 1075520       | 2142211
        16572 |  102022 | t            |            | 1             | 1075520
(6 rows)


# CitusDB在处理JOIN时, 大小表的处理方式不一样, 其中小表的数据会拷贝到各个需要用到的Worder节点. 然后JOIN时使用这些拷贝.
CitusDB通过large_table_shard_count来区分大小表, 当表的shard数量>=large_table_shard_count时为大表.
注意大表和大表的JOIN必须在partition key上join, 否则会报错.

Citus DB treats large and small tables differently, and replicates a small table's shards to where the large table's shards are in order to perform the query. 
In this example, the part table's shard(s) are cached on all worker nodes the very first time the user issues a query. 
Subsequent queries that involve the part table then use these cached shards.
This model works nicely for queries that join one large and multiple small tables together. 
The model also supports joins between large tables, provided that the tables are already partitioned on the join key. 
For other types of large table joins, Citus DB doesn't yet have any support.



10. 大表与大表的JOIN测试
# 目前不支持两个large table的非partition key 的 join.

digoal=# set large_table_shard_count=1;
SET
digoal=# \set VERBOSITY verbose
digoal=# SELECT                
    100.00 *
    sum(case when p_type like 'PROMO%'
             then l_extendedprice * (1 - l_discount)
             else 0 end) /
    sum(l_extendedprice * (1 - l_discount)) AS promo_revenue
FROM
    lineitem,
    part
WHERE
    l_partkey = p_partkey AND
    l_shipdate >= date '1995-09-01' AND
    l_shipdate < date '1995-09-01' + interval '1' month;
ERROR:  0A000: cannot perform distributed execution on this query
DETAIL:  Large table joins are currently unsupported
LOCATION:  MultiPhysicalPlanCreate, multi_physical_planner.c:150



# 将以上SQL改成partition key的join (l_orderkey = p_partkey) 就可以了.

digoal=# SELECT     
    100.00 *
    sum(case when p_type like 'PROMO%'
             then l_extendedprice * (1 - l_discount)
             else 0 end) /
    sum(l_extendedprice * (1 - l_discount)) AS promo_revenue
FROM
    lineitem,
    part
WHERE
    l_orderkey = p_partkey AND
    l_shipdate >= date '1995-09-01' AND
    l_shipdate < date '1995-09-01' + interval '1' month;
    promo_revenue    
---------------------
 16.8469836269420616
(1 row)
Time: 1905.719 ms



【其他】
1. worker 节点的表名命名规则, 原始表名加shardid后缀.

citusdb@db-172-16-3-150-> psql -h 1.1.1.1 -p 9901 
psql (9.2.1)
Type "help" for help.
digoal=# \dt
                  List of relations
 Schema |          Name           | Type  |  Owner   
--------+-------------------------+-------+----------
 public | customer_reviews_102016 | table | postgres
 public | customer_reviews_102017 | table | postgres
 public | customer_reviews_102018 | table | postgres
 public | customer_reviews_102020 | table | postgres
 public | customer_reviews_102021 | table | postgres
 public | lineitem_102022         | table | postgres
 public | lineitem_102023         | table | postgres
 public | lineitem_102024         | table | postgres
 public | lineitem_102025         | table | postgres
 public | lineitem_102026         | table | postgres
 public | lineitem_102027         | table | postgres
 public | nation_102030           | table | postgres
 public | orders_102028           | table | postgres
 public | orders_102029           | table | postgres
 public | part_102031             | table | postgres
 public | partsupp_102032         | table | postgres
 public | region_102033           | table | postgres
 public | supplier_102034         | table | postgres
(18 rows)

citusdb@db-172-16-3-150-> psql -h 1.1.1.2 -p 9902
psql (9.2.1)
Type "help" for help.
digoal=# \dt
                  List of relations
 Schema |          Name           | Type  |  Owner   
--------+-------------------------+-------+----------
 public | customer_reviews_102016 | table | postgres
 public | customer_reviews_102017 | table | postgres
 public | customer_reviews_102020 | table | postgres
 public | lineitem_102023         | table | postgres
 public | lineitem_102025         | table | postgres
(5 rows)

citusdb@db-172-16-3-150-> psql -h 1.1.1.3 -p 9903
psql (9.2.1)
Type "help" for help.
digoal=# \dt
                  List of relations
 Schema |          Name           | Type  |  Owner   
--------+-------------------------+-------+----------
 public | customer_reviews_102021 | table | postgres
 public | lineitem_102026         | table | postgres
 public | lineitem_102027         | table | postgres
(3 rows)

digoal=# \q
citusdb@db-172-16-3-150-> psql -h 1.1.1.4 -p 9904
psql (9.2.1)
Type "help" for help.
digoal=# \dt
                  List of relations
 Schema |          Name           | Type  |  Owner   
--------+-------------------------+-------+----------
 public | customer_reviews_102018 | table | postgres
 public | lineitem_102022         | table | postgres
 public | lineitem_102024         | table | postgres
 public | orders_102028           | table | postgres
 public | orders_102029           | table | postgres
(5 rows)




2. queries_distributed所有的查询SQL结果如下 : 

citusdb@db-172-16-3-150-> psql -h 127.0.0.1 -U digoal digoal -f ./queries_distributed 
 l_returnflag | l_linestatus |   sum_qty   | sum_base_price  |  sum_disc_price   |     sum_charge      |       avg_qty       |     a
vg_price      |        avg_disc        | count_order 
--------------+--------------+-------------+-----------------+-------------------+---------------------+---------------------+------
--------------+------------------------+-------------
 A            | F            | 37734107.00 |  56586554400.73 |  53758257134.8700 |  55909065222.827692 | 25.5220058532573370 | 38273
.129734621672 | 0.04998529583839761162 |     1478493
 N            | F            |   991417.00 |   1487504710.38 |   1413082168.0541 |   1469649223.194375 | 25.5164719205229835 | 38284
.467760848304 | 0.05009342667421629691 |       38854
 N            | O            | 74476040.00 | 111701729697.74 | 106118230307.6056 | 110367043872.497010 | 25.5022267695849915 | 38249
.117988908270 | 0.04999658605370408037 |     2920374
 R            | F            | 37719753.00 |  56568041380.90 |  53741292684.6040 |  55889619119.831932 | 25.5057936126907707 | 38250
.854626099657 | 0.05000940583012705647 |     1478870
(4 rows)

 l_orderkey | revenue | o_orderdate | o_shippriority 
------------+---------+-------------+----------------
(0 rows)

 n_name | revenue 
--------+---------
(0 rows)

    revenue     
----------------
 123141078.2283
(1 row)

 c_custkey | c_name | revenue | c_acctbal | n_name | c_address | c_phone | c_comment 
-----------+--------+---------+-----------+--------+-----------+---------+-----------
(0 rows)

 l_shipmode | high_line_count | low_line_count 
------------+-----------------+----------------
 MAIL       |            6202 |           9324
 SHIP       |            6200 |           9262
(2 rows)

    promo_revenue    
---------------------
 16.3807786263955401
(1 row)

   revenue    
--------------
 3083843.0578
(1 row)




【参考】
1. http://www.citusdata.com/docs/examples
2. http://blog.163.com/digoal@126/blog/static/1638770402013219840831/


