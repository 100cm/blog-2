PostgreSQL research

Loading Useful Modules in PostgreSQL PLV8 lang

2013-03-14 21:44:30   查看原文>>

PostgreSQL 支持JSON数据类型以来, 自带的函数功能确实太匮乏了, 如果要在PostgreSQL中充分利用JSON的特性, 使用plv8语言是个不错的选择. 同时可以加载很多有趣的javascript模块.
注意PLV8语言是trusted语言如下 : 

digoal=> select * from pg_language ;
 lanname  | lanowner | lanispl | lanpltrusted | lanplcallfoid | laninline | lanvalidator | lanacl 
----------+----------+---------+--------------+---------------+-----------+--------------+--------
 internal |       10 | f       | f            |             0 |         0 |         2246 | 
 c        |       10 | f       | f            |             0 |         0 |         2247 | 
 sql      |       10 | f       | t            |             0 |         0 |         2248 | 
 plpgsql  |       10 | t       | t            |         12670 |     12671 |        12672 | 
 plv8     |       10 | t       | t            |       3484692 |   3484693 |      3484694 | 
 plls     |       10 | t       | t            |       3484701 |   3484702 |      3484703 | 
 plcoffee |       10 | t       | t            |       3484706 |   3484707 |      3484708 | 
(7 rows)


lanpltrusted这列, t表示trusted.

True if this is a trusted language, which means that it is believed not to grant access to anything outside the normal SQL execution environment. Only superusers can create functions in untrusted languages.


所以如果要加载javascript module, 不能直接读取文件系统. 需要先将javascript导入数据库, 然后才能被plv8读取并加载.
例如有两个module : 

underscore : http://underscorejs.org/underscore.js
node-jpath : https://raw.github.com/stsvilik/node-jpath/master/lib/node-jpath.js 


(node-jpath.js需稍加修改)
加载方法如下 : 
1. 首先将脚本下载到本地 : 

curl -o underscore.js http://underscorejs.org/underscore.js
curl -o jpath.js https://raw.github.com/stsvilik/node-jpath/master/lib/node-jpath.js


node-jpath.js的末尾部分需要修改一下 : 

module.exports.select = function(obj, pattern, cfn) {
module.exports.filter = function(obj, pattern, cfn) {


改成

select = function(obj, pattern, cfn) {
filter = function(obj, pattern, cfn) {


这两个模块的用法参考本文末尾的链接.

2. 编译plv8模块参考以下链接
http://blog.163.com/digoal@126/blog/static/1638770402013045395446/

3. 加载下载好的两个模块

su - digoal
psql digoal digoal
create extension plv8;
\set underscore `cat /home/digoal/underscore.js`
\set jpath `cat /home/digoal/jpath.js`


-- 创建表, 用来存储javascript脚本

create table plv8_modules(modname text primary key, load_on_start boolean, code text);


-- 将javascript模块脚本插入数据表

insert into plv8_modules values ('underscore',true,:'underscore'), ('jpath',true,:'jpath');


-- 加载模块的函数

create or replace function public.plv8_startup()
returns void
language plv8
as
$$
load_module = function(modname)
{
    var rows = plv8.execute("SELECT code from plv8_modules " +
                            " where modname = $1", [modname]);
    for (var r = 0; r < rows.length; r++)
    {
        var code = rows[r].code;
        eval("(function() { " + code + "})")();
    }     
};
load_module("underscore"); load_module("jpath");
$$;


-- 测试underscore和node-jpath中的方法.
-- 加载模块, 如果需要使用这两个模块, 必须在每个会话中调用一次plv8_startup, 加载这两个模块.
-- 后面会有方法来自动加载这两个模块

select plv8_startup();


-- test the underscore module's extend function

do language plv8 $$ 
   x = {'a':1}; 
   y=_.extend(x,{'a':2,'b':3},{'b':4,'c':5}); 
   plv8.elog(NOTICE,JSON.stringify(y)); 
$$;
-- 输出
NOTICE:  {"a":2,"b":4,"c":5}
DO


-- test jpath module's filter function

do language plv8 $$
  var jsonData = {
    people: [
        {name: "John", age:26, gender:"male"},
        {name: "Steve", age:24, gender:"male"},
        {name: "Susan", age:22, gender:"female"},
        {name: "Linda", age:30, gender:"female"},
        {name: "Adam", age:32, gender:"male"}
    ]
  };
  //We want to get all males younger then 25
  var match = filter(jsonData, "people[gender=male && age < 25]");
  plv8.elog(NOTICE,JSON.stringify(match));
$$;
-- 输出
NOTICE:  [{"name":"Steve","age":24,"gender":"male"}]
DO



-- 自动加载的方法如下, 首先需要修改plv8_startup函数,

create or replace function public.plv8_startup()
returns void
language plv8
as
$$
// now load all the modules marked for loading on start
// load_on_start值如果是true的, 那么数据库启动时将会自动加载
var rows = plv8.execute("SELECT modname, code from plv8_modules where load_on_start");
for (var r = 0; r < rows.length; r++)
{
 var code = rows[r].code;
 eval("(function() { " + code + "})")();
};
$$;


-- 同时需要修改配置, 让数据库自动加载, plv8的start_proc参数 : 

vi $PGDATA/postgresql.conf
# Add settings for extensions here
plv8.start_proc = 'plv8_startup'


-- 重启数据库

pg_ctl stop -m fast
pg_ctl start


-- 测试是否自动加载

digoal=> -- test the underscore module's extend function
digoal=> do language plv8 $$ 
digoal$>    x = {'a':1}; 
   plv8.elog(NOTICE,JSON.stringify(y)); 
digoal$>    y=_.extend(x,{'a':2,'b':3},{'b':4,'c':5}); 
digoal$>    plv8.elog(NOTICE,JSON.stringify(y)); 
digoal$> $$;
NOTICE:  {"a":2,"b":4,"c":5}
DO
digoal=> do language plv8 $$
digoal$>   var jsonData = {
digoal$>     people: [
digoal$>         {name: "John", age:26, gender:"male"},
digoal$>         {name: "Steve", age:24, gender:"male"},
digoal$>         {name: "Susan", age:22, gender:"female"},
digoal$>         {name: "Linda", age:30, gender:"female"},
digoal$>         {name: "Adam", age:32, gender:"male"}
digoal$>     ]
digoal$>   };
digoal$>   //We want to get all males younger then 25
digoal$>   var match = filter(jsonData, "people[gender=male && age < 25]");
digoal$>   plv8.elog(NOTICE,JSON.stringify(match));
digoal$> $$;
NOTICE:  [{"name":"Steve","age":24,"gender":"male"}]
DO



【参考】
1. Andrew Dunstan's PostgreSQL and Technical blog
2. http://blog.163.com/digoal@126/blog/static/1638770402013045395446/
3. https://github.com/documentcloud/underscore
4. https://github.com/stsvilik/node-jpath

