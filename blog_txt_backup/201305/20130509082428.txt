PostgreSQL research

PostgreSQL 9.3 Add wal_receiver_timeout allows more rapid detection of connection failure

2013-05-09 8:24:28   查看原文>>

Add wal_receiver_timeout parameter to control the WAL receiver timeout (Amit Kapila)
This allows more rapid detection of connection failure.

Improve replication connection timeouts.
Rename replication_timeout to wal_sender_timeout, and add a new setting
called wal_receiver_timeout that does the same at the walreceiver side.
There was previously no timeout in walreceiver, so if the network went down,
for example, the walreceiver could take a long time to notice that the
connection was lost. Now with the two settings, both sides of a replication
connection will detect a broken connection similarly.

It is no longer necessary to manually set wal_receiver_status_interval to
a value smaller than the timeout. Both wal sender and receiver now
automatically send a "ping" message if more than 1/2 of the configured
timeout has elapsed, and it hasn't received any messages from the other end.
Amit Kapila, heavily edited by me.


PostgreSQL 9.3 新增standby端的心跳检测代码, 配置参数命名为wal_receiver_timeout.
同时将服务端的心跳检测参数更名为wal_sender_timeout, 这样在服务端和客户端都有了配置心跳检测的机制.

1. wal_receiver_timeout是一个standby参数, 配置在standby端, 用于检测对端的sender process的心跳的.
在receiver上没有数据传输的情况下会sleep 100毫秒, 并重置ping_sent, 那么接下来将检测心跳.

  67 #define NAPTIME_PER_CYCLE 100   /* max sleep time between cycles (100ms) */
 322         /* Wait a while for data to arrive */
 323         if (walrcv_receive(NAPTIME_PER_CYCLE, &type, &buf, &len))
 324         {
 325             /* Something was received from master, so reset timeout */
 326             last_recv_timestamp = GetCurrentTimestamp();
 327             ping_sent = false;


在没有数据传输的情况下会检测心跳.
最后一次接收到数据的时间和当前时间的差大于wal_receiver_timeout, 则报错.
检测超时的间隔最长为100毫秒. 就是前面提到的NAPTIME_PER_CYCLE. 
当时间超过wal_receiver_timeout的一半还没有收到任何数据, 就会通过XLogWalRcvSendReply发出ping包. 

 349         else
 350         {
 351             /*
 352              * We didn't receive anything new. If we haven't heard anything
 353              * from the server for more than wal_receiver_timeout / 2,
 354              * ping the server. Also, if it's been longer than
 355              * wal_receiver_status_interval since the last update we sent,
 356              * send a status update to the master anyway, to report any
 357              * progress in applying WAL.
 358              */
 359             bool requestReply = false;
 360 
 361             /*
 362              * Check if time since last receive from standby has reached the
 363              * configured limit.
 364              */
 365             if (wal_receiver_timeout > 0)
 366             {
 367                 TimestampTz now = GetCurrentTimestamp();
 368                 TimestampTz timeout;
 369 
 370                 timeout = TimestampTzPlusMilliseconds(last_recv_timestamp,
 371                                                       wal_receiver_timeout);
 372 
 373                 if (now >= timeout)
 374                     ereport(ERROR,
 375                             (errmsg("terminating walreceiver due to timeout")));
 376 
 377                 /*
 378                  * We didn't receive anything new, for half of receiver
 379                  * replication timeout. Ping the server.
 380                  */
 381                 if (!ping_sent)
 382                 {
 383                     timeout = TimestampTzPlusMilliseconds(last_recv_timestamp,
 384                                                           (wal_receiver_timeout/2));
 385                     if (now >= timeout)
 386                     {
 387                         requestReply = true;
 388                         ping_sent = true;
 389                     }
 390                 }
 391             }


ping 包程序 : 

 672 /*
 673  * Send reply message to primary, indicating our current XLOG positions, oldest
 674  * xmin and the current time.
 675  *
 676  * If 'force' is not set, the message is only sent if enough time has
 677  * passed since last status update to reach wal_receiver_status_internal.
 678  * If wal_receiver_status_interval is disabled altogether and 'force' is
 679  * false, this is a no-op.
 680  *
 681  * If 'requestReply' is true, requests the server to reply immediately upon
 682  * receiving this message. This is used for heartbearts, when approaching
 683  * wal_receiver_timeout.
 684  */
 685 static void
 686 XLogWalRcvSendReply(bool force, bool requestReply)
 687 {


2. wal_sender_timeout是一个master参数, 配置在master端, 用于检测对端的receiver process的心跳的.
在服务端和客户端的XLOG传输完了或者没有数据传输的时候会主动检测心跳. 检测的间隔为sleeptime = 1 + (wal_sender_timeout / 10).

[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=6f60fdd7015b032bf49273c99f80913d57eac284
2. wal_receiver_timeout (integer)

Terminate replication connections that are inactive longer than the specified number of milliseconds. This is useful for the receiving standby server to detect a primary node crash or network outage. A value of zero disables the timeout mechanism. This parameter can only be set in the postgresql.conf file or on the server command line. The default value is 60 seconds.


3. wal_sender_timeout (integer)

Terminate replication connections that are inactive longer than the specified number of milliseconds. This is useful for the sending server to detect a standby crash or network outage. A value of zero disables the timeout mechanism. This parameter can only be set in the postgresql.conf file or on the server command line. The default value is 60 seconds.


4. src/backend/replication/walreceiver.c

 361             /*
 362              * Check if time since last receive from standby has reached the
 363              * configured limit.
 364              */
 365             if (wal_receiver_timeout > 0)
 366             {
 367                 TimestampTz now = GetCurrentTimestamp();
 368                 TimestampTz timeout;
 369 
 370                 timeout = TimestampTzPlusMilliseconds(last_recv_timestamp,
 371                                                       wal_receiver_timeout);
 372 
 373                 if (now >= timeout)
 374                     ereport(ERROR,
 375                             (errmsg("terminating walreceiver due to timeout")));
 376 
 377                 /*
 378                  * We didn't receive anything new, for half of receiver
 379                  * replication timeout. Ping the server.
 380                  */
 381                 if (!ping_sent)
 382                 {
 383                     timeout = TimestampTzPlusMilliseconds(last_recv_timestamp,
 384                                                           (wal_receiver_timeout/2));
 385                     if (now >= timeout)
 386                     {
 387                         requestReply = true;
 388                         ping_sent = true;
 389                     }
 390                 }
 391             }


5. src/backend/replication/walsender.c

 735         /*
 736          * We don't block if not caught up, unless there is unsent data
 737          * pending in which case we'd better block until the socket is
 738          * write-ready.  This test is only needed for the case where XLogSend
 739          * loaded a subset of the available data but then pq_flush_if_writable
 740          * flushed it all --- we should immediately try to send more.
 741          */
 742         if (caughtup || pq_is_send_pending())
 743         {
 744             TimestampTz timeout = 0;
 745             long        sleeptime = 10000;      /* 10 s */
 746             int         wakeEvents;
 747 
 748             wakeEvents = WL_LATCH_SET | WL_POSTMASTER_DEATH |
 749                 WL_SOCKET_READABLE | WL_TIMEOUT;
 750 
 751             if (pq_is_send_pending())
 752                 wakeEvents |= WL_SOCKET_WRITEABLE;
 753             else if (wal_sender_timeout > 0 && !ping_sent)
 754             {
 755                 /*
 756                  * If half of wal_sender_timeout has lapsed without receiving
 757                  * any reply from standby, send a keep-alive message to standby
 758                  * requesting an immediate reply.
 759                  */
 760                 timeout = TimestampTzPlusMilliseconds(last_reply_timestamp,
 761                                                       wal_sender_timeout / 2);
 762                 if (GetCurrentTimestamp() >= timeout)
 763                 {
 764                     WalSndKeepalive(true);
 765                     ping_sent = true;
 766                     /* Try to flush pending output to the client */
 767                     if (pq_flush_if_writable() != 0)
 768                         break;
 769                 }
 770             }
 771 
 772             /* Determine time until replication timeout */
 773             if (wal_sender_timeout > 0)
 774             {
 775                 timeout = TimestampTzPlusMilliseconds(last_reply_timestamp,
 776                                                       wal_sender_timeout);
 777                 sleeptime = 1 + (wal_sender_timeout / 10);
 778             }
 779 
 780             /* Sleep until something happens or we time out */
 781             ImmediateInterruptOK = true;
 782             CHECK_FOR_INTERRUPTS();
 783             WaitLatchOrSocket(&MyWalSnd->latch, wakeEvents,
 784                               MyProcPort->sock, sleeptime);
 785             ImmediateInterruptOK = false;
 786 
 787             /*
 788              * Check for replication timeout.  Note we ignore the corner case
 789              * possibility that the client replied just as we reached the
 790              * timeout ... he's supposed to reply *before* that.
 791              */
 792             if (wal_sender_timeout > 0 && GetCurrentTimestamp() >= timeout)
 793             {
 794                 /*
 795                  * Since typically expiration of replication timeout means
 796                  * communication problem, we don't send the error message to
 797                  * the standby.
 798                  */
 799                 ereport(COMMERROR,
 800                         (errmsg("terminating walsender process due to replication timeout")));
 801                 break;
 802             }
 803         }
 804     }


