PostgreSQL research

PostgreSQL 9.3 Collect and use histograms for range types

2013-05-09 13:36:24   查看原文>>

Collect and use histograms for range types (Alexander Korotkov)
PostgreSQL  9.3 增加了对rangetype的统计信息收集, 用于收集range类型的lower和upper值的统计信息.

Collect and use histograms of lower and upper bounds for range types.

This enables selectivity estimation of the <<, >>, &<, &> and && operators,
as well as the normal inequality operators: <, <=, >=, >. "range @> element"
is also supported, but the range-variant @> and <@ operators are not,
because they cannot be sensibly estimated with lower and upper bound
histograms alone. We would need to make some assumption about the lengths of
the ranges for that. Alexander's patch included a separate histogram of
lengths for that, but I left that out of the patch for simplicity. Hopefully
that will be added as a followup patch.

The fraction of empty ranges is also calculated and used in estimation.

Alexander Korotkov, heavily modified by me.

Add cost estimation of range @> and <@ operators.

The estimates are based on the existing lower bound histogram, and a new
histogram of range lengths.

Bump catversion, because the range length histogram now needs to be present
in statistic slot kind 6, or you get an error on @> and <@ queries. (A
re-ANALYZE would be enough to fix that, though)

Alexander Korotkov, with some refactoring by me.



[测试]

digoal=# create table test_range_spgist(ir int4range);
CREATE TABLE
digoal=# insert into test_range_spgist select int4range(g, g+10) from generate_series(1,2000) g;
INSERT 0 2000
digoal=# insert into test_range_spgist select 'empty'::int4range from generate_series(1,500) g;
INSERT 0 500
digoal=# insert into test_range_spgist select int4range(g, g+10000) from generate_series(1,1000) g;
INSERT 0 1000
digoal=# insert into test_range_spgist select 'empty'::int4range from generate_series(1,500) g;
INSERT 0 500
digoal=# insert into test_range_spgist select int4range(NULL,g*10,'(]') from generate_series(1,100) g;
INSERT 0 100
digoal=# insert into test_range_spgist select int4range(g*10,NULL,'(]') from generate_series(1,100) g;
INSERT 0 100
digoal=# insert into test_range_spgist select int4range(g, g+10) from generate_series(1,2000) g;
INSERT 0 2000
digoal=# create index test_range_gist_idx on test_range_spgist using gist (ir);
digoal=# analyze test_range_spgist ;
ANALYZE
digoal=# select * from pg_stats where attname='ir';
-[ RECORD 1 ]----------+------------------
schemaname             | public
tablename              | test_range_spgist
attname                | ir
inherited              | f
null_frac              | 0
avg_width              | 13
n_distinct             | -1
most_common_vals       | 
most_common_freqs      | 
histogram_bounds       | 
correlation            | 
most_common_elems      | 
most_common_elem_freqs | 
elem_count_histogram   | 


histogram_bounds没有数据, 因为rangetype的统计信息没有存储在这里.
而是在RangeBound这个数据结构中, 参考本文末尾.
使用gdb可以跟踪到analyze时调用compute_range_stats.
SESSION A : 

pg93@db-172-16-3-33-> psql
psql (9.3devel)
Type "help" for help.
digoal=# select pg_backend_pid();
 pg_backend_pid 
----------------
          17253



SESSION B : 

pg93@db-172-16-3-33-> gdb
GNU gdb (GDB) Red Hat Enterprise Linux (7.0.1-37.el5)
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
(gdb) attach 17253
Attaching to process 17253
(gdb) b compute_range_stats
Breakpoint 1 at 0x6eeb80: file rangetypes_typanalyze.c, line 97.
(gdb) c
Continuing.

SESSION A : 

digoal=# analyze test_range_spgist;


SESSION B : 

Breakpoint 1, compute_range_stats (stats=0x17763c98, fetchfunc=0x51aab0 <std_fetch_func>, samplerows=30000, totalrows=1006200)
    at rangetypes_typanalyze.c:97
97      {



[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=918eee0c497c88260a2e107318843c9b1947bc6f
2. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=59d0bf9dca58b237902c2fd1507e8bc5d54d4a63
3. src/backend/utils/adt/rangetypes_typanalyze.c

/*
 * range_typanalyze -- typanalyze function for range columns
 */
Datum
range_typanalyze(PG_FUNCTION_ARGS)
{
        VacAttrStats *stats = (VacAttrStats *) PG_GETARG_POINTER(0);
        TypeCacheEntry *typcache;
        Form_pg_attribute attr = stats->attr;

        /* Get information about range type */
        typcache = range_get_typcache(fcinfo, stats->attrtypid);

        if (attr->attstattarget < 0)
        attr->attstattarget = default_statistics_target;

        stats->compute_stats = compute_range_stats;
        stats->extra_data = typcache;
        /* same as in std_typanalyze */
        stats->minrows = 300 * attr->attstattarget;

        PG_RETURN_BOOL(true);
}


4. src/include/utils/rangetypes.h
记录range的边界值, 例如包括 : 值, 是否无限值, 是否包含该值, 是lower还是upper值.
range类型的统计信息应该包括两个RangeBound值, 分别记录lower和upper值.

00059 /* Internal representation of either bound of a range (not what's on disk) */
00060 typedef struct
00061 {
00062     Datum       val;            /* the bound value, if any */
00063     bool        infinite;       /* bound is +/- infinity */
00064     bool        inclusive;      /* bound is inclusive (vs exclusive) */
00065     bool        lower;          /* this is the lower (vs upper) bound */
00066 } RangeBound;


5. src/backend/utils/adt/rangetypes_typanalyze.c

00091 /*
00092  * compute_range_stats() -- compute statistics for a range column
00093  */
00094 static void
00095 compute_range_stats(VacAttrStats *stats, AnalyzeAttrFetchFunc fetchfunc,
00096                     int samplerows, double totalrows)
00097 {
00098     TypeCacheEntry *typcache = (TypeCacheEntry *) stats->extra_data;
00099     bool        has_subdiff = OidIsValid(typcache->rng_subdiff_finfo.fn_oid);
00100     int         null_cnt = 0;
00101     int         non_null_cnt = 0;
00102     int         non_empty_cnt = 0;
00103     int         empty_cnt = 0;
00104     int         range_no;
00105     int         slot_idx;
00106     int         num_bins = stats->attr->attstattarget;
00107     int         num_hist;
00108     float8     *lengths;
00109     RangeBound *lowers, *uppers;
00110     double      total_width = 0;
00111 
00112     /* Allocate memory to hold range bounds and lengths of the sample ranges. */
00113     lowers = (RangeBound *) palloc(sizeof(RangeBound) * samplerows);
00114     uppers = (RangeBound *) palloc(sizeof(RangeBound) * samplerows);
00115     lengths = (float8 *) palloc(sizeof(float8) * samplerows);


略...
Flag Counter
