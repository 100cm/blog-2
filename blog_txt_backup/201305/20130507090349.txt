PostgreSQL research

PostgreSQL 9.3 Support unlogged GiST index

2013-05-07 9:03:49   查看原文>>

Support unlogged GiST index.

The reason this wasn't supported before was that GiST indexes need an
increasing sequence to detect concurrent page-splits. In a regular WAL-
logged GiST index, the LSN of the page-split record is used for that
purpose, and in a temporary index, we can get away with a backend-local
counter. Neither of those methods works for an unlogged relation.

To provide such an increasing sequence of numbers, create a "fake LSN"
counter that is saved and restored across shutdowns. On recovery, unlogged
relations are blown away, so the counter doesn't need to survive that
either.
Jeevan Chalke, based on discussions with Robert Haas, Tom Lane and me.


[测试]
PostgreSQL 9.2 : 

pg92@db-172-16-3-33-> psql
psql (9.2.4)
digoal=# create unlogged table test_range_spgist(ir int4range);
CREATE TABLE
digoal=# \set VERBOSITY verbose
digoal=# create index test_range_gist_idx on test_range_spgist using gist (ir);
ERROR:  0A000: unlogged GiST indexes are not supported
LOCATION:  gistbuild, gistbuild.c:169

PostgreSQL 9.3 : 

pg93@db-172-16-3-33-> psql
psql (9.3devel)
digoal=# create unlogged table test_range_spgist(ir int4range);
CREATE TABLE
digoal=# create index test_range_gist_idx on test_range_spgist using gist (ir);
CREATE INDEX


pg93@db-172-16-3-33-> pg_controldata 
Fake LSN counter for unlogged rels:   0/1

[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=62401db45c4feff9be296fa78a8bb7b9947d69de
2. fake LSN

diff --git a/src/include/catalog/pg_control.h b/src/include/catalog/pg_control.h
index 0c647e7..306d188 100644 (file)
--- a/src/include/catalog/pg_control.h
+++ b/src/include/catalog/pg_control.h
@@ -21,7 +21,7 @@
 
 
 /* Version identifier for this pg_control format */
-#define PG_CONTROL_VERSION 934
+#define PG_CONTROL_VERSION 935
 
 /*
  * Body of CheckPoint XLOG records.  This is declared here because we keep
@@ -126,6 +126,8 @@ typedef struct ControlFileData
 
    CheckPoint  checkPointCopy; /* copy of last check point record */
 
+   XLogRecPtr  unloggedLSN;    /* current fake LSN value, for unlogged rels */
+
    /*
     * These two values determine the minimum point we must recover up to
     * before starting up:


