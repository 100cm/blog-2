PostgreSQL research

PostgreSQL gin index fastupdate performance tuning case

2013-05-16 16:08:32   查看原文>>

在使用PostgreSQL gin索引时, 发现插入速度很慢的现象.
来看一个测试 : 

create table trgm_test(id serial4 primary key, info text); 
create index trgm_test_gin on trgm_test using gin (info gin_trgm_ops);


测试脚本 : 

vi ins.sql
insert into trgm_test (info) values(md5(random()::text));
pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 1 -T 60


# 测试过程中查看, 基本上pending_pages不会超过132.
# 具体的原因见分析部分.

digoal=# show work_mem;
 work_mem 
----------
 1MB
(1 row)
digoal=# show autovacuum;
 autovacuum 
------------
 on
(1 row)
digoal=# select 1024/8;
 ?column? 
----------
      128
(1 row)
digoal=# select * from pgstatginindex('trgm_test_gin');
 version | pending_pages | pending_tuples
---------+---------------+----------------
       1 |           134 |            837
(1 row)
digoal=# \watch 1
 Watch every 1s Thu May 16 15:10:15 2013

 version | pending_pages | pending_tuples
---------+---------------+----------------
       1 |             7 |             83
(1 row)
 Watch every 1s Thu May 16 15:10:16 2013

 version | pending_pages | pending_tuples
---------+---------------+----------------
       1 |           131 |            852
(1 row)
 Watch every 1s Thu May 16 15:10:17 2013

 version | pending_pages | pending_tuples
---------+---------------+----------------
       1 |            51 |            459
(1 row)
 Watch every 1s Thu May 16 15:10:18 2013
 version | pending_pages | pending_tuples
---------+---------------+----------------
       1 |           133 |            893
(1 row)
 Watch every 1s Thu May 16 15:10:19 2013

 version | pending_pages | pending_tuples
---------+---------------+----------------
       1 |           132 |            827
(1 row)
 Watch every 1s Thu May 16 15:10:20 2013

 version | pending_pages | pending_tuples
---------+---------------+----------------
       1 |            50 |            347
(1 row)
 Watch every 1s Thu May 16 15:10:21 2013

 version | pending_pages | pending_tuples
---------+---------------+----------------
       1 |           135 |            772
(1 row)


测试结果 : 

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 1 -T 60
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 1
duration: 60 s
number of transactions actually processed: 46369
tps = 758.790984 (including connections establishing)
tps = 759.240709 (excluding connections establishing)
statement latencies in milliseconds:
        20.930864       insert into trgm_test (info) values(md5(random()::text));


tps只有758. 

原因分析 : 

57.3.1. GIN Fast Update Technique
Updating a GIN index tends to be slow because of the intrinsic nature of inverted indexes: inserting or updating one heap row can cause many inserts into the index (one for each key extracted from the indexed item). 
因为插入一行, 可能会产生很多个gin条目, 因此gin的索引更新会是一个瓶颈.
为了加快gin索引的更新速度, 从8.4开始, gin引入了临时空间的方法, 也就是gin的条目先临时存放到一个内存空间中.
As of PostgreSQL 8.4, GIN is capable of postponing much of this work by inserting new tuples into a temporary, unsorted list of pending entries. 
When the table is vacuumed, or if the pending list becomes too large (larger than work_mem), 
当临时的未排序的list大于work_mem或者表被vacuum时, 这些条目采用batch的方式写入GIN索引数据结构中.
the entries are moved to the main GIN data structure using the same bulk insert techniques used during initial index creation. 
This greatly improves GIN index update speed, even counting the additional vacuum overhead. Moreover the overhead work can be done by a background process instead of in foreground query processing.
主要的缺点是, 当临时空间中的数据量很大时, 查询速度会变慢, 因为需要查询gin索引同时还需要查询临时空间结构(未排序). 
The main disadvantage of this approach is that searches must scan the list of pending entries in addition to searching the regular index, and so a large list of pending entries will slow searches significantly. 
另一个缺点是, 触发too large(也就是超出work_mem时)batch update的那个插入会变得很慢.就是说当work_mem满了的时候, 后续的插入无法利用work_mem了, 只有等batch update完毕, work_mem清除了才会变快.
Another disadvantage is that, while most updates are fast, an update that causes the pending list to become "too large" will incur an immediate cleanup cycle and thus be much slower than other updates. Proper use of autovacuum can minimize both of these problems.
如果要有比较均衡的速度, 最好使用autovacuum, 在work_mem满之前触发gin batch update.
If consistent response time is more important than update speed, use of pending entries can be disabled by turning off the FASTUPDATE storage parameter for a GIN index. See CREATE INDEX for details.


上面我们看到pending_pages最高只达到130多, 马上又会降下去.
原因是存放pending entries的空间达到work_mem定义的大小了, 到达后会执行batch gin update.
因此优化的简单办法就是提高work_mem.
(建议细化到会话级别的配置, 或者用户级别, 或者用户加数据库级别, 不太推荐global级别的配置.)
本例配置digoal用户连接digoal数据库的work_mem=10240MB;

digoal=# alter role digoal in database digoal set work_mem='10240MB';
ALTER ROLE


然后再进行测试 : 

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 1 -T 60
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 1
duration: 60 s
number of transactions actually processed: 1175152
tps = 18963.009857 (including connections establishing)
tps = 18973.793589 (excluding connections establishing)
statement latencies in milliseconds:
        0.842189        insert into trgm_test (info) values(md5(random()::text));


测试结束后查看 : 

digoal=# select * from pgstatginindex('trgm_test_gin');
 version | pending_pages | pending_tuples 
---------+---------------+----------------
       1 |        238767 |        1175152
(1 row)
# 注意pgbench查看到的真实处理的事务数和pending_tuples一致, 原因是work_mem被调整到10GB了, 完全可以放下这些tuple.
# 因此没有触发batch update
digoal=# vacuum verbose trgm_test ;
INFO:  vacuuming "public.trgm_test"
INFO:  index "trgm_test_pkey" now contains 1175152 row versions in 3224 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.00u sec elapsed 0.01 sec.
INFO:  index "trgm_test_gin" now contains 1175152 row versions in 274998 pages
DETAIL:  0 index row versions were removed.
238767 index pages have been deleted, 238767 are currently reusable.
CPU 5.68s/20.41u sec elapsed 32.65 sec.
INFO:  "trgm_test": found 0 removable, 1175152 nonremovable row versions in 9800 out of 9800 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 5.75s/20.51u sec elapsed 32.82 sec.
INFO:  vacuuming "pg_toast.pg_toast_26012"
INFO:  index "pg_toast_26012_index" now contains 0 row versions in 1 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
INFO:  "pg_toast_26012": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM
digoal=# select * from pgstatginindex('trgm_test_gin');
 version | pending_pages | pending_tuples 
---------+---------------+----------------
       1 |             0 |              0
(1 row)
vacuum结束后pengding tuples全部更新到gin索引了.
digoal=# \di+ trgm_test_gin
                               List of relations
 Schema |     Name      | Type  |  Owner   |   Table   |  Size   | Description
--------+---------------+-------+----------+-----------+---------+-------------
 public | trgm_test_gin | index | postgres | trgm_test | 2149 MB |
(1 row)


临时段的信息并不是存储在内存中, 因为数据库重启后这部分信息不会丢失.

digoal=# select * from pgstatginindex('trgm_test_gin');
 version | pending_pages | pending_tuples 
---------+---------------+----------------
       1 |        229168 |        1548960
(1 row)
pg93@db-172-16-3-33-> pg_ctl stop -m fast
waiting for server to shut down.......................... done
server stopped
pg93@db-172-16-3-33-> pg_ctl start
server starting
pg93@db-172-16-3-33-> LOG:  00000: loaded library "pg_stat_statements"
LOCATION:  load_libraries, miscinit.c:1296
digoal=# select * from pgstatginindex('trgm_test_gin');
 version | pending_pages | pending_tuples 
---------+---------------+----------------
       1 |        229168 |        1548960
(1 row)
digoal=# vacuum verbose trgm_test ;
INFO:  vacuuming "public.trgm_test"
INFO:  index "trgm_test_pkey" now contains 2724112 row versions in 7471 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.02s/0.00u sec elapsed 0.03 sec.
INFO:  index "trgm_test_gin" now contains 2723798 row versions in 305968 pages
DETAIL:  0 index row versions were removed.
229168 index pages have been deleted, 229168 are currently reusable.
CPU 5.22s/36.42u sec elapsed 42.03 sec.
INFO:  "trgm_test": found 0 removable, 1550032 nonremovable row versions in 12923 out of 22707 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 5.35s/36.56u sec elapsed 42.30 sec.
INFO:  vacuuming "pg_toast.pg_toast_26012"
INFO:  index "pg_toast_26012_index" now contains 0 row versions in 1 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
INFO:  "pg_toast_26012": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM


gin索引数据结构. 包含了metapage, btree of key entries, posting tree pages, list pages.

A GIN index contains : 
1. a metapage, 
2. a btree of key entries, 
3. and possibly "posting tree" pages, which hold the overflow when a key entry acquires too many heap tuple pointers to fit in a btree page. 
4. Additionally, if the fast-update feature is enabled, there can be "list pages" holding "pending" key entries that haven't yet been merged into the main btree.  
The list pages have to be scanned linearly when doing a search, so the pending
entries should be merged into the main btree before there get to be too
many of them.  The advantage of the pending list is that bulk insertion of
a few thousand entries can be much faster than retail insertion.  (The win
comes mainly from not having to do multiple searches/insertions when the
same key appears in multiple new heap tuples.)


00056 typedef struct GinMetaPageData
00057 {
00058     /*
00059      * Pointers to head and tail of pending list, which consists of GIN_LIST
00060      * pages.  These store fast-inserted entries that haven't yet been moved
00061      * into the regular GIN structure.
00062      */
00063     BlockNumber head;
00064     BlockNumber tail;
00065
00066     /*
00067      * Free space in bytes in the pending list's tail page.
00068      */
00069     uint32      tailFreeSize;
00070
00071     /*
00072      * We store both number of pages and number of heap tuples that are in the
00073      * pending list.
00074      */
00075     BlockNumber nPendingPages;
00076     int64       nPendingHeapTuples;
00077
00078     /*
00079      * Statistics for planner use (accurate as of last VACUUM)
00080      */
00081     BlockNumber nTotalPages;
00082     BlockNumber nEntryPages;
00083     BlockNumber nDataPages;
00084     int64       nEntries;
00085
00086     /*
00087      * GIN version number (ideally this should have been at the front, but too
00088      * late now.  Don't move it!)
00089      *
00090      * Currently 1 (for indexes initialized in 9.1 or later)
00091      *
00092      * Version 0 (indexes initialized in 9.0 or before) is compatible but may
00093      * be missing null entries, including both null keys and placeholders.
00094      * Reject full-index-scan attempts on such indexes.
00095      */
00096     int32       ginVersion;
00097 } GinMetaPageData;

pending-list写函数见参考部分.
使用gdb可以跟踪到这个函数.

[参考]
1. http://www.postgresql.org/docs/devel/static/gin-implementation.html#GIN-FAST-UPDATE
2. http://blog.163.com/digoal@126/blog/static/163877040201341615052957/
3. http://blog.163.com/digoal@126/blog/static/1638770402013416102141801/
4. http://www.postgresql.org/docs/devel/static/gin-tips.html
5. src/backend/access/gin/README
6. src/include/access/gin_private.h
7. src/backend/access/gin/ginfast.c

00040 /*
00041  * Build a pending-list page from the given array of tuples, and write it out.
00042  *
00043  * Returns amount of free space left on the page.
00044  */
00045 static int32
00046 writeListPage(Relation index, Buffer buffer,
00047               IndexTuple *tuples, int32 ntuples, BlockNumber rightlink)
00048 {
00049     Page        page = BufferGetPage(buffer);
00050     int32       i,
00051                 freesize,
00052                 size = 0;
00053     OffsetNumber l,
00054                 off;
00055     char       *workspace;
00056     char       *ptr;
00057
00058     /* workspace could be a local array; we use palloc for alignment */
00059     workspace = palloc(BLCKSZ);
00060
00061     START_CRIT_SECTION();
00062
00063     GinInitBuffer(buffer, GIN_LIST);
00064
00065     off = FirstOffsetNumber;
00066     ptr = workspace;
00067
00068     for (i = 0; i < ntuples; i++)
00069     {
00070         int         this_size = IndexTupleSize(tuples[i]);
00071
00072         memcpy(ptr, tuples[i], this_size);
00073         ptr += this_size;
00074         size += this_size;
00075
00076         l = PageAddItem(page, (Item) tuples[i], this_size, off, false, false);
00077
00078         if (l == InvalidOffsetNumber)
00079             elog(ERROR, "failed to add item to index page in \"%s\"",
00080                  RelationGetRelationName(index));
00081
00082         off++;
00083     }
00084
00085     Assert(size <= BLCKSZ);     /* else we overran workspace */
00086
00087     GinPageGetOpaque(page)->rightlink = rightlink;
00088
00089     /*
00090      * tail page may contain only whole row(s) or final part of row placed on
00091      * previous pages (a "row" here meaning all the index tuples generated for
00092      * one heap tuple)
00093      */
00094     if (rightlink == InvalidBlockNumber)
00095     {
00096         GinPageSetFullRow(page);
00097         GinPageGetOpaque(page)->maxoff = 1;
00098     }
00099     else
00100     {
00101         GinPageGetOpaque(page)->maxoff = 0;
00102     }
00103
00104     MarkBufferDirty(buffer);
00105
00106     if (RelationNeedsWAL(index))
00107     {
00108         XLogRecData rdata[2];
00109         ginxlogInsertListPage data;
00110         XLogRecPtr  recptr;
00111
00112         data.node = index->rd_node;
00113         data.blkno = BufferGetBlockNumber(buffer);
00114         data.rightlink = rightlink;
00115         data.ntuples = ntuples;
00116
00117         rdata[0].buffer = InvalidBuffer;
00118         rdata[0].data = (char *) &data;
00119         rdata[0].len = sizeof(ginxlogInsertListPage);
00120         rdata[0].next = rdata + 1;
00121
00122         rdata[1].buffer = buffer;
00123         rdata[1].buffer_std = true;
00124         rdata[1].data = workspace;
00125         rdata[1].len = size;
00126         rdata[1].next = NULL;
00127
00128         recptr = XLogInsert(RM_GIN_ID, XLOG_GIN_INSERT_LISTPAGE, rdata);
00129         PageSetLSN(page, recptr);
00130     }
00131
00132     /* get free space before releasing buffer */
00133     freesize = PageGetExactFreeSpace(page);
00134
00135     UnlockReleaseBuffer(buffer);
00136
00137     END_CRIT_SECTION();
00138
00139     pfree(workspace);
00140
00141     return freesize;
00142 }

