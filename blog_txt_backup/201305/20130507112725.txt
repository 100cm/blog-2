PostgreSQL research

PostgreSQL 9.3 Improve performance of NUMERIC calculations?

2013-05-07 11:27:25   查看原文>>

Speed up operations on numeric, mostly by avoiding palloc() overhead.

In many functions, a NumericVar was initialized from an input Numeric, to be
passed as input to a calculation function. When the NumericVar is not
modified, the digits array of the NumericVar can point directly to the digits
array in the original Numeric, and we can avoid a palloc() and memcpy(). Add
init_var_from_num() function to initialize a var like that.

Remove dscale argument from get_str_from_var(), as all the callers just
passed the dscale of the variable. That means that the rounding it used to
do was not actually necessary, and get_str_from_var() no longer scribbles on
its input. That makes it safer in general, and allows us to use the new
init_var_from_num() function in e.g numeric_out().

Also modified numericvar_to_int8() to no scribble on its input either. It
creates a temporary copy to avoid that. To compensate, the callers no longer
need to create a temporary copy, so the net # of pallocs is the same, but this
is nicer.

In the passing, use a constant for the number 10 in get_str_from_var_sci(),
when calculating 10^exponent. Saves a palloc() and some cycles to convert
integer 10 to numeric.

Original patch by Kyotaro HORIGUCHI, with further changes by me. Reviewed
by Pavel Stehule.


涉及的几个函数参考本文末尾部分, 针对这几个函数的referenced by进行测试.
从gdb跟踪来看, 确实调用了更新过的函数, 但是未发现有性能提升.

[测试1]
-- pgbench脚本

 vi sel.sql
\setrandom i 1 1000000
select numeric_add(:i, :i);


-- PostgreSQL 9.2 : 

pg92@db-172-16-3-33-> pgbench -M prepared -f ./sel.sql -n -r -h $PGDATA -U postgres -c 16 -j 4 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 8514278
tps = 141892.123178 (including connections establishing)
tps = 141950.180415 (excluding connections establishing)
statement latencies in milliseconds:
        0.001242        \setrandom i 1 1000000
        0.110091        select numeric_add(:i, :i);


-- PostgreSQL 9.3 : 

pg93@db-172-16-3-33-> pgbench -M prepared -f ./sel.sql -n -r -h $PGDATA -U postgres -c 16 -j 4 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 8558332
tps = 142629.774019 (including connections establishing)
tps = 142686.376474 (excluding connections establishing)
statement latencies in milliseconds:
        0.001244        \setrandom i 1 1000000
        0.109517        select numeric_add(:i, :i);


-- gdb 9.3

(gdb) b init_var_from_num
Breakpoint 1 at 0x68ba50: file numeric.c, line 3400.
(gdb) c
Continuing.
Breakpoint 1, init_var_from_num (num=0xcc3bc60, dest=0x7fffab7c1350) at numeric.c:3400
3400            dest->ndigits = NUMERIC_NDIGITS(num);



[测试2]
-- pgbench脚本

 vi sel.sql
select numeric_out(1.1);


-- PostgreSQL 9.2 : 

pg92@db-172-16-3-33-> pgbench -M prepared -f ./sel.sql -n -r -h $PGDATA -U postgres -c 16 -j 4 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 12048102
tps = 200786.671118 (including connections establishing)
tps = 200865.128186 (excluding connections establishing)
statement latencies in milliseconds:
        0.078412        select numeric_out(1.1);


-- PostgreSQL 9.3 : 

pg93@db-172-16-3-33-> pgbench -M prepared -f ./sel.sql -n -r -h $PGDATA -U postgres -c 16 -j 4 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 11456116
tps = 190919.445809 (including connections establishing)
tps = 190993.391526 (excluding connections establishing)
statement latencies in milliseconds:
        0.082437        select numeric_out(1.1);


-- gdb 9.3

(gdb) delete b 1
(gdb) b get_str_from_var
Breakpoint 2 at 0x68cf90: file numeric.c, line 3440.
(gdb) c
Continuing.
Breakpoint 2, get_str_from_var (var=0x7fffab7c1350) at numeric.c:3440
3440    {


[测试3]
-- pgbench脚本

 vi sel.sql
select numeric_power(1.111,2.222);


-- PostgreSQL 9.2 : 

pg92@db-172-16-3-33-> pgbench -M prepared -f ./sel.sql -n -r -h $PGDATA -U postgres -c 16 -j 4 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 11958466
tps = 199291.597475 (including connections establishing)
tps = 199365.428964 (excluding connections establishing)
statement latencies in milliseconds:
        0.079041        select numeric_power(1.111,2.222);


-- PostgreSQL 9.3 : 

pg93@db-172-16-3-33-> pgbench -M prepared -f ./sel.sql -n -r -h $PGDATA -U postgres -c 16 -j 4 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 11796137
tps = 196587.712907 (including connections establishing)
tps = 196669.655802 (excluding connections establishing)
statement latencies in milliseconds:
        0.080078        select numeric_power(1.111,2.222);


[测试4]
-- pgbench脚本

 vi sel.sql
select to_char(1.1234,'999999.999999');


-- PostgreSQL 9.2 : 

pg92@db-172-16-3-33-> pgbench -M prepared -f ./sel.sql -n -r -h $PGDATA -U postgres -c 16 -j 4 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 11041538
tps = 184010.780596 (including connections establishing)
tps = 184073.425697 (excluding connections establishing)
statement latencies in milliseconds:
        0.085712        select to_char(1.1234,'999999.999999');


-- PostgreSQL 9.3 : 

pg93@db-172-16-3-33-> pgbench -M prepared -f ./sel.sql -n -r -h $PGDATA -U postgres -c 16 -j 4 -T 60 postgres
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 10818389
tps = 180290.386407 (including connections establishing)
tps = 180363.515780 (excluding connections establishing)
statement latencies in milliseconds:
        0.087429        select to_char(1.1234,'999999.999999');



[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=5cb0e335976befdcedd069c59dd3858fb3e649b3
2. src/backend/utils/adt/numeric.c
3. 

static void init_var_from_num   (       Numeric         num,
NumericVar *    dest     
)                        [static]
Definition at line 3398 of file numeric.c.

References NumericVar::buf, NumericVar::digits, NumericVar::dscale, NumericVar::ndigits, NUMERIC_DIGITS, NUMERIC_DSCALE, NUMERIC_NDIGITS, NUMERIC_SIGN, NUMERIC_WEIGHT, NumericVar::sign, and NumericVar::weight.

Referenced by compute_bucket(), numeric_add(), numeric_ceil(), numeric_div(), numeric_div_trunc(), numeric_exp(), numeric_floor(), numeric_inc(), numeric_int2(), numeric_int4(), numeric_int8(), numeric_ln(), numeric_log(), numeric_mod(), numeric_mul(), numeric_out(), numeric_out_sci(), numeric_power(), numeric_send(), numeric_sqrt(), numeric_stddev_internal(), and numeric_sub().

{
    dest->ndigits = NUMERIC_NDIGITS(num);
    dest->weight = NUMERIC_WEIGHT(num);
    dest->sign = NUMERIC_SIGN(num);
    dest->dscale = NUMERIC_DSCALE(num);
    dest->digits = NUMERIC_DIGITS(num);
    dest->buf = NULL;   /* digits array is not palloc'd */
}


4. 

static char * get_str_from_var  (       NumericVar *    var      )       [static]
Definition at line 3439 of file numeric.c.

References DEC_DIGITS, NumericVar::digits, NumericVar::dscale, NumericVar::ndigits, NUMERIC_NEG, palloc(), NumericVar::sign, and NumericVar::weight.

Referenced by get_str_from_var_sci(), numeric_out(), and numericvar_to_double_no_overflow().


5. 

static bool numericvar_to_int8  (       NumericVar *    var,
int64 *         result   
)                        [static]
Definition at line 3840 of file numeric.c.

References Assert, NumericVar::digits, free_var(), init_var, NBASE, NumericVar::ndigits, round_var(), set_var_from_var(), NumericVar::sign, strip_var(), val, and NumericVar::weight.

Referenced by numeric_int2(), numeric_int8(), numericvar_to_int4(), and power_var().


6. 

static char * get_str_from_var_sci      (       NumericVar *    var,
int     rscale   
)                        [static]
Definition at line 3592 of file numeric.c.

References DEC_DIGITS, NumericVar::digits, div_var(), free_var(), get_str_from_var(), init_var, NumericVar::ndigits, palloc(), pfree(), power_var_int(), snprintf(), and NumericVar::weight.

Referenced by numeric_out_sci().


