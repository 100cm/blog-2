PostgreSQL research

Implement PostgreSQL's Server Prepared Statements

2010-10-28 18:18:30   查看原文>>

  【注】
  原文地址: http://jdbc.postgresql.org/documentation/84/server-prepare.html
  Prepare Statement在数据库中的应用较为广泛，主要被来降低类似SQL的解析和计划开销(parse和plan是比较消耗CPU资源的动作,提高SQL语句的复用率可以有效的降低数据库服务器的CPU开销)。
自从PostgreSQL 7.3版本以来,PostgreSQL开始支持Prepared Statements,不过7.3只做到了SQL级别，没有做到协议级别，也就是说通过PREPARE和EXECUTE语句来实现PREPARED STATEMENT。自PostgreSQL7.4以及以后的PostgreSQL版本开始支持协议级别的PREPARED STATEMENT。
  需要注意的是SQL级别的PREPARED STATEMENT将丢失返回结果，如ResultSet metadata 和 row update counts.使用V3协议的话可以避免结果丢失，但是只支持7.4及以上版本的PG。
  实现服务端PREPARED STATEMENT的方法比较多，常用的方法是设置PreparedStatement的阀值，这种方法利用了内部计算器来跟踪语句的执行次数，当执行次数达到设定的阀值的时候，将启用服务端PREPARED STATEMENT。
  使用服务端PREPARED STATEMENT的好处已经显而易见了，一句SQL只会PARSE,PLAN一次。因此需要注意，PARSE,PLAN后面设定的参数（例如用来改变COST值的参数）对已经PARSE,PLAN过的SQL将不起作用。小心使用全局prepared statement.下面会举例说明。
  例:使用服务端prepared statements,设置阀值=3

import java.sql.*;  public class ServerSidePreparedStatement {   public static void main(String args[]) throws Exception  {   Class.forName("org.postgresql.Driver");   String url = "jdbc:postgresql://localhost:5432/test";   Connection conn = DriverManager.getConnection(url,"test","");    PreparedStatement pstmt = conn.prepareStatement("SELECT ?");    // cast to the pg extension interface   org.postgresql.PGStatement pgstmt = (org.postgresql.PGStatement)pstmt;    // on the third execution start using server side statements   pgstmt.setPrepareThreshold(3);    for (int i=1; i<=5; i++)   {    pstmt.setInt(1,i);    boolean usingServerPrepare = pgstmt.isUseServerPrepare();    ResultSet rs = pstmt.executeQuery();    rs.next();    System.out.println("Execution: "+i+", Used server side: " + usingServerPrepare + ", Result: "+rs.getInt(1));    rs.close();   }    pstmt.close();   conn.close();  } }

输出结果如下:

Execution: 1, Used server side: false, Result: 1 Execution: 2, Used server side: false, Result: 2 Execution: 3, Used server side: true, Result: 3 Execution: 4, Used server side: true, Result: 4 Execution: 5, Used server side: true, Result: 5
表明同一SQL达到设置好的三次阀值后启用服务端prepared statements。
  上面这个例子的用法对于需要移植的代码来说不是太理想，下面再列举一些使用prepared statement的方法,方便各种场合使用:
// pg extension interfaces org.postgresql.PGConnection pgconn; org.postgresql.PGStatement pgstmt;  // set a prepared statement threshold for connections created from this url String url = "jdbc:postgresql://localhost:5432/test?prepareThreshold=3";  // see that the connection has picked up the correct threshold from the url Connection conn = DriverManager.getConnection(url,"test",""); pgconn = (org.postgresql.PGConnection)conn; System.out.println(pgconn.getPrepareThreshold()); // Should be 3  // see that the statement has picked up the correct threshold from the connection PreparedStatement pstmt = conn.prepareStatement("SELECT ?"); pgstmt = (org.postgresql.PGStatement)pstmt; System.out.println(pgstmt.getPrepareThreshold()); // Should be 3  // change the connection's threshold and ensure that new statements pick it up pgconn.setPrepareThreshold(5); PreparedStatement pstmt = conn.prepareStatement("SELECT ?"); pgstmt = (org.postgresql.PGStatement)pstmt; System.out.println(pgstmt.getPrepareThreshold()); // Should be 5 



