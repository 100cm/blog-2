PostgreSQL research

pgpool-II md5 auth configure attention

2014-10-08 11:47:11   查看原文>>

使用pgpool-II后, 密码认证配置需要注意以下问题 : 
1. pg_hba.conf, pool_hba.conf, pool_passwd的配置. (只有当pg_hba.conf, pool_hba.conf开启了md5, 并且在正确的路径配置了正确的pool_passwd文件才能正常的完成md5认证.)
2. pool_passwd文件的位置.
3. 密码文件的格式, 属性(owner, group), 以及权限.
4. 密码文件的访问权限最好是400.


I created pool_hba.conf and pool_passwd to enable md5 authentication through pgpool-II but it does not work. Why?

    Probably you made mistake somewhere. For your help here is a table which describes error patterns depending on the setting of pg_hba.conf, pool_hba.conf and pool_passwd.

    ┌───────────┬─────────────┬───────────┬──────────────────────────────────────────────────────────────────────────────────┐
    │pg_hba.conf│pool_hba.conf│pool_passwd│result                                                                            │
    ├───────────┼─────────────┼───────────┼──────────────────────────────────────────────────────────────────────────────────┤
    │md5        │md5          │yes        │md5 auth                                                                          │
    ├───────────┼─────────────┼───────────┼──────────────────────────────────────────────────────────────────────────────────┤
    │md5        │md5          │no         │"MD5" authentication with pgpool failed for user "XX"                             │
    ├───────────┼─────────────┼───────────┼──────────────────────────────────────────────────────────────────────────────────┤
    │md5        │trust        │yes/no     │MD5 authentication is unsupported in replication, master-slave and parallel mode  │
    ├───────────┼─────────────┼───────────┼──────────────────────────────────────────────────────────────────────────────────┤
    │trust      │md5          │yes        │no auth                                                                           │
    ├───────────┼─────────────┼───────────┼──────────────────────────────────────────────────────────────────────────────────┤
    │trust      │md5          │no         │"MD5" authentication with pgpool failed for user "XX"                             │
    ├───────────┼─────────────┼───────────┼──────────────────────────────────────────────────────────────────────────────────┤
    │trust      │trust        │yes/no     │no auth                                                                           │
    └───────────┴─────────────┴───────────┴──────────────────────────────────────────────────────────────────────────────────┘

为了确保搜索到正确路径下的pool_passwd 文件, 建议使用-n参数启动pgpool, 或者-f使用相对路径. 
如果未使用-n , 并且-f使用了绝对路径的话, 那么会在根目录寻找pool_passwd文件.
可以使用http://www.pgpool.net/pipermail/pgpool-general/2013-May/001773.html提供的方法确认打开的pool_passwd文件是哪个, 当然也可以使用lsof来查看.

I cannot use MD5 authentication if start pgpool without -n option. Why?

    You must have given -f option as a relative path: i.e. "-f pgpool.conf", rather than full path: i.e. "-f /usr/local/etc/pgpool.conf". Pgpool tries to locate the full path of pool_passwd (which is neccesary for MD5 auth) from pgpool.conf path. This is fine with -n option. However if pgpool starts without -n option,
    it changes current directory to "/", which is neccessary processs for daemonizing. As a result, pgpool tries to open "/pool_passwd", which will not successs.


md5 authentication does not work. Please help

    There's an excellent summary of various check points to set up md5 authentication. Please take a look at it.
    http://www.pgpool.net/pipermail/pgpool-general/2013-May/001773.html

pgpool 密码文件格式 : 
密码可以从pg_shadow.passwd取, 或者使用pg_md5命令生成.

Can I use # comments or blank lines in pool_passwd?

    The answer is simple. No (just like /etc/passwd).


[参考]
1. http://www.pgpool.net/pipermail/pgpool-general/2013-May/001773.html

1)Getting the location of the pool_passwd file right is critical to getting authentication working. Getting the right entries is equally important. When we use pg_md5 to generate the password, it asks for the password, but not user. pg_md5 assumes $USER. In my case, I had logged in as root and  executed pg_md5
pg_md5 -p -m
[root at n3170 etc]# more /usr/local/etc/pool_passwd
root:md5e7630668fa08e27bb93b5e7db30725f2

So you have to either login as postgres and then execute pg_md5 or pass postgres as the user.

[root at n3170 etc]# pg_md5 -p -m -u postgers
password:

[root at n3170 etc]# more /usr/local/etc/pool_passwd
root:md5e7630668fa08e27bb93b5e7db30725f2
postgers:md58f2fae75e1816d3d19e648e1bea21140

I wish pg_md5 could also verify against the database if the user exists.

2) You can also copy/paste the entry from pg_shadow.
postgres=# select  passwd  from pg_shadow where usename = 'postgres';
               passwd
-------------------------------------
md5c719888b07cdc2f8c50c01e8e16996b9

In this scenario, you have to use the entire string - 'md5c719888b07cdc2f8c50c01e8e16996b9' , not just the portion after md5. I was using just 'c719888b07cdc2f8c50c01e8e16996b9' and the authentication kept failing.

3) Use strace extensively to debug issues. To help identify the issues, set num_init_children = 1 in pgpool.conf. By default it is 32. When you run with 32, you will have so many process, you won't know which one to strace.

[root at n3170 etc]# ps -eaf | grep pgpool | wc -l
36

Once you set it to 1, you will have fewer processes -
[root at n3170 etc]# grep children pgpool.conf
num_init_children = 1

[root at n3170 etc]# ps -eaf | grep pgpool | wc -l
5

[root at n3170 etc]# ps -eaf | grep pgpool
root     30642     1  0 09:34 ?        00:00:00 pgpool
root     30643 30642  0 09:34 ?        00:00:00 pgpool: wait for connection request
root     30644 30642  0 09:34 ?        00:00:00 pgpool: PCP: wait for connection request
root     30645 30642  0 09:34 ?        00:00:00 pgpool: worker process
root     30681 14622  0 09:35 pts/0    00:00:00 grep pgpool

It is 30643, the process waiting for connection requests, that you want to strace.

When you strace, use -s option (string size ) to get more characters from the output. Default value of s is 32. So a lot of useful information may get truncated.
Something like

strace -p 30643 -s 500 -o connectattempts.txt

To make sure the program has picked the right files, you can use ls like this

ls -lv /proc/*pid*/fd

Here pid is 30642

[root at n3170 etc]# ls -lv /proc/*30642*/fd
total 0
lrwx------. 1 root root 64 May 15 09:44 0 -> /dev/null
lrwx------. 1 root root 64 May 15 09:44 1 -> /dev/null
lrwx------. 1 root root 64 May 15 09:44 2 -> /dev/null
lrwx------. 1 root root 64 May 15 09:44 3 -> /usr/local/etc/pool_passwd



Flag Counter
