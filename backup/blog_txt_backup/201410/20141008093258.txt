PostgreSQL research

PostgreSQL 9.4+ functions for get the OID of the named xxx

2014-10-08 9:32:58   查看原文>>

PostgreSQL 9.4 新增了一系列返回OID的系统函数, 例如to_regclass返回对象的OID, 这些函数可以被pgpool-II等类似应用, 用于区分在不同schema下, 重名的对象.
在PostgreSQL9.4版本前, pgpool-II需要安装pgpool_regclass来获取oid.
pgpool的需求 : 

When I use schema qualified table names, pgpool-II does not invalidate on memory query cache and I got outdated data. Why?

    It seems you did not install "pgpool_regclass" function. Without the function, pgpool-II ignores the schema name pat of the schema qualified table name and the cache invalidation fails.

I'm using pgpool-II in replication mode. I expected that pgpool-II replaces current_timestamp call with time constants in my INSERT query, but actually it doesn't. Why?

    Probably your INSERT query uses schema qualied table name (like public.mytable) and you did not install pool_regclass function coming pgpool. Without pgpool_reglclass, pgpool-II only deals with table names without schema qualification.

Why do I need to install pgpool_regclass?

    If you are using PostgreSQL 8.0 or later, installing pgpool_regclass function on all PostgreSQL to be accessed by pgpool-II is strongly recommended, as it is used internally by pgpool-II. Without this, handling of duplicate table names in different schema might cause trouble (temporary tables aren't a problem).
    Related FAQ is here http://www.pgpool.net/mediawiki/index.php?title=FAQ&action=submit#I.27m_using_pgpool-II_in_replication_mode._I_expected_that_pgpool-II_replaces_current_timestamp_call_with_time_constants_in_my_INSERT_query.2C_but_actually_it_doesn.27t._Why.3F
    If you are using PostgreSQL 9.4.0 or later and pgpool-II 3.3.4 or later, 3.4.0 or later, you don't need to install pgpool_regclass since PostgreSQL 9.4 has built-in pgpool_regclass like function "to_regclass".

When I check pg_stat_activity view, I see a query like "SELECT count(*) FROM pg_catalog.pg_class AS c WHERE c.oid = pgpool_regclass('pgbench_accounts') AND c.relpersistence = 'u'" in active state for very long time. Why?

    It's a limitation of pg_stat_activity. You can safely ignore it.
    Pgpool-II issues queries like above for internal use to master node. When user query runs in extended protocol mode (sent from JDBC driver, for example), pgpool-II's query also runs in the mode. To make pg_stat_activity recognize the query finishes, pgpool-II needs to send a packet called "Sync", which
    unfortunately breaks user's query (more precisely, unnamed portal). Thus pgpool-II sends "Flush" packet instead but then pg_stat_activity does not recognize the end of the query.
    Interesting thing is, if you enable log_duration, it logs the query finishes.


The to_regclass, to_regproc, to_regprocedure, to_regoper, to_regoperator, and to_regtype functions translate relation, function, operator, and type names to objects of type regclass, regproc,regprocedure, regoper, regoperator, and regtype, respectively. These functions differ from a cast from text in that they don't
accept a numeric OID, and that they return null rather than throwing an error if the name is not found (or, for to_regproc and to_regoper, if the given name matches multiple objects).

┌──────────────────────────────┬────────────┬──────────────────────────────────┐
│to_regclass(rel_name)         │regclass    │get the OID of the named relation │
├──────────────────────────────┼────────────┼──────────────────────────────────┤
│to_regproc(func_name)         │regproc     │get the OID of the named function │
├──────────────────────────────┼────────────┼──────────────────────────────────┤
│to_regprocedure(func_name)    │regprocedure│get the OID of the named function │
├──────────────────────────────┼────────────┼──────────────────────────────────┤
│to_regoper(operator_name)     │regoper     │get the OID of the named operator │
├──────────────────────────────┼────────────┼──────────────────────────────────┤
│to_regoperator(operator_name) │regoperator │get the OID of the named operator │
├──────────────────────────────┼────────────┼──────────────────────────────────┤
│to_regtype(type_name)         │regtype     │get the OID of the named type     │
└──────────────────────────────┴────────────┴──────────────────────────────────┘

使用cast, 当对象不存在时返回错误.

postgres@db-172-16-3-221-> psql
psql (9.3.5)
Type "help" for help.

digoal=# select 'tes'::regclass;
ERROR:  relation "tes" does not exist
LINE 1: select 'tes'::regclass;
               ^
digoal=# select 'test'::regclass;
 regclass 
----------
 test
(1 row)



9.4使用to_regclass函数获取oid, 当对象不存在时返回空, 不返回错误.

pg94@db-172-16-3-221-> psql postgres postgres
psql (9.4beta2)
Type "help" for help.

postgres=# 
postgres=# select to_regclass('test');
 to_regclass 
-------------
 test
(1 row)
postgres=# select to_regclass('tes');
 to_regclass 
-------------
 
(1 row)
postgres=# select 'tes'::regclass;
ERROR:  relation "tes" does not exist
LINE 1: select 'tes'::regclass;
               ^



[参考] 
1. src/backend/utils/adt/regproc.c

/*
 * to_regclass          - converts "classname" to class OID
 *
 * If the name is not found, we return NULL.
 */
Datum
to_regclass(PG_FUNCTION_ARGS)
{
        char       *class_name = PG_GETARG_CSTRING(0);
        Oid                     result;
        List       *names;

        /*
         * Parse the name into components and see if it matches any pg_class
         * entries in the current search path.
         */
        names = stringToQualifiedNameList(class_name);

        /* We might not even have permissions on this relation; don't lock it. */
        result = RangeVarGetRelid(makeRangeVarFromNameList(names), NoLock, true);

        if (OidIsValid(result))
                PG_RETURN_OID(result);
        else
                PG_RETURN_NULL();
}



Flag Counter
