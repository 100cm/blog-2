PostgreSQL research

PostgreSQL database reliability & high availability in cloud thinking

2014-10-31 16:13:02   查看原文>>

我前面写了一篇关于基于docker的云环境思考, 现在问题来了, 如果用作云数据库的话, 还要考虑更多的事情.
例如数据库的可靠性如何来保障.
RDS ON AWS提供了很好的例子.

1. 一种方法是依靠存储的高可靠, 假设云存储是可靠的(例如存储多份拷贝, 挂载点冗余).
将数据文件存放在云存储, 当宿主机挂掉时, 在其他宿主机启动数据库.
PostgreSQL database reliability high availability in cloud thinking - 德哥@Digoal - PostgreSQL research
    这种方法的注意事项, 必须确保数据的一致性, 例如数据库调用fsync接口时, XLOG必须持久化到云存储里面.
    如果云存储无法保证这点, 那么应该把XLOG放在宿主机本地, 同时将归档写入云存储. 并且云存储应该提供快照功能, 在宿主机挂掉时, 可以在其他宿主机将数据文件回退到以前的快照, 并使用归档恢复数据库并激活. (这样做会丢失未归档的事务)

2. 另一种方法是使用本地存储来存储数据文件(假设云存储是不可靠的), 同时依靠数据库自身的同步流复制来实现高可用.
    这个方法也存在缺陷, 例如不写归档的操作(如HASH索引)无法被复制, 如果主节点DOWN机, 以同步STANDBY节点激活的话, 需要重建HASH索引.
    另一个缺陷是, 当所有的sync standby节点都异常时(可以增加sync节点来减少这个故障), 事务会卡住.

现在问题来了:
1. 假设要用云存储, 什么产品比较好?
glusterfs? nfs on zfs? nas? 光纤存储?
一般屌丝可能会用glusterfs, 如果觉得glusterfs不可靠的话, 可能考虑zfs(但是存在挂载点的单点故障), 或者nas+zfs来解决挂载点的单点故障. 
2. 如果使用同步流复制的话, 怎样减少空间? 因为每个standby都需要同样大小的空间.
这里我能想到的方法:
2.1. 改写pg_receivexlog工具, 改成同步协议, 即一个同步接收xlog的服务, 不做恢复.
也就是说我们可以起最少1太同步standby, 加上最少1个同步pg_receivexlog. 来保障sync standby挂掉时同步事务可以进行下去.
2.2. 改写PG, 当同步standby节点挂掉, 并且没有potention节点导致堵塞时, 不会无休止的等待, 设置一个超时, 超过时间后自动变成异步模式, 等同步standby节点恢复后再切回同步流复制模式.

[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201493115717505/
2. man pg_receivexlog
3. http://blog.163.com/digoal@126/blog/static/163877040201481232122861/

Flag Counter
