PostgreSQL research

python function args diff between mutable object and immutable object

2014-10-16 10:04:42   查看原文>>

python 函数参数使用注意, 在调用函数时, 传入的参数是值的reference, 而不是值的拷贝.

The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). [1] When a function calls another function, a new local symbol table is created for that call.

Footnotes
[1]     Actually, call by object reference would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list).



在使用参数默认值时, 也需要注意这一点, 因为初始化值仅仅在创建函数时评估一次默认值.

Important warning: The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. 


所以immutable对象和mutable对象是有差别的.


>>> def f1(a, L=[]):
...   L.append(a)
...   return L
... 
>>> f1(1)
[1]
>>> f1(2)
[1, 2]


上面这个例子可以看到L=[]默认值只初始化一次. 并且list是mutable值, 所以会反映出它的变化.

如果初始值是immutable类型的, 那么它的值不会变化, 所以可以通过以下方法来防止以上问题.
注意L依旧只初始化一次, 因为它是immutable对象, 所以一直都是None的.

>>> def f(a, L=None):
...   if L is None:
...     L = []
...   L.append(a)
...   return L
... 
>>> f(1)
[1]
>>> f(2)
[2]
>>> f(3)
[3]



使用其他immutable类型也一样可以解决这个问题, 例如int类型.

>>> def f2(a, L=1):
...   if L == 1:
...     L = []
...   L.append(a)
...   return L
... 
>>> f2(1)
[1]
>>> f2(2)
[2]
>>> f2(3)
[3]



下面我们定义一个mutable 类型, 以该类型传递给f, f1, f2函数, 我们发现, 所有的函数都会对l的值进行修改.
这也印证了python手册里说的, 函数参数传递的是reference.

>>> l=[100]
>>> f(1,l)
[100, 1]
>>> f(1,l)
[100, 1, 1]
>>> f(1,l)
[100, 1, 1, 1]
>>> print(l)
[100, 1, 1, 1]
>>> f2(1,l)
[100, 1, 1, 1, 1]
>>> f2(1,l)
[100, 1, 1, 1, 1, 1]
>>> f2(3,l)
[100, 1, 1, 1, 1, 1, 3]
>>> f2(4,l)
[100, 1, 1, 1, 1, 1, 3, 4]
>>> print(l)
[100, 1, 1, 1, 1, 1, 3, 4]
>>> f1(4,l)
[100, 1, 1, 1, 1, 1, 3, 4, 4]
>>> print(l)
[100, 1, 1, 1, 1, 1, 3, 4, 4]




[参考]
1. https://docs.python.org/3.3/tutorial/controlflow.html#more-on-defining-functions

4.7.1. Default Argument Values 

The most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is defined to allow. For example:

def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
    while True:
        ok = input(prompt)
        if ok in ('y', 'ye', 'yes'):
            return True
        if ok in ('n', 'no', 'nop', 'nope'):
            return False
        retries = retries - 1
        if retries < 0:
            raise IOError('uncooperative user')
        print(complaint)

This function can be called in several ways:

  • giving only the mandatory argument: ask_ok('Do you really want to quit?')
  • giving one of the optional arguments: ask_ok('OK to overwrite the file?', 2)
  • or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')

This example also introduces the in keyword. This tests whether or not a sequence contains a certain value.

The default values are evaluated at the point of function definition in the defining scope, so that

i = 5

def f(arg=i):
    print(arg)

i = 6
f()

will print 5.

Important warning: The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls:

def f(a, L=[]):
    L.append(a)
    return L

print(f(1))
print(f(2))
print(f(3))

This will print

[1]
[1, 2]
[1, 2, 3]

If you don’t want the default to be shared between subsequent calls, you can write the function like this instead:

def f(a, L=None):
    if L is None:
        L = []
    L.append(a)
    return L

Flag Counter
