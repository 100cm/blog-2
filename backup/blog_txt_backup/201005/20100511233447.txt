PostgreSQL research

大结果集下PostgreSQL出现的”假死”现象解析

2010-05-11 23:34:47   查看原文>>

今天一位同事跑过来问我，在GreenPlum上执行SQL查询时发生了一件很奇怪的事情。

我大概的描述一下当时的情形：

我们这位同事使用PGADMIN去查询一个表，跑了两个SQL，其中一个成功了，另一个假死了。

1. select col1 from tbl_test group by col1;

这条SQL很快结果就可以返回。

2. select col1,col2 from tbl_test group by col1,col2;

这条SQL执行了一个多小时没响应。

有很多种可能会导致假死：在运算？在排队？在返回结果？依据这些可能的情况去排查就OK了。

注意：对于ORACLE来说，不管你多大的表，只要有东西输出，客户端会慢慢的收取结果集。

对于PostgreSQL来说，客户端在默认情况下要等到收集到所有结果才开始展现。（默认太傻了是不，后面会讲怎么避免）

经过排查，发现果然是在返回结果的过程中。

1. select count(*) from (select col1 from tbl_test group by col1) t;

大概有10几万的结果。

2. select count(*) from (select col1,col2 from tbl_test group by col1,col2) t;

大概有一亿多的结果。

让我们来看看PostgreSQL JDBC驱动说明里怎么写的,其他的驱动应该是大同小异吧：

http://jdbc.postgresql.org/documentation/head/query.html

Any time you want to issue the section called “Getting results based on a cursor” here for how to alter this behaviour,通过指针可以避免这种情况). Example 5.1, “Processing a Simple Query in JDBC” illustrates this process.

Example 5.1. Processing a Simple Query in JDBC

This example will issue a simple query and print out the first column of each row using a 

Statement

.

Statement st = conn.createStatement();ResultSet rs = st.executeQuery("SELECT * FROM mytable WHERE columnfoo = 500");while (rs.next()) { System.out.print("Column 1 returned "); System.out.println(rs.getString(1));}rs.close();st.close();

This example issues the same query as before but uses a 

PreparedStatement

 and a bind value in the query.

int foovalue = 500;PreparedStatement st = conn.prepareStatement("SELECT * FROM mytable WHERE columnfoo = ?");st.setInt(1, foovalue);ResultSet rs = st.executeQuery();while (rs.next()) { System.out.print("Column 1 returned "); System.out.println(rs.getString(1));}rs.close();st.close();

