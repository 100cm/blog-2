PostgreSQL research

Kernel panic

2010-05-11 23:43:02   查看原文>>

最近服务器不知道搞什么，报Kernel panic，一点办法都没有，只能重启服务器。而且啥东西也不留下，由于没配置KDUMP，啥可以提供查询的信息都没有。

一如既往的重启了4次居然都没有起来，中间修改了内存的ECC参数没有效果，最好没办法打开DELL的诊断工具，执行了一把EXPRESS级别的诊断，没有任何异常，不抱太大希望了，准备找台服务器做数据恢复，最后一次重启，居然OK了。太诡异了。

总结一下：

重要数据一定要在本地服务器以外再存一份，或者使用共享磁盘，或者是同步到其他地方，总之要在最短的时间恢复的话，还是放外面好啊。

最终还是把数据迁移出去了，如果有遇到过类似问题的朋友，希望给点意见，感谢。

感谢热心朋友的提示，我后来又GOOGLE了一把，

A kernel panic is an action taken by an operating system upon detecting an internal fatal error from which it cannot safely recover. The term is largely specific to Unix and Unix-like systems; for Microsoft Windowsoperating systems the equivalent term is “Bug check” (or, colloquially, “Blue Screen of Death“).

The kernel routines that handle panics (in AT&T-derived and BSD Unix source code, a routine known as 

panic()

) are generally designed to output an error message to the console, dump an image of kernel memory to disk for post-mortemdebugging and then either wait for the system to be manually rebooted, or initiate an automatic reboot. The information provided is of highly technical nature and aims to assist a system
administrator or software developer in diagnosing the problem.

Attempts by the operating system to read an invalid or non-permitted memory address are a common source of kernel panics. A panic may also occur as a result of a hardware failure or a bug in the operating system. In many cases, the operating system could continue operation after memory violations have occurred.
However, the system is in an unstable state and rather than risking security breaches and data corruption, the operating system stops to prevent further damage and facilitate diagnosis of the error.

The kernel panic was introduced in an early version of Unix and demonstrated a major difference between the design philosophies of Unix and its predecessor Multics. Multics developer Tom van Vleck recalls a discussion of this change with Unix developer Dennis Ritchie:

I remarked to Dennis that easily half the code I was writing in Multics was error recovery code. He said, “We left all that stuff out. If there’s an error, we have this routine called panic, and when it is called, the machine crashes, and you holler down the hall, ‘Hey, reboot it.’”[1]

The original 

panic()

 function was essentially unchanged from Fifth Edition UNIX to the VAX-based UNIX 32V and output only an error message with no other information, then dropped the system into an endless idle loop. As the Unixcodebase was enhanced, the 

panic()

 function was also enhanced to dump various forms of debugging information to the console.

Kernel panic - 德哥(DiGoal,Just Do It!) - Not Only DBAKernel panic - 德哥(DiGoal,Just Do It!) - Not Only DBAKernel panic - 德哥(DiGoal,Just Do It!) - Not Only DBAKernel panic - 德哥(DiGoal,Just Do It!) - Not Only DBA

 

