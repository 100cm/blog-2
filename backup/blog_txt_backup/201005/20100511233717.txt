PostgreSQL research

手工修改linux进程的CPU调度

2010-05-11 23:37:17   查看原文>>

现在多核的CPU已经相当普遍了，那么这种多核的服务器如何让CPU得到充分利用，可以靠应用自己来定义，或者依赖操作系统来调度。根据红帽的说法RHEL5有一个很强壮的CPU调度机制，RHEL6就更强壮了，所以看起来跑在LINUX下面的应用应该都不用去管该用哪个CPU。

首先我们来看看CPU中断请求的统计:

CentOS release 5.2 (Final)

 

手工修改linux进程的CPU调度 - 德哥(DiGoal,Just Do It!) - Not Only DBA

从图上看，CPU的使用基本上还是均匀的。不过CPU0负载还是最大的。

所有在某种情况下可能会需要手工来设置进程使用CPU核的优先级。

下面是一个操作的例子：

postgres  6457     1  0 May05 ?        00:00:00 /app/pgsql/bin/postgres -D /database/pgdata -p 1921

[root@develop1 ~]# taskset -pc 6457

pid 6457’s current affinity list: 0-3

这个进程目前是默认与0-3 这4个核心亲和的。也就是说会在0-3这几个核心调度。

[root@develop1 ~]# taskset -pc 0-1 6457

pid 6457’s current affinity list: 0-3

pid 6457’s new affinity list: 0,1

修改之后我们看到，已经修改为0，1的范围了。

可以通过top -p 6457 [f -> j]

查看P列可以看到当前运行的核心号。

如果该成在单个CORE上跑的话，马上就能看到CORE的变化。

下面是taskset的MAN PAGE：

从描述上来看的话，只要taskset返回结果了，那LINUX肯定是确保得到了你想要的结果。

DESCRIPTION

taskset  is used to set or retrieve the CPU affinity of a running process given its PID or to launch a new COM-

MAND with a given CPU affinity.  CPU affinity is a scheduler property that “bonds” a process to a given set  of

CPUs  on the system.  The Linux scheduler will honor the given CPU affinity and the process will not run on any

other CPUs.  Note that the Linux scheduler also supports natural CPU affinity: the scheduler attempts  to  keep

processes  on  the  same  CPU  as long as practical for performance reasons.  Therefore, forcing a specific CPU

affinity is useful only in certain applications.

The CPU affinity is represented as a bitmask, with the lowest order bit corresponding to the first logical  CPU

and  the highest order bit corresponding to the last logical CPU.  Not all CPUs may exist on a given system but

a mask may specify more CPUs than are present.  A retrieved mask will reflect only the bits that correspond  to

CPUs physically on the system.  If an invalid mask is given (i.e., one that corresponds to no valid CPUs on the

current system) an error is returned.  The masks are typically given in hexadecimal.  For example,

0×00000001

is processor #0

0×00000003

is processors #0 and #1

0xFFFFFFFF

is all processors (#0 through #31)

When taskset returns, it is guaranteed that the given program has been scheduled to a legal CPU.

