PostgreSQL research

New Free Space Map and Visibility Map Since PostgreSQL8.4

2010-05-11 23:53:57   查看原文>>

数据库插入数据时需要知道那里有剩余空间才好写入记录，在PostgreSQL中使用free space map(FSM)来跟踪剩余空间，如果FSM太小的话，可能致使FSM不足以跟踪整个表的PAGES，导致未被跟踪的PAGES的剩余空间不可用，所以FSM要足够大才不至于浪费空间.

在PostgreSQL8.4之前,FSM是在数据库启动的时候分配的一块内存区域，通过下面的两个参数来指定被跟踪的PAGES数和table,index数据库对象。

max_fsm_pages (integer)

在shared free-space map中跟踪的PAGE数。

默认值:根据初始化数据库时的内存算出来的。

取值范围:20k to 200k 并且 >=16 * max_fsm_relations

每个slot消耗6字节的共享内存.

max_fsm_relations (integer)

在shared free-space map中跟踪的heap与 index数据库对象数（如table,index，不含hash index）

默认值:1000

每个slot消耗17字节共享内存.

如果设置的参数值过低，使用VACUUM VERBOSE会提示你增加这个值。

数据库正常关闭后FSM被保存在 global/pg_fsm.cache

数据库异常关闭或执行PITR后，FSM需要重构，所有8.3的系统在恢复时去看日志输出，会发现很多AUTOVACUUM进程。其中一部分工作就是重构FSM。

PostgreSQL8.4改写了FSM模块，并增加了Visibility Map功能：

FSM改为文件存储，被放在relation的main relation文件夹下,命名规则*_fsm,*代表对象filenode name。

FSM内部使用二元树结构进行存储，加快了查询速度和更新速度，同时可以满足并发的空间请求和适应物理层的BLUK IO操作。

Visibility Map:

与FSM文件的存储类似，存放为*_vm文件.

使用bitmap跟踪HEAP 对象的PAGE是否需要被VACUUM，（不含INDEX）。

被跟踪的每个PAGE对应Visibility Map的一个BIT,当PAGE中所有的TUPLES对当前的事务都是可见的时候，BIT值设置为1.

vacuum负责更新BIT值。

BIT=1时，VACUUM可以忽略扫描这个PAGE，所有大大提高了VACUUM的效率。降低IO消耗。由于VM不跟踪INDEX所以INDEX还是需要FULL SCAN。

当PAGE被insert/update/delete后,bit位将被清除，

