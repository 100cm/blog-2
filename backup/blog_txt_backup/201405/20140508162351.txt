PostgreSQL research

pgpool-II dblink's password cann't auto-filled bug used in parallel query rewrite?

2014-05-08 16:23:51   查看原文>>

群里的一位兄弟问到pgpool-II为什么要用dblink, 我之前pgpool没有仔细的看过. 今天翻看了一下.
发现确实会用到dblink, 是在parallel模式的聚合查询中, pgpool 会对查询做重写处理. 重写后的SQL需要用到dblink, 实际上就是帮你简化分布式数据的聚合.
例如count(*)一个分布式表. 会帮你重写成sum(*) from dblink('select count(*) from tbl')类似的.
重写实际上存在一定的安全隐患, 为什么呢?
1. 因为重写中的查询普通用户必须提供密码, 也就是这个重写的SQL一旦发生问题会记录到backend database 的日志中, 日志中包含密码可不是什么好事.
2. 如果pgpool节点连接backend database节点是采用non ssl连接方式的话, 那么网络中传输的SQL也是明文的, 有被窃取的可能.
好了, 安全问题先不谈, 这里还有一个问题, 当我在使用pgpool的聚合做查询的时候, 提示封装中没有密码.
这个问题相关的代码:
pool_rewrite_outfuncs.c

/* start of rewriting query */
static void examSelectStmt(Node *node,POOL_CONNECTION_POOL *backend,RewriteQuery *message)
{
        static ConInfoTodblink dblink;

        /* initialize dblink info */
        initdblink(&dblink,backend);

        /* initialize  message */
        initMessage(message);
        message->type = node->type;
        message->r_code = SELECT_DEFAULT;

  /* do rewrite query */
        nodeToRewriteString(message,&dblink,node);
}
/* set dblink info */
static void initdblink(ConInfoTodblink *dblink,POOL_CONNECTION_POOL *backend)
{
        dblink->dbname =  MASTER_CONNECTION(backend)->sp->database;
        dblink->hostaddr = pool_config->pgpool2_hostname;
        dblink->user = MASTER_CONNECTION(backend)->sp->user;
        dblink->port = pool_config->port;
        dblink->password = MASTER_CONNECTION(backend)->con->password;
}


pool_rewrite_query.c

static void writeRangeHeader(RewriteQuery *message,ConInfoTodblink *dblink, String *str,DistDefInfo *info, RepliDefInfo *info2,char 
*alias)
{
        char port[8];
        char *schema = NULL;
        char *table = NULL;


        pool_debug("writeRangeHeader select_no=%d",message->current_select);

        sprintf(port,"%d",dblink->port);

        delay_string_append_char(message, str, "dblink(");
        delay_string_append_char(message, str, "'");
        delay_string_append_char(message, str, "host=");
        delay_string_append_char(message, str, dblink->hostaddr);
        delay_string_append_char(message, str, " dbname=");
        delay_string_append_char(message, str, dblink->dbname);
        delay_string_append_char(message, str, " port=");
        delay_string_append_char(message, str, port);
        delay_string_append_char(message, str, " user=");
        delay_string_append_char(message, str, dblink->user);

        if(strlen(dblink->password))
        {
                delay_string_append_char(message, str, " password=");
                delay_string_append_char(message, str, dblink->password);
        }



我的测试环境

pgpool ver : 3.3.3
pgpool IP : 172.16.3.150
pgpool port : 9999
backend0 : 172.16.3.39:1999
backend1: 172.16.3.150:1921
system_db_hostname: 172.16.3.150:1921


pgpool配置文件

-- pool_hba.conf
host all all 0.0.0.0/0 md5
-- pool_passwd 
digoal:md5462f71c79368ccf422f8a773ef40074d
pgpool:md5f24aeb1c3b7d05d7eaf2cd648c307092
-- pgpool.conf
listen_addresses = '0.0.0.0'
port = 9999
socket_dir = '/tmp'
pcp_port = 9898
pcp_socket_dir = '/tmp'
backend_hostname0 = '172.16.3.39'
backend_port0 = 1999
backend_weight0 = 1
backend_hostname1 = '172.16.3.150'
backend_port1 = 1921
backend_weight1 = 1
enable_pool_hba = on
pool_passwd = 'pool_passwd'
authentication_timeout = 60
ssl = off
num_init_children = 20 
max_pool = 4
child_life_time = 300
child_max_connections = 0
connection_life_time = 0
client_idle_limit = 0
log_destination = 'syslog'
print_timestamp = on
log_connections = on
log_hostname = on
log_statement = on
log_per_node_statement = on
log_standby_delay = 'none'
syslog_facility = 'LOCAL0'
syslog_ident = 'pgpool'
debug_level = 1
pid_file_name = '/var/run/pgpool/pgpool.pid'
logdir = '/tmp'
connection_cache = on
reset_query_list = 'ABORT; DISCARD ALL'
replication_mode = off
replicate_select = off
insert_lock = on
lobj_lock_table = ''
replication_stop_on_mismatch = off
failover_if_affected_tuples_mismatch = off
load_balance_mode = on
ignore_leading_white_space = on
white_function_list = ''
black_function_list = 'nextval,setval'
master_slave_mode = off
master_slave_sub_mode = 'stream'
sr_check_period = 0 
sr_check_user = 'postgres'
sr_check_password = 'postgres'
delay_threshold = 0
follow_master_command = ''
parallel_mode = on
pgpool2_hostname = ''
system_db_hostname  = '172.16.3.150'
system_db_port = 1921
system_db_dbname = 'pgpool'
system_db_schema = 'pgpool_catalog'
system_db_user = 'pgpool'
system_db_password = 'pgpool'
health_check_period = 0
health_check_timeout = 20
health_check_user = 'nobody'
health_check_password = ''
health_check_max_retries = 0
health_check_retry_delay = 1
failover_command = ''
failback_command = ''
fail_over_on_backend_error = on
search_primary_node_timeout = 10
recovery_user = 'nobody'
recovery_password = ''
recovery_1st_stage_command = ''
recovery_2nd_stage_command = ''
recovery_timeout = 90
client_idle_limit_in_recovery = 0
use_watchdog = off
trusted_servers = ''
ping_path = '/bin'
wd_hostname = ''
wd_port = 9000
wd_authkey = ''
delegate_IP = ''
ifconfig_path = '/sbin'
if_up_cmd = 'ifconfig eth0:0 inet $_IP_$ netmask 255.255.255.0'
if_down_cmd = 'ifconfig eth0:0 down'
arping_path = '/usr/sbin'           # arping command path
arping_cmd = 'arping -U $_IP_$ -w 1'
clear_memqcache_on_escalation = on
wd_escalation_command = ''
wd_lifecheck_method = 'heartbeat'
wd_interval = 10
wd_heartbeat_port = 9694
wd_heartbeat_keepalive = 2
wd_heartbeat_deadtime = 30
heartbeat_destination0 = 'host0_ip1'
heartbeat_destination_port0 = 9694 
heartbeat_device0 = ''
wd_life_point = 3
wd_lifecheck_query = 'SELECT 1'
wd_lifecheck_dbname = 'template1'
wd_lifecheck_user = 'nobody'
wd_lifecheck_password = ''
relcache_expire = 0
relcache_size = 256
check_temp_table = on
memory_cache_enabled = off
memqcache_method = 'shmem'
memqcache_memcached_host = 'localhost'
memqcache_memcached_port = 11211
memqcache_total_size = 67108864
memqcache_max_num_cache = 1000000
memqcache_expire = 0
memqcache_auto_cache_invalidation = on
memqcache_maxcache = 409600
memqcache_cache_block_size = 1048576
memqcache_oiddir = '/var/log/pgpool/oiddir'
white_memqcache_table_list = ''
black_memqcache_table_list = ''



backend pg_hba..conf配置

-- pg_hba.conf
host all all 0.0.0.0/0 md5



在数据库中直接调用聚合函数报错.

root@db-172-16-3-150-> psql -h 127.0.0.1 -p 9999 -U digoal bench_parallel
Password for user digoal: 
psql (9.3.3, server 9.3.1)
Type "help" for help.
bench_parallel=# select count(*) from pgbench_accounts;
ERROR:  08001: could not establish connection
DETAIL:  fe_sendauth: no password supplied

LOCATION:  dblink_record_internal, dblink.c:686


在backend database的日志中能看到对应的日志, 其实就是password没有封装进去.

2014-05-08 16:17:36.233 CST,"pgpool","pgpool",4745,"172.16.3.150:20063",536b3cf5.1289,4,"SELECT",2014-05-08 16:14:45 CST,15/23,0,ERROR,08001,"could not establish connection","fe_sendauth: no password supplied
",,,,," SELECT sum(pool_g$0) AS count FROM dblink('host=db-172-16-3-150.sky-mobi.com dbname=bench_parallel port=9999 user=digoal','SELECT pool_parallel(""SELECT count(*) FROM pgbench_accounts"")',false) AS pool_t$0g (pool_g$0 bigint ) ",,"dblink_record_internal, dblink.c:686",""


对于这个错误, 解决办法是自行调用pool_parallel, 将会在所有的backend database中执行pool_parallel中的SQL, 并返回结果.

bench_parallel=# SELECT pool_parallel('SELECT count(*) FROM pgbench_accounts');
 count 
-------
     1
     1
(2 rows)


使用gdb跟踪时, 也跟踪不到password被存储的迹象.

[root@db-172-16-3-150 pgpool-II-3.3.3]# ps -ewf|grep pgpool | grep bench                      
root      1793  1779  0 14:17 ?        00:00:00 pgpool: digoal bench_parallel localhost(27475) idle
# gdb
(gdb) attach 1793
(gdb) b initdblink
Breakpoint 1 at 0x424f90: file pool_rewrite_query.c, line 309.

输出查询count的SQL.
gdb中查询对应的password有没有被存储.
Breakpoint 1, initdblink (dblink=0x719600, backend=0x1ea4b90) at pool_rewrite_query.c:309
309     {
(gdb) print backend
$1 = (POOL_CONNECTION_POOL *) 0x1ea4b90
(gdb) print backend->password
There is no member named password.
(gdb) print backend->pwd_size
There is no member named pwd_size.
(gdb) print backend
$2 = (POOL_CONNECTION_POOL *) 0x1ea4b90
(gdb) print dblink->password
$3 = 0x0
(gdb) n
310             dblink->dbname =  MASTER_CONNECTION(backend)->sp->database;
(gdb) 
311             dblink->hostaddr = pool_config->pgpool2_hostname;
(gdb) 
312             dblink->user = MASTER_CONNECTION(backend)->sp->user;
(gdb) 
313             dblink->port = pool_config->port;
(gdb) print dblink->password
$4 = 0x0
(gdb) print dblink->port
$5 = 0
(gdb) print dblink->user
$6 = 0x1e9a930 "digoal"
(gdb) print dblink->hostaddr
$7 = 0x70ef20 "db-172-16-3-150.sky-mobi.com"
(gdb) print dblink->dbname
$8 = 0x1e9a950 "bench_parallel"
(gdb) print dblink->port
$9 = 0
(gdb) n
314             dblink->password = MASTER_CONNECTION(backend)->con->password;
(gdb) print dblink->password
$10 = 0x0
(gdb) print MASTER_CONNECTION(backend)
No symbol "MASTER_CONNECTION" in current context.
(gdb) print backend
$11 = (POOL_CONNECTION_POOL *) 0x1ea4b90
(gdb) print dblink->con
There is no member named con.
(gdb) print backend-con
No symbol "con" in current context.
(gdb) print backend-con-password
No symbol "con" in current context.
(gdb) print pool_virtual_master_db_node_id()
$12 = 0
(gdb) print (backend)->slots[0]
$13 = (POOL_CONNECTION_POOL_SLOT *) 0x1e9d480
(gdb) print (backend)->slots[0]->con
$14 = (POOL_CONNECTION *) 0x1ea7fe0
(gdb) print (backend)->slots[0]->con->password
$15 = '\000' <repeats 1023 times>
(gdb) print (backend)->slots[0]->con->password
$16 = '\000' <repeats 1023 times>
(gdb) 
$17 = '\000' <repeats 1023 times>
(gdb) 
$18 = '\000' <repeats 1023 times>
(gdb) 
$19 = '\000' <repeats 1023 times>
(gdb) 
$20 = '\000' <repeats 1023 times>
(gdb) 
$21 = '\000' <repeats 1023 times>
(gdb) print (backend)->slots[0]->con->password
$22 = '\000' <repeats 1023 times>
(gdb) print (backend)->slots[1]->con->password
$23 = '\000' <repeats 1023 times>
(gdb) print backend->slots[1]->con->password
$24 = '\000' <repeats 1023 times>
(gdb) print backend->slots
$25 = {0x1e9d480, 0x1e9d4b0, 0x0 <repeats 126 times>}
(gdb) print backend->slots[1]
$26 = (POOL_CONNECTION_POOL_SLOT *) 0x1e9d4b0
(gdb) print backend->slots[0]
$27 = (POOL_CONNECTION_POOL_SLOT *) 0x1e9d480
(gdb) print backend->slots[0]->password
There is no member named password.
(gdb) print backend->slots[0]->con
$28 = (POOL_CONNECTION *) 0x1ea7fe0
(gdb) print backend->slots[0]->con->password
$29 = '\000' <repeats 1023 times>
(gdb) n


这个问题正在和pgpool-II的作者沟通. 有结果会发到这里来.

Flag Counter

评论

heibao326 - 2015-07-28 15:23:03

根据http://www.postgres.cn/docs/9.3/different-replication-solutions.html中的集群方案，我们一般通过哪种方案搭建集群呢？利用PGPOOL-II搭建pg集群复制模式？利用PGPOOL-II搭建pg高可用模式？利用流复制搭建pg高可用？是有什么优劣势吗？

德哥@Digoal 回复 heibao326 - 2015-07-28 15:23:03

hi, 如果要实现对应于透明的读写分离，可以考虑pgpool-II+stream replicatoin,如果要做HA，可以用stream replication+failover脚本来实现。

heibao326 - 2015-06-03 16:27:44

德哥  请教下  现在有办法彻底解决这个问题吗“parallel下使用聚合函数的查询总提示密码吗？“

德哥@Digoal 回复 heibao326 - 2015-06-03 16:27:44

pgpool-II下一个版本已经放弃parallel功能了

zhaolinzzu - 2014-08-17 14:22:46

目前也遇到了这个问题，parallel下使用聚合函数的查询总提示密码

