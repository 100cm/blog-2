PostgreSQL research

PostgreSQL planner should optimize stable function to one call

2014-05-01 17:37:47   查看原文>>

今天在讲PostgreSQL优化相关的函数三态的章节, 关于stable和immutable函数, 虽然对于同样的参数返回值都一致, 但是优化器对这两种状态的函数处理似乎有偏见.
在where子句, 如果走全表扫描的话, 当判断条件中有一组字段和stable函数的比较时, stable函数不会被优化到一次调.
在select子句中, stable函数则完全没有被优化.
本文主要说明PostgreSQL的优化器在这种场景有待改进.

digoal=# create table t7(id int);
digoal=# insert into t7 values (1),(2),(3);
digoal=# create or replace function f_t7(i int) returns int as $$
declare
begin
  raise notice 'called'; return i;
end;
$$ language plpgsql stable;


select子句完全不优化stable函数, 多次调用.

digoal=# select f_t7(1),* from t7;
NOTICE:  called
NOTICE:  called
NOTICE:  called
 f_t7 | id 
------+----
    1 |  1
    1 |  2
    1 |  3


immutable函数显然被优化, (替换成常量了).

digoal=# alter function f_t7(int) immutable;  
digoal=# select f_t7(1),* from t7; 
NOTICE:  called 
 f_t7 | id 
------+----
    1 |  1
    1 |  2
    1 |  3
(3 rows)


在where子句中, 如果走全表扫描的话, 并且判断条件是字段和函数的判断, 则不会被优化.

digoal=# alter function f_t7(int) stable;  
digoal=# select * from t7 where id=f_t7(1);  
NOTICE:  called 
NOTICE:  called
NOTICE:  called
NOTICE:  called
 id 
----
  1

digoal=# explain select * from t7 where id=f_t7(1);
NOTICE:  called
                    QUERY PLAN                    
--------------------------------------------------
 Seq Scan on t7  (cost=0.00..1.79 rows=1 width=4)
   Filter: (id = f_t7(1))
(2 rows)


如果是和常亮比较, 执行计划选择了One-Time Filter. 所以只调用一次stable常量函数.

digoal=# select * from t7 where f_t7(1)=1; 
NOTICE:  called
 id 
----
  1
  2
  3
(3 rows)

digoal=# explain select * from t7 where f_t7(1)=1; 
                       QUERY PLAN                       
--------------------------------------------------------
 Result  (cost=0.25..1.28 rows=3 width=4)
   One-Time Filter: (f_t7(1) = 1)
   ->  Seq Scan on t7  (cost=0.25..1.28 rows=3 width=4)
(3 rows)



当使用索引扫描时, stable函数可以被优化, 因为索引扫描要求判断条件只运算一次.

digoal=# set enable_seqscan=off;
digoal=# select * from t7 where f_t7(1)=id; 
NOTICE:  called
NOTICE:  called
 id 
----
  1
(1 row)

digoal=# explain select * from t7 where f_t7(1)=id; 
NOTICE:  called
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Index Only Scan using idx_t7_id on t7  (cost=0.38..8.40 rows=1 width=4)
   Index Cond: (id = f_t7(1))
(2 rows)


对于immutable常量函数, 因为优化器直接将它替换成常量了, 所以什么情况选都只会调用一次.

digoal=# alter function f_t7(int) immutable;  
ALTER FUNCTION
digoal=# explain select * from t7 where f_t7(1)=id; 
NOTICE:  called
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Index Only Scan using idx_t7_id on t7  (cost=0.13..8.15 rows=1 width=4)
   Index Cond: (id = 1)
(2 rows)

digoal=# explain select * from t7 where f_t7(1)=1; 
NOTICE:  called
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Index Only Scan using idx_t7_id on t7  (cost=0.13..12.18 rows=3 width=4)
(1 row)

digoal=# set enable_seqscan=on;
SET
digoal=# explain select * from t7 where f_t7(1)=1; 
NOTICE:  called
                    QUERY PLAN                    
--------------------------------------------------
 Seq Scan on t7  (cost=0.00..1.03 rows=3 width=4)
(1 row)

digoal=# select * from t7 where f_t7(1)=1; 
NOTICE:  called
 id 
----
  1
  2
  3
(3 rows)

digoal=# select * from t7 where f_t7(1)=id; 
NOTICE:  called
 id 
----
  1
(1 row)


Flag Counter
