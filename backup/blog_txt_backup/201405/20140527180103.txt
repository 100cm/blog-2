PostgreSQL research

be careful use prepared statement with pgbouncer and other connection pools

2014-05-27 18:01:03   查看原文>>

鉴于PostgreSQL是进程模式的, 所以如果应用场景是短连接的话, 需要架设一个连接池来解决连接瓶颈的问题.
譬如pgbouncer,
对付短连接, 还需使用transaction或 statment模式.
但是, 如果你的场景中还有用到prepared statement的话, 使用连接池容易出现问题.
不管是pgbouncer还是其他连接池, 都是需要面对的.
问题
程序a创建了一个prepared statement,
调用
事务关闭
其他程序可能复用这个连接
其他程序可能创建一个同名的prepared statement, 这个时候就发生了冲突.
另外程序A可能连接到其他的server pool, 所以可能刚才创建的prepared statement在其他server pool中不存在, 
所以程序A调用这个prepared statement的时候, 也会报错.
同时, libpq只提供了创建prepared statement的接口, 但是没有提供删除接口, 目前PostgreSQL的prepared statement只能通过
deallocate来消除.
http://www.postgresql.org/docs/9.4/static/libpq-exec.html

Prepared statements for use with PQexecPrepared can also be created by executing SQL PREPARE statements. Also, although there is no libpq function for deleting a prepared statement, the SQL DEALLOCATE statement can be used for that purpose.


http://www.postgresql.org/docs/9.4/static/sql-deallocate.html
所以要使用连接池的话, 同时还要使用绑定变量, 可以考虑使用会话级别的连接池, 同时在连接回收时在pgbouncer中设置discard all;
这个语句可以释放掉会话端存储的prepared statement.
它相当于执行了.

SET SESSION AUTHORIZATION DEFAULT;
RESET ALL;
DEALLOCATE ALL;
CLOSE ALL;
UNLISTEN *;
SELECT pg_advisory_unlock_all();
DISCARD PLANS;
DISCARD TEMP;
DISCARD SEQUENCES;


如果使用的是事务或语句级别的连接池, 连接复用就可能出现本文前面提到的问题.

[参考]
1. http://www.postgresql.org/docs/9.4/static/sql-deallocate.html
2. http://www.postgresql.org/docs/9.4/static/libpq-exec.html
3. src/backend/commands/prepare.c

/*
 * Internal version of DEALLOCATE
 *
 * If showError is false, dropping a nonexistent statement is a no-op.
 */
void
DropPreparedStatement(const char *stmt_name, bool showError)
{
        PreparedStatement *entry;

        /* Find the query's hash table entry; raise error if wanted */
        entry = FetchPreparedStatement(stmt_name, showError);

        if (entry)
        {
                /* Release the plancache entry */
                DropCachedPlan(entry->plansource);

                /* Now we can remove the hash table entry */
                hash_search(prepared_queries, entry->stmt_name, HASH_REMOVE, NULL);
        }
}

/*
 * Drop all cached statements.
 */
void
DropAllPreparedStatements(void)
{
        HASH_SEQ_STATUS seq;
        PreparedStatement *entry;

        /* nothing cached */
        if (!prepared_queries)
                return;

        /* walk over cache */
        hash_seq_init(&seq, prepared_queries);
        while ((entry = hash_seq_search(&seq)) != NULL)
        {
                /* Release the plancache entry */
                DropCachedPlan(entry->plansource);

                /* Now we can remove the hash table entry */
                hash_search(prepared_queries, entry->stmt_name, HASH_REMOVE, NULL);
        }
}


Flag Counter
