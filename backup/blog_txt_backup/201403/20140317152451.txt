PostgreSQL research

PostgreSQL Rows Removed by "lossy" INDEX Recheck

2014-03-17 15:24:51   查看原文>>

两个多边形重叠的信息在GIST索引中可以直接返回, 一个多边形包含另一个多边形的前提是必须有重叠, 所以PostgreSQL可以利用GIST索引过滤出一部分结果集,
然后再次check是否包含来得到最终结果.

PostgreSQL GIST索引几何类型时, 走索引扫描, 下面的例子, 我们看到Rows Removed by Index Recheck: 1.
这个原因是这里使用 @> 返回的是两个几何图形是否相交, 而非包含, 所以还需要额外的检查.

A case similar to filter conditions occurs with "lossy" index scans. For example, consider this search for polygons containing a specific point:

EXPLAIN ANALYZE SELECT * FROM polygon_tbl WHERE f1 @> polygon '(0.5,2.0)';

                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 Seq Scan on polygon_tbl  (cost=0.00..1.05 rows=1 width=32) (actual time=0.044..0.044 rows=0 loops=1)
   Filter: (f1 @> '((0.5,2))'::polygon)
   Rows Removed by Filter: 4
 Total runtime: 0.083 ms

The planner thinks (quite correctly) that this sample table is too small to bother with an index scan, so we have a plain sequential scan in which all the rows got rejected by the filter condition. But if we force an index scan to be used, we see:

SET enable_seqscan TO off;

EXPLAIN ANALYZE SELECT * FROM polygon_tbl WHERE f1 @> polygon '(0.5,2.0)';

                                                        QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------
 Index Scan using gpolygonind on polygon_tbl  (cost=0.13..8.15 rows=1 width=32) (actual time=0.062..0.062 rows=0 loops=1)
   Index Cond: (f1 @> '((0.5,2))'::polygon)
   Rows Removed by Index Recheck: 1
 Total runtime: 0.144 ms

Here we can see that the index returned one candidate row, which was then rejected by a recheck of the index condition. This happens because a GiST index is "lossy" for polygon containment tests: it actually returns the rows with polygons that overlap the target, and then we have to do the exact containment test on
those rows.

