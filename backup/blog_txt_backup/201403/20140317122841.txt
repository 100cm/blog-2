PostgreSQL research

PostgreSQL customize log_statement by GetCommandLogLevel@src/backend/tcop/utility.c

2014-03-17 12:28:41   查看原文>>

PostgreSQL 的 log_statement参数用于配置数据库日志中记录SQL语句的级别. 
log_statement (enum)

    Controls which SQL statements are logged. Valid values are none (off), ddl, mod, and all (all statements). ddl logs all data definition statements, such as CREATE, ALTER, and DROPstatements. mod logs all ddl statements, plus data-modifying statements such as INSERT, UPDATE, DELETE, TRUNCATE, and COPY
    FROM. PREPARE, EXECUTE, and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type. For clients using extended query protocol, logging occurs when an Execute message is received, and values of the Bind parameters are included (with any embedded single-quote marks doubled).

    The default is none. Only superusers can change this setting.

        Note: Statements that contain simple syntax errors are not logged even by thelog_statement = all setting, because the log message is emitted only after basic parsing has been done to determine the statement type. In the case of extended query protocol, this setting likewise does not log statements that fail
        before the Execute phase (i.e., during parse analysis or planning). Set log_min_error_statement to ERROR (or lower) to log such statements.

    如果配置为ALL的话, 将记录下所有的SQL语句. 对于特别重要的系统, 可以这么来做.
    但是一般的系统, 且事务非常频繁的话, 开启ALL会产生大量的日志, 除了需要大量的存储空间, 对性能也有一定影响.
    如果配置为DDL, 那么会记录下所有DDL的操作, 如果配置为MOD, 那么会记录所有的DML语句, 包含INSERT.
    对于日志型的数据库, 可能产生大量的插入, 但是更新, 删除比较少, 如果不关心插入但是又要记下删除和更新的话, 我们没有好的选择, 因为要么就是配置ALL要么就是MOD, 但是MOD也包含了INSERT的记录.
    这个时候, 我们可以通过修改代码来实现, 增加几个日志记录级别, 例如把insert, update, delete单独拎出来.
    我这里图方便, 只是把INSERT语句改到ALL级别了. 如下 :
    src/backend/tcop/utility.c

    /*
     * GetCommandLogLevel
     *              utility to get the minimum log_statement level for a command,
     *              given either a raw (un-analyzed) parsetree or a planned query.
     *
     * This must handle all command types, but since the vast majority
     * of 'em are utility commands, it seems sensible to keep it here.
     */
    LogStmtLevel
    GetCommandLogLevel(Node *parsetree)
    {
            LogStmtLevel lev;

            switch (nodeTag(parsetree))
            {
                            /* raw plannable queries */
                    case T_InsertStmt:  // 这个改一下
                    case T_DeleteStmt:
                    case T_UpdateStmt:
                            lev = LOGSTMT_MOD;
                            break;

                    case T_SelectStmt:
                            if (((SelectStmt *) parsetree)->intoClause)
                                    lev = LOGSTMT_DDL;              /* SELECT INTO */
                            else
                                    lev = LOGSTMT_ALL;
                            break;

                            /* utility statements --- same whether raw or cooked */
                    case T_TransactionStmt:
                            lev = LOGSTMT_ALL;
                            break;

                    case T_DeclareCursorStmt:
                            lev = LOGSTMT_ALL;
                            break;


    改成如下 : 

                    case T_DeleteStmt:
                    case T_UpdateStmt:
                            lev = LOGSTMT_MOD;
                            break;
                    case T_InsertStmt:  // 这个改一下
                            lev = LOGSTMT_ALL;
                            break;


    重新编译即可, 那么使用mod级别的话不再记录insert语句.
    以上修改只对简单调用有效, 如果是prepared statement, 还需要修改以下部分对应的INSERT级别 : 

                            /* already-planned queries */
                    case T_PlannedStmt:
                            /* parsed-and-rewritten-but-not-planned queries */
                    case T_Query:


