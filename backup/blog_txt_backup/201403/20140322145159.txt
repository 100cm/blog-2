PostgreSQL research

PostgreSQL DBA's Bad habits Case

2014-03-22 14:51:59   查看原文>>

在数据库管理过程中, 你可能会遇到这样的场景, 某些表的数据因为某些原因可能要备份一份存档.
例如tbl表, 我们要保留当天的一个镜像, 这个镜像数据可能后期不会使用, 也可能因为某种原因要回退到这个镜像.
一般的做法可能是直接生成一份同样的表, 例如.
create table tbl_20140322 as select * from tbl;
这样的话, 数据库中多了一份和当前的tbl一样的数据, 这种表数据库中仅仅是多占用了一些空间这么简单吗?
那么会有哪些副作用呢?
1. 增加存储空间. 同时也增加了物理备份的存储空间.
2. 增加逻辑备份的时间, 当然你可以在备份时排除这个表.
3. 逻辑备份由于需要开启一个repeatable read事务, 备份时间越长, 对垃圾回收影响就越大.
4. 这点可能是容易忽略的, 那就是因为PostgreSQL的MVCC机制, 每条记录上都有一个事务信息, 这个事务信息在随着数据库新事务的产生是需要freeze的. freeze即把xmin改成frozenid, 因此会产生IO操作, 同时也会产生XLOG信息. 如果这种表比较大的话, 这个负面影响也是比较大的. 具体原理参看http://blog.163.com/digoal@126/blog/static/
163877040201412282455978/.
我们来举一个例子 : 

digoal=# create table tbl(id int, info text, crt_time timestamp);
CREATE TABLE
digoal=# insert into tbl select generate_series(1,100000000),md5(random()::text),clock_timestamp();
INSERT 0 100000000
digoal=# \dt+ tbl
                    List of relations
 Schema | Name | Type  |  Owner   |  Size   | Description 
--------+------+-------+----------+---------+-------------
 public | tbl  | table | postgres | 7268 MB | 
(1 row)
digoal=# create table tbl_20140322 as select * from tbl;
SELECT 100000000
digoal=# select txid_current(),relname,age(relfrozenxid) from pg_class where relname='tbl_20140322';
 txid_current |   relname    | age 
--------------+--------------+-----
   3269512911 | tbl_20140322 |   0
(1 row)
digoal=# select txid_current(),relname,age(relfrozenxid) from pg_class where relname='tbl_20140322';
 txid_current |   relname    | age 
--------------+--------------+-----
   3269512912 | tbl_20140322 |   1
(1 row)
digoal=# select txid_current(),relname,age(relfrozenxid) from pg_class where relname='tbl_20140322';
 txid_current |   relname    | age 
--------------+--------------+-----
   3269512913 | tbl_20140322 |   2
(1 row)
digoal=# vacuum freeze tbl_20140322 ;
VACUUM
digoal=# select txid_current(),relname,age(relfrozenxid) from pg_class where relname='tbl_20140322';
 txid_current |   relname    | age 
--------------+--------------+-----
   3269512914 | tbl_20140322 |   0
(1 row)
digoal=# select txid_current(),relname,age(relfrozenxid) from pg_class where relname='tbl_20140322';
 txid_current |   relname    | age 
--------------+--------------+-----
   3269512915 | tbl_20140322 |   1
(1 row)
digoal=# select txid_current(),relname,age(relfrozenxid) from pg_class where relname='tbl_20140322';
 txid_current |   relname    | age 
--------------+--------------+-----
   3269512916 | tbl_20140322 |   2
(1 row)
digoal=# checkpoint;
CHECKPOINT
digoal=# select pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 218/D8DCDA60
(1 row)


第一次vacuum freeze, 产生数据文件的读和写IO, 以及写相应的xlog.

digoal=# vacuum (freeze,verbose) tbl_20140322 ;
INFO:  vacuuming "public.tbl_20140322"
INFO:  "tbl_20140322": found 0 removable, 100000000 nonremovable row versions in 232559 out of 232559 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 14.32s/66.81u sec elapsed 182.06 sec.
INFO:  vacuuming "pg_toast.pg_toast_26123"
INFO:  index "pg_toast_26123_index" now contains 0 row versions in 1 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
INFO:  "pg_toast_26123": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM
digoal=# select pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 21A/A040AF70
(1 row)


这次vacuum freeze产生的XLOG写入量和表差不多大.

digoal=# select pg_xlog_location_diff('21A/A040AF70','218/D8DCDA60')/1024/1024.0;
       ?column?        
-----------------------
 7286.2395172119140625
(1 row)


接下来我们模拟在数据库中产生一定量的的事务.

pg93@db-172-16-3-150-> vi test.sql
select txid_current();
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 30 s
number of transactions actually processed: 681050
tps = 22701.077952 (including connections establishing)
tps = 22712.325750 (excluding connections establishing)
statement latencies in milliseconds:
        0.702341        select txid_current();
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 300
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 300 s
number of transactions actually processed: 6842670
tps = 22808.842446 (including connections establishing)
tps = 22810.005145 (excluding connections establishing)
statement latencies in milliseconds:
        0.699292        select txid_current();


执行检查点.

pg93@db-172-16-3-150-> psql
psql (9.3.3)
Type "help" for help.
digoal=# checkpoint;
CHECKPOINT


查看当前表的年龄, 已经随着事务的增长而增长了.

digoal=# select txid_current(),relname,age(relfrozenxid) from pg_class where relname='tbl_20140322';
 txid_current |   relname    |   age   
--------------+--------------+---------
   3277036664 | tbl_20140322 | 7523720
(1 row)


记录当前的XLOG位置.

digoal=# select pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 21A/B5C9C768
(1 row)


执行vacuum freeze (这个操作在到一定时候也会自动发送, 我们这里只是模拟它立刻发生)

digoal=# vacuum (freeze,verbose) tbl_20140322 ;
INFO:  vacuuming "public.tbl_20140322"
INFO:  "tbl_20140322": found 0 removable, 100000000 nonremovable row versions in 232559 out of 232559 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 2.12s/11.14u sec elapsed 15.86 sec.
INFO:  vacuuming "pg_toast.pg_toast_26123"
INFO:  index "pg_toast_26123_index" now contains 0 row versions in 1 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
INFO:  "pg_toast_26123": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM


记录vacuum freeze后的XLOG位置

digoal=# select pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 21A/B5CA3B10
(1 row)


第二次vacuum freeze, 这个表还是要全部扫描一遍的, 所以产生了大量的读IO, 但是仅仅产生少量的写IO, 以及少量的XLOG.

digoal=# select pg_xlog_location_diff('21A/B5CA3B10','21A/B5C9C768')/1024/1024.0;
        ?column?        
------------------------
 0.02823638916015625000
(1 row)


执行完vacuum freeze后, 年龄回到0.

digoal=# select txid_current(),relname,age(relfrozenxid) from pg_class where relname='tbl_20140322';
 txid_current |   relname    | age 
--------------+--------------+-----
   3277036665 | tbl_20140322 |   0
(1 row)


为什么第二次只产生了少量的写, 因为第一次vacuum freeze后, tuple的xmin以及变更成FrozenXID了, 只是在pg_class.relfrozenxid还记录了VACUUM是的事务号, 所以第二次不需要再变更tuple上的xmin , 只需要变更pg_class.relfrozenxid.
我们可以看到vacuum freeze后xmin变更成FrozenXID, 所以以后不需要再修改tuple的xmin.

digoal=# select xmin from tbl_20140322 limit 1;
 xmin 
------
    2
(1 row)


使用数据表对应的数据文件MD5值也可以看到, 第二次VACUUM FREEZE没有写操作.

digoal=# select pg_relation_filepath('tbl_20140322');
 pg_relation_filepath 
----------------------
 base/16384/26123
(1 row)


第二次vacuum freeze以后发生的vacuum freeze 前后md5没有变化.

cd $PGDATA
pg93@db-172-16-3-150-> md5sum base/16384/26123*
e922da723c5259cc54398d52b69a17c2  base/16384/26123
26c77fc26e8302f7678b827942ac71e0  base/16384/26123.1
258bd29204f9713bf67c2cfac02e24cd  base/16384/26123.2
116b4a8ab93c416ffe3154e7be5e1645  base/16384/26123.3
c0118b1d800b4a1e987aa53b7223ffc9  base/16384/26123.4
06bd9bf0d82fafdec3d88ea2e964288b  base/16384/26123.5
df4e09895c7c26a7b4e02ce28b825c4b  base/16384/26123.6
cddf603ef305fc6a267592f8f6693a24  base/16384/26123.7
b6fe1c8dc4163e915b0aabc11c8649a4  base/16384/26123_fsm
ec1cc6e5e6b74b282ff54bc575ed2c17  base/16384/26123_vm



经常有人问我, PostgreSQL支持多大的数据库? 理论上是没有大小限制的, 但是我们也必须考虑到mvcc的机制, 数据库越大, 它在vacuum freeze产生的IO也越大, 如果数据库的事务请求特别频繁的话, vacuum freeze的间隙就越短, 当IO能力不够的情况下, 就会出现问题.  
例如一个数据库的硬件可以支撑1天对20TB的数据完成vacuum freeze操作. 那么如果1个表的大小大于20TB并且1天大于20亿的新事务ID请求的话就会有问题. 因为没有足够的时间完成vacuum freeze, 使得年龄问题得到解决.

为了避免类似问题, 作为PostgreSQL管理员, 尽量不要在数据库中保留过多的无用数据. 因为至少产生一次全表的写IO以及XLOG, 以后经过一定的事务后也会不断的带来读IO. 

对于需要定期清理数据的业务, 例如每个月清理一次历史的日志数据.

tbl
tbl_201301
tbl_201302
tbl_201303
tbl_201304


这种场景, 为了节约auto vacuum freeze带来的IO操作, 最好在表的年龄到达自动触发全表的vacuum freeze前, 就清理掉.

[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201412282455978/
