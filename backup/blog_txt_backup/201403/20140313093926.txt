PostgreSQL research

PostgreSQL Why IndexOnlyScan startup_cost > 0 and bitmap index scan startup_cost=0 ?

2014-03-13 9:39:26   查看原文>>

在查看explain输出时, 每个节点的成本部分的输出包含两个部分.
一个是启动成本也叫startup_cost, 另一个是总的成本, 包含该节点的启动成本以及输出所有行的成本也叫total_cost.
索引扫描的启动成本怎么计算的可以参考src/backend/utils/adt/selfuncs.c
例如btree索引访问的成本计算通过btcostestimate来计算.

digoal=# select amcostestimate,amname from pg_am;
  amcostestimate  | amname 
------------------+--------
 btcostestimate   | btree
 hashcostestimate | hash
 gistcostestimate | gist
 gincostestimate  | gin
 spgcostestimate  | spgist
(5 rows)
digoal=# \sf+ btcostestimate
        CREATE OR REPLACE FUNCTION pg_catalog.btcostestimate(internal, internal, internal, internal, internal, internal, internal)
         RETURNS void
         LANGUAGE internal
         STRICT
1       AS $function$btcostestimate$function$


启动成本(indexStartupCost):

        /*
         * Add a CPU-cost component to represent the costs of initial btree
         * descent.  We don't charge any I/O cost for touching upper btree levels,
         * since they tend to stay in cache, but we still have to do about log2(N)
         * comparisons to descend a btree of N leaf tuples.  We charge one
         * cpu_operator_cost per comparison.
         *
         * If there are ScalarArrayOpExprs, charge this once per SA scan.  The
         * ones after the first one are not startup cost so far as the overall
         * plan is concerned, so add them only to "total" cost.
         */
        if (index->tuples > 1)          /* avoid computing log(0) */
        {
                descentCost = ceil(log(index->tuples) / log(2.0)) * cpu_operator_cost;
                costs.indexStartupCost += descentCost;
                costs.indexTotalCost += costs.num_sa_scans * descentCost;
        }

        /*
         * Even though we're not charging I/O cost for touching upper btree pages,
         * it's still reasonable to charge some CPU cost per page descended
         * through.  Moreover, if we had no such charge at all, bloated indexes
         * would appear to have the same search cost as unbloated ones, at least
         * in cases where only a single leaf page is expected to be visited.  This
         * cost is somewhat arbitrarily set at 50x cpu_operator_cost per page
         * touched.  The number of such pages is btree tree height plus one (ie,
         * we charge for the leaf page too).  As above, charge once per SA scan.
         */
        descentCost = (index->tree_height + 1) * 50.0 * cpu_operator_cost;
        costs.indexStartupCost += descentCost;
        costs.indexTotalCost += costs.num_sa_scans * descentCost;

获得btree索引root页的heigh或level.
src/backend/access/nbtree/nbtpage.c

/*
 *      _bt_getrootheight() -- Get the height of the btree search tree.
 *
 *              We return the level (counting from zero) of the current fast root.
 *              This represents the number of tree levels we'd have to descend through
 *              to start any btree index search.
 *
 *              This is used by the planner for cost-estimation purposes.  Since it's
 *              only an estimate, slightly-stale data is fine, hence we don't worry
 *              about updating previously cached data.
 */
int
_bt_getrootheight(Relation rel)



实际例子 : 

digoal=# create table t11(id int primary key, info text);
CREATE TABLE
digoal=# insert into t11 select generate_series(1,100000),'test';
INSERT 0 100000
digoal=# explain select * from t11 where id=1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Index Scan using t11_pkey on t11  (cost=0.29..4.31 rows=1 width=9)  -- 启动成本是0.29, 因为输出第一行前需要先扫描索引. 因为实际的行是从heap page输出的.
   Index Cond: (id = 1)
(2 rows)
btree节点的startup_cost计算方法 :
digoal=# select reltuples from pg_class where relname='t11_pkey';
 reltuples
-----------
    100000
(1 row)
digoal=# show cpu_operator_cost;
 cpu_operator_cost
-------------------
 0.0025
(1 row)
digoal=# select (log(100000)/log(2.0))*0.0025;
     ?column?
-------------------
 0.041524101186092
(1 row)
digoal=# create extension pageinspect;
CREATE EXTENSION
digoal=# SELECT * FROM bt_metap('t11_pkey');
 magic  | version | root | level | fastroot | fastlevel
--------+---------+------+-------+----------+-----------
 340322 |       2 |    3 |     1 |        3 |         1
(1 row)
digoal=# select (1+1)*50*0.0025;
 ?column?
----------
   0.2500
(1 row)
digoal=# select 0.041524101186092+0.2500;
     ?column?
-------------------
 0.291524101186092
(1 row)

digoal=# explain select id from t11 where id=1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Index Only Scan using t11_pkey on t11  (cost=0.29..4.31 rows=1 width=4)  -- 计算方法同上, 但是实际上index only scan比index scan慢. 后面看原因
   Index Cond: (id = 1)
(2 rows)

digoal=# set enable_indexscan=off;
SET
digoal=# explain select id from t11 where id=1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Bitmap Heap Scan on t11  (cost=2.30..4.31 rows=1 width=4)  -- 这里的启动成本包含了所有子节点的成本. 
   Recheck Cond: (id = 1)
   ->  Bitmap Index Scan on t11_pkey  (cost=0.00..2.30 rows=1 width=0)  -- bitmap index scan节点的启动成本被算到bitmap heap scan上了, 所以在bitmap index scan节点不显示这部分开销, TomLane对这点的解释见末尾.
         Index Cond: (id = 1)
(4 rows)

digoal=# set enable_bitmapscan=off;
SET
digoal=# explain select id from t11 where id=1;
                      QUERY PLAN                      
------------------------------------------------------
 Seq Scan on t11  (cost=0.00..1385.00 rows=1 width=4)  -- 全表扫描不计算启动成本, 因为扫描的是heap page同时也是直接从heap page输出.
   Filter: (id = 1)
(2 rows)

我们看看为什么index only scan比index scan更慢.
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from t11 where id<10000;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Index Scan using t11_pkey on public.t11  (cost=0.29..200.78 rows=9799 width=9) (actual time=0.074..3.530 rows=9999 loops=1)  
   Output: id, info
   Index Cond: (t11.id < 10000)
   Buffers: shared hit=22
 Total runtime: 4.677 ms
(5 rows)
从结果看index only scan实际执行时间更长一点点.
digoal=# explain (analyze,verbose,costs,buffers,timing) select id from t11 where id<10000;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using t11_pkey on public.t11  (cost=0.29..204.20 rows=9995 width=4) (actual time=0.088..3.623 rows=9999 loops=1)
   Output: id
   Index Cond: (t11.id < 10000)
   Heap Fetches: 9999  -- 区别就在这里, 在没有vm文件之前, 需要fetch所有的heap page拿到行的版本信息.
   Buffers: shared hit=22
 Total runtime: 4.748 ms
(6 rows)

digoal=# vacuum ANALYZE t11;
VACUUM
digoal=# explain (analyze,verbose,costs,buffers,timing) select id from t11 where id<10000;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using t11_pkey on public.t11  (cost=0.29..191.64 rows=10020 width=4) (actual time=0.088..2.597 rows=9999 loops=1)
   Output: id
   Index Cond: (t11.id < 10000)
   Heap Fetches: 0  -- 使用vacuum analyze生成vm文件之后, 通过查看vm得到所有的页都是可见的, 所以不需要fetch heap后取得行版本信息.但是多了逻辑, 时间还是比index scan更长.
   Buffers: shared hit=9
 Total runtime: 3.634 ms
(6 rows)



n关于bitmap index scan startup_cost=0, TomLane的解释 :
nWe don't bother to store/show the indexscan's startup cost in such cases,
nsince it has no effect whatsoever on subsequent planning: the total cost
nof the indexscan will go into the parent's startup cost anyway.

[参考]
1. src/backend/utils/adt/selfuncs.c
2. src/backend/executor/nodeIndexonlyscan.c
3. src/backend/optimizer/path/costsize.c
4. src/backend/access/nbtree/nbtpage.c
5. http://www.postgresql.org/docs/9.3/static/sql-explain.html
6. http://www.postgresql.org/docs/9.3/static/using-explain.html
