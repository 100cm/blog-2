PostgreSQL research

$PGDATA/pg_snapshots directory's function

2013-06-08 8:34:55   查看原文>>

pg_snapshots目录在$PGDATA下, 它的作用是什么呢?
它和9.2新增的export snapshot功能有关, 用来存储到处的事务状态信息, 关于export snapshot可以参考 : 
http://blog.163.com/digoal@126/blog/static/1638770402012416105232835/
以下介绍一下这个目录中存放的是什么?
在没有导出事务镜像时, 这个目录中没有任何信息.

pg93@db-172-16-3-33-> cd $PGDATA/pg_snapshots
pg93@db-172-16-3-33-> ll
total 0


开启一个repeatable read事务, 导出当前事务状态 : 

pg93@db-172-16-3-33-> psql
psql (9.3devel)
Type "help" for help.
digoal=# begin TRANSACTION ISOLATION LEVEL repeatable read;
BEGIN
digoal=# SELECT pg_export_snapshot();
 pg_export_snapshot 
--------------------
 00194F81-1
(1 row)
digoal=# select txid_current();
 txid_current 
--------------
      1658753
(1 row)


查看$PGDATA/pg_snapshots目录, 多了个文件, 与使用pg_export_snapshot()函数的返回值同名.

pg93@db-172-16-3-33-> ll
total 4.0K
-rw------- 1 pg93 pg93 87 Jun  8 08:19 00194F81-1


这个文件的内容如下 : 

pg93@db-172-16-3-33-> cat 00194F81-1 
xid:1658753
dbid:16385
iso:2
ro:0
xmin:1658753
xmax:1658753
xcnt:0
sof:0
sxcnt:0
rec:0


这些字段的详解见本文末尾部分.
执行一些SQL后再次导出一个事务状态信息

digoal=# create table t1(id int);
CREATE TABLE
digoal=# insert into t1 values (1);
INSERT 0 1
digoal=# SELECT pg_export_snapshot();
 pg_export_snapshot 
--------------------
 00194F81-2
(1 row)


又多了个文件, 由于当前数据库中没有其他事务, 所以状态不变.

pg93@db-172-16-3-33-> ll
total 8.0K
-rw------- 1 pg93 pg93 87 Jun  8 08:19 00194F81-1
-rw------- 1 pg93 pg93 87 Jun  8 08:21 00194F81-2
pg93@db-172-16-3-33-> cat 00194F81-2
xid:1658753
dbid:16385
iso:2
ro:0
xmin:1658753
xmax:1658753
xcnt:0
sof:0
sxcnt:0
rec:0

结束导出镜像的事务后, 这两个文件将被清除掉.

digoal=# end;
COMMIT
pg93@db-172-16-3-33-> ll
total 0



9.3 新增了pg_dump的并行导出, 其中也用到了export snapshot, 所以在使用pg_dump做并行导出时这个目录中也会有信息.
并行导出请参考 : 
http://blog.163.com/digoal@126/blog/static/163877040201322510519547/
http://blog.163.com/digoal@126/blog/static/163877040201326829943/
举例如下 : 

pg93@db-172-16-3-33-> pg_dump -f ./postgres.dmp -F d -E UTF8 -j 2 -h $PGDATA -p 1999 -U postgres postgres
pg93@db-172-16-3-33-> ll
total 4.0K
-rw------- 1 pg93 pg93 87 Jun  8 08:34 001956A7-1



[参考]
1. src/backend/utils/time/snapmgr.c

/* Define pathname of exported-snapshot files */
#define SNAPSHOT_EXPORT_DIR "pg_snapshots"
#define XactExportFilePath(path, xid, num, suffix) \
        snprintf(path, sizeof(path), SNAPSHOT_EXPORT_DIR "/%08X-%d%s", \
                         xid, num, suffix)


2. 

static char *
ExportSnapshot(Snapshot snapshot)


3. 

void
ImportSnapshot(const char *idstr)


4. http://blog.163.com/digoal@126/blog/static/1638770402012416105232835/
5. http://blog.163.com/digoal@126/blog/static/163877040201322510519547/
6. http://blog.163.com/digoal@126/blog/static/163877040201326829943/
7. pg_export_snapshot导出的事务状态文件中包含的内容如下 : 

        appendStringInfo(&buf, "xid:%u\n", topXid);
        appendStringInfo(&buf, "dbid:%u\n", MyDatabaseId);
        appendStringInfo(&buf, "iso:%d\n", XactIsoLevel);
        appendStringInfo(&buf, "ro:%d\n", XactReadOnly);

        appendStringInfo(&buf, "xmin:%u\n", snapshot->xmin);
        appendStringInfo(&buf, "xmax:%u\n", snapshot->xmax);
可能还会包含当前未结束的事务信息
        appendStringInfo(&buf, "xcnt:%d\n", snapshot->xcnt + addTopXid);
        for (i = 0; i < snapshot->xcnt; i++)
                appendStringInfo(&buf, "xip:%u\n", snapshot->xip[i]);
        if (addTopXid)
                appendStringInfo(&buf, "xip:%u\n", topXid);
以及子事务信息
        if (snapshot->suboverflowed ||
                snapshot->subxcnt + nchildren > GetMaxSnapshotSubxidCount())
                appendStringInfoString(&buf, "sof:1\n");
        else
        {
                appendStringInfoString(&buf, "sof:0\n");
                appendStringInfo(&buf, "sxcnt:%d\n", snapshot->subxcnt + nchildren);
                for (i = 0; i < snapshot->subxcnt; i++)
                        appendStringInfo(&buf, "sxp:%u\n", snapshot->subxip[i]);
                for (i = 0; i < nchildren; i++)
                        appendStringInfo(&buf, "sxp:%u\n", children[i]);
        }
        appendStringInfo(&buf, "rec:%u\n", snapshot->takenDuringRecovery);


Flag Counter
