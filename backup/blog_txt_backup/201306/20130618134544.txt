PostgreSQL research

PostgreSQL advisory lock key introduce

2013-06-18 13:45:44   查看原文>>

PostgreSQL 支持应用程序控制的锁(advisory lock), 可规避长时间持普通锁带来的vacuum无法回收垃圾的问题.
用法可参见:
http://blog.163.com/digoal@126/blog/static/163877040201172492217830/
本文介绍一下获取锁的key值. advirosy lock的key值一共64比特, 可以为int8类型. 也可以选择两个int4类型的值, 拼凑起来就是64比特.
函数如下 : 
┌─────────────────────────────────────────┬───────┬──────────────────────────────────────────────────────────┐
│pg_try_advisory_lock(key bigint)         │boolean│Obtain exclusive session level advisory lock if available │
├─────────────────────────────────────────┼───────┼──────────────────────────────────────────────────────────┤
│pg_try_advisory_lock(key1 int, key2 int) │boolean│Obtain exclusive session level advisory lock if available │
└─────────────────────────────────────────┴───────┴──────────────────────────────────────────────────────────┘
对应的代码如下 : 
src/backend/utils/adt/lockfuncs.c

/*
 * pg_advisory_lock(int4, int4) - acquire exclusive lock on 2 int4 keys
 */
Datum
pg_advisory_lock_int4(PG_FUNCTION_ARGS)
{
        int32           key1 = PG_GETARG_INT32(0);
        int32           key2 = PG_GETARG_INT32(1);
        LOCKTAG         tag;

        SET_LOCKTAG_INT32(tag, key1, key2);

        (void) LockAcquire(&tag, ExclusiveLock, true, false);

        PG_RETURN_VOID();
}

/*
 * pg_advisory_lock(int8) - acquire exclusive lock on an int8 key
 */
Datum
pg_advisory_lock_int8(PG_FUNCTION_ARGS)
{
        int64           key = PG_GETARG_INT64(0);
        LOCKTAG         tag;

        SET_LOCKTAG_INT64(tag, key);

        (void) LockAcquire(&tag, ExclusiveLock, true, false);

        PG_RETURN_VOID();
}


分别使用SET_LOCKTAG_INT32和SET_LOCKTAG_INT64来设置锁标签.

/*
 * Functions for manipulating advisory locks
 *
 * We make use of the locktag fields as follows:
 *
 *      field1: MyDatabaseId ... ensures locks are local to each database
 *      field2: first of 2 int4 keys, or high-order half of an int8 key
 *      field3: second of 2 int4 keys, or low-order half of an int8 key
 *      field4: 1 if using an int8 key, 2 if using 2 int4 keys
 */
#define SET_LOCKTAG_INT64(tag, key64) \
        SET_LOCKTAG_ADVISORY(tag, \
                                                 MyDatabaseId, \
                                                 (uint32) ((key64) >> 32), \
                                                 (uint32) (key64), \
                                                 1)
#define SET_LOCKTAG_INT32(tag, key1, key2) \
        SET_LOCKTAG_ADVISORY(tag, MyDatabaseId, key1, key2, 2)


从以上macro可以看出, int8其实分解成了2个unsigned int4. 然后调用SET_LOCKTAG_ADVISORY设置锁标签. 如下 : 
src/include/storage/lock.h

#define SET_LOCKTAG_ADVISORY(locktag,id1,id2,id3,id4) \
        ((locktag).locktag_field1 = (id1), \
         (locktag).locktag_field2 = (id2), \
         (locktag).locktag_field3 = (id3), \
         (locktag).locktag_field4 = (id4), \
         (locktag).locktag_type = LOCKTAG_ADVISORY, \
         (locktag).locktag_lockmethodid = USER_LOCKMETHOD)


传入的参数key1和key2或者是int8分解出来的key1和key2分别用于设置LOCKTAG的 locktag_field2和 locktag_field3.

/*
 * The LOCKTAG struct is defined with malice aforethought to fit into 16
 * bytes with no padding.  Note that this would need adjustment if we were
 * to widen Oid, BlockNumber, or TransactionId to more than 32 bits.
 *
 * We include lockmethodid in the locktag so that a single hash table in
 * shared memory can store locks of different lockmethods.
 */
typedef struct LOCKTAG
{
        uint32          locktag_field1; /* a 32-bit ID field */
        uint32          locktag_field2; /* a 32-bit ID field */
        uint32          locktag_field3; /* a 32-bit ID field */
        uint16          locktag_field4; /* a 16-bit ID field */
        uint8           locktag_type;   /* see enum LockTagType */
        uint8           locktag_lockmethodid;   /* lockmethod indicator */
} LOCKTAG;




[测试]
1. MyDatabaseId指数据库当前数据库ID, 所以不同的数据库中可以同时对同一个key获取advisory lock .
测试如下 : 
SESSION A : 

pg93@db-172-16-3-33-> psql
psql (9.3devel)
Type "help" for help.
digoal=# select pg_advisory_lock(0,1);
 pg_advisory_lock 
------------------
 
(1 row)


SESSION B : 

pg93@db-172-16-3-33-> psql
psql (9.3devel)
Type "help" for help.
digoal=# select pg_advisory_lock(0,1);
Cancel request sent
ERROR:  canceling statement due to user request
digoal=# select pg_try_advisory_lock(0,1);
 pg_try_advisory_lock 
----------------------
 f
(1 row)


换个数据库, 对同样的key加锁, 即可获得成功.

digoal=# \c postgres 
You are now connected to database "postgres" as user "postgres".
postgres=# select pg_try_advisory_lock(0,1);
 pg_try_advisory_lock 
----------------------
 t
(1 row)



2. pg_advisory_lock(int4, int4), pg_advisory_lock(int8) 的key空间会不会冲突?
测试 : 
将 int8 分解成2个int4, 然后使用 pg_advisory_lock(int4, int4) 加锁能成功么?
例如key=1, 数字转varbit的过程可参考 : 
http://blog.163.com/digoal@126/blog/static/16387704020132592725462/
如下 : 

digoal=# do language plpgsql $$
declare
  o_bit text;
  o_len int;
  i_num int;
  i_conv int;
  i_num_abs int;
  i_res int;
  i_mod int;
begin
  o_len := 64;
  i_num := 1;
  i_conv := 2;
  i_num_abs := abs(i_num);
  i_res := i_num_abs/i_conv;
  i_mod := mod(i_num_abs,i_conv);
  o_bit := i_mod::text;
  loop
    if i_res = 0 then
      exit;
    end if;
    i_mod := mod(i_res,i_conv);
    i_res := i_res/i_conv;
    o_bit := i_mod||o_bit;
  end loop;
  o_len := o_len - char_length(o_bit) - 1;
  o_bit := repeat('0', o_len)||o_bit;
  if i_num >=0 then
    o_bit := '0'||o_bit;
  else
    o_bit := '1'||o_bit;
  end if;
  raise notice '%', o_bit;
end;
$$;
NOTICE:  0000000000000000000000000000000000000000000000000000000000000001
DO


转换成两个int4为0,1;
SESSION A : 

pg93@db-172-16-3-33-> psql
psql (9.3devel)
Type "help" for help.
digoal=# select pg_advisory_lock(int8 '1');
 pg_advisory_lock 
------------------
 
(1 row)


SESSION B : 

digoal=# select pg_try_advisory_lock(0,1);
 pg_try_advisory_lock 
----------------------
 t
(1 row)
digoal=# select pg_try_advisory_lock(int8 '1');
 pg_try_advisory_lock 
----------------------
 f
(1 row)


因此pg_advisory_lock(int4, int4), pg_advisory_lock(int8) 的key空间不冲突.
原因是代码中对64bit和32bit分别设置LOCKTAG.locktag_field4为1和2. 所以不会冲突.
如果将SET_LOCKTAG_INT64 和 SET_LOCKTAG_INT32的macro的最后一个参数改成一致的那么就会冲突了.
如下, 修改

[root@db-172-16-3-33 postgresql-9.3devel]# vi src/backend/utils/adt/lockfuncs.c
/*
 * Functions for manipulating advisory locks
 *
 * We make use of the locktag fields as follows:
 *
 *      field1: MyDatabaseId ... ensures locks are local to each database
 *      field2: first of 2 int4 keys, or high-order half of an int8 key
 *      field3: second of 2 int4 keys, or low-order half of an int8 key
 *      field4: 1 if using an int8 key, 2 if using 2 int4 keys
 */
#define SET_LOCKTAG_INT64(tag, key64) \
        SET_LOCKTAG_ADVISORY(tag, \
                                                 MyDatabaseId, \
                                                 (uint32) ((key64) >> 32), \
                                                 (uint32) (key64), \
                                                 1)
#define SET_LOCKTAG_INT32(tag, key1, key2) \
        SET_LOCKTAG_ADVISORY(tag, MyDatabaseId, key1, key2, 1)


重新编译 : 

[root@db-172-16-3-33 postgresql-9.3devel]# gmake world
[root@db-172-16-3-33 postgresql-9.3devel]# gmake install-world


重启数据库 : 

[root@db-172-16-3-33 postgresql-9.3devel]# su - pg93
pg93@db-172-16-3-33-> pg_ctl restart -m fast
waiting for server to shut down.... done
server stopped
server starting


重新测试以上是否冲突 : 
SESSION A : 

pg93@db-172-16-3-33-> psql
psql (9.3devel)
Type "help" for help.
digoal=# select pg_advisory_lock(int8 '1');
 pg_advisory_lock 
------------------
 
(1 row)


SESSION B : 

digoal=# select pg_try_advisory_lock(0,1);
 pg_try_advisory_lock 
----------------------
 f
(1 row)
digoal=# select pg_try_advisory_lock(int8 '1');
 pg_try_advisory_lock 
----------------------
 f
(1 row)
现在冲突了.



[参考]
1. src/backend/utils/adt/lockfuncs.c
2. src/include/storage/lock.h
3. http://www.postgresql.org/docs/9.3/static/functions-admin.html#FUNCTIONS-ADVISORY-LOCKS
4. http://blog.163.com/digoal@126/blog/static/16387704020132592725462/
