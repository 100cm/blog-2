PostgreSQL research

PostgreSQL 9.2devel add JSON type and some functions

2012-02-15 12:29:37   查看原文>>

PostgreSQL 9.2 可能增加json类型.
目前已提交的patch测试如下 : 
新增类型查询 : 

pg9.2devel=> select * from pg_type where typname ~* 'json';
 typname | typnamespace | typowner | typlen | typbyval | typtype | typcategory | typispreferred | typisdefined | typdelim | typrelid
 | typelem | typarray | typinput | typoutput | typreceive |  typsend   | typmodin | typmodout | typanalyze | typalign | typstorage |
 typnotnull | typbasetype | typtypmod | typndims | typcollation | typdefaultbin | typdefault | typacl 
---------+--------------+----------+--------+----------+---------+-------------+----------------+--------------+----------+---------
-+---------+----------+----------+-----------+------------+------------+----------+-----------+------------+----------+------------+
------------+-------------+-----------+----------+--------------+---------------+------------+--------
 json    |           11 |       10 |     -1 | f        | b       | U           | f              | t            | ,        |        0
 |       0 |      199 | json_in  | json_out  | json_recv  | json_send  | -        | -         | -          | i        | x          |
 f          |           0 |        -1 |        0 |            0 |               |            | 
 _json   |           11 |       10 |     -1 | f        | b       | A           | f              | t            | ,        |        0
 |     114 |        0 | array_in | array_out | array_recv | array_send | -        | -         | -          | i        | x          |
 f          |           0 |        -1 |        0 |            0 |               |            | 
(2 rows)



新增函数 : 

pg9.2devel=> \df *.*json*
                              List of functions
   Schema   |     Name      | Result data type | Argument data types |  Type  
------------+---------------+------------------+---------------------+--------
 pg_catalog | array_to_json | json             | anyarray            | normal
 pg_catalog | array_to_json | json             | anyarray, boolean   | normal
 pg_catalog | json_in       | json             | cstring             | normal
 pg_catalog | json_out      | cstring          | json                | normal
 pg_catalog | json_recv     | json             | internal            | normal
 pg_catalog | json_send     | bytea            | json                | normal
 pg_catalog | row_to_json   | json             | record              | normal
 pg_catalog | row_to_json   | json             | record, boolean     | normal



row_to_json函数测试 : 
创建测试表：

digoal=> create table t1 (id int,info text);
CREATE TABLE


插入测试数据：

digoal=> insert into t1 select generate_series(1,10),'digoal'||generate_series(1,10);
INSERT 0 10


输出测试, key为列名或alias.

digoal=> select row_to_json(t) from (select id,info from t1) t;
         row_to_json         
-----------------------------
 {"id":1,"info":"digoal1"}
 {"id":2,"info":"digoal2"}
 {"id":3,"info":"digoal3"}
 {"id":4,"info":"digoal4"}
 {"id":5,"info":"digoal5"}
 {"id":6,"info":"digoal6"}
 {"id":7,"info":"digoal7"}
 {"id":8,"info":"digoal8"}
 {"id":9,"info":"digoal9"}
 {"id":10,"info":"digoal10"}
(10 rows)
digoal=> select row_to_json(t) from (select id as userid,info as nick from t1) t;
           row_to_json           
---------------------------------
 {"userid":1,"nick":"digoal1"}
 {"userid":2,"nick":"digoal2"}
 {"userid":3,"nick":"digoal3"}
 {"userid":4,"nick":"digoal4"}
 {"userid":5,"nick":"digoal5"}
 {"userid":6,"nick":"digoal6"}
 {"userid":7,"nick":"digoal7"}
 {"userid":8,"nick":"digoal8"}
 {"userid":9,"nick":"digoal9"}
 {"userid":10,"nick":"digoal10"}
(10 rows)



array_to_json函数测试 : 

digoal=> select array_to_json('{{firstname,zhou},{lastname,digoal},{job,dba}}'::text[]);
                       array_to_json                        
------------------------------------------------------------
 [["firstname","zhou"],["lastname","digoal"],["job","dba"]]
(1 row)



【参考】
http://www.postgresql.org/docs/devel/static/functions-json.html
http://www.postgresql.org/docs/devel/static/datatype-json.html


