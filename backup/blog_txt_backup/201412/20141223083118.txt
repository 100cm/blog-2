PostgreSQL research

PostgreSQL parallel mode and parallel contexts patch for parallel sequential scan or parallel sort and so on

2014-12-23 8:31:18   查看原文>>

Robert Haas 提交的 PostgreSQL 并行补丁, 基于此补丁, 未来可以支持顺序扫描, 排序等的并行处理.
有兴趣的朋友可以尝试一下这个补丁.

Attached is a patch that adds two new concepts: parallel mode, and
parallel contexts.  The idea of this code is to provide a framework
for specific parallel things that you want to do, such as parallel
sequential scan or parallel sort.  When you're in parallel mode,
certain operations - like DDL, and anything that would update the
command counter - are prohibited.  But you gain the ability to create
a parallel context, which in turn can be used to fire up parallel
workers.  And if you do that, then your snapshot, combo CID hash, and
GUC values will be copied to the worker, which is handy.

This patch is very much half-baked.  Among the things that aren't right yet:

- There's no handling of heavyweight locking, so I'm quite sure it'll
be possible to cause undetected deadlocks if you work at it.  There
are some existing threads on this topic and perhaps we can incorporate
one of those concepts into this patch, but this version does not.
- There's no provision for copying the parent's XID and sub-XIDs, if
any, to the background workers, which means that if you use this and
your transaction has written data, you will get wrong answers, because
TransactionIdIsCurrentTransactionId() will do the wrong thing.
- There's no really deep integration with the transaction system yet.
Previous discussions seem to point toward the need to do various types
of coordinated cleanup when the parallel phase is done, or when an
error happens.  In particular, you probably don't want the abort
record to get written while there are still possibly backends that are
part of that transaction doing work; and you certainly don't want
files created by the current transaction to get removed while some
other backend is still writing them.  The right way to work all of
this out needs some deep thought; agreeing on what the design should
be is probably harder than implement it.

Despite the above, I think this does a fairly good job laying out how
I believe parallelism can be made to work in PostgreSQL: copy a bunch
of state from the user backend to the parallel workers, compute for a
while, and then shut everything down.  Meanwhile, while parallelism is
running, forbid changes to state that's already been synchronized, so
that things don't get out of step.  I think the patch it shows how the
act of synchronizing state from the master to the workers can be made
quite modular and painless, even though it doesn't synchronize
everything relevant.  I'd really appreciate any design thoughts anyone
may have on how to fix the problems mentioned above, how to fix any
other problems you foresee, or even just a list of reasons why you
think this will blow up.

What I think is that we're really pretty close to do real parallelism,
and that this is probably the last major piece of infrastructure that
we need in order to support parallel execution in a reasonable way.
That's a pretty bold statement, but I believe it to be true: despite
the limitations of the current version of this patch, I think we're
very close to being able to sit down and code up a parallel algorithm
in PostgreSQL and have that not be all that hard.  Once we get the
first one, I expect a whole bunch more to come together far more
quickly than the first one did.

I would be remiss if I failed to mention that this patch includes work
by my colleagues Amit Kapila, Rushabh Lathia, and Jeevan Chalke, as
well as my former colleague Noah Misch; and that it would not have
been possible without the patient support of EnterpriseDB management.

Thanks,

-- 
Robert Haas
EnterpriseDB: http://www.enterprisedb.com
The Enterprise PostgreSQL Company

例子 : 
Here is another new version, with lots of bugs fixed.  The worker
shutdown sequence is now much more robust, although I think there may
still be a bug or two lurking, and I fixed a bunch of other things
too.  There's now a function called parallel_count() in the
parallel_dummy extension contained herein, which does a parallel count
of a relation you choose:

rhaas=# select count(*) from pgbench_accounts;
  count
---------
 4000000
(1 row)

Time: 396.635 ms
rhaas=# select parallel_count('pgbench_accounts'::regclass, 0);
NOTICE:  PID 2429 counted 4000000 tuples
 parallel_count
----------------
        4000000
(1 row)

Time: 234.445 ms
rhaas=# select parallel_count('pgbench_accounts'::regclass, 4);
NOTICE:  PID 2499 counted 583343 tuples
CONTEXT:  parallel worker, pid 2499
NOTICE:  PID 2500 counted 646478 tuples
CONTEXT:  parallel worker, pid 2500
NOTICE:  PID 2501 counted 599813 tuples
CONTEXT:  parallel worker, pid 2501
NOTICE:  PID 2502 counted 611389 tuples
CONTEXT:  parallel worker, pid 2502
NOTICE:  PID 2429 counted 1558977 tuples
 parallel_count
----------------
        4000000
(1 row)

Time: 150.004 ms
rhaas=# select parallel_count('pgbench_accounts'::regclass, 8);
NOTICE:  PID 2429 counted 1267566 tuples
NOTICE:  PID 2504 counted 346236 tuples
CONTEXT:  parallel worker, pid 2504
NOTICE:  PID 2505 counted 345077 tuples
CONTEXT:  parallel worker, pid 2505
NOTICE:  PID 2506 counted 355325 tuples
CONTEXT:  parallel worker, pid 2506
NOTICE:  PID 2507 counted 350872 tuples
CONTEXT:  parallel worker, pid 2507
NOTICE:  PID 2508 counted 338855 tuples
CONTEXT:  parallel worker, pid 2508
NOTICE:  PID 2509 counted 336903 tuples
CONTEXT:  parallel worker, pid 2509
NOTICE:  PID 2511 counted 326716 tuples
CONTEXT:  parallel worker, pid 2511
NOTICE:  PID 2510 counted 332450 tuples
CONTEXT:  parallel worker, pid 2510
 parallel_count
----------------
        4000000
(1 row)

Time: 166.347 ms

This example table (pgbench_accounts, scale 40, ~537 MB) is small
enough that parallelism doesn't really make sense; you can see from
the notice messages above that the master manages to count a quarter
of the table before the workers get themselves up and running.  The
pointer is rather to show how the infrastructure works and that it can
be used to write code to do practically useful tasks in a surprisingly
small number of lines of code; parallel_count is only maybe ~100 lines
on top of the base patch.

-- 
Robert Haas
EnterpriseDB: http://www.enterprisedb.com
The Enterprise PostgreSQL Company

[参考]
1. http://www.postgresql.org/message-id/flat/CA+Tgmob8u=J-D-_5SCXOQ9-ZtK_xCHjwa3M29CxBhU3VPPnezw@mail.gmail.com#CA+Tgmob8u=J-D-_5SCXOQ9-ZtK_xCHjwa3M29CxBhU3VPPnezw@mail.gmail.com
Flag Counter
