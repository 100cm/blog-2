PostgreSQL research

PostgreSQL pending patch : Compression of full-page-writes

2013-09-19 21:01:49   查看原文>>

Done. Attached is the updated version of the patch.

In this patch, full_page_writes accepts three values: on, compress, and off.
When it's set to compress, the full page image is compressed before it's
inserted into the WAL buffers.

I measured how much this patch affects the performance and the WAL
volume again, and I also measured how much this patch affects the
recovery time.

* Server spec
  CPU: 8core, Intel(R) Core(TM) i7-3630QM CPU @ 2.40GHz
  Mem: 16GB
  Disk: 500GB SSD Samsung 840

* Benchmark
  pgbench -c 32 -j 4 -T 900 -M prepared
  scaling factor: 100

  checkpoint_segments = 1024
  checkpoint_timeout = 5min
  (every checkpoint during benchmark were triggered by checkpoint_timeout)

* Result
  [tps]
  1344.2 (full_page_writes = on)
  1605.9 (compress)
  1810.1 (off)

  [the amount of WAL generated during running pgbench]
  4422 MB (on)
  1517 MB (compress)
    885 MB (off)

  [time required to replay WAL generated during running pgbench]
  61s (on)                 .... 1209911 transactions were replayed,
recovery speed: 19834.6 transactions/sec
  39s (compress)      .... 1445446 transactions were replayed,
recovery speed: 37062.7 transactions/sec
  37s (off)                 .... 1629235 transactions were replayed,
recovery speed: 44033.3 transactions/sec

When full_page_writes is disabled, the recovery speed is basically very low
because of random I/O. But, ISTM that, since I was using SSD in my box,
the recovery with full_page_writse=off was fastest.

Regards,

-- 
Fujii Masao


这个补丁针对full page write写, 在将块插入wal buffer之前, 使用pg_lzcompress进行压缩.
这么做的好处是减少了wal的大小, 可以节省xlog归档的归档存储, 对应wal写成为瓶颈的数据库也可以起到缓解作用. 同时对于流复制环境也是有帮助的, 它显然可以减少网络上传输的xlog数据量. 当然在数据库做pitr恢复时, 解压也会带来一些额外的计算量. 不过总体来说, 现在的瓶颈还是在io上的场景比较多一些. 
本补丁只是增加了一种full page write的选择, 你如果觉得没有必要的话, 完全可以不开启压缩. 通过参数full_page_writes进行配置.

! #full_page_writes = on                        # recover from partial page writes;
!                                       # off, compress, or on


测试 : 
使用PostgreSQL源码镜像如下 : 

wget 'http://git.postgresql.org/gitweb/?p=postgresql.git;a=snapshot;h=71901ab6daaad65c0168c05e016e4208efe5b71a;sf=tgz'


打补丁 : 

[root@db-172-16-3-39 ~]# cd /opt/soft_bak/postgresql-71901ab
[root@db-172-16-3-39 postgresql-71901ab]# wget http://www.postgresql.org/message-id/attachment/30082/compress_fpw_v2.patch
[root@db-172-16-3-39 postgresql-71901ab]# patch -p1 < compress_fpw_v2.patch 
[root@db-172-16-3-39 postgresql-71901ab]# ./configure --prefix=/home/pg94/pgsql9.4devel --with-pgport=2999 --with-perl --with-tcl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=16 --enable-dtrace && gmake && gmake install
[root@db-172-16-3-39 postgresql-71901ab]# cd contrib
[root@db-172-16-3-39 postgresql-71901ab]# gmake && gmake install
[root@db-172-16-3-39 postgresql-71901ab]# su - pg94
pg94@db-172-16-3-39-> initdb -D $PGDATA -E UTF8 --locale=C -W -U postgres
pg94@db-172-16-3-39-> cd $PGDATA


使用如下数据库配置 : 

pg94@db-172-16-3-39-> vi postgresql.conf 
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;
port = 2999                             # (change requires restart)
max_connections = 1000                  # (change requires restart)
superuser_reserved_connections = 13     # (change requires restart)
unix_socket_directories = '.'   # comma-separated list of directories
unix_socket_permissions = 0700          # begin with 0 to use octal notation
shared_buffers = 1024MB                 # min 128kB
maintenance_work_mem = 512MB            # min 1MB
shared_preload_libraries = 'pg_stat_statements'         # (change requires restart)
wal_level = hot_standby                 # minimal, archive, or hot_standby
synchronous_commit = off                # synchronization level;
wal_sync_method = fdatasync             # the default is the first option
full_page_writes = compress                  # recover from partial page writes
wal_buffers = 16384kB                   # min 32kB, -1 sets based on shared_buffers
wal_writer_delay = 20ms         # 1-10000 milliseconds
checkpoint_segments = 128               # in logfile segments, min 1, 16MB each
max_wal_senders = 32            # max number of walsender processes
wal_keep_segments = 128         # in logfile segments, 16MB each; 0 disables
hot_standby = on                        # "on" allows queries during recovery
max_standby_archive_delay = -1  # max delay before canceling queries
max_standby_streaming_delay = -1        # max delay before canceling queries
wal_receiver_status_interval = 1s       # send replies at least this often
hot_standby_feedback = on               # send info from standby to prevent
random_page_cost = 1.0                  # same scale as above
effective_cache_size = 10240MB
log_destination = 'csvlog'              # Valid values are combinations of
logging_collector = on          # Enable capturing of stderr and csvlog
log_directory = 'pg_log'                # directory where log files are written,
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,
log_file_mode = 0600                    # creation mode for log files,
log_truncate_on_rotation = on           # If on, an existing log file with the
log_rotation_age = 1d                   # Automatic rotation of logfiles will
log_rotation_size = 10MB                # Automatic rotation of logfiles will
log_min_duration_statement = 1s # -1 is disabled, 0 logs all statements
log_checkpoints = on
log_connections = on
log_disconnections = on
log_error_verbosity = verbose           # terse, default, or verbose messages
log_lock_waits = on                     # log lock waits >= deadlock_timeout
log_statement = 'ddl'                   # none, ddl, mod, all
log_timezone = 'PRC'
track_activity_query_size = 2048        # (change requires restart)
autovacuum = on                 # Enable autovacuum subprocess?  'on'
log_autovacuum_min_duration = 0 # -1 disables, 0 logs all actions and
datestyle = 'iso, mdy'
timezone = 'PRC'
lc_messages = 'C'                       # locale for system error message
lc_monetary = 'C'                       # locale for monetary formatting
lc_numeric = 'C'                        # locale for number formatting
lc_time = 'C'                           # locale for time formatting
default_text_search_config = 'pg_catalog.english'
pg_stat_statements.max = 1000
pg_stat_statements.track = all


full_page_writes配置为压缩模式 : 

pg94@db-172-16-3-39-> pg_ctl restart -m fast
pg94@db-172-16-3-39-> psql
psql (9.4devel)
Type "help" for help.
digoal=# show full_page_writes;
 full_page_writes 
------------------
 compress
(1 row)


创建测试表以及测试函数 : 

digoal=# create table test(id int primary key, info text, crt_time timestamp);
CREATE TABLE
digoal=# create or replace function f_test(i_id int) returns void as $$
declare
begin
  update test set crt_time=clock_timestamp() where id=i_id;
  if not found then
    insert into test values (i_id, md5(random()::text), clock_timestamp());
  end if; 
  return;
  exception 
  when others then
    return;
end;   
$$ language plpgsql strict;
CREATE FUNCTION
digoal=# select f_test(1);
 f_test 
--------
 
(1 row)
digoal=# select f_test(1);
 f_test 
--------
 
(1 row)
digoal=# select * from test;
 id |               info               |          crt_time          
----+----------------------------------+----------------------------
  1 | d6eaddd7dc776cf8eafd094afab4b8ac | 2013-09-19 18:39:01.046142
(1 row)


测试1 : 

使用如下pgbench测试脚本.
pg94@db-172-16-3-39-> vi test.sql
\setrandom id 1 5000000
select f_test(:id);
获取当前的xlog位置.
pg94@db-172-16-3-39-> psql
psql (9.4devel)
Type "help" for help.
digoal=# checkpoint;
CHECKPOINT
digoal=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 0/18411F0
(1 row)
使用pgbench提交160W次函数请求.
pg94@db-172-16-3-39-> pgbench -M prepared -n -r -f ./test.sql -P 3 -c 16 -j 4 -t 100000 
progress: 3.0 s, 42121.0 tps, 0.380 ms lat
progress: 6.0 s, 44615.4 tps, 0.359 ms lat
progress: 9.0 s, 44958.5 tps, 0.356 ms lat
progress: 12.0 s, 44280.3 tps, 0.361 ms lat
progress: 15.0 s, 44530.0 tps, 0.359 ms lat
progress: 18.0 s, 44618.3 tps, 0.359 ms lat
progress: 21.0 s, 44605.5 tps, 0.359 ms lat
progress: 24.0 s, 44400.1 tps, 0.360 ms lat
progress: 27.0 s, 44794.4 tps, 0.357 ms lat
progress: 30.0 s, 44801.6 tps, 0.357 ms lat
progress: 33.0 s, 44349.6 tps, 0.361 ms lat
progress: 36.0 s, 41668.4 tps, 0.384 ms lat
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
number of transactions per client: 100000
number of transactions actually processed: 1600000/1600000
tps = 43774.563515 (including connections establishing)
tps = 43792.470057 (excluding connections establishing)
statement latencies in milliseconds:
        0.001522        \setrandom id 1 5000000
        0.353626        select f_test(:id);
测试完后执行checkpoint, 并获得当前的xlog位置
digoal=# checkpoint;
CHECKPOINT
digoal=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 0/18EFFC20
(1 row)
得到压力测试过程产生的xlog大小.
digoal=# select pg_xlog_location_diff('0/18EFFC20', '0/18411F0');
 pg_xlog_location_diff 
-----------------------
             392948272
(1 row)


测试2 : 
改为on

full_page_writes = on
pg94@db-172-16-3-39-> pg_ctl restart -m fast
digoal=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 0/18EFFC88
(1 row)

pg94@db-172-16-3-39-> pgbench -M prepared -n -r -f ./test.sql -P 3 -c 16 -j 4 -t 100000 
progress: 3.0 s, 36457.6 tps, 0.439 ms lat
progress: 6.0 s, 42782.2 tps, 0.374 ms lat
progress: 9.0 s, 44030.6 tps, 0.363 ms lat
progress: 12.0 s, 43835.4 tps, 0.365 ms lat
progress: 15.0 s, 43862.8 tps, 0.365 ms lat
progress: 18.0 s, 43982.1 tps, 0.364 ms lat
progress: 21.0 s, 44164.0 tps, 0.362 ms lat
progress: 24.0 s, 44102.8 tps, 0.363 ms lat
progress: 27.0 s, 43705.6 tps, 0.366 ms lat
progress: 30.0 s, 44375.6 tps, 0.361 ms lat
progress: 33.0 s, 44305.6 tps, 0.361 ms lat
progress: 36.0 s, 44016.1 tps, 0.364 ms lat
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
number of transactions per client: 100000
number of transactions actually processed: 1600000/1600000
tps = 43094.830471 (including connections establishing)
tps = 43111.491031 (excluding connections establishing)
statement latencies in milliseconds:
        0.001555        \setrandom id 1 5000000
        0.361177        select f_test(:id);

digoal=# checkpoint;
CHECKPOINT
digoal=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 0/38410A68
(1 row)
digoal=# select pg_xlog_location_diff('0/38410A68', '0/18EFFC88');
 pg_xlog_location_diff 
-----------------------
             525405664
(1 row)



测试3 : 
改为off

full_page_writes = off
pg94@db-172-16-3-39-> pg_ctl restart -m fast

pg94@db-172-16-3-39-> psql
psql (9.4devel)
Type "help" for help.
digoal=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 0/38410AD0
(1 row)

pg94@db-172-16-3-39-> pgbench -M prepared -n -r -f ./test.sql -P 3 -c 16 -j 4 -t 100000 
progress: 3.0 s, 38206.2 tps, 0.419 ms lat
progress: 6.0 s, 42497.9 tps, 0.376 ms lat
progress: 9.0 s, 43040.5 tps, 0.372 ms lat
progress: 12.0 s, 43555.0 tps, 0.367 ms lat
progress: 15.0 s, 43763.7 tps, 0.366 ms lat
progress: 18.0 s, 43997.5 tps, 0.364 ms lat
progress: 21.0 s, 43891.3 tps, 0.365 ms lat
progress: 24.0 s, 43706.4 tps, 0.366 ms lat
progress: 27.0 s, 43955.7 tps, 0.364 ms lat
progress: 30.0 s, 43948.5 tps, 0.364 ms lat
progress: 33.0 s, 43723.6 tps, 0.366 ms lat
progress: 36.0 s, 43403.8 tps, 0.369 ms lat
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
number of transactions per client: 100000
number of transactions actually processed: 1600000/1600000
tps = 41054.353809 (including connections establishing)
tps = 41072.579612 (excluding connections establishing)
statement latencies in milliseconds:
        0.001585        \setrandom id 1 5000000
        0.360673        select f_test(:id);

digoal=# checkpoint;
CHECKPOINT
digoal=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 0/4F7C1BD0
(1 row)

digoal=# select pg_xlog_location_diff('0/4F7C1BD0', '0/38410AD0');
 pg_xlog_location_diff 
-----------------------
             389746944
(1 row)


从以上对full_page_writes在三种参数(compress, on, off)下的测试结果来看, compress的压缩效果非常好.

[参考]
1. http://www.postgresql.org/message-id/flat/51366323.8070606@vmware.com#51366323.8070606@vmware.com
2. http://www.postgresql.org/message-id/flat/CAHGQGwGqG8e9YN0fNCUZqTTT=hNr7Ly516kfT5ffqf4pp1qnHg@mail.gmail.com#CAHGQGwGqG8e9YN0fNCUZqTTT=hNr7Ly516kfT5ffqf4pp1qnHg@mail.gmail.com
3. src/backend/access/transam/xlog.c

  /*
+  * Create a compressed version of a backup block
+  *
+  * If successful, return a compressed result and set 'len' to its length.
+  * Otherwise (ie, compressed result is actually bigger than original),
+  * return NULL.
+  */
+ static char *
+ CompressBackupBlock(char *page, uint32 orig_len, uint32 *len)
+ {
+       struct varlena *buf;
+ 
+ #define       PGLZ_BLCKSZ     PGLZ_MAX_OUTPUT(BLCKSZ)
+ 
+       buf = (struct varlena *) palloc(PGLZ_BLCKSZ);
+ 
+       /*
+        * We recheck the actual size even if pglz_compress() reports success,
+        * because it might be satisfied with having saved as little as one byte
+        * in the compressed data --- which could turn into a net loss once you
+        * consider header and alignment padding.  Worst case, the compressed
+        * format might require three padding bytes (plus header, which is
+        * included in VARSIZE(buf)), whereas the uncompressed format would take
+        * only one header byte and no padding if the value is short enough.  So
+        * we insist on a savings of more than 2 bytes to ensure we have a gain.
+        */
+       if (pglz_compress(page, BLCKSZ,
+                                         (PGLZ_Header *) buf, PGLZ_strategy_default) &&
+               VARSIZE(buf) < orig_len - 2)
+       {
+               /* successful compression */
+               *len = VARHDRSZ + VARSIZE(buf);
+               return (char *) buf;
+       }
+       else
+       {
+               /* incompressible data */
+               pfree(buf);
+               return NULL;
+       }
+ }


