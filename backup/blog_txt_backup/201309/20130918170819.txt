PostgreSQL research

PostgreSQL pgbench client unique MARK use backend pid or client port

2013-09-18 17:08:19   查看原文>>

在某些测试场景中, 我们可能期望为每个测试连接分配唯一的标识.
例如使用pgbench测试的场景, 我们期望每个到数据库的连接有一个唯一标识, 这个标识对应到表中的某条或者某些记录.
在测试时, 这样可以做到多个连接的操作互不干涉.
例如我们要测试更新操作, 为了规避锁的影响, 就需要做到每个连接更新的记录都不一样. 
由于pgbench没有提供类似的功能, 它只提供了赋予随机值的功能.

\setrandom id 1 100


或者使用shell脚本来获得一个唯一值.

这样取1到100的随机整数.
如果要标识每个客户端, 可以这么来做.
利用postgresql提供的pg_backend_pid()函数. 
使用如下 : 

digoal=# create table test(id int primary key, info text, crt_time timestamp);
CREATE TABLE

digoal=# create or replace function update_test(i_num int) returns void as                   
$$
declare
begin
  update test set info=md5(random()::text),crt_time=clock_timestamp() where id=mod(i_num,100);
  return;
exception 
  when others then
    return;
end;
$$ language plpgsql strict;
CREATE FUNCTION

digoal=# insert into test select generate_series(0,99),md5(random()::text),clock_timestamp();
INSERT 0 100

digoal=# select update_test(pg_backend_pid());
 update_test 
-------------
 
(1 row)

digoal=# select * from test order by crt_time desc limit 1;
 id |               info               |          crt_time          
----+----------------------------------+----------------------------
 89 | b6f1a09aa5832d8f86de9af91904775b | 2013-09-18 16:48:42.276362
(1 row)

digoal=# select update_test(pg_backend_pid());
 update_test 
-------------
 
(1 row)

digoal=# select * from test order by crt_time desc limit 1;
 id |               info               |          crt_time          
----+----------------------------------+----------------------------
 89 | 74abcf91c07432683ba91b1b518aa7cf | 2013-09-18 16:49:02.865596
(1 row)


pgbench测试 : 

pg94@db-172-16-3-39-> cat test.sql
select update_test(pg_backend_pid());
pg94@db-172-16-3-39-> pgbench -M prepared -n -r -f ./test.sql -P 1 -c 32 -j 4 -T 10 -h 127.0.0.1 -U postgres digoal
progress: 1.0 s, 36947.0 tps, 0.866 ms lat
progress: 2.0 s, 39532.4 tps, 0.809 ms lat
progress: 3.0 s, 41548.7 tps, 0.770 ms lat
progress: 4.0 s, 43931.4 tps, 0.728 ms lat
progress: 5.0 s, 43790.7 tps, 0.731 ms lat
progress: 6.0 s, 44189.6 tps, 0.724 ms lat
progress: 7.0 s, 44153.5 tps, 0.725 ms lat
progress: 8.0 s, 44202.2 tps, 0.724 ms lat
progress: 9.0 s, 44258.0 tps, 0.723 ms lat
progress: 10.0 s, 44291.7 tps, 0.722 ms lat
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 32
number of threads: 4
duration: 10 s
number of transactions actually processed: 426904
tps = 42661.479783 (including connections establishing)
tps = 42796.755286 (excluding connections establishing)
statement latencies in milliseconds:
        0.745457        select update_test(inet_client_port());



一般使用pgbench参数的连接, pid都是连续的.

28715 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.69 postgres: postgres digoal 127.0.0.1(46260) SELECT                      
28716 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.66 postgres: postgres digoal 127.0.0.1(46261) SELECT                      
28717 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.57 postgres: postgres digoal 127.0.0.1(46262) SELECT                      
28718 pg94      16   0 1228m  23m  22m S  0.0  0.3   0:07.45 postgres: postgres digoal 127.0.0.1(46263) SELECT                      
28719 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.59 postgres: postgres digoal 127.0.0.1(46264) SELECT                      
28720 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.43 postgres: postgres digoal 127.0.0.1(46265) SELECT                      
28721 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:06.76 postgres: postgres digoal 127.0.0.1(46266) SELECT                      
28722 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.59 postgres: postgres digoal 127.0.0.1(46267) SELECT                      
28723 pg94      16   0 1228m  23m  22m S  0.0  0.3   0:06.21 postgres: postgres digoal 127.0.0.1(46268) SELECT                      
28724 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.49 postgres: postgres digoal 127.0.0.1(46269) SELECT                      
28725 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:05.55 postgres: postgres digoal 127.0.0.1(46270) SELECT                      
28726 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:06.38 postgres: postgres digoal 127.0.0.1(46271) SELECT                      
28727 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.45 postgres: postgres digoal 127.0.0.1(46272) SELECT                      
28728 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:06.84 postgres: postgres digoal 127.0.0.1(46273) SELECT                      
28729 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.30 postgres: postgres digoal 127.0.0.1(46274) SELECT                      
28730 pg94      15   0 1228m  23m  22m S  0.0  0.3   0:07.41 postgres: postgres digoal 127.0.0.1(46275) SELECT


所以在这个场景使用没有太大的问题, 如果有问题的话可以尝试使用加大基数的方法规避锁的问题.
例如本例对100取模, 可以改成10000, 这样重复率就低了. test里面插入1万条记录即可.
或者干脆不取模, 将数据量插入到超过最大进程号即可.

另一种方法, 在pgbench中使用shell脚本来获得一个唯一值.

\setshell varname command [ argument ... ]
Sets variable varname to the result of the shell command command. The command must return an integer value through its standard output.

argument can be either a text constant or a :variablename reference to a variable of any types. If you want to use argument starting with colons, you need to add an additional colon at the beginning of argument.

Example:

\setshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon


