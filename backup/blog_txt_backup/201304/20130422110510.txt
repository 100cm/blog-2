PostgreSQL research

PostgreSQL use array reduce log table's storage requirement

2013-04-22 11:05:10   查看原文>>

本文主要讲解一个使用数组来降低冗余数据的案例.
举一个例子, 终端的应用程序列表, 每个终端在启动时将程序列表信息汇总到数据库中.
数据结构如下 : 

create table t(id serial8, user_id int8, app_name text, startup_time timestamp, crt_time timestamp);


对于一个用户来说, 如果启动了100个应用, 那么每次汇总的时候需要上传100条数据. 
-- 插入测试数据1000100条.

insert into t(user_id, app_name, startup_time, crt_time) select generate_series(1,10001),md5((random()*generate_series(1,100))::text), clock_timestamp(),now();
INSERT 0 1000100


-- 每个用户每次启动时对应100条.
-- 创建索引

create index idx_t_1 on t(user_id);


-- 表和索引大小

postgres=# select pg_relation_size('t');
 pg_relation_size 
------------------
        101146624
(1 row)
postgres=# select pg_relation_size('idx_t_1');
 pg_relation_size 
------------------
         30081024
(1 row)



-- 如果使用数组来存储app_name和startup_time. 将改成如下表结构 : 

create table t_agg(id serial8, user_id int8, app_name text[], startup_time timestamp[], crt_time timestamp);


-- 将以上数据聚合以后插入t_agg表.

insert into t_agg(user_id,app_name,startup_time,crt_time) select user_id,array_agg(app_name order by startup_time),array_agg(startup_time order by startup_time),crt_time from t group by user_id,crt_time;
INSERT 0 10001


-- 每个用户每次启动时对应1条.
-- 创建索引

create index idx_t_agg_1 on t_agg(user_id);


-- 表和索引大小

postgres=# select pg_relation_size('t_agg');
 pg_relation_size 
------------------
          9109504
(1 row)
postgres=# select pg_relation_size('idx_t_agg_1');
 pg_relation_size 
------------------
           245760
(1 row)



-- 使用数组存储后, 表和索引占用空间分别为原来的9%, 0.8%.
-- 根据user_id进行查询的性能将得到提升.
-- 原结构需要扫描103个数据块.

postgres=# explain (analyze,verbose,buffers) select * from t where user_id=1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_1 on public.t  (cost=0.00..4482.19 rows=5309 width=64) (actual time=0.014..0.092 rows=100 loops=1)
   Output: id, user_id, app_name, startup_time, crt_time
   Index Cond: (t.user_id = 1)
   Buffers: shared hit=103
 Total runtime: 0.121 ms
(5 rows)


-- 改成数组后只需要扫描3个数据块.

postgres=# explain (analyze,verbose,buffers) select * from t_agg where user_id=1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_agg_1 on public.t_agg  (cost=0.00..51.13 rows=50 width=88) (actual time=0.009..0.010 rows=1 loops=1)
   Output: id, user_id, app_name, startup_time, crt_time
   Index Cond: (t_agg.user_id = 1)
   Buffers: shared hit=3
 Total runtime: 0.029 ms
(5 rows)



[小结]
1. 本场景使用数组存储后, 减少了数据冗余. 除了可以降低存储开销, 同时也降低了内存的开销. 提高了查询性能.

