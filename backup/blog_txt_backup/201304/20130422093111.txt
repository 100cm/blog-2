PostgreSQL research

PostgreSQL complex index's column position tuning case

2013-04-22 9:31:11   查看原文>>

本文主要讨论一下复合索引的列顺序问题.
-- # 测试表

digoal=# create table t(c1 int, c2 int, c3 text);
CREATE TABLE


-- 测试数据

digoal=# insert into t select generate_series(1,10),generate_series(1,100000),md5(random()::text);
INSERT 0 100000


-- 列选择性, c2最好.

digoal=# select count(distinct c1),count(distinct c2),count(*) from t;
 count | count  | count  
-------+--------+--------
    10 | 100000 | 100000
(1 row)


-- 创建索引, 将选择性不好的c1列放在前面.

digoal=# create index idx_t_1 on t(c1,c2);
CREATE INDEX
digoal=# analyze t;
ANALYZE


-- 以c1=1为where条件, 扫描964个块.

digoal=# explain (analyze,verbose,buffers) select * from t where c1=1;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_1 on public.t  (cost=0.00..1138.44 rows=10203 width=41) (actual time=0.033..4.752 rows=10000 loops=1)
   Output: c1, c2, c3
   Index Cond: (t.c1 = 1)
   Buffers: shared hit=964
 Total runtime: 5.699 ms
(5 rows)


-- 以c2=1为where条件, 扫描276个块.

digoal=# explain (analyze,verbose,buffers) select * from t where c2=1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_1 on public.t  (cost=0.00..1027.26 rows=1 width=41) (actual time=0.028..4.092 rows=1 loops=1)
   Output: c1, c2, c3
   Index Cond: (t.c2 = 1)
   Buffers: shared hit=276
 Total runtime: 4.124 ms
(5 rows)


-- 以c1=1 and c2=1为where条件, 扫描3个块.

digoal=# explain (analyze,verbose,buffers) select * from t where c1=1 and c2=1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_1 on public.t  (cost=0.00..2.27 rows=1 width=41) (actual time=0.024..0.025 rows=1 loops=1)
   Output: c1, c2, c3
   Index Cond: ((t.c1 = 1) AND (t.c2 = 1))
   Buffers: shared hit=3
 Total runtime: 0.057 ms
(5 rows)


-- 以c2=1 and c1=1为where条件, 扫描3个块.

digoal=# explain (analyze,verbose,buffers) select * from t where c2=1 and c1=1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_1 on public.t  (cost=0.00..2.27 rows=1 width=41) (actual time=0.020..0.021 rows=1 loops=1)
   Output: c1, c2, c3
   Index Cond: ((t.c1 = 1) AND (t.c2 = 1))
   Buffers: shared hit=3
 Total runtime: 0.049 ms
(5 rows)



-- 删除c1,c2索引, 创建c2,c1索引.

digoal=# drop index idx_t_1;
DROP INDEX
digoal=# create index idx_t_2 on t(c2,c1);
CREATE INDEX
digoal=# analyze t;
ANALYZE


-- 以c1=1为where条件, 扫描1210个块.

digoal=# explain (analyze,verbose,buffers) select * from t where c1=1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_2 on public.t  (cost=0.00..1587.06 rows=9943 width=41) (actual time=0.026..8.918 rows=10000 loops=1)
   Output: c1, c2, c3
   Index Cond: (t.c1 = 1)
   Buffers: shared hit=1210
 Total runtime: 9.734 ms
(5 rows)


-- 以c2=1为where条件, 扫描3个块.

digoal=# explain (analyze,verbose,buffers) select * from t where c2=1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_2 on public.t  (cost=0.00..2.27 rows=1 width=41) (actual time=0.019..0.020 rows=1 loops=1)
   Output: c1, c2, c3
   Index Cond: (t.c2 = 1)
   Buffers: shared hit=3
 Total runtime: 0.048 ms
(5 rows)


-- 以c1=1 and c2=1为where条件, 扫描3个块.

digoal=# explain (analyze,verbose,buffers) select * from t where c1=1 and c2=1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_2 on public.t  (cost=0.00..2.27 rows=1 width=41) (actual time=0.013..0.014 rows=1 loops=1)
   Output: c1, c2, c3
   Index Cond: ((t.c2 = 1) AND (t.c1 = 1))
   Buffers: shared hit=3
 Total runtime: 0.038 ms
(5 rows)


-- 以c2=1 and c1=1为where条件, 扫描3个块.

digoal=# explain (analyze,verbose,buffers) select * from t where c2=1 and c1=1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_t_2 on public.t  (cost=0.00..2.27 rows=1 width=41) (actual time=0.011..0.012 rows=1 loops=1)
   Output: c1, c2, c3
   Index Cond: ((t.c2 = 1) AND (t.c1 = 1))
   Buffers: shared hit=3
 Total runtime: 0.033 ms
(5 rows)



[小结]
1. 对于使用c1 and c2为查询条件的查询, 两个索引的效率一样.
2. 对于仅使用c1为查询条件的情况, (c1,c2)索引效率高于(c2,c1), 但是由于c1选择性不好, 所以差别不大.
3. 对于仅使用c2为查询条件的情况, (c2,c1)索引效率高于(c1,c2), 但是由于c2选择性好, 所以差别非常大.
4. 结合以上结果, 对于复合索引的列顺序, 除了需要考虑驱动列放在第一位之外, 如果有多单列查询条件, 那么需要考虑到顺序是选择性好的放最前面. 


评论

francs - 2013-04-22 11:03:42

学习了：选择性好的放前面，这个准则和 Oracle 一致。
