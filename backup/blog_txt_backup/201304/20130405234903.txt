PostgreSQL research

Postgres-XC compare 4 distribute method insert speed and copy speed

2013-04-05 23:49:03   查看原文>>

本文主要测试Postgres-XC的几种分布式策略下的insert, copy的性能与单节点的性能比对.

【环境】

gtm : 172.16.19.11
gtm_standby : 172.16.19.13
coordinator : 172.16.19.13
datanode : 172.16.19.11, 172.16.19.13, 172.16.19.15, 172.16.19.17, 172.16.19.19



【测试】
1. insert
Postgres-XC, round robin : 

$ psql -h 172.16.19.13
psql (PGXC 1.0.2, based on PG 9.1.7)
Type "help" for help.
postgres=#
digoal=> create table test(id int primary key, info text) tablespace tbs_digoal distribute by round robin to group gp0;
ERROR:  Cannot locally enforce a unique index on round robin distributed table.


# 因为轮循模式没法保证单一节点的唯一约束, 所以不允许在round robin分发策略中使用唯一约束.

digoal=> \c digoal postgres
You are now connected to database "digoal" as user "postgres".
digoal=# create node group gp0 WITH datanode_1,datanode_2,datanode_3,datanode_4,datanode_5;
digoal=> create table test(id int, info text) tablespace tbs_digoal distribute by round robin to group gp0;
CREATE TABLE


# 插入10W条数据.

digoal=> \timing
Timing is on.
digoal=> insert into test select generate_series(1,100000),repeat('digoal',100);
INSERT 0 100000
Time: 36311.054 ms


每秒插入2754条.

Postgres-XC, hash : 

digoal=> create table test1(id int, info text) tablespace tbs_digoal distribute by hash(id) to group gp0;
CREATE TABLE
digoal=> insert into test1 select generate_series(1,100000),repeat('digoal',100);
INSERT 0 100000
Time: 34532.678 ms


每秒插入2896条.

Postgres-XC, modulo : 

digoal=> create table test2(id int, info text) tablespace tbs_digoal distribute by modulo(id) to group gp0;
CREATE TABLE
digoal=> insert into test2 select generate_series(1,100000),repeat('digoal',100);
INSERT 0 100000
Time: 36091.095 ms


每秒插入2771条.

Postgres-XC, replication : 

digoal=> create table test3(id int, info text) tablespace tbs_digoal distribute by replication to group gp0;
CREATE TABLE
digoal=> insert into test3 select generate_series(1,100000),repeat('digoal',100);
INSERT 0 100000
Time: 31529.019 ms


每秒插入3172条.

PostgreSQL : 

$ psql digoal digoal
psql (9.2.3)
Type "help" for help.
digoal=> create table test(id int, info text);
CREATE TABLE
digoal=> \timing
Timing is on.
digoal=> insert into test select generate_series(1,100000),repeat('digoal',100);
INSERT 0 100000
Time: 731.288 ms


每秒插入136745条.

2. copy
Postgres-XC, copy to file : 

digoal=# set search_path='digoal';
SET
digoal=# copy digoal.test to '/home/postgres/test.csv' with(format csv, header false);
COPY 100000
Time: 514.814 ms


每秒COPY OUT 194245 条.

Postgres-XC, copy from file : 

digoal=# copy digoal.test from '/home/postgres/test.csv' with(format csv, header false);
COPY 100000
Time: 933.529 ms


每秒COPY IN 107120 条.

PostgreSQL, copy to file : 

digoal=# copy test to '/data01/postgres/test.csv' with(format csv, header false);
COPY 100000
Time: 660.987 ms


每秒COPY OUT 151289 条.

PostgreSQL, copy from file : 

digoal=# copy test from '/data01/postgres/test.csv' with(format csv, header false);
COPY 100000
Time: 1614.158 ms


每秒COPY IN  61952 条.

3. select
Postgres-XC : 
# group by hash列

digoal=# select count(*) from (select id from test2 group by id) t;
 count  
--------
 100000
(1 row)
Time: 136.235 ms
digoal=# explain select count(*) from (select id from test2 group by id) t;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.52..2.53 rows=1 width=0)
   ->  HashAggregate  (cost=2.50..2.51 rows=1 width=4)
         ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
               ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"  (cost=0.00..0.00 rows=1000 width=4)
                     Node/s: datanode_1, datanode_2, datanode_3, datanode_4, datanode_5
(5 rows)



# 窗口函数

digoal=# select count(*) from (select id,info from (select id,info,row_number() over(partition by id order by info desc) as rn from test2)t where rn=1) t;
 count  
--------
 100000
(1 row)
Time: 805.109 ms
digoal=# explain select count(*) from (select id,info from (select id,info,row_number() over(partition by id order by info desc) as rn from test2)t where rn=1) t;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Aggregate  (cost=82.34..82.35 rows=1 width=0)
   ->  Subquery Scan on t  (cost=49.83..82.33 rows=5 width=0)
         Filter: (t.rn = 1)
         ->  WindowAgg  (cost=49.83..69.83 rows=1000 width=36)
               ->  Sort  (cost=49.83..52.33 rows=1000 width=36)
                     Sort Key: test2.id, test2.info
                     ->  Result  (cost=0.00..0.00 rows=1000 width=36)
                           ->  Data Node Scan on test2  (cost=0.00..0.00 rows=1000 width=36)
                                 Node/s: datanode_1, datanode_2, datanode_3, datanode_4, datanode_5
(9 rows)


# 聚合函数

digoal=# select max(id) from test2;
  max   
--------
 100000
(1 row)
Time: 8.352 ms



PostgreSQL : 

digoal=# select count(*) from (select id from test group by id) t;
 count  
--------
 100000
(1 row)
Time: 294.653 ms
digoal=# select count(*) from (select id,info from (select id,info,row_number() over(partition by id order by info desc) as rn from test)t where rn=1) t;
 count  
--------
 100000
(1 row)
Time: 755.836 ms
digoal=# explain select count(*) from (select id,info from (select id,info,row_number() over(partition by id order by info desc) as rn from test)t where rn=1) t;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Aggregate  (cost=135359.14..135359.15 rows=1 width=0)
   ->  Subquery Scan on t  (cost=128856.64..135356.64 rows=1000 width=0)
         Filter: (t.rn = 1)
         ->  WindowAgg  (cost=128856.64..132856.64 rows=200000 width=608)
               ->  Sort  (cost=128856.64..129356.64 rows=200000 width=608)
                     Sort Key: test.id, test.info
                     ->  Seq Scan on test  (cost=0.00..18667.00 rows=200000 width=608)
(7 rows)
digoal=# select max(id) from test;
  max   
--------
 100000
(1 row)
Time: 56.967 ms




【小结】
1. Postgres-XC的INSERT语句性能较差, 需要通过增加coordinator节点来解决, 或者提高coordinator节点的insert效率.
2. Postgres-XC的COPY性能要比单节点的PostgreSQL的COPY性能好.


【参考】
1. http://blog.163.com/digoal@126/blog/static/16387704020133292915600/

评论

xmarker - 2013-10-02 19:47:10

看了很多楼主的博客，写的很不错，想几个问题，
1.postgres-xc在真实环境中用的多么？
2.在数据仓库报表查询类的业务中，用postgres-xc的mpp性能怎么样?有什么优缺点？特别是缺点。
3.有更值得推荐的大数据量数据仓库报表查询类的pg解决方案么？
希望能得到您的指导和意见，谢谢

德哥@Digoal 回复 xmarker - 2013-10-02 19:47:10

HI, 推荐使用greenplum.
pgxc尚不成熟.
