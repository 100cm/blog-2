PostgreSQL research

PostgreSQL multi-commands batch insert performance test

2012-06-04 15:03:44   查看原文>>

前面介绍过一篇PostgreSQL batch insert的性能评测文章如下
http://blog.163.com/digoal@126/blog/static/163877040201242331551545/
有兴趣的朋友可以参考一下.
前面测试的两个batch insert都是在一个事务中进行的. 
还有一种batch insert是multi-commands模式的. 即一次向PostgreSQL请求多条SQL. londiste3使用的就是这种模式.
下面来测试一下multi-commands batch insert的性能, 测试方法和测试机与上一次测试一样, 如下 : 
测试环境:

PostgreSQL 9.2 beta1
CentOS 5.x 64bit
HP DL360G5
2 * Intel(R) Xeon(R) CPU           E5440  @ 2.83GHz CPU
SAS 146GB硬盘


测试表,

create table batch (
id1 int, 
id2 int,
id3 int, 
id4 int,
id5 int, 
id6 int,
id7 int, 
id8 int,
id9 int, 
id10 int);



测试用的pgbench如下:

pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal



每次测试完后, 清理数据并执行checkpoint.

truncate table batch;
checkpoint;


异步提交下的测试结果 : 

每个batch的commands, 每秒提交commands


1   77712
2   101294
4   132640
8   178584
16  183232
32  185440
64  186688
128 166784


pgbench详细测试结果 : 

pg92@db-172-16-3-33-> pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 4663122
tps = 77704.138244 (including connections establishing)
tps = 77712.855022 (excluding connections establishing)
statement latencies in milliseconds:
        0.101318        insert into batch values(1,2,3,4,5,6,7,8,9,10);

pg92@db-172-16-3-33-> pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 3038998
tps = 50640.309560 (including connections establishing)
tps = 50647.300719 (excluding connections establishing)
statement latencies in milliseconds:
        0.155947        insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);

pg92@db-172-16-3-33-> pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 1989854
tps = 33156.943779 (including connections establishing)
tps = 33160.472659 (excluding connections establishing)
statement latencies in milliseconds:
        0.238589        insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);

pg92@db-172-16-3-33-> pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 1339341
tps = 22320.901002 (including connections establishing)
tps = 22323.795326 (excluding connections establishing)
statement latencies in milliseconds:
        0.354627        insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);

pg92@db-172-16-3-33-> pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 699091
tps = 11450.946094 (including connections establishing)
tps = 11452.246082 (excluding connections establishing)
statement latencies in milliseconds:
        0.692685        insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);

pg92@db-172-16-3-33-> pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 347709
tps = 5794.898791 (including connections establishing)
tps = 5795.528726 (excluding connections establishing)
statement latencies in milliseconds:
        1.369810        insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);

pg92@db-172-16-3-33-> pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 175079
tps = 2917.062222 (including connections establishing)
tps = 2917.330599 (excluding connections establishing)
statement latencies in milliseconds:
        2.722609        insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);

pg92@db-172-16-3-33-> pgbench -M simple -c 8 -j 8 -f ./batch.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 78229
tps = 1303.512231 (including connections establishing)
tps = 1303.639404 (excluding connections establishing)
statement latencies in milliseconds:
        6.100038        insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,10);



【小结】
1. multi-commands batch 模式不允许使用prepared statement. 因此pgbench测试时使用extended和prepared都会报错 : 

ERROR:  cannot insert multiple commands into a prepared statement
ERROR:  cannot insert multiple commands into a prepared statement
ERROR:  cannot insert multiple commands into a prepared statement
ERROR:  cannot insert multiple commands into a prepared statement
ERROR:  cannot insert multiple commands into a prepared statement
ERROR:  cannot insert multiple commands into a prepared statement
ERROR:  cannot insert multiple commands into a prepared statement
ERROR:  cannot insert multiple commands into a prepared statement
Client 5 aborted in state 0: ERROR:  prepared statement "P0_0" does not exist
Client 3 aborted in state 0: ERROR:  prepared statement "P0_0" does not exist
Client 4 aborted in state 0: ERROR:  prepared statement "P0_0" does not exist
Client 6 aborted in state 0: ERROR:  prepared statement "P0_0" does not exist
Client 0 aborted in state 0: ERROR:  prepared statement "P0_0" does not exist
Client 1 aborted in state 0: ERROR:  prepared statement "P0_0" does not exist
Client 2 aborted in state 0: ERROR:  prepared statement "P0_0" does not exist
Client 7 aborted in state 0: ERROR:  prepared statement "P0_0" does not exist


2. autocommit模式下的multi-commands batch insert, 中间如果出现错误的SQL, 其他正常的SQL将提交, 不会回滚整个batch操作, 例如:

digoal=# insert into batch values(1,2,3,4,5,6,7,8,9,10);insert into batch values(1,2,3,4,5,6,7,8,9,'abc');insert into batch values(1,2,3,4,5,6,7,8,9,10);
INSERT 0 1
ERROR:  invalid input syntax for integer: "abc"
LINE 1: insert into batch values(1,2,3,4,5,6,7,8,9,'abc');
                                                   ^
INSERT 0 1
-- 正常的数据已经入库.
digoal=# select * from batch ;
 id1 | id2 | id3 | id4 | id5 | id6 | id7 | id8 | id9 | id10 
-----+-----+-----+-----+-----+-----+-----+-----+-----+------
   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |   10
   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |   10
(2 rows)


而前一篇BLOG的batch insert, 中间有异常的数据则整个batch回滚.
3. 其实最快的batch insert是copy. 如下 : 

digoal=# truncate batch ;
TRUNCATE TABLE
digoal=# copy (select 1,2,3,4,5,6,7,8,9,10 from (select generate_series(1,1000000)) t) to '/home/pg92/test.sql';
COPY 1000000
digoal=# \timing
Timing is on.
digoal=# copy batch from '/home/pg92/test.sql';
COPY 1000000
Time: 1394.502 ms
digoal=# select 1000000/1.394502;
      ?column?       
---------------------
 717101.875795086705
(1 row)


每秒入库的数据达到了717101 . 但是copy不适合用在OLTP的常规SQL里面, 更适合做数据迁移, 导入导出.
4. multi-commands 带来了另一个问题, SQL注入攻击. 所以建议不要使用.
参考
http://www.postgresql.org/docs/devel/static/libpq-async.html 
pgbouncer里面有一个开关是用来禁止PQexec调用接口的, 主要也是为了提高安全性.

==== disable_pqexec ====

Disable Simple Query protocol (PQexec).  Unlike Extended Query protocol, Simple Query
allows multiple queries in one packet, which allows some classes of SQL-injection
attacks.  Disabling it can improve security.  Obviously this means only clients that
exclusively use Extended Query protocol will stay working.


