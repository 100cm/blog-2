PostgreSQL research

flashback query in PostgreSQL

2012-06-19 13:56:26   查看原文>>

PostgreSQL没说支持flashback query, 在PostgreSQL 2012中国用户大会上我也问了simon, 他表示很多功能都排上日程, 这个目前还没有排, 所以一时半会也不会去实现它. 
很多朋友希望这个功能能加入到PostgreSQL的内核中.
我后来想了想, 其实PostgreSQL要支持这个还是可以的, 以下通过pg_resetxlog来实现flashback query的功能.
首先大家可以参考一下以下BLOG, 了解一下为什么要这么做?
Use pg_resetxlog simulate tuple disappear within PostgreSQL
http://blog.163.com/digoal@126/blog/static/163877040201183043153622/

除了这种方法, 还可以通过触发器来跟踪和还原DML, truncate的操作, 参考
http://blog.163.com/digoal@126/blog/static/1638770402014728105442434/

还有一个前提是需要配置 vacuum_defer_cleanup_age.
也就是需要确保dead tuple不被vacuum掉的事务个数. 例如, 
delete from t1;
经过了1000个事务后, 如果需要闪回查询t1的数据, 那么vacuum_defer_cleanup_age要设置为1000以上.
否则t1的记录可能被autovacuum掉了.

但是需要注意, 如果这中间经过的1000个事务, 发生了大量数据的的update和delete, 这些数据都不能被vacuum掉, 只有等到超出了vacuum_defer_cleanup_age设置的保留值后, 才能会vacuum掉. 所以可能造成dead tuple bloat现象.

接下来测试一下 : 

vi $PGDATA/postgresql.conf
vacuum_defer_cleanup_age = 1024



-- 重加载

pg_ctl reload



-- 新建测试数据

psql digoal digoal
digoal=> create table t1 (id int);
CREATE TABLE
digoal=> insert into t1 select generate_series(1,10);
INSERT 0 10



-- 在库中执行一些事务(这里可以随意, 目的是模拟经过多个事务后再来flashback query)

digoal=> select * from txid_current();
 txid_current 
--------------
      7442050
(1 row)

digoal=> select * from txid_current();
 txid_current 
--------------
      7442051
(1 row)

digoal=> select * from txid_current();
 txid_current 
--------------
      7442052
(1 row)

digoal=> select * from txid_current();
 txid_current 
--------------
      7442053
(1 row)

digoal=> create table t2 (id int);
CREATE TABLE
digoal=> insert into t2 select generate_series(1,10);
INSERT 0 10
digoal=> select * from txid_current();
 txid_current 
--------------
      7442056
(1 row)

digoal=> select * from txid_current();
 txid_current 
--------------
      7442057
(1 row)



-- 模拟误操作, 把t1的表都更新掉.

digoal=> update t1 set id=0;
UPDATE 10
digoal=> select * from txid_current();
 txid_current 
--------------
      7442059
(1 row)



-- 执行vacuum , 能看到确实不会回收掉这部分DEAD TUPLE

digoal=> vacuum verbose t1;
INFO:  vacuuming "public.t1"
INFO:  "t1": found 0 removable, 20 nonremovable row versions in 1 out of 1 pages
DETAIL:  10 dead row versions cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM



-- 在PostgreSQL中实现flashback query
-- 首先关闭数据库

digoal=> \q
pg92@db-172-16-3-33-> pg_ctl stop -m fast
waiting for server to shut down...LOG:  received fast shutdown request
.LOG:  aborting any active transactions
LOG:  autovacuum launcher shutting down
LOG:  shutting down
LOG:  database system is shut down
pg_ done
server stopped


查看控制文件的Latest checkpoint's NextXID. 查看到误操作前的数据后, 还要改回去的.

pg92@db-172-16-3-33-> pg_controldata 
pg_control version number:            922
Catalog version number:               201204301
Database system identifier:           5752103169472836607
Database cluster state:               shut down
pg_control last modified:             Tue 19 Jun 2012 01:49:58 PM CST
Latest checkpoint location:           4/1030200
Prior checkpoint location:            4/1011C88
Latest checkpoint's REDO location:    4/1030200
Latest checkpoint's TimeLineID:       1
Latest checkpoint's full_page_writes: on
Latest checkpoint's NextXID:          0/7442060
Latest checkpoint's NextOID:          17474
Latest checkpoint's NextMultiXactId:  1
Latest checkpoint's NextMultiOffset:  0
Latest checkpoint's oldestXID:        1672
Latest checkpoint's oldestXID's DB:   16385
Latest checkpoint's oldestActiveXID:  0
Time of latest checkpoint:            Tue 19 Jun 2012 01:49:58 PM CST
Minimum recovery ending location:     0/0
Backup start location:                0/0
Backup end location:                  0/0
End-of-backup record required:        no
Current wal_level setting:            hot_standby
Current max_connections setting:      100
Current max_prepared_xacts setting:   0
Current max_locks_per_xact setting:   64
Maximum data alignment:               8
Database block size:                  8192
Blocks per segment of large relation: 131072
WAL block size:                       16384
Bytes per WAL segment:                16777216
Maximum length of identifiers:        64
Maximum columns in an index:          32
Maximum size of a TOAST chunk:        1996
Date/time type storage:               64-bit integers
Float4 argument passing:              by value
Float8 argument passing:              by value


-- 把nextXID设置到过去, 发生误操作前.

pg92@db-172-16-3-33-> pg_resetxlog -x 7442050 $PGDATA
Transaction log reset


-- 重启数据库

pg92@db-172-16-3-33-> pg_ctl start
server starting
pg92@db-172-16-3-33-> LOG:  database system was shut down at 2012-06-19 13:50:22 CST
LOG:  database system is ready to accept connections
LOG:  autovacuum launcher started


-- 查看数据, 回来了. 看到的就是误操作前的数据.

pg92@db-172-16-3-33-> psql digoal digoal
psql (9.2beta2)
Type "help" for help.

digoal=> select * from t1;
 id 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)


-- 这部分数据可以把它备份出来. 然后把nextXID改回去. 重启数据库之后把数据修复.
Oracle使用的是UNDO来做flashback query. 而PostgreSQL则是用的snapshot view.
对于truncate都是无效的, 因为数据文件会删掉.

【注意】
1. 一定要注意防止dead tuple bloat.
2. 这个操作一定不要直接使用生产库做, 可以使用pg_basebackup备份出来做, 或者使用文件系统镜像. 因为你已经回到数据库的过去, "改变历史是很恐怖的"(好像在寻秦记里面有这个台词.). 原因你的XID已经回到过去, 如果发生改动, 改动的数据的xid可能和后面(已经发生)的冲突. 所以flashback query建议只用于只读(例如可以加一个recovery.conf文件
放在哪里, 然后以hot_standby的角色启动它, 那就不会发生写的情况了). 

