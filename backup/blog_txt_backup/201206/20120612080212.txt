PostgreSQL research

tmpfs

2012-06-12 8:02:12   查看原文>>

Tmpfs is a file system which keeps all files in virtual memory.


Everything in tmpfs is temporary in the sense that no files will be
created on your hard drive. If you unmount a tmpfs instance,
everything stored therein is lost.

tmpfs puts everything into the kernel internal caches and grows and
shrinks to accommodate the files it contains and is able to swap
unneeded pages out to swap space. It has maximum size limits which can
be adjusted on the fly via 'mount -o remount ...'

If you compare it to ramfs (which was the template to create tmpfs)
you gain swapping and limit checking. Another similar thing is the RAM
disk (/dev/ram*), which simulates a fixed size hard disk in physical
RAM, where you have to create an ordinary filesystem on top. Ramdisks
cannot swap and you do not have the possibility to resize them. 

Since tmpfs lives completely in the page cache and on swap, all tmpfs
pages currently in memory will show up as cached. It will not show up
as shared or something like that. Further on you can check the actual
RAM+swap use of a tmpfs instance with df(1) and du(1).


tmpfs has the following uses:

1) There is always a kernel internal mount which you will not see at
   all. This is used for shared anonymous mappings and SYSV shared
   memory. 

   This mount does not depend on CONFIG_TMPFS. If CONFIG_TMPFS is not
   set, the user visible part of tmpfs is not build. But the internal
   mechanisms are always present.

2) glibc 2.2 and above expects tmpfs to be mounted at /dev/shm for
   POSIX shared memory (shm_open, shm_unlink). Adding the following
   line to /etc/fstab should take care of this:

        tmpfs   /dev/shm        tmpfs   defaults        0 0

   Remember to create the directory that you intend to mount tmpfs on
   if necessary (/dev/shm is automagically created if you use devfs).

   This mount is _not_ needed for SYSV shared memory. The internal
   mount is used for that. (In the 2.3 kernel versions it was
   necessary to mount the predecessor of tmpfs (shm fs) to use SYSV
   shared memory)

3) Some people (including me) find it very convenient to mount it
   e.g. on /tmp and /var/tmp and have a big swap partition. And now
   loop mounts of tmpfs files do work, so mkinitrd shipped by most
   distributions should succeed with a tmpfs /tmp.

4) And probably a lot more I do not know about :-)


tmpfs has three mount options for sizing:

size:      The limit of allocated bytes for this tmpfs instance. The 
           default is half of your physical RAM without swap. If you
           oversize your tmpfs instances the machine will deadlock
           since the OOM handler will not be able to free that memory.
nr_blocks: The same as size, but in blocks of PAGE_CACHE_SIZE.
nr_inodes: The maximum number of inodes for this instance. The default
           is half of the number of your physical RAM pages, or (on a
           a machine with highmem) the number of lowmem RAM pages,
           whichever is the lower.

These parameters accept a suffix k, m or g for kilo, mega and giga and
can be changed on remount.  The size parameter also accepts a suffix %
to limit this tmpfs instance to that percentage of your physical RAM:
the default, when neither size nor nr_blocks is specified, is size=50%

If nr_blocks=0 (or size=0), blocks will not be limited in that instance;
if nr_inodes=0, inodes will not be limited.  It is generally unwise to
mount with such options, since it allows any user with write access to
use up all the memory on the machine; but enhances the scalability of
that instance in a system with many cpus making intensive use of it.


tmpfs has a mount option to set the NUMA memory allocation policy for
all files in that instance (if CONFIG_NUMA is enabled) - which can be
adjusted on the fly via 'mount -o remount ...'

mpol=default             prefers to allocate memory from the local node
mpol=prefer:Node         prefers to allocate memory from the given Node
mpol=bind:NodeList       allocates memory only from nodes in NodeList
mpol=interleave          prefers to allocate from each node in turn
mpol=interleave:NodeList allocates from each node of NodeList in turn

NodeList format is a comma-separated list of decimal numbers and ranges,
a range being two hyphen-separated decimal numbers, the smallest and
largest node numbers in the range.  For example, mpol=bind:0-3,5,7,9-15

Note that trying to mount a tmpfs with an mpol option will fail if the
running kernel does not support NUMA; and will fail if its nodelist
specifies a node >= MAX_NUMNODES.  If your system relies on that tmpfs
being mounted, but from time to time runs a kernel built without NUMA
capability (perhaps a safe recovery kernel), or configured to support
fewer nodes, then it is advisable to omit the mpol option from automatic
mount options.  It can be added later, when the tmpfs is already mounted
on MountPoint, by 'mount -o remount,mpol=Policy:NodeList MountPoint'.


To specify the initial root directory you can use the following mount
options:

mode:   The permissions as an octal number
uid:    The user id 
gid:    The group id

These options do not have any effect on remount. You can change these
parameters with chmod(1), chown(1) and chgrp(1) on a mounted filesystem.


So 'mount -t tmpfs -o size=10G,nr_inodes=10k,mode=700 tmpfs /mytmpfs'
will give you tmpfs instance on /mytmpfs which can allocate 10GB
RAM/SWAP in 10240 inodes and it is only accessible by root.


Author:
   Christoph Rohland <cr@sap.com>, 1.12.01
Updated:
   Hugh Dickins <hugh@veritas.com>, 19 February 2006


【参考】
kernel-doc/Documentation/filesystems/tmpfs.txt

【其他】
The following names are reserved for mounting special filesystems
under /dev.  These special filesystems provide kernel interfaces that
cannot be provided with standard device nodes.

/dev/pts        devpts          PTY slave filesystem
/dev/shm        tmpfs           POSIX shared memory maintenance access

【摘录1】
一、/dev/shm理论
/dev/shm/是linux下一个非常有用的目录，因为这个目录不在硬盘上，而是在内存里。因此在linux下，就不需要大费周折去建ramdisk，直接使用/dev/shm/就可达到很好的优化效果。 /dev /shm/需要注意的一个是容量问题，在linux下，它默认最大为内存的一半大小，使用df -h命令可以看到。但它并不会真正的占用这块内存，如果/dev/shm/下没有任何文件，
它占用的内存实际上就是0字节；如果它最大为1G，里头放有 100M文件，那剩余的900M仍然可为其它应用程序所使用，但它所占用的100M内存，是绝不会被系统回收重新划分的，否则谁还敢往里头存文件呢？
默认系统就会加载/dev/shm ，它就是所谓的tmpfs，有人说跟ramdisk（虚拟磁盘），但不一样。象虚拟磁盘一样，tmpfs 可以使用您的 RAM，但它也可以使用您的交换分区来存储。而且传统的虚拟磁盘是个块设备，并需要一个 mkfs 之类的命令才能真正地使用它，tmpfs 是一个文件系统，而不是块设备；您只是安装它，它就可以使用了。
　　tmpfs有以下优势：
　　1，动态文件系统的大小。
　　2，tmpfs 的另一个主要的好处是它闪电般的速度。因为典型的 tmpfs 文件系统会完全驻留在 RAM 中，读写几乎可以是瞬间的。
　　3，tmpfs 数据在重新启动之后不会保留，因为虚拟内存本质上就是易失的。所以有必要做一些脚本做诸如加载，绑定的操作。
二、修改/dev/shm大小
默认的最大一半内存大小在某些场合可能不够用，并且默认的inode数量很低一般都要调高些，这时可以用mount命令来管理它。
#mount -o size=1500M -o nr_inodes=1000000 -o noatime,nodiratime -o remount /dev/shm
在2G的机器上，将最大容量调到1.5G，并且inode数量调到1000000，这意味着大致可存入最多一百万个小文件。
如果需要永久修改/dev/shm的值，需要修改/etc/fstab
tmpfs /dev/shm tmpfs defaults,size=1.5G 0 0
#mount -o remount /dev/shm
三、/dev/shm应用
　　首先在/dev/shm建个tmp文件夹，然后与实际/tmp绑定
　　#mkdir /dev/shm/tmp
　　#chmod 1777 /dev/shm/tmp
　　#mount –bind /dev/shm/tmp /tmp（–bind ）
　　在使用mount –bind olderdir newerdir命令来挂载一个目录到另一个目录后，newerdir的权限和所有者等所有信息会发生变化。挂载后的目录继承了被挂载目录的所有属性，除了名称。Oracle 11g的amm内存管理模式就是使用/dev/shm，所以有时候修改MEMORY_TARGET或者MEMORY_MAX_TARGET会出现ORA-00845的错误.

【摘录2】
什么是tmpfs?
tmpfs是Linux/Unix系统上的一种基于内存的文件系统。tmpfs可以使用您的内存或swap分区来存储文件。由此可见，temfs主要存储暂存的文件。
linux内核中的VM子系统负责在后台管理虚拟内存资源Virtual Memory，即RAM和swap资源，透明地将RAM页移动到交换分区或从交换分区到RAM页，tmpfs文件系统需要VM子系统的页面来存储文件。tmpfs自己并不知道这些页面是在交换分区还是在RAM中；做这种决定是VM子系统的工作。tmpfs文件系统所知道的就是它正在使用某种形式的虚拟内存。
tmpfs基于内存，因而速度是相当的，另外tmpfs使用的VM资源是动态的，当删除tmpfs中文件，tmpfs 文件系统驱动程序会动态地减小文件系统并释放 VM 资源，当然在其中创建文件时也会动态的分配VM资源。另外，tmpfs不具备持久性，重启后数据不保留，原因很明显，它是基于内存的。
编译内核时，启用“Virtual memory file system support”就可以使用tmpfs,linux kernel从2.4以后都开始支持tmpfs。目前主流的linux系统默认已启用tmpfs，如Redhat。

什么是/dev/shm?
看到dev大家都使知道它是一个设备文件。使用tmpfs文件系统，在Redhat/CentOS等linux发行版中默认大小为物理内存的一半。如我的虚拟机装的是CentOS6.0,分配内存为1G，所以/dev/shm为500M左右。
[root@GoGo tmp]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda3             8.8G  4.0G  4.5G  48% /
tmpfs                 499M   88K  499M   1% /dev/shm
/dev/sda1              97M   43M   50M  47% /boot

tmpfs是基于内存的文件系统，创建时不需要使用mkfs等初始化。如我想把/dev/shm tmpfs大小改为512M.
#vi /etc/fstab
tmpfs       /dev/shm    tmpfs  defaults   0   0
更改为
tmpfs       /dev/shm    tmpfs  defaults,size=512m   0    0

[root@GoGo tmp]# mount -o remount /dev/shm
[root@GoGo tmp]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda3             8.8G  4.0G  4.5G  48% /
tmpfs                 512M   88K  512M   1% /dev/shm
/dev/sda1              97M   43M   50M  47% /boot

怎么样，变成512M啦，使用很方便吧，哈哈。
当然在生产环境中你可以把内存加大些，反正现在内存很便宜啦，为了提高性能也需要将/dev/shm加大。如：
mount -o size=1500M -o nr_inodes=1000000 -o noatime,nodiratime -o remount /dev/shm
nr_innodes指定索引节点数，nodiratime  man中解释如下：
nodiratime  Do  not  update directory inode access times on this filesystem.
不更新目录被访问时inode中的记录信息，noatime同理，好处你懂的。
tmpfs应用
tmpfs是基于内存的，速度是不用说的，硬盘和它没法比。
Oracle 中的Automatic Memory Management特性就使用了/dev/shm。

另外如果在网站运维中好好利用tmpfs，将有意想不到的收获。
我们先在/dev/shm建一个tmp目前，并与/tmp绑定。

[root@GoGo shm]# mkdir /dev/shm/tmp
[root@GoGo shm]# chmod 1777 /dev/shm/tmp  //注意一下权限
[root@GoGo shm]# mount –bind /dev/shm/tmp /tmp
[root@GoGo tmp]# ls -ld /tmp
drwxrwxrwt 2 root root 40 Aug 29 23:58 /tmp

当然您也可以不绑定，直接mount在现有的安装点上使用tmpfs,如：
#umount   /tmp
#mount  tmpfs  /tmp   -t tmpfs   -o size=512M

也很方便吧，不需要使用mkfs等命令创建。
以下/tmp使用tmpfs文件系统。
(1)将squid的缓存目录cache_dir放到/tmp下
cache_dir ufs /tmp 256 16 256
重启一下squid服务，这样缓存目录都放在了tmpfs文件中了，速度不用说吧。
(2)将php的session文件放在/tmp下
通过phpinfo测试文件查看你的php session存储位置，如果不在/tmp下，修改php.ini文件，修改如下：
session.save_path = “/tmp”
当然如果您的网站访问量比较大，可/tmp下设置分层目录存储session,语法如下：
session.save_path=”N;/save_path”，N 为分级的级数，save_path 为开始目录。
(3)将服务的socket文件放在/tmp下
如nginx.socket和mysql.sock
