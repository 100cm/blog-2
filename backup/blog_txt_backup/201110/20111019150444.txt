PostgreSQL research

PostgreSQL inheritance table scans to return meaningfully-sorted results

2011-10-19 15:04:44   查看原文>>

PostgreSQL 9.1 对继承表在优化器部分做了小小的改进。当查询父表时，并对输出结果执行了排序，如果子排序字段有索引存在，可以利用这个索引，不需要额外的排序过程。而在9.1以前的版本必须是先MERGE RESULT再进行一次排序。
下面来看两个例子：
例1 : 
版本 9.0.4
新建测试表, ID作为主键，隐含索引。
digoal=> create table test_inherit (id int primary key,info text);
digoal=> create table test_inherit_1  (id int primary key check (id>=0 and id<100000),info text) inherits (test_inherit);
digoal=> create table test_inherit_2  (id int primary key check (id>=100000 and id<200000),info text) inherits (test_inherit);
digoal=> create table test_inherit_3  (id int primary key check (id>=200000 and id<300000),info text) inherits (test_inherit);
digoal=> create table test_inherit_4  (id int primary key check (id>=300000 and id<400000),info text) inherits (test_inherit);
digoal=> create table test_inherit_5  (id int primary key check (id>=400000 and id<500000),info text) inherits (test_inherit);
digoal=> create table test_inherit_6  (id int primary key check (id>=500000 and id<600000),info text) inherits (test_inherit);
往子表插入测试数据
digoal=> insert into test_inherit_1 select generate_series(0,99999),'digoal';
INSERT 0 100000
digoal=> insert into test_inherit_2 select generate_series(100000,199999),'digoal';
INSERT 0 100000
digoal=> insert into test_inherit_3 select generate_series(200000,299999),'digoal';
INSERT 0 100000
digoal=> insert into test_inherit_4 select generate_series(300000,399999),'digoal';
INSERT 0 100000
digoal=> insert into test_inherit_5 select generate_series(400000,499999),'digoal';
INSERT 0 100000
digoal=> insert into test_inherit_6 select generate_series(500000,599999),'digoal';
INSERT 0 100000
跨分区查询，按ID排序。
执行计划很明了，子表查询完后Append，然后在按ID排序。也就是显示排序，开销Sort  (cost=1085.14..1136.14 rows=20401 width=11)
digoal=> explain select * from test_inherit where id>=90000 and id<110000 order by id limit 10;
 Limit  (cost=1085.14..1085.16 rows=10 width=11)
   ->  Sort  (cost=1085.14..1136.14 rows=20401 width=11)
         Sort Key: digoal.test_inherit.id
         ->  Result  (cost=2.31..644.28 rows=20401 width=11)
               ->  Append  (cost=2.31..644.28 rows=20401 width=11)
                     ->  Bitmap Heap Scan on test_inherit  (cost=2.31..8.87 rows=6 width=36)
                           Recheck Cond: ((id >= 90000) AND (id < 110000))
                           ->  Bitmap Index Scan on test_inherit_pkey  (cost=0.00..2.31 rows=6 width=0)
                                 Index Cond: ((id >= 90000) AND (id < 110000))
                     ->  Index Scan using test_inherit_1_pkey on test_inherit_1 test_inherit  (cost=0.00..313.28 rows=10051 width=11
)
                           Index Cond: ((id >= 90000) AND (id < 110000))
                     ->  Index Scan using test_inherit_2_pkey on test_inherit_2 test_inherit  (cost=0.00..322.14 rows=10344 width=11
)
                           Index Cond: ((id >= 90000) AND (id < 110000))

版本 9.1.0
测试表和测试数据同上，执行的SQL同上。
执行计划，显然排序走了子表的索引，能看到Merge Append的过程。总体开销成本下降明显。
digoal=> explain select * from test_inherit where id>=90000 and id<110000 order by id limit 10;
 Limit  (cost=0.02..0.52 rows=10 width=11)
   ->  Result  (cost=0.02..1013.12 rows=20374 width=11)
         ->  Merge Append  (cost=0.02..1013.12 rows=20374 width=11)
               Sort Key: digoal.test_inherit.id
               ->  Index Scan using test_inherit_pkey on test_inherit  (cost=0.00..4.27 rows=1 width=36)
                     Index Cond: ((id >= 90000) AND (id < 110000))
               ->  Index Scan using test_inherit_1_pkey on test_inherit_1 test_inherit  (cost=0.00..313.60 rows=10067 width=11)
                     Index Cond: ((id >= 90000) AND (id < 110000))
               ->  Index Scan using test_inherit_2_pkey on test_inherit_2 test_inherit  (cost=0.00..321.38 rows=10306 width=11)
                     Index Cond: ((id >= 90000) AND (id < 110000))

例2 : 
与例1不同的是，这里的ID字段没有使用CHECK，并且子表有重叠记录，来看看9.1是不是也不需要显示排序。
版本 9.0.4
新建测试表, ID作为主键，隐含索引。
digoal=> create table inherit_test ( id int primary key,info text);
digoal=> create table inherit_test_1 (like inherit_test including all) inherits (inherit_test);
digoal=> create table inherit_test_2 (like inherit_test including all) inherits (inherit_test);
digoal=> create table inherit_test_3 (like inherit_test including all) inherits (inherit_test);
digoal=> create table inherit_test_4 (like inherit_test including all) inherits (inherit_test);
digoal=> create table inherit_test_5 (like inherit_test including all) inherits (inherit_test);
digoal=> create table inherit_test_6 (like inherit_test including all) inherits (inherit_test);
往子表插入测试数据，插入的测试数据两个表可能有重叠部分。
digoal=> insert into inherit_test_1 select generate_series(0,99999),'digoal';
digoal=> insert into inherit_test_2 select generate_series(50000,199999),'digoal';
digoal=> insert into inherit_test_3 select generate_series(150000,299999),'digoal';
digoal=> insert into inherit_test_4 select generate_series(250000,399999),'digoal';
digoal=> insert into inherit_test_5 select generate_series(350000,499999),'digoal';
digoal=> insert into inherit_test_6 select generate_series(450000,599999),'digoal';
执行计划，显然9.0版本和例1的测试结果相似，都是先返回子表查询结果，然后MERGE，然后显示排序Sort  (cost=1623.86..1699.59 rows=30295 width=11)。
digoal=> explain select * from inherit_test where id>=90000 and id<110000 order by id limit 10;
 Limit  (cost=1623.86..1623.88 rows=10 width=11)
   ->  Sort  (cost=1623.86..1699.59 rows=30295 width=11)
         Sort Key: digoal.inherit_test.id
         ->  Result  (cost=2.31..969.19 rows=30295 width=11)
               ->  Append  (cost=2.31..969.19 rows=30295 width=11)
                     ->  Bitmap Heap Scan on inherit_test  (cost=2.31..8.87 rows=6 width=36)
                           Recheck Cond: ((id >= 90000) AND (id < 110000))
                           ->  Bitmap Index Scan on inherit_test_pkey  (cost=0.00..2.31 rows=6 width=0)
                                 Index Cond: ((id >= 90000) AND (id < 110000))
                     ->  Index Scan using inherit_test_1_pkey on inherit_test_1 inherit_test  (cost=0.00..309.96 rows=9935 width=11)
                           Index Cond: ((id >= 90000) AND (id < 110000))
                     ->  Index Scan using inherit_test_2_pkey on inherit_test_2 inherit_test  (cost=0.00..633.26 rows=20350 width=11
)
                           Index Cond: ((id >= 90000) AND (id < 110000))
                     ->  Index Scan using inherit_test_3_pkey on inherit_test_3 inherit_test  (cost=0.00..4.28 rows=1 width=11)
                           Index Cond: ((id >= 90000) AND (id < 110000))
                     ->  Index Scan using inherit_test_4_pkey on inherit_test_4 inherit_test  (cost=0.00..4.28 rows=1 width=11)
                           Index Cond: ((id >= 90000) AND (id < 110000))
                     ->  Index Scan using inherit_test_5_pkey on inherit_test_5 inherit_test  (cost=0.00..4.28 rows=1 width=11)
                           Index Cond: ((id >= 90000) AND (id < 110000))
                     ->  Index Scan using inherit_test_6_pkey on inherit_test_6 inherit_test  (cost=0.00..4.28 rows=1 width=11)
                           Index Cond: ((id >= 90000) AND (id < 110000))
版本 9.1.0
测试表和测试数据同上，执行的SQL同上。
执行计划，显然排序走了子表的索引，能看到Merge Append的过程。总体开销成本下降明显。
digoal=> explain select * from inherit_test where id>=90000 and id<110000 order by id limit 10;
 Limit  (cost=0.10..3.77 rows=10 width=16)
   ->  Result  (cost=0.10..4600.72 rows=12513 width=16)
         ->  Merge Append  (cost=0.10..4600.72 rows=12513 width=16)
               Sort Key: digoal.inherit_test.id
               ->  Index Scan using inherit_test_pkey on inherit_test  (cost=0.00..4.27 rows=1 width=36)
                     Index Cond: ((id >= 90000) AND (id < 110000))
               ->  Index Scan using inherit_test_1_pkey on inherit_test_1 inherit_test  (cost=0.00..312.60 rows=10017 width=11)
                     Index Cond: ((id >= 90000) AND (id < 110000))
               ->  Index Scan using inherit_test_2_pkey on inherit_test_2 inherit_test  (cost=0.00..780.24 rows=499 width=36)
                     Index Cond: ((id >= 90000) AND (id < 110000))
               ->  Index Scan using inherit_test_3_pkey on inherit_test_3 inherit_test  (cost=0.00..780.24 rows=499 width=36)
                     Index Cond: ((id >= 90000) AND (id < 110000))
               ->  Index Scan using inherit_test_4_pkey on inherit_test_4 inherit_test  (cost=0.00..780.24 rows=499 width=36)
                     Index Cond: ((id >= 90000) AND (id < 110000))
               ->  Index Scan using inherit_test_5_pkey on inherit_test_5 inherit_test  (cost=0.00..780.24 rows=499 width=36)
                     Index Cond: ((id >= 90000) AND (id < 110000))
               ->  Index Scan using inherit_test_6_pkey on inherit_test_6 inherit_test  (cost=0.00..780.24 rows=499 width=36)
                     Index Cond: ((id >= 90000) AND (id < 110000))
由于例2中WHERE条件的字段ID子表没有使用CHECK，所以对所有子表进行了遍历。

9.1 的这个改进在这种场景中使用会带来非常大的性能提升。
