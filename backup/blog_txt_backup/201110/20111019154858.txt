PostgreSQL research

Don't Confuse PostgreSQL Per-Column Privilege and Table level Privilege

2011-10-19 15:48:58   查看原文>>

今天一位兄弟问我一个比较奇怪的问题，一开始我也觉得很奇怪。
情况是这样的：
1.  把用户A表test的SELECT权限给了用户B, 假设test表有10列。
2.  通过REVOKE SELECT (column_name1,... ) ON test FROM USER_B; 从用户B那里回收test表的其中某些列的查询权限。
3.  但是用户B还是可以查询这些看似被回收了查询权限的列。

下面来看一个测试 : 
首先创建一个digoal用户的测试表 : 
digoal=> create table column_privilege_test 
digoal-> (id int,info text);
CREATE TABLE
权限赋予给test用户 : 
digoal=> grant select on column_privilege_test to test;
GRANT
插入测试数据 : 
digoal=> insert into column_privilege_test select generate_series(1,100000),'digoal';
INSERT 0 100000
连接到test用户下面，测试查询权限。
digoal=> \c digoal test
You are now connected to database "digoal" as user "test".
digoal=> select * from digoal.column_privilege_test limit 1;
 id |  info  
----+--------
  1 | digoal
(1 row)
连接到digoal用户，回收id列的查询权限。
digoal=> \c digoal digoal
You are now connected to database "digoal" as user "digoal".
digoal=> revoke select (id) on column_privilege_test from test;
REVOKE
再次到test 用户下查询，id列的查询还是依旧正常。
digoal=> \c digoal test
You are now connected to database "digoal" as user "test".
digoal=> select * from digoal.column_privilege_test limit 1;
 id |  info  
----+--------
  1 | digoal
(1 row)
来看看这个表的权限情况，显然赋予的时表级别的查询权限，不能通过列级别的权限来回收。
digoal=> \c digoal digoal
You are now connected to database "digoal" as user "digoal".
digoal=> \dp+ column_privilege_test 
                                     Access privileges
 Schema |         Name          | Type  |   Access privileges   | Column access privileges 
--------+-----------------------+-------+-----------------------+--------------------------
 digoal | column_privilege_test | table | digoal=arwdDxt/digoal+| 
        |                       |       | test=r/digoal         | 
(1 row)

下面来看一个列级别可以回收的例子：
digoal=> grant select(id,info) on column_privilege_test to test;
这里看到的权限是列级别的了。
digoal=> \dp+ column_privilege_test 
                                     Access privileges
 Schema |         Name          | Type  |   Access privileges   | Column access privileges 
--------+-----------------------+-------+-----------------------+--------------------------
 digoal | column_privilege_test | table | digoal=arwdDxt/digoal | id:                     +
        |                       |       |                       |   test=r/digoal         +
        |                       |       |                       | info:                   +
        |                       |       |                       |   test=r/digoal
(1 row)
test用户查询当然是没有问题的。
digoal=> \c digoal test
You are now connected to database "digoal" as user "test".
digoal=> select * from digoal.column_privilege_test limit 1;
 id |  info  
----+--------
  1 | digoal
(1 row)
然后回收掉id的权限。
digoal=> \c digoal digoal
You are now connected to database "digoal" as user "digoal".
digoal=> revoke select(id) on column_privilege_test from test;
REVOKE
digoal=> \dp+ column_privilege_test 
                                     Access privileges
 Schema |         Name          | Type  |   Access privileges   | Column access privileges 
--------+-----------------------+-------+-----------------------+--------------------------
 digoal | column_privilege_test | table | digoal=arwdDxt/digoal | info:                   +
        |                       |       |                       |   test=r/digoal
(1 row)
现在test用户查询id就报错了。只能查询info列。
digoal=> \c digoal test
You are now connected to database "digoal" as user "test".
digoal=> select * from digoal.column_privilege_test limit 1;
ERROR:  permission denied for relation column_privilege_test
digoal=> select info from digoal.column_privilege_test limit 1;
  info  
--------
 digoal
(1 row)


从语法部分也可以看出这两部分权限的控制是分开处理的 : 
Command:     GRANT
Description: define access privileges
Syntax:
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] table_name [, ...]
         | ALL TABLES IN SCHEMA schema_name [, ...] }
    TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( column [, ...] ) }
    ON [ TABLE ] table_name [, ...]
    TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]

Command:     REVOKE
Description: remove access privileges
Syntax:
REVOKE [ GRANT OPTION FOR ]
    { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] table_name [, ...]
         | ALL TABLES IN SCHEMA schema_name [, ...] }
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { SELECT | INSERT | UPDATE | REFERENCES } ( column [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( column [, ...] ) }
    ON [ TABLE ] table_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]
