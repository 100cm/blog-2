PostgreSQL research

compare GiST and GIN index performance

2011-10-26 14:58:57   查看原文>>

今天一位同事带来了一份很IN的需求，推荐好友。
类似新浪微博里面推荐好友的功能，如用户A登录的时候给他推荐他可能感兴趣的好友。
做法是取出A的好友列表，然后根据这个列表再去找出这些人的好友列表。类似腾讯的二度人脉。(预处理可以考虑mapreduce)

compare GiST and GIN index performance - 德哥@Digoal - The Heart,The World.

 
compare GiST and GIN index performance - 德哥@Digoal - The Heart,The World.
 

选择了两种类型来比较。
1. 用array类型来存储好友列表
例如： 

digoal=> create table array_test (id int8,phone_list numeric[]);
CREATE TABLE
digoal=> create table phone (id1 numeric,id2 numeric,id3 numeric,id4 numeric,id5 numeric,id6 numeric);
CREATE TABLE
digoal=> insert into phone select generate_series(1,500000),generate_series(2,500001),generate_series(3,500002),generate_series(4,500003),generate_series(5,500004),generate_series(6,500005);
INSERT 0 500000
digoal=> insert into array_test (phone_list) select cast(regexp_split_to_array(id1||','||id2||','||id3||','||id4||','||id5||','||id6,',') as numeric[]) from phone;
INSERT 0 500000
digoal=> create index idx_array_test on array_test using gin (phone_list);
CREATE INDEX
digoal=> explain analyze select * from array_test where phone_list && cast(array[1,2] as numeric[]);
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on array_test  (cost=39.38..3231.72 rows=2500 width=100) (actual time=0.037..0.038 rows=2 loops=1)
   Recheck Cond: (phone_list && '{1,2}'::numeric[])
   ->  Bitmap Index Scan on idx_array_test  (cost=0.00..38.75 rows=2500 width=0) (actual time=0.029..0.029 rows=2 loops=1)
         Index Cond: (phone_list && '{1,2}'::numeric[])
 Total runtime: 0.081 ms
(5 rows)
Time: 0.825 ms
digoal=> select * from array_test where phone_list && cast(array[1,2,3,4,5,6] as numeric[]);
 id |   phone_list    
----+-----------------
    | {1,2,3,4,5,6}
    | {2,3,4,5,6,7}
    | {3,4,5,6,7,8}
    | {4,5,6,7,8,9}
    | {5,6,7,8,9,10}
    | {6,7,8,9,10,11}
(6 rows)
Time: 0.524 ms



2. 用tsvector类型来存储好友列表

digoal=> create table tsvector_test (id bigint,phone_list tsvector);
CREATE TABLE
Time: 3.411 ms
digoal=> insert into tsvector_test (phone_list ) select cast (id1||' '||id2||' '||id3||' '||id4||' '||id5||' '||id6 as tsvector) from phone;
INSERT 0 500000
Time: 3860.805 ms
digoal=> create index idx_tsvector_test on tsvector_test using gin (phone_list);
CREATE INDEX
Time: 8618.414 ms
digoal=> explain analyze select * from tsvector_test where phone_list @@ '1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10'::tsquery;
                                                                          QUERY PLAN                                                
                           
------------------------------------------------------------------------------------------------------------------------------------
---------------------------
 Bitmap Heap Scan on tsvector_test  (cost=305.45..6675.01 rows=24445 width=71) (actual time=0.104..0.113 rows=10 loops=1)
   Recheck Cond: (phone_list @@ '( ( ( ( ( ( ( ( ''1'' | ''2'' ) | ''3'' ) | ''4'' ) | ''5'' ) | ''6'' ) | ''7'' ) | ''8'' ) | ''9''
 ) | ''10'''::tsquery)
   ->  Bitmap Index Scan on idx_tsvector_test  (cost=0.00..299.34 rows=24445 width=0) (actual time=0.095..0.095 rows=10 loops=1)
         Index Cond: (phone_list @@ '( ( ( ( ( ( ( ( ''1'' | ''2'' ) | ''3'' ) | ''4'' ) | ''5'' ) | ''6'' ) | ''7'' ) | ''8'' ) | '
'9'' ) | ''10'''::tsquery)
 Total runtime: 0.227 ms
(5 rows)

Time: 0.824 ms
digoal=> select * from tsvector_test where phone_list @@ '1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10'::tsquery;
 id |          phone_list           
----+-------------------------------
    | '1' '2' '3' '4' '5' '6'
    | '2' '3' '4' '5' '6' '7'
    | '3' '4' '5' '6' '7' '8'
    | '4' '5' '6' '7' '8' '9'
    | '10' '5' '6' '7' '8' '9'
    | '10' '11' '6' '7' '8' '9'
    | '10' '11' '12' '7' '8' '9'
    | '10' '11' '12' '13' '8' '9'
    | '10' '11' '12' '13' '14' '9'
    | '10' '11' '12' '13' '14' '15'
(10 rows)

Time: 0.760 ms


换成GiST索引,

digoal=> drop index idx_tsvector_test ;
DROP INDEX
Time: 22.531 ms
digoal=> create index idx_tsvector_test on tsvector_test using gist (phone_list);
CREATE INDEX
Time: 22992.763 ms

digoal=> select * from tsvector_test where phone_list @@ '1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10'::tsquery;
 id |          phone_list           
----+-------------------------------
    | '1' '2' '3' '4' '5' '6'
    | '2' '3' '4' '5' '6' '7'
    | '3' '4' '5' '6' '7' '8'
    | '4' '5' '6' '7' '8' '9'
    | '10' '5' '6' '7' '8' '9'
    | '10' '11' '6' '7' '8' '9'
    | '10' '11' '12' '7' '8' '9'
    | '10' '11' '12' '13' '8' '9'
    | '10' '11' '12' '13' '14' '9'
    | '10' '11' '12' '13' '14' '15'
(10 rows)

Time: 290.487 ms
digoal=> explain analyze select * from tsvector_test where phone_list @@ '1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10'::tsquery;
                                                                          QUERY PLAN                                                
                           
------------------------------------------------------------------------------------------------------------------------------------
---------------------------
 Bitmap Heap Scan on tsvector_test  (cost=521.77..6891.33 rows=24445 width=71) (actual time=287.089..287.109 rows=10 loops=1)
   Recheck Cond: (phone_list @@ '( ( ( ( ( ( ( ( ''1'' | ''2'' ) | ''3'' ) | ''4'' ) | ''5'' ) | ''6'' ) | ''7'' ) | ''8'' ) | ''9''
 ) | ''10'''::tsquery)
   ->  Bitmap Index Scan on idx_tsvector_test  (cost=0.00..515.66 rows=24445 width=0) (actual time=287.059..287.059 rows=10 loops=1)
         Index Cond: (phone_list @@ '( ( ( ( ( ( ( ( ''1'' | ''2'' ) | ''3'' ) | ''4'' ) | ''5'' ) | ''6'' ) | ''7'' ) | ''8'' ) | '
'9'' ) | ''10'''::tsquery)
 Total runtime: 287.160 ms
(5 rows)

Time: 287.809 ms



显然在这个例子中, 使用GiST的效率远远低于GIN的效率。
另外如果能够给这几个operator class加上近似度排序的operator就更实用了。
pg_trgm的近似度排序支持的operator : 

        OPERATOR        2       <-> (text, text) FOR ORDER BY pg_catalog.float_ops,



gin索引对update操作和insert操作影响较大 , 具体优化方法是加大work_mem, 见
http://blog.163.com/digoal@126/blog/static/163877040201341625735128/

【参考】
http://www.postgresql.org/docs/9.1/static/gin.html
http://www.postgresql.org/docs/9.1/static/gist.html
