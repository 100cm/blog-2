PostgreSQL research

PostgreSQL pending patch: Auto-tuning checkpoint_segments

2013-08-27 11:43:41   查看原文>>

这个补丁源自VMware的vPostgreSQL对checkpoint的改造. 根据数据库checkpoint之间产生pg_xlog的速率来自动预估和调整下一次checkpoint什么时候开始(历经多少个pg_xlog).
这样做的好处是在数据库负载较低的情况下(或者说产生pg_xlog较少), 自动适当减少checkpoint之间的pg_xlog数. 提高checkpoint频率, 亦可减少数据库在异常DOWN机需要recovery时所需的pg_xlog数. 当数据库负载很高(或者说产生pg_xlog较多)时, 自动增加checkpoint之间的pg_xlog数, 以减少checkpoint对DML带来的影响, 获得更好的DML性能.
注意, 这个补丁并不能消除checkpoint带来的性能影响. 
打补丁 : 

[root@db-172-16-3-33 postgresql-1b1d3d9]# wget http://www.postgresql.org/message-id/attachment/29918/redesign-checkpoint-segments-1.patch
[root@db-172-16-3-33 postgresql-1b1d3d9]# patch -p1 < redesign-checkpoint-segments-1.patch 
patching file doc/src/sgml/config.sgml
patching file doc/src/sgml/perform.sgml
patching file doc/src/sgml/wal.sgml
patching file src/backend/access/transam/xlog.c
patching file src/backend/postmaster/checkpointer.c
patching file src/backend/utils/misc/guc.c
patching file src/include/access/xlog.h
[root@db-172-16-3-33 postgresql-1b1d3d9]# gmake
[root@db-172-16-3-33 postgresql-1b1d3d9]# gmake install


该补丁新增了两个配置项checkpoint_wal_size , min_recycle_wal_size ; 删除了1个配置项checkpoint_segments .

root@db-172-16-3-33-> su - pg94
pg94@db-172-16-3-33-> cd $PGDATA
pg94@db-172-16-3-33-> vi postgresql.conf 
checkpoint_wal_size = 2048MB
min_recycle_wal_size = 256MB
#checkpoint_segments = 32 # 这个参数已从guc中去除, 注释掉即可.


重启数据库生效 : 

pg94@db-172-16-3-33-> pg_ctl start
pg94@db-172-16-3-33-> psql
psql (9.4devel)
Type "help" for help.
digoal=# show checkpoint_wal_size;
 checkpoint_wal_size 
---------------------
 2GB
(1 row)
digoal=# show min_recycle_wal_size;
 min_recycle_wal_size 
----------------------
 256MB
(1 row)


新增测试表和函数.

digoal=# create table test (id int primary key, info text, crt_time timestamp);
CREATE TABLE
create or replace function f_id_add(i_id int) returns void as $$
declare
begin
  update test set crt_time=clock_timestamp() where id=i_id;
  if not found then
    insert into test values (i_id,md5(random()::text),clock_timestamp());
    return;
  else
    return;
  end if;
  return;
exception when others then
  return;
end;
$$ language plpgsql strict;


使用pgbench测试 : 

root@db-172-16-3-33-> vi test.sql
\setrandom id 1 5000000
select * from f_id_add(:id);


参数 : 

postgresql.conf
checkpoint_wal_size = 2048MB
min_recycle_wal_size = 256MB
#checkpoint_segments = 32               # in logfile segments, min 1, 16MB each
#checkpoint_timeout = 5min              # range 30s-1h
#checkpoint_completion_target = 0.5     # checkpoint target duration, 0.0 - 1.0
#checkpoint_warning = 30s               # 0 disables



测试结果 : 

root@db-172-16-3-33-> pgbench -M prepared -f ./test.sql -n -r -P 1 -c 6 -j 6 -T 600

checkpoint发生时, 如果datafile的底层存储io能力较差的话, 波动难免,  : 
progress: 293.0 s, 38436.2 tps, 0.156 ms lat
progress: 294.0 s, 39080.4 tps, 0.154 ms lat
progress: 295.3 s, 19002.0 tps, 0.316 ms lat
progress: 296.0 s, 8902.0 tps, 0.674 ms lat
progress: 297.0 s, 7351.9 tps, 0.816 ms lat
progress: 298.0 s, 9077.9 tps, 0.661 ms lat
progress: 299.1 s, 10286.2 tps, 0.583 ms lat
progress: 300.0 s, 8173.6 tps, 0.734 ms lat
progress: 301.0 s, 16850.9 tps, 0.356 ms lat
progress: 302.0 s, 22523.4 tps, 0.266 ms lat
progress: 303.0 s, 30896.1 tps, 0.194 ms lat
progress: 304.0 s, 29802.8 tps, 0.201 ms lat
progress: 305.0 s, 38459.6 tps, 0.156 ms lat
progress: 306.1 s, 33927.1 tps, 0.177 ms lat
progress: 307.0 s, 43309.6 tps, 0.139 ms lat

2013-08-27 10:49:22.227 CST,,,22727,,521c1286.58c7,1,,2013-08-27 10:44:22 CST,,0,LOG,00000,"checkpoint starting: time",,,,,,,,"LogCheckpointStart, xlog.c:7903",""

progress: 444.0 s, 38184.4 tps, 0.157 ms lat
progress: 447.1 s, 7540.3 tps, 0.796 ms lat
progress: 447.1 s, 12500.0 tps, 0.480 ms lat
progress: 447.1 s, 22900.8 tps, 0.262 ms lat
progress: 450.0 s, 2810.3 tps, 2.135 ms lat
progress: 450.0 s, 17505.5 tps, 0.343 ms lat
progress: 450.0 s, 23676.0 tps, 0.253 ms lat

2013-08-27 10:51:57.849 CST,,,22727,,521c1286.58c7,2,,2013-08-27 10:44:22 CST,,0,LOG,00000,"checkpoint complete: wrote 69119 buffers (52.7%); 0 transaction log file(s) added, 0 removed, 128 recycled; write=149.741 s, sync=5.796 s, total=155.621 s; sync files=7, longest=4.219 s, average=0.828 s; distance=3126259 KB, estimate=3126259 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
注意输出distance=3126259 KB, estimate=3126259 KB. 这个就是用来评估下一个checkpoint什么时候发生的.



下面换一台io能力稍好的服务器, 测试600秒后的补丁前后结果对比如下 : 
PostgreSQL pending patch: Auto-tuning checkpoint_segments - 德哥@Digoal - PostgreSQL
补丁前的checkpoint日志, 发生了3次checkpoint.

2013-08-27 11:06:10.325 CST,,,4705,,521c1676.1261,1,,2013-08-27 11:01:10 CST,,0,LOG,00000,"checkpoint starting: time",,,,,,,,"LogCheckpointStart, xlog.c:7798",""
2013-08-27 11:07:36.522 CST,,,4705,,521c1676.1261,2,,2013-08-27 11:01:10 CST,,0,LOG,00000,"checkpoint complete: wrote 50740 buffers (38.7%); 0 transaction log file(s) added, 0 removed, 128 recycled; write=84.490 s, sync=1.609 s, total=86.197 s; sync files=35, longest=0.922 s, average=0.036 s",,,,,,,,"LogCheckpointEnd, xlog.c:7893",""
2013-08-27 11:09:43.106 CST,,,4705,,521c1676.1261,3,,2013-08-27 11:01:10 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7798",""
2013-08-27 11:10:56.760 CST,,,4705,,521c1676.1261,4,,2013-08-27 11:01:10 CST,,0,LOG,00000,"checkpoint complete: wrote 65608 buffers (50.1%); 0 transaction log file(s) added, 0 removed, 101 recycled; write=73.145 s, sync=0.363 s, total=73.653 s; sync files=7, longest=0.203 s, average=0.051 s",,,,,,,,"LogCheckpointEnd, xlog.c:7893",""
2013-08-27 11:14:43.760 CST,,,4705,,521c1676.1261,5,,2013-08-27 11:01:10 CST,,0,LOG,00000,"checkpoint starting: time",,,,,,,,"LogCheckpointStart, xlog.c:7798",""
2013-08-27 11:17:14.193 CST,,,4705,,521c1676.1261,6,,2013-08-27 11:01:10 CST,,0,LOG,00000,"checkpoint complete: wrote 68764 buffers (52.5%); 0 transaction log file(s) added, 0 removed, 120 recycled; write=149.304 s, sync=1.106 s, total=150.432 s; sync files=7, longest=0.832 s, average=0.158 s",,,,,,,,"LogCheckpointEnd, xlog.c:7893",""


补丁后的checkpoint日志, 发生了11次checkpoint.

2013-08-27 11:20:06.437 CST,,,6132,,521c1aa9.17f4,1,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:20:12.818 CST,,,6132,,521c1aa9.17f4,2,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 66872 buffers (51.0%); 0 transaction log file(s) added, 82 removed, 0 recycled; write=2.964 s, sync=2.681 s, total=6.381 s; sync files=5, longest=2.092 s, average=0.536 s; distance=833934 KB, estimate=833934 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:20:49.690 CST,,,6132,,521c1aa9.17f4,3,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:20:56.190 CST,,,6132,,521c1aa9.17f4,4,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 70099 buffers (53.5%); 0 transaction log file(s) added, 33 removed, 13 recycled; write=4.944 s, sync=1.354 s, total=6.500 s; sync files=7, longest=0.985 s, average=0.193 s; distance=835582 KB, estimate=835582 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:21:36.730 CST,,,6132,,521c1aa9.17f4,5,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:21:44.500 CST,,,6132,,521c1aa9.17f4,6,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 68691 buffers (52.4%); 0 transaction log file(s) added, 2 removed, 50 recycled; write=5.125 s, sync=2.470 s, total=7.770 s; sync files=7, longest=1.957 s, average=0.352 s; distance=835583 KB, estimate=835583 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:22:25.581 CST,,,6132,,521c1aa9.17f4,7,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:22:33.452 CST,,,6132,,521c1aa9.17f4,8,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 67728 buffers (51.7%); 0 transaction log file(s) added, 1 removed, 50 recycled; write=5.074 s, sync=2.781 s, total=7.871 s; sync files=7, longest=1.996 s, average=0.397 s; distance=835583 KB, estimate=835583 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:23:15.781 CST,,,6132,,521c1aa9.17f4,9,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:23:24.129 CST,,,6132,,521c1aa9.17f4,10,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 66744 buffers (50.9%); 0 transaction log file(s) added, 1 removed, 50 recycled; write=5.240 s, sync=3.066 s, total=8.348 s; sync files=7, longest=2.218 s, average=0.438 s; distance=835584 KB, estimate=835584 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:24:07.960 CST,,,6132,,521c1aa9.17f4,11,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:24:14.338 CST,,,6132,,521c1aa9.17f4,12,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 64735 buffers (49.4%); 0 transaction log file(s) added, 5 removed, 48 recycled; write=2.964 s, sync=3.318 s, total=6.378 s; sync files=3, longest=2.109 s, average=1.106 s; distance=835583 KB, estimate=835584 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:24:52.754 CST,,,6132,,521c1aa9.17f4,13,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:25:00.157 CST,,,6132,,521c1aa9.17f4,14,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 69847 buffers (53.3%); 0 transaction log file(s) added, 0 removed, 49 recycled; write=5.169 s, sync=2.194 s, total=7.402 s; sync files=7, longest=1.759 s, average=0.313 s; distance=835584 KB, estimate=835584 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:25:44.914 CST,,,6132,,521c1aa9.17f4,15,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:25:53.026 CST,,,6132,,521c1aa9.17f4,16,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 65797 buffers (50.2%); 0 transaction log file(s) added, 0 removed, 50 recycled; write=5.191 s, sync=2.899 s, total=8.112 s; sync files=7, longest=2.213 s, average=0.414 s; distance=835583 KB, estimate=835584 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:26:39.403 CST,,,6132,,521c1aa9.17f4,17,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:26:48.015 CST,,,6132,,521c1aa9.17f4,18,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 63964 buffers (48.8%); 0 transaction log file(s) added, 0 removed, 51 recycled; write=5.300 s, sync=3.277 s, total=8.611 s; sync files=7, longest=2.581 s, average=0.468 s; distance=835584 KB, estimate=835584 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:27:34.453 CST,,,6132,,521c1aa9.17f4,19,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:27:42.637 CST,,,6132,,521c1aa9.17f4,20,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 62490 buffers (47.7%); 0 transaction log file(s) added, 0 removed, 51 recycled; write=5.133 s, sync=3.022 s, total=8.183 s; sync files=7, longest=2.306 s, average=0.431 s; distance=835583 KB, estimate=835584 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""
2013-08-27 11:28:29.155 CST,,,6132,,521c1aa9.17f4,21,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint starting: xlog",,,,,,,,"LogCheckpointStart, xlog.c:7903",""
2013-08-27 11:28:37.248 CST,,,6132,,521c1aa9.17f4,22,,2013-08-27 11:19:05 CST,,0,LOG,00000,"checkpoint complete: wrote 61235 buffers (46.7%); 0 transaction log file(s) added, 2 removed, 50 recycled; write=5.106 s, sync=2.964 s, total=8.093 s; sync files=7, longest=2.695 s, average=0.423 s; distance=835584 KB, estimate=835584 KB",,,,,,,,"LogCheckpointEnd, xlog.c:8004",""



[参考]
1. http://www.postgresql.org/message-id/flat/51B0EC83.60700@vmware.com#51B0EC83.60700@vmware.com
2. http://www.postgresql.org/message-id/flat/CAM3SWZQcyNxvPaskr-pxm8DeqH7_qevW7uqbhPCsg1FpSxKpoQ@mail.gmail.com#CAM3SWZQcyNxvPaskr-pxm8DeqH7_qevW7uqbhPCsg1FpSxKpoQ@mail.gmail.com
3. src/backend/utils/misc/guc.c

!               {"min_recycle_wal_size", PGC_SIGHUP, WAL_CHECKPOINTS,
!                       gettext_noop("Sets the minimum size to shrink the WAL to."),
!                       NULL,
!                       GUC_UNIT_KB
                },
!               &min_recycle_wal_size,
!               81920, 32768, INT_MAX,
                NULL, NULL, NULL
        },
  
        {
+               {"checkpoint_wal_size", PGC_SIGHUP, WAL_CHECKPOINTS,
+                       gettext_noop("Sets the maximum WAL size that triggers a checkpoint."),
+                       NULL,
+                       GUC_UNIT_KB
+               },
+               &checkpoint_wal_size,
+               262144, 32768, INT_MAX,
+               NULL, assign_checkpoint_wal_size, NULL
+       },


4. checkpoint segments 评估.
新增两个参数的介绍 : 

      <variablelist>
!      <varlistentry id="guc-checkpoint-wal-size" xreflabel="checkpoint_wal_size">
!       <term><varname>checkpoint_wal_size</varname> (<type>integer</type>)</term>
        <indexterm>
!        <primary><varname>checkpoint_wal_size</> configuration parameter</primary>
        </indexterm>
        <listitem>
         <para>
!         Maximum size to let the WAL grow to between automatic WAL
!         checkpoints. This is a soft limit; WAL size can exceed
!         <varname>checkpoint_wal_size</> under special circumstances, like
!         under heavy load, a failing <varname>archive_command</>, or a high
!         <varname>wal_keep_segments</> setting. The default is 256 MB.
!         Increasing this parameter can increase the amount of time needed for
!         crash recovery.
          This parameter can only be set in the <filename>postgresql.conf</>
          file or on the server command line.

+      <varlistentry id="guc-min-recycle-wal-size" xreflabel="min_recycle_wal_size">
+       <term><varname>min_recycle_wal_size</varname> (<type>integer</type>)</term>
+       <indexterm>
+        <primary><varname>min_recycle_wal_size</> configuration parameter</primary>
+       </indexterm>
+       <listitem>
+        <para>
+         As long as WAL disk usage stays below this setting, old WAL files are
+         always recycled for future use at a checkpoint, rather than removed.
+         This can be used to ensure that enough WAL space is reserved to
+         handle spikes in WAL usage, for example when running large batch
+         jobs. The default is 80 MB.
+         This parameter can only be set in the <filename>postgresql.conf</>
+         file or on the server command line.
+        </para>
+       </listitem>
+      </varlistentry>
+ 


老的checkpoint remove算法.

!    There will always be at least one WAL segment file, and will normally
!    not be more than (2 + <varname>checkpoint_completion_target</varname>) * <varname>checkpoint_segments</varname> + 1
!    or <varname>checkpoint_segments</> + <xref linkend="guc-wal-keep-segments"> + 1
!    files.  Each segment file is normally 16 MB (though this size can be
!    altered when building the server).  You can use this to estimate space
!    requirements for <acronym>WAL</acronym>.
!    Ordinarily, when old log segment files are no longer needed, they
!    are recycled (that is, renamed to become future segments in the numbered
!    sequence). If, due to a short-term peak of log output rate, there
!    are more than 3 * <varname>checkpoint_segments</varname> + 1
!    segment files, the unneeded segment files will be deleted instead
!    of recycled until the system gets back under this limit.
    </para>


新的checkpoint recycle use或者remove算法.

!    The number of WAL segment files in <filename>pg_xlog</> directory depends on
!    <varname>checkpoint_wal_size</>, <varname>wal_recycle_min_size</> and the
!    amount of WAL generated in previous checkpoint cycles. When old log
!    segment files are no longer needed, they are removed or recycled (that is,
!    renamed to become future segments in the numbered sequence). If, due to a
!    short-term peak of log output rate, <varname>checkpoint_wal_size</> is
!    exceeded, the unneeded segment files will be removed until the system
!    gets back under this limit. Below that limit, the system recycles enough
!    WAL files to cover the estimated need until the next checkpoint, and
!    removes the rest. The estimate is based on a moving average of the number
!    of WAL files used in previous checkpoint cycles. The moving average
!    is increased immediately if the actual usage exceeds the estimate, so it
!    accommodates peak usage rather average usage to some extent.
!    <varname>wal_recycle_min_size</> puts a minimum on the amount of WAL files
!    recycled for future usage; that much WAL is always recycled for future use,
!    even if the system is idle and the WAL usage estimate suggests that little
!    WAL is needed.
!   </para>
! 
!   <para>
!    Independently of <varname>checkpoint_wal_size</varname>,
!    <xref linkend="guc-wal-keep-segments"> + 1 most recent WAL files are
!    kept at all times. Also, if WAL archiving is used, old segments can not be
!    removed or recycled until they are archived. If WAL archiving cannot keep up
!    with the pace that WAL is generated, or if <varname>archive_command</varname>
!    fails repeatedly, old WAL files will accumulate in <filename>pg_xlog</>
!    until the situation is resolved.


不管是补丁前还是补丁后, 在特殊情况下都可能超出checkpoint_wal_size或者checkpoint_segments限制的大小.
计算distance.

+  * Calculate CheckPointSegments based on checkpoint_wal_size and
+  * checkpoint_completion_target.
+  */
+ static void
+ CalculateCheckpointSegments(void)
+ {
+       double          target;
+ 
+       /*-------
+        * Calculate the distance at which to trigger a checkpoint, to avoid
+        * exceeding checkpoint_wal_size. This is based on two assumptions:
+        *
+        * a) we keep WAL for two checkpoint cycles, back to the "prev" checkpoint.
+        * b) during checkpoint, we consume checkpoint_completion_target *
+        *    number of segments consumed between checkpoints.
+        *-------
+        */
+       target = (double ) checkpoint_wal_size / (double) (XLOG_SEG_SIZE / 1024);
+       target = target / (2.0 + CheckPointCompletionTarget);
+ 
+       /* round down */
+       CheckPointSegments = (int) target;
+ 
+       if (CheckPointSegments < 1)
+               CheckPointSegments = 1;
+ }
+ 
+ void
+ assign_checkpoint_wal_size(int newval, void *extra)
+ {
+       checkpoint_wal_size = newval;
+       CalculateCheckpointSegments();
+ }
+ 
+ void
+ assign_checkpoint_completion_target(double newval, void *extra)
+ {
+       CheckPointCompletionTarget = newval;
+       CalculateCheckpointSegments();
+ }
+ 
+ /*
+  * At a checkpoint, how many WAL segments to recycle as preallocated future
+  * XLOG segments? Returns the highest segment that should be preallocated.
+  */
+ static XLogSegNo
+ XLOGfileslop(XLogRecPtr PriorRedoPtr)
+ {
+       double          nsegments;
+       XLogSegNo       minSegNo;
+       XLogSegNo       maxSegNo;
+       double          distance;
+       XLogSegNo       recycleSegNo;
+ 
+       /*
+        * Calculate the segment numbers that min_recycle_wal_size and
+        * checkpoint_wal_size correspond to. Always recycle enough segments
+        * to meet the minimum, and remove enough segments to stay below the
+        * maximum.
+        */
+       nsegments = (double) min_recycle_wal_size / (double) (XLOG_SEG_SIZE / 1024);
+       minSegNo = PriorRedoPtr / XLOG_SEG_SIZE + (int) nsegments;
+       nsegments = (double) checkpoint_wal_size / (double) (XLOG_SEG_SIZE / 1024);
+       maxSegNo =  PriorRedoPtr / XLOG_SEG_SIZE + (int) nsegments;
+ 
+       /*
+        * Between those limits, recycle enough segments to get us through to the
+        * estimated end of next checkpoint.
+        *
+        * To estimate where the next checkpoint will finish, assume that the
+        * system runs steadily consuming CheckPointDistanceEstimate
+        * bytes between every checkpoint.
+        *
+        * The reason this calculation is done from the prior checkpoint, not the
+        * one that just finished, is that this behaves better if some checkpoint
+        * cycles are abnormally short, like if you perform a manual checkpoint
+        * right after a timed one. The manual checkpoint will make almost a full
+        * cycle's worth of WAL segments available for recycling, because the
+        * segments from the prior's prior, fully-sized checkpoint cycle are no
+        * longer needed. However, the next checkpoint will make only few segments
+        * available for recycling, the ones generated between the timed
+        * checkpoint and the manual one right after that. If at the manual
+        * checkpoint we only retained enough segments to get us to the next timed
+        * one, and removed the rest, then at the next checkpoint we would not
+        * have enough segments around for recycling, to get us to the checkpoint
+        * after that. Basing the calculations on the distance from the prior redo
+        * pointer largely fixes that problem.
+        */
+       distance = (2.0 + CheckPointCompletionTarget) * CheckPointDistanceEstimate;
+       /* add 10% for good measure. */
+       distance *= 1.10;
+ 
+       recycleSegNo = (XLogSegNo) ceil(((double) PriorRedoPtr + distance) / XLOG_SEG_SIZE);
+ 
+       if (recycleSegNo < minSegNo)
+               recycleSegNo = minSegNo;
+       if (recycleSegNo > maxSegNo)
+               recycleSegNo = maxSegNo;
+ 
+       return recycleSegNo;
+ }
+ 
+ /*


