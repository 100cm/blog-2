PostgreSQL research

PostgreSQL 9.4 pending patch : pgbench progress report improvements

2013-08-08 7:50:09   查看原文>>

Here is a patch submission for reference to the next commitfest.

Improve pgbench measurements & progress report

  - Use progress option both under init & bench.

    Activate progress report by default, every 5 seconds.
    When initializing, --quiet reverts to the old every 100,000 insertions
    behavior...

  - Measure transaction latency instead of computing it.

    The previous computed figure does not make sense under throttling,
    as sleep throttling time was included in the figures.
    The latency and its standard deviation are printed out under progress
    and in the final report.

  - Take thread start time at the beginning of the thread.

    Otherwise it includes pretty slow thread/fork system start times in
    the measurements. May help with bug #8326.

  - Reduce and compensate throttling underestimation bias.

    This is a consequence of relying  on an integer random generator.
    It was about 0.5% with 1000 distinct values. Multiplier added to
    compensate the 0.05% bias with 10000 distinct integer values.

  - Updated documentation & help message.


Sample output under initialization with --progress=1

   creating tables...
   223000 of 1000000 tuples (22%) done (elapsed 1.01 s, remaining 3.52 s).
   430200 of 1000000 tuples (43%) done (elapsed 2.03 s, remaining 2.68 s).
   507300 of 1000000 tuples (50%) done (elapsed 3.44 s, remaining 3.34 s).
   571400 of 1000000 tuples (57%) done (elapsed 4.05 s, remaining 3.03 s).
   786800 of 1000000 tuples (78%) done (elapsed 5.03 s, remaining 1.36 s).
   893200 of 1000000 tuples (89%) done (elapsed 6.02 s, remaining 0.72 s).
   1000000 of 1000000 tuples (100%) done (elapsed 6.93 s, remaining 0.00 s).
   ...


Sample output under benchmarking with --progress=1

   progress: 1.0 s, 116.7 tps, 8.528 +- 1.217 ms lat
   progress: 2.0 s, 117.7 tps, 8.493 +- 1.165 ms lat
   progress: 3.0 s, 115.5 tps, 8.654 +- 1.650 ms lat
   progress: 4.0 s, 116.8 tps, 8.559 +- 1.365 ms lat
   progress: 5.0 s, 111.7 tps, 8.947 +- 3.475 ms lat
   progress: 6.0 s, 116.7 tps, 8.563 +- 1.387 ms lat
   progress: 7.0 s, 116.6 tps, 8.572 +- 1.474 ms lat
   ...
   # oops, things happen:
   progress: 36.0 s, 10.9 tps, 91.864 +- 124.874 ms lat
   progress: 37.0 s, 115.2 tps, 8.678 +- 1.792 ms lat
   ...

-- 
Fabien.


前段时间测试pgbench限速补丁时发现的一个bug, 对不计连接时间的tps计算不准确.
http://blog.163.com/digoal@126/blog/static/163877040201362495136271/
http://www.postgresql.org/message-id/flat/3e56f515.35498.14019e6f413.Coremail.digoal@126.com#3e56f515.35498.14019e6f413.Coremail.digoal@126.com
本文涉及的这个补丁描述中提到

Take thread start time at the beginning of the thread.
    Otherwise it includes pretty slow thread/fork system start times in
    the measurements. May help with bug #8326.


实际测试时发现计算还是不准确.
当然这个补丁还带来了另外的几个改变, 例如默认打开间隔tps统计输出.


[root@db-172-16-3-39 postgresql-f347f26]# patch -p1 < ../postgresql-e5592c6/pgbench-measurements-v1.patch 
(Stripping trailing CRs from patch.)
patching file contrib/pgbench/pgbench.c
(Stripping trailing CRs from patch.)
patching file doc/src/sgml/pgbench.sgml
[root@db-172-16-3-39 postgresql-f347f26]# cd contrib/
gmake
gmake install



偏差非常大 : 

pg94@db-172-16-3-39-> pgbench  -M prepared -n -r -f ./test.sql -T 10 -c 800 -j 100 --progress=100 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 800
number of threads: 100
duration: 10 s
number of transactions actually processed: 1367605
tps = 134296.468682 (including connections establishing)
tps = 1141491.359853 (excluding connections establishing)
statement latencies in milliseconds:
        0.567517        select 1;


现场启动缓慢, 到5.4秒的时候才开始输出.

pg94@db-172-16-3-39-> pgbench  -M prepared -n -r -f ./test.sql -T 10 -c 800 -j 100 --progress=1 digoal
progress: 5.4 s, 128997.7 tps, 0.640 +- 18.571 ms lat
progress: 5.4 s, 134693.9 tps, 0.278 +- 0.145 ms lat
progress: 5.4 s, 131034.5 tps, 0.239 +- 0.144 ms lat
progress: 5.4 s, 160305.3 tps, 0.329 +- 0.131 ms lat
progress: 5.4 s, 128787.9 tps, 0.226 +- 0.144 ms lat
progress: 6.0 s, 147002.4 tps, 1.537 +- 39.476 ms lat
progress: 7.0 s, 145912.2 tps, 1.470 +- 34.796 ms lat
progress: 8.0 s, 148744.5 tps, 1.364 +- 28.295 ms lat
progress: 9.1 s, 151123.0 tps, 1.581 +- 47.873 ms lat
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 800
number of threads: 100
duration: 10 s
number of transactions actually processed: 1381824
tps = 136105.404309 (including connections establishing)
tps = 403878.915743 (excluding connections establishing)
statement latencies in milliseconds:
        1.659022        select 1;


10个线程的情况下正常输出progress信息.

pg94@db-172-16-3-39-> pgbench  -M prepared -n -r -f ./test.sql -T 10 -c 800 -j 10 --progress=1 digoal
progress: 1.0 s, 23344.8 tps, 6.659 +- 31.870 ms lat
progress: 2.0 s, 83257.4 tps, 10.515 +- 69.286 ms lat
progress: 3.0 s, 120820.5 tps, 7.131 +- 26.962 ms lat
progress: 4.0 s, 115552.1 tps, 6.915 +- 15.241 ms lat
progress: 5.0 s, 102697.5 tps, 7.820 +- 14.127 ms lat
progress: 6.0 s, 110699.6 tps, 7.213 +- 18.471 ms lat
progress: 7.0 s, 105823.5 tps, 7.564 +- 12.859 ms lat
progress: 8.0 s, 115089.4 tps, 6.933 +- 14.097 ms lat
progress: 9.0 s, 99036.2 tps, 8.137 +- 12.502 ms lat
progress: 10.0 s, 107648.3 tps, 7.203 +- 14.583 ms lat
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 800
number of threads: 10
duration: 10 s
number of transactions actually processed: 989276
tps = 98213.265456 (including connections establishing)
tps = 104111.729024 (excluding connections establishing)
statement latencies in milliseconds:
        7.606013        select 1;



[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201362495136271/
2. http://www.postgresql.org/message-id/flat/3e56f515.35498.14019e6f413.Coremail.digoal@126.com#3e56f515.35498.14019e6f413.Coremail.digoal@126.com
3. http://www.postgresql.org/message-id/flat/alpine.DEB.2.02.1308061042030.29999@localhost6.localdomain6#alpine.DEB.2.02.1308061042030.29999@localhost6.localdomain6
