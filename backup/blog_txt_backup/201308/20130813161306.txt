PostgreSQL research

PostgreSQL extension : hashtypes (crc32, md5hash, sha1, sha224, sha256, sha384, sha512)

2013-08-13 16:13:06   查看原文>>

hashtypes是PostgreSQL的类型扩展包, 是shatypes的类型扩展, 增加了crc32, md5hash, sha1, sha224, sha256, sha384, sha512等数据类型的支持.
安装方法如下 : 

wget http://api.pgxn.org/dist/hashtypes/0.1.1/hashtypes-0.1.1.zip
unzip hashtypes-0.1.1.zip
mv hashtypes-0.1.1 contrib/
cd contrib/hashtypes-0.1.1
export PATH=/opt/pgsql9.3beta2/bin:$PATH
which pg_config
  /opt/pgsql9.3beta2/bin/pg_config
gmake clean
gmake
gmake install



安装extension.

su - pg93
pg93@db-172-16-3-39-> psql
psql (9.3beta2)
Type "help" for help.
digoal=# create extension hashtypes;
ERROR:  could not stat file "/opt/pgsql9.3beta2/share/extension/hashtypes--0.1.sql": No such file or directory


这个错误是因为扩展包的控制文件有问题, 修改一下即可.

cd $PGHOME/share/extension
root@db-172-16-3-39-> ll|grep hashtype
-rw-r--r-- 1 root root  20K Aug 13 15:52 hashtypes--0.1.1.sql
-rw-r--r-- 1 root root  129 Aug 13 15:53 hashtypes.control
vi hashtypes.control
default_version = '0.1'  改成 default_version = '0.1.1'


接下来创建extension正常.

pg93@db-172-16-3-39-> psql
psql (9.3beta2)
Type "help" for help.
digoal=# create extension hashtypes;
CREATE EXTENSION



hashtypes扩展包新增了以下数据类型, 以及对应的操作符, 索引访问方法.

CREATE TYPE crc32;
CREATE TYPE md5hash;
CREATE TYPE sha1;
CREATE TYPE sha224;
CREATE TYPE sha256;
CREATE TYPE sha384;
CREATE TYPE sha512;


函数以及索引访问方法等详见hashtypes--0.1.1.sql

使用举例, 取自hashtypes regress_test : 

root@db-172-16-3-39-> cd expected/
root@db-172-16-3-39-> ll
total 4.0K
-rw-r--r-- 1 root root 2.0K Jun 30 12:15 regress_sha.out

root@db-172-16-3-39-> cat regress_sha.out 
--
-- first, define the datatype.  Turn off echoing so that expected file
-- does not depend on contents of sha.sql.
--
SET client_min_messages = warning;
\set ECHO none
RESET client_min_messages;
CREATE TABLE sha (one sha1, two sha224);
CREATE INDEX sha1s_b ON sha (one);
CREATE INDEX sha1s_h ON sha USING hash (two);
COPY sha FROM stdin;
da39a3ee5e6b4b0d3255bfef95601890afd80709        d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f
d67a3c66c2ed6c8855d898bb04442ce0371c1f3b        a1fcbaf07c898aa590c6f3169eef115da1a1f6521921919bee973da9
b262b078c9ec2797ad8980208ff773384d6bed9c        35aec750369ad69194f076f675afae3872e8d1a5f3b6c68ec3f9278f
\.

SET enable_seqscan TO off;
SELECT two FROM sha WHERE one = 'da39a3ee5e6b4b0d3255bfef95601890afd80709';
                           two                            
----------------------------------------------------------
 d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f
(1 row)

SELECT text(one) FROM sha WHERE two <> 'a1fcbaf07c898aa590c6f3169eef115da1a1f6521921919bee973da9';
                   text                   
------------------------------------------
 da39a3ee5e6b4b0d3255bfef95601890afd80709
 b262b078c9ec2797ad8980208ff773384d6bed9c
(2 rows)

SELECT text(one) FROM sha WHERE one >= '0000000000000000000000000000000000000000';
                   text                   
------------------------------------------
 da39a3ee5e6b4b0d3255bfef95601890afd80709
 d67a3c66c2ed6c8855d898bb04442ce0371c1f3b
 b262b078c9ec2797ad8980208ff773384d6bed9c
(3 rows)

CREATE TABLE md5test (val md5hash);
CREATE INDEX md5_id1 ON md5test (val);
CREATE INDEX md5_id2 ON md5test USING hash(val);
INSERT INTO md5test VALUES (md5('test')), (md5('another test'));
SELECT val FROM md5test WHERE val <> md5('another test')::md5hash;
               val                
----------------------------------
 098f6bcd4621d373cade4e832627b4f6
(1 row)

SELECT val FROM md5test WHERE val = md5('another test')::md5hash; 
               val                
----------------------------------
 5e8862cd73694287ff341e75c95e3c6a
(1 row)

SELECT text(val) FROM md5test WHERE val < 'ffffffffffffffffffffffffffffffff';
               text               
----------------------------------
 098f6bcd4621d373cade4e832627b4f6
 5e8862cd73694287ff341e75c95e3c6a
(2 rows)



[参考]
1. http://pgxn.org/dist/hashtypes
2. http://pgfoundry.org/projects/shatypes
