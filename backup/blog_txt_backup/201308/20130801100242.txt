PostgreSQL research

PostgreSQL 9.4 patch : extend RETURNING syntax (can return BEFORE AND AFTER values)

2013-08-01 10:02:42   查看原文>>

以前碰到过开发问起如何在update语句后返回被更新的字段的前值. 以前的做法可以使用with语法或者使用函数来实现.
online code中实现 : 

digoal=# create table test (id int primary key, info text, crt_time timestamp);
CREATE TABLE
digoal=# insert into test select generate_series(1,100),md5(random()::text),clock_timestamp();
INSERT 0 100
digoal=# do language plpgsql $$
declare
  info_new text;
  info_old text;
begin
  select info into info_old from test where id=1 for update;
  update test set info=info||'new' where id=1 returning info into info_new;
  raise notice 'info_new:%, info_old:%', info_new, info_old;
end;
$$;
NOTICE:  info_new:35546c492826eaeea024e0f185912bcfnew, info_old:35546c492826eaeea024e0f185912bcf
DO


with中实现 : 

digoal=# with t1 as (select info from test where id=2) update test set info = test.info||'new' from t1 where test.id=2 returning t1.info,test.info;
               info               |                info                 
----------------------------------+-------------------------------------
 d66c85217011730b209c843842929a32 | d66c85217011730b209c843842929a32new
(1 row)
UPDATE 1



现在不需要这么麻烦了, 一位名为Karol Trzcionka的学生在参加Google Summer of Code时选择了这个主题.
新增update发, 支持在PostgreSQL使用update, insert, delete时使用before, after来选择返回此前的值. 或者更新后的值.
目前补丁尚未完善, 不过可以试用一下, 打补丁如下.

wget http://www.postgresql.org/message-id/attachment/29725/before_after_v4.patch
cd postgresql-10a509d
patch -p1 < ../before_after_v4.patch
gmake
sudo gmake install
pg_ctl restart -m fast



使用非常简单, 测试如下 : 

[root@db-172-16-3-33 pg94]# su - pg94
pg94@db-172-16-3-33-> psql
psql (9.4devel)
Type "help" for help.
digoal=# create table test (id int primary key, info text, crt_time timestamp);
CREATE TABLE
digoal=# insert into test select generate_series(1,100),md5(random()::text),clock_timestamp();
INSERT 0 100
digoal=# update test set info='new' where id=1 returning before.*, after.*;
 id |                info                 |          crt_time          | id | info |          crt_time          
----+-------------------------------------+----------------------------+----+------+----------------------------
  1 | 35546c492826eaeea024e0f185912bcfnew | 2013-08-01 09:44:19.582004 |  1 | new  | 2013-08-01 09:44:19.582004
(1 row)
UPDATE 1
digoal=# update test set info='new' where id=3 returning before.info, after.info;
               info               | info 
----------------------------------+------
 58fc51916069ef89a3f037855d217c0e | new
(1 row)
UPDATE 1
digoal=# with t1 as (select info from test where id=2) update test set info = test.info||'new' from t1 where test.id=2 returning before.test.info;
ERROR:  42P01: invalid reference to FROM-clause entry for table "test"
LINE 1: ...est.info||'new' from t1 where test.id=2 returning before.tes...
                                                             ^
HINT:  There is an entry for table "test", but it cannot be referenced from this part of the query.
LOCATION:  errorMissingRTE, parse_relation.c:2584
digoal=# with t1 as (select info from test where id=2) update test set info = test.info||'new' from t1 where test.id=2 returning before.info;
ERROR:  XX000: invalid attribute number 2
LOCATION:  slot_getsomeattrs, heaptuple.c:1285
digoal=# with t1 as (select info from test where id=2) update test set info = test.info||'new' from t1 where test.id=2 returning before.*;
ERROR:  XX000: invalid attribute number 3
LOCATION:  slot_getsomeattrs, heaptuple.c:1285
digoal=# with t1 as (select info from test where id=2) update test set info = test.info||'new' from t1 where test.id=2 returning after.*;
 id |                   info                    |          crt_time          
----+-------------------------------------------+----------------------------
  2 | d66c85217011730b209c843842929a32newnewnew | 2013-08-01 09:44:19.582159
(1 row)
UPDATE 1


目前before 在 update from中使用有问题.
insert 和  update中不需要使用.

digoal=# insert into test values (101,'test',now()) returning before.*;
ERROR:  42P01: missing FROM-clause entry for table "before"
LINE 1: ...sert into test values (101,'test',now()) returning before.*;
                                                              ^
LOCATION:  errorMissingRTE, parse_relation.c:2590
digoal=# insert into test values (101,'test',now()) returning after.*;
ERROR:  42P01: missing FROM-clause entry for table "after"
LINE 1: ...nsert into test values (101,'test',now()) returning after.*;
                                                               ^
LOCATION:  errorMissingRTE, parse_relation.c:2590
digoal=# insert into test values (101,'test',now()) returning *;
 id  | info |          crt_time          
-----+------+----------------------------
 101 | test | 2013-08-01 09:59:26.647889
(1 row)
INSERT 0 1



digoal=# delete from test where id=1 returning before.*;
ERROR:  42P01: missing FROM-clause entry for table "before"
LINE 1: delete from test where id=1 returning before.*;
                                              ^
LOCATION:  errorMissingRTE, parse_relation.c:2590
digoal=# delete from test where id=1 returning after.*;
ERROR:  42P01: missing FROM-clause entry for table "after"
LINE 1: delete from test where id=1 returning after.*;
                                              ^
LOCATION:  errorMissingRTE, parse_relation.c:2590
digoal=# delete from test where id=1 returning *;
 id | info |          crt_time          
----+------+----------------------------
  1 | new  | 2013-08-01 09:44:19.582004
(1 row)
DELETE 1



详细测试参考本文末尾部分.

[参考]
1. http://www.postgresql.org/message-id/flat/51D61FD9.8040803@gmail.com#51D61FD9.8040803@gmail.com
2. 测试点

+--
+-- Test BEFORE/AFTER feature in RETURNING statements
+CREATE TABLE foo (
+               bar1 INTEGER,
+               bar2 TEXT
+               );
+INSERT INTO foo VALUES (1, 'x'),(2,'y');
+UPDATE foo SET bar1=bar1+1 RETURNING before.*, bar1, bar2;
+ bar1 | bar2 | bar1 | bar2 
+------+------+------+------
+    1 | x    |    2 | x
+    2 | y    |    3 | y
+(2 rows)
+
+UPDATE foo SET bar1=bar1-1 RETURNING after.bar1, before.bar1*2;
+ bar1 | ?column? 
+------+----------
+    1 |        4
+    2 |        6
+(2 rows)
+
+UPDATE foo SET bar1=bar1+1, bar2=bar2 || 'z' RETURNING before.*, after.*;
+ bar1 | bar2 | bar1 | bar2 
+------+------+------+------
+    1 | x    |    2 | xz
+    2 | y    |    3 | yz
+(2 rows)
+
+-- check single after
+UPDATE foo SET bar1=bar1+1, bar2=bar2 || 'a' RETURNING after.*;
+ bar1 | bar2 
+------+------
+    3 | xza
+    4 | yza
+(2 rows)
+
+-- check single before
+UPDATE foo SET bar1=bar1+1, bar2=bar2 || 'b' RETURNING before.*;
+ bar1 | bar2 
+------+------
+    3 | xza
+    4 | yza
+(2 rows)
+
+-- it should fail
+UPDATE foo SET bar1=bar1+before.bar1 RETURNING before.*;
+ERROR:  missing FROM-clause entry for table "before"
+LINE 1: UPDATE foo SET bar1=bar1+before.bar1 RETURNING before.*;
+                                 ^
+UPDATE foo SET bar1=bar1+after.bar1 RETURNING after.*;
+ERROR:  missing FROM-clause entry for table "after"
+LINE 1: UPDATE foo SET bar1=bar1+after.bar1 RETURNING after.*;
+                                 ^
+-- test before/after aliases
+UPDATE foo AS before SET bar1=bar1+1 RETURNING before.*,after.*;
+ bar1 | bar2 | bar1 | bar2 
+------+------+------+------
+    5 | xzab |    5 | xzab
+    6 | yzab |    6 | yzab
+(2 rows)
+
+UPDATE foo AS after SET bar1=bar1-1 RETURNING before.*,after.*;
+ bar1 | bar2 | bar1 | bar2 
+------+------+------+------
+    5 | xzab |    4 | xzab
+    6 | yzab |    5 | yzab
+(2 rows)
+
+-- test inheritance
+CREATE TABLE foo2 (bar INTEGER) INHERITS(foo);
+INSERT INTO foo2 VALUES (1,'b',5);
+UPDATE foo2 SET bar1=bar1*2, bar=bar1+5, bar2=bar1::text || bar::text RETURNING before.*, after.*, *;
+ bar1 | bar2 | bar | bar1 | bar2 | bar | bar1 | bar2 | bar 
+------+------+-----+------+------+-----+------+------+-----
+    1 | b    |   5 |    2 | 15   |   6 |    2 | 15   |   6
+(1 row)
+
+-- check views
+CREATE VIEW view_foo AS SELECT * FROM foo;
+UPDATE foo SET bar1=bar1+1 RETURNING before.*, bar1, bar2;
+ bar1 | bar2 | bar1 | bar2 
+------+------+------+------
+    4 | xzab |    5 | xzab
+    5 | yzab |    6 | yzab
+    2 | 15   |    3 | 15
+(3 rows)
+
+CREATE TABLE foo3 (bar1 INTEGER, bar4 FLOAT);
+INSERT INTO foo2 VALUES (2, 'asdf', 33);
+INSERT INTO foo3 VALUES (2, 7.77);
+CREATE VIEW view_join AS SELECT f2.*, f3.bar1 AS f1bar1, f3.bar4 FROM foo2 f2 
+JOIN foo3 f3 ON f2.bar1 = f3.bar1;
+UPDATE view_join SET bar1=bar1+5, bar2=bar2||'join', bar=bar1*2, bar4=7 RETURNING before.*, after.*;
+ERROR:  cannot update view "view_join"
+DETAIL:  Views that do not select from a single table or view are not automatically updatable.
+HINT:  To make the view updatable, provide an unconditional ON UPDATE DO INSTEAD rule or an INSTEAD OF UPDATE trigger.
+-- check triggers
+CREATE FUNCTION returning_trig() returns trigger as $$
+BEGIN
+NEW.bar1 = NEW.bar1*NEW.bar1; 
+RETURN NEW;
+END; $$ language plpgsql;
+DROP TABLE foo2 CASCADE;
+NOTICE:  drop cascades to view view_join
+CREATE TRIGGER bef_foo BEFORE UPDATE ON foo FOR EACH ROW EXECUTE PROCEDURE returning_trig();
+UPDATE foo SET bar1=bar1+1, bar2=bar2 || 'z' RETURNING before.*, after.*, *;
+ bar1 | bar2 | bar1 | bar2  | bar1 | bar2  
+------+------+------+-------+------+-------
+    5 | xzab |    6 | xzabz |   36 | xzabz
+    6 | yzab |    7 | yzabz |   49 | yzabz
+(2 rows)
+
+DROP TABLE foo CASCADE;
+NOTICE:  drop cascades to view view_foo
+DROP TABLE foo3 CASCADE;
+CREATE TABLE t1 (id serial, x int, y int, z int);
+CREATE TABLE t2 (id serial, x int, y int, z int);
+INSERT INTO t1 VALUES (DEFAULT,1,2,3);
+INSERT INTO t1 VALUES (DEFAULT,4,5,6);
+-- check WITH statement 
+WITH foo AS (UPDATE t1 SET x=x*2, y=y+1, z=x+y+z RETURNING BEFORE.x, BEFORE.y, AFTER.z) INSERT INTO t2 (x,y,z) SELECT x, y, z FROM foo RETURNING *;
+ id | x | y | z  
+----+---+---+----
+  1 | 1 | 2 |  6
+  2 | 4 | 5 | 15
+(2 rows)
+
+-- check UPDATE ... FROM statement
+UPDATE t2 SET x = t1.x+2 FROM t1 WHERE t2.id=t1.id RETURNING after.x, before.x;
+ x  | x 
+----+---
+  4 | 1
+ 10 | 4
+(2 rows)
+
+UPDATE t2 SET x = t1.x*2 FROM t1 WHERE t2.id=t1.id RETURNING after.*, before.*;
+ id | x  | y | z  | id | x  | y | z  
+----+----+---+----+----+----+---+----
+  1 |  4 | 2 |  6 |  1 |  4 | 2 |  6
+  2 | 16 | 5 | 15 |  2 | 10 | 5 | 15
+(2 rows)


