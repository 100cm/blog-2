PostgreSQL research

PostgreSQL 9.4 patch: Expose the estimation of number of changed tuples since last analyze

2013-08-12 11:12:09   查看原文>>

PostgreSQL 9.4新增的统计相关的patch, 用于记录最后一次analyze以来变更的tuples计数. 
本文以9.4为例子测试一下这个补丁带来的变更.

如下为pg_stat_all_tables系统视图, 其中n_mod_since_analyze列为新增的统计计数.

pg94@db-172-16-3-39-> psql
psql (9.4devel)
Type "help" for help.
digoal=# \d pg_stat_all_tables 
            View "pg_catalog.pg_stat_all_tables"
       Column        |           Type           | Modifiers 
---------------------+--------------------------+-----------
 relid               | oid                      | 
 schemaname          | name                     | 
 relname             | name                     | 
 seq_scan            | bigint                   | 
 seq_tup_read        | bigint                   | 
 idx_scan            | bigint                   | 
 idx_tup_fetch       | bigint                   | 
 n_tup_ins           | bigint                   | 
 n_tup_upd           | bigint                   | 
 n_tup_del           | bigint                   | 
 n_tup_hot_upd       | bigint                   | 
 n_live_tup          | bigint                   | 
 n_dead_tup          | bigint                   | 
 n_mod_since_analyze | bigint                   | -- 新增的统计项
 last_vacuum         | timestamp with time zone | 
 last_autovacuum     | timestamp with time zone | 
 last_analyze        | timestamp with time zone | 
 last_autoanalyze    | timestamp with time zone | 
 vacuum_count        | bigint                   | 
 autovacuum_count    | bigint                   | 
 analyze_count       | bigint                   | 
 autoanalyze_count   | bigint                   | 


对应函数 : 

digoal=# \df pg_stat_get_mod_since_analyze
                                      List of functions
   Schema   |             Name              | Result data type | Argument data types |  Type  
------------+-------------------------------+------------------+---------------------+--------
 pg_catalog | pg_stat_get_mod_since_analyze | bigint           | oid                 | normal
(1 row)



测试, 创建测试表 : 

digoal=# create table test(id int, info text, crt_time timestamp(0));
CREATE TABLE


分析这个表

digoal=# analyze test ;
ANALYZE


分析后n_od_since_analyze归零.

digoal=# select relname,n_mod_since_analyze,last_analyze,last_autoanalyze from pg_stat_all_tables where relname='test';
-[ RECORD 1 ]-------+------------------------------
relname             | test
n_mod_since_analyze | 0
last_analyze        | 2013-08-12 10:56:33.709702+08
last_autoanalyze    | 


插入1000条记录

digoal=# insert into test select generate_series(1,1000),md5(random()::text),now();
INSERT 0 1000


n_mod_since_analyze变更为1000.

digoal=# select relname,n_mod_since_analyze,last_analyze,last_autoanalyze from pg_stat_all_tables where relname='test';
-[ RECORD 1 ]-------+------------------------------
relname             | test
n_mod_since_analyze | 1000
last_analyze        | 2013-08-12 10:56:33.709702+08
last_autoanalyze    | 


更新9条记录,

digoal=# update test set id=id where id<10;
UPDATE 9


期间没有触发auto analyze, 也没有手工执行analyze , 所以n_mod_since_analyze计数加9, 变为1009.

digoal=# select relname,n_mod_since_analyze,last_analyze,last_autoanalyze from pg_stat_all_tables where relname='test';
-[ RECORD 1 ]-------+------------------------------
relname             | test
n_mod_since_analyze | 1009
last_analyze        | 2013-08-12 10:56:33.709702+08
last_autoanalyze    | 


更新99行, 

digoal=# update test set id=id where id<100;
UPDATE 99


从以下结果99可以知道更新前, 已经触发了auto analyze. 所以计数先归0, 重新计数.

digoal=# select relname,n_mod_since_analyze,last_analyze,last_autoanalyze from pg_stat_all_tables where relname='test';
-[ RECORD 1 ]-------+------------------------------
relname             | test
n_mod_since_analyze | 99
last_analyze        | 2013-08-12 10:56:33.709702+08
last_autoanalyze    | 2013-08-12 10:57:20.036548+08


删除15条记录, 计数累加至114.

digoal=# delete from test where id<16;
DELETE 15
digoal=# select relname,n_mod_since_analyze,last_analyze,last_autoanalyze from pg_stat_all_tables where relname='test';
-[ RECORD 1 ]-------+------------------------------
relname             | test
n_mod_since_analyze | 114
last_analyze        | 2013-08-12 10:56:33.709702+08
last_autoanalyze    | 2013-08-12 10:57:20.036548+08


如果要在9.3以及以下版本中使用这个功能, 可以通过mods_since_analyze插件来实现.
下载 : http://pgxn.org/dist/mods_since_analyze/1.0.0/
安装和使用方法如下 : 

[root@db-172-16-3-39 soft_bak]# cd postgresql-9.3beta2
[root@db-172-16-3-39 postgresql-9.3beta2]# wget http://api.pgxn.org/dist/mods_since_analyze/1.0.0/mods_since_analyze-1.0.0.zip
[root@db-172-16-3-39 postgresql-9.3beta2]# unzip mods_since_analyze-1.0.0.zip 
[root@db-172-16-3-39 postgresql-9.3beta2]# mv mods_since_analyze-1.0.0 contrib/
[root@db-172-16-3-39 postgresql-9.3beta2]# cd contrib/mods_since_analyze-1.0.0/
You have new mail in /var/spool/mail/root
[root@db-172-16-3-39 mods_since_analyze-1.0.0]# export PATH=/opt/pgsql9.3beta2/bin:$PATH
[root@db-172-16-3-39 mods_since_analyze-1.0.0]# which pg_config
/opt/pgsql9.3beta2/bin/pg_config
[root@db-172-16-3-39 mods_since_analyze-1.0.0]# gmake clean
[root@db-172-16-3-39 mods_since_analyze-1.0.0]# gmake
[root@db-172-16-3-39 mods_since_analyze-1.0.0]# gmake install
[root@db-172-16-3-39 mods_since_analyze-1.0.0]# su - pg93
pg93@db-172-16-3-39-> psql
psql (9.3beta2)
Type "help" for help.
digoal=# create extension mods_since_analyze;
CREATE EXTENSION
-- 使用以下函数取计数
digoal=# \df *.*since*
                                    List of functions
 Schema |             Name              | Result data type | Argument data types |  Type  
--------+-------------------------------+------------------+---------------------+--------
 public | pg_stat_get_mod_since_analyze | bigint           | oid                 | normal
(1 row)
digoal=# create table test(id int, info text, crt_time timestamp(0));
CREATE TABLE
digoal=# insert into test select generate_series(1,100),'test',now();
INSERT 0 100
digoal=# select * from pg_stat_get_mod_since_analyze('test'::regclass);
 pg_stat_get_mod_since_analyze 
-------------------------------
                           100
(1 row)
-- 分析后归0
digoal=# analyze test;
ANALYZE
digoal=# select * from pg_stat_get_mod_since_analyze('test'::regclass);
 pg_stat_get_mod_since_analyze 
-------------------------------
                             0
(1 row)



[参考]
1. http://pgxn.org/dist/mods_since_analyze/1.0.0/
2. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=c87ff71f374652936a6089215a30998492b14d52
3. stat相关函数
┌───────────────────────────────────────────┬────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                 Function                  │Return Type │                                                                                                        Description                                                                                                        │
├───────────────────────────────────────────┼────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│pg_backend_pid()                           │integer     │Process ID of the server process handling the current session                                                                                                                                                              │
├───────────────────────────────────────────┼────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│pg_stat_get_activity(integer)              │setof record│Returns a record of information about the backend with the specified PID, or one record for each active backend in the system if NULL is specified. The fields returned are a subset of those in the pg_stat_activity view.│
├───────────────────────────────────────────┼────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│pg_stat_clear_snapshot()                   │void        │Discard the current statistics snapshot                                                                                                                                                                                    │
├───────────────────────────────────────────┼────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│pg_stat_reset()                            │void        │Reset all statistics counters for the current database to zero (requires superuser privileges)                                                                                                                             │
├───────────────────────────────────────────┼────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│pg_stat_reset_shared(text)                 │void        │Reset some cluster-wide statistics counters to zero, depending on the argument (requires superuser privileges). Callingpg_stat_reset_shared('bgwriter') will zero all the counters shown in the pg_stat_bgwriter view.     │
├───────────────────────────────────────────┼────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│pg_stat_reset_single_table_counters(oid)   │void        │Reset statistics for a single table or index in the current database to zero (requires superuser privileges)                                                                                                               │
├───────────────────────────────────────────┼────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│pg_stat_reset_single_function_counters(oid)│void        │Reset statistics for a single function in the current database to zero (requires superuser privileges)                                                                                                                     │
└───────────────────────────────────────────┴────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
目前pg_stat_reset_shared只支持bgwriter的重置. 代码如下 : 
src/backend/utils/adt/pgstatfuncs.c

/* Reset some shared cluster-wide counters */
Datum
pg_stat_reset_shared(PG_FUNCTION_ARGS)
{
        char       *target = text_to_cstring(PG_GETARG_TEXT_PP(0));

        pgstat_reset_shared_counters(target);

        PG_RETURN_VOID();
}


src/backend/postmaster/pgstat.c

/* ----------
 * pgstat_reset_shared_counters() -
 *
 *      Tell the statistics collector to reset cluster-wide shared counters.
 * ----------
 */
void
pgstat_reset_shared_counters(const char *target)
{
        PgStat_MsgResetsharedcounter msg;

        if (pgStatSock == PGINVALID_SOCKET)
                return;

        if (!superuser())
                ereport(ERROR,
                                (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                                 errmsg("must be superuser to reset statistics counters")));

        if (strcmp(target, "bgwriter") == 0)
                msg.m_resettarget = RESET_BGWRITER;
        else
                ereport(ERROR,
                                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                                 errmsg("unrecognized reset target: \"%s\"", target),
                                 errhint("Target must be \"bgwriter\".")));

        pgstat_setheader(&msg.m_hdr, PGSTAT_MTYPE_RESETSHAREDCOUNTER);
        pgstat_send(&msg, sizeof(msg));
}


