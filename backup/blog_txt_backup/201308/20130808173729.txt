PostgreSQL research

PostgreSQL use pgbench and oracle_fdw test Oracle & PostgreSQL performance

2013-08-08 17:37:29   查看原文>>

前段时间写过一篇使用pgbench测试MySQL和PostgreSQL性能的文章
<PostgreSQL use pgbench and mysql_fdw test MySQL & PostgreSQL performance>
http://blog.163.com/digoal@126/blog/static/163877040201362355123969/
用到的是PostgreSQL的FDW模块, 通过这个模块访问外部数据库以达到测试的目的.
当前非PostgreSQL外部表模块都不还不支持写的功能, 所以现在的测试仅仅局限于查询操作.
本文将要使用oracle_fdw来对比测试一下Oracle和PostgreSQL的查询性能.
[环境概述]
被测试的 PostgreSQL | Oracle Server
DELL R610, 8核心 Intel(R) Xeon(R) CPU           E5504  @ 2.00GHz, 8GB内存, 10K SAS硬盘

测试机 PostgreSQL | pgbench Server (测试Oracle时, 使用这台机器的PostgreSQL数据库)
DELL R610, 8核心 Intel(R) Xeon(R) CPU           E5506  @ 2.13GHz, 8GB内存

网络 1GB 交换网络.

软件 : 
Oracle 10.2.0.4
PostgreSQL 9.3beta2
http://git.postgresql.org/gitweb/?p=postgresql.git;a=snapshot;h=92d003fcbfb73eebf0c1782dbd53c6e2f14d5cc4;sf=tgz

Oracle 配置 : 

kefu.__db_cache_size=3724541952
kefu.__java_pool_size=33554432
kefu.__large_pool_size=16777216
kefu.__shared_pool_size=939524096
kefu.__streams_pool_size=0
*.audit_file_dest='/opt/oracle/admin/kefu/adump'
*.background_dump_dest='/opt/oracle/admin/kefu/bdump'
*.compatible='10.2.0.3.0'
*.control_files='/database/oradata/kefu/control01.ctl','/database/oradata/kefu/control02.ctl','/database/oradata/kefu/control03.ctl'
*.core_dump_dest='/opt/oracle/admin/kefu/cdump'
*.db_block_size=8192
*.db_domain=''
*.db_file_multiblock_read_count=16
*.db_name='kefu'
*.dispatchers='(PROTOCOL=TCP) (SERVICE=kefuXDB)'
*.job_queue_processes=10
*.local_listener='(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=0.0.0.0)(PORT=1621)))'
*.open_cursors=300
*.pga_aggregate_target=1073741824
*.processes=1500
*.remote_login_passwordfile='EXCLUSIVE'
*.sessions=1655
*.sga_target=4718592000
*.undo_management='AUTO'
*.undo_tablespace='UNDOTBS1'
*.user_dump_dest='/opt/oracle/admin/kefu/udump'



PostgreSQL 配置 : 

listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;
port = 1921                             # (change requires restart)
max_connections = 100                   # (change requires restart)
superuser_reserved_connections = 13     # (change requires restart)
unix_socket_directories = '.'   # comma-separated list of directories
unix_socket_permissions = 0700          # begin with 0 to use octal notation
tcp_keepalives_idle = 60                # TCP_KEEPIDLE, in seconds;
tcp_keepalives_interval = 10            # TCP_KEEPINTVL, in seconds;
tcp_keepalives_count = 10               # TCP_KEEPCNT;
shared_buffers = 2048MB                 # min 128kB
maintenance_work_mem = 512MB            # min 1MB
shared_preload_libraries = 'pg_stat_statements'         # (change requires restart)
vacuum_cost_delay = 10                  # 0-100 milliseconds
vacuum_cost_limit = 10000               # 1-10000 credits
bgwriter_delay = 10ms                   # 10-10000ms between rounds
synchronous_commit = off                # synchronization level;
wal_buffers = 16384kB                   # min 32kB, -1 sets based on shared_buffers
wal_writer_delay = 10ms         # 1-10000 milliseconds
checkpoint_segments = 64                # in logfile segments, min 1, 16MB each
random_page_cost = 1.0                  # same scale as above
effective_cache_size = 8192MB
log_destination = 'csvlog'              # Valid values are combinations of
logging_collector = on          # Enable capturing of stderr and csvlog
log_directory = 'pg_log'                # directory where log files are written,
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,
log_file_mode = 0600                    # creation mode for log files,
log_truncate_on_rotation = on           # If on, an existing log file with the
log_rotation_age = 1d                   # Automatic rotation of logfiles will
log_rotation_size = 10MB                # Automatic rotation of logfiles will
log_checkpoints = on
log_connections = on
log_disconnections = on
log_error_verbosity = verbose           # terse, default, or verbose messages
log_timezone = 'PRC'
autovacuum = on                 # Enable autovacuum subprocess?  'on'
log_autovacuum_min_duration = 0 # -1 disables, 0 logs all actions and
datestyle = 'iso, mdy'
timezone = 'PRC'
lc_messages = 'C'                       # locale for system error message
lc_monetary = 'C'                       # locale for monetary formatting
lc_numeric = 'C'                        # locale for number formatting
lc_time = 'C'                           # locale for time formatting
default_text_search_config = 'pg_catalog.english'
pg_stat_statements.max = 1000
pg_stat_statements.track = all



[环境部署]
1. Server A : Oracle
安装过程略
环境变量

export ORACLE_SID=kefu
export ORACLE_BASE=/opt/oracle
export ORACLE_HOME=$ORACLE_BASE/product/10.2.0/db_1
export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib64:/usr/lib64:/usr/local/lib64:$ORACLE_HOME/lib32:/lib:/usr/lib:/usr/local/lib
export PATH=$ORACLE_HOME/bin:$PATH:.



2. Server A : PostgreSQL
PostgreSQL编译选项

./configure --prefix=/opt/pgsql9.3beta2 --with-pgport=1921 --with-perl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=16 && gmake && gmake install
cd contrib
gmake && gmake install


插件如下
pgfincore, 将数据加载至fs cache.

https://github.com/klando/pgfincore
cp pgfincore $PGSRC/contrib/
cd $PGSRC/contrib/pgfincore
export PATH=/opt/pgsql9.3beta2/bin:$PATH
gmake clean; gmake; gmake install


oracle_fdw 0.9.9, 用于PostgreSQL创建Oracle外部表, PostgreSQL到Oracle使用长连接. 所以不存在mysql_fdw那样的连接问题.

http://pgxn.org/dist/oracle_fdw/
cp oracle_fdw $PGSRC/contrib/
cd $PGSRC/contrib/oracle_fdw
export PATH=/opt/pgsql9.3beta2/bin:$PATH
gmake clean; gmake; gmake install



环境变量

export PGPORT=1921
export PGDATA=/database/pgdata/pg_root
export LANG=en_US.utf8
export PGHOME=/opt/pgsql9.3beta2
export DATE=`date +"%Y%m%d%H%M"`
export ORACLE_BASE=/opt/oracle
export ORACLE_HOME=$ORACLE_BASE/product/10.2.0/db_1
export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$ORACLE_HOME/lib32:$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:.
export PATH=$ORACLE_HOME/bin:$PGHOME/bin:$PATH:.
export MANPATH=$PGHOME/share/man:$MANPATH
export PGDATABASE=digoal
export PGUSER=postgres
export PGHOST=$PGDATA



3. Server B : PostgreSQL
同Server A, Oracle客户端使用10.2.0.4版本
PostgreSQL 编译选项同ServerA .
插件编译同ServerA.

[测试]
1. PostgreSQL Server A : 
测试表

postgres@kefu-> psql
psql (9.3beta2)
Type "help" for help.
create table part_test(id int primary key, info text, crt_time timestamp(0));



测试数据

insert into part_test select generate_series(1,1999999),'Hello, I_am_digoal.zhou.','2012-09-13 21:08:46';


加载至内存

select pgfadvise_willneed('part_test');
select pgfadvise_willneed('part_test_pkey');



测试脚本

postgres@kefu-> cat test.sql
\setrandom id 1 1999999
select * from part_test where id=:id;



本地测试结果(pgbench与数据库在同一主机)

postgres@kefu-> pgbench -M prepared -n -r -f ./test.sql -T 10 -c 16 -j 4 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 10 s
number of transactions actually processed: 911350
tps = 91041.745940 (including connections establishing)
tps = 91192.563026 (excluding connections establishing)
statement latencies in milliseconds:
        0.001780        \setrandom id 1 1999999
        0.171814        select * from part_test where id=:id;



网络测试结果(pgbench在Server B)

pg93@sims-> pgbench -M prepared -n -r -f ./test.sql -T 10 -c 32 -j 16 -h 172.16.3.67 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 32
number of threads: 16
duration: 10 s
number of transactions actually processed: 908273
tps = 90808.193956 (including connections establishing)
tps = 90999.625422 (excluding connections establishing)
statement latencies in milliseconds:
        0.002475        \setrandom id 1 1999999
        0.346643        select * from part_test where id=:id;



2. Oracle Server A : 
测试表

SQL> conn test/test
Connected.
SQL> create table part_test (id int primary key, info varchar2(64) default 'Hello, I_am_digoal.zhou.', crt_time date default sysdate) tablespace kefu;
Table created.



测试数据

SQL> insert into part_test nologging (id)  select rownum from dual connect by level < 2000000;
1999999 rows created.
SQL> commit;
Commit complete.



3. Oracle测试1, PostgreSQL 代理节点, Server A : 
外部表

pg93@sims-> psql
psql (9.3beta2)
Type "help" for help
digoal=# CREATE EXTENSION oracle_fdw;
CREATE EXTENSION
digoal=# CREATE SERVER oradb FOREIGN DATA WRAPPER oracle_fdw
digoal-#           OPTIONS (dbserver '//127.0.0.1:1621/kefu');
CREATE SERVER
digoal=# GRANT USAGE ON FOREIGN SERVER oradb TO postgres;
GRANT
digoal=# CREATE USER MAPPING FOR postgres SERVER oradb
          OPTIONS (user 'test', password 'test');
CREATE USER MAPPING
digoal=# CREATE FOREIGN TABLE ora_part_test (id int, info text, crt_time timestamp(0)) SERVER oradb OPTIONS (schema 'TEST', table 'PART_TEST');
CREATE FOREIGN TABLE
digoal=# select * from ora_part_test limit 1;
 id |           info           |      crt_time       
----+--------------------------+---------------------
  1 | Hello, I_am_digoal.zhou. | 2012-09-13 21:08:46
(1 row)
-- 外部表执行计划, 执行计划正常.
digoal=# explain (analyze,verbose,buffers,costs,timing) select * from ora_part_test where id=1;
                                                          QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ora_part_test  (cost=10000.00..10000.00 rows=1000 width=44) (actual time=0.362..0.376 rows=1 loops=1)
   Output: id, info, crt_time
   Oracle query: SELECT /*ce851d846643561874d235522a63c865*/ "ID", "INFO", "CRT_TIME" FROM "TEST"."PART_TEST" WHERE ("ID" = 1)
   Oracle plan: SELECT STATEMENT
   Oracle plan:   TABLE ACCESS BY INDEX ROWID PART_TEST
   Oracle plan:     INDEX UNIQUE SCAN SYS_C0038184 (condition "ID"=1)
 Total runtime: 0.722 ms
(7 rows)
-- 与直接在Oracle中查询一致
SQL> set autotrace on
SQL> select * from test.part_test where id=1;

        ID INFO
---------- ----------------------------------------------------------------
CRT_TIME
-------------------
         1 Hello, I_am_digoal.zhou.
2013-08-08 17:12:50
Execution Plan
----------------------------------------------------------
Plan hash value: 444085054

--------------------------------------------------------------------------------
------------

| Id  | Operation                   | Name         | Rows  | Bytes | Cost (%CPU)
| Time     |

--------------------------------------------------------------------------------
------------

|   0 | SELECT STATEMENT            |              |     1 |    38 |     3   (0)
| 00:00:01 |

|   1 |  TABLE ACCESS BY INDEX ROWID| PART_TEST    |     1 |    38 |     3   (0)
| 00:00:01 |

|*  2 |   INDEX UNIQUE SCAN         | SYS_C0038184 |     1 |       |     2   (0)
| 00:00:01 |

--------------------------------------------------------------------------------
------------
Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("ID"=1)
Statistics
----------------------------------------------------------
          1  recursive calls
          0  db block gets
          4  consistent gets
          0  physical reads
          0  redo size
        670  bytes sent via SQL*Net to client
        487  bytes received via SQL*Net from client
          2  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
          1  rows processed



测试脚本

postgres@kefu-> cat test.sql 
\setrandom id 1 1999999
select * from ora_part_test where id=:id;



测试结果(类似PostgreSQL的本地测试结果, 但是多了PostgreSQL这层本地开销)

postgres@kefu-> pgbench -M prepared -n -r -f ./test.sql -T 10 -c 16 -j 4 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 10 s
number of transactions actually processed: 2229
tps = 220.236047 (including connections establishing)
tps = 220.867106 (excluding connections establishing)
statement latencies in milliseconds:
        0.003914        \setrandom id 1 1999999
        71.978837       select * from ora_part_test where id=:id;




以上结果由于数据未放入缓存, 查询速度非常慢, 难以忍受.
使用buffer_pool keep, 将Oracle下的part_test表放到内存中.


SQL> alter table test.part_test storage(buffer_pool keep);
Table altered.
SQL> alter index test.SYS_C0038184 storage(buffer_pool keep);
Index altered.
SQL> conn test/test
SQL> set autotrace on


将索引读入keep pool.

SQL> select count(*) from part_test;
  COUNT(*)
----------
   1999999
Execution Plan
----------------------------------------------------------
Plan hash value: 3023841178

------------------------------------------------------------------------------
| Id  | Operation             | Name         | Rows  | Cost (%CPU)| Time     |
------------------------------------------------------------------------------
|   0 | SELECT STATEMENT      |              |     1 |   867   (3)| 00:00:11 |
|   1 |  SORT AGGREGATE       |              |     1 |            |          |
|   2 |   INDEX FAST FULL SCAN| SYS_C0038184 |  2041K|   867   (3)| 00:00:11 |
------------------------------------------------------------------------------
Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
       3910  consistent gets
          0  physical reads
          0  redo size
        518  bytes sent via SQL*Net to client
        487  bytes received via SQL*Net from client
          2  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
          1  rows processed


将表读入keep pool.

SQL> select /*+ FULL(t) */ count(*) from test.part_test t;
  COUNT(*)
----------
   1999999
Execution Plan
----------------------------------------------------------
Plan hash value: 1787511310

------------------------------------------------------------------------
| Id  | Operation          | Name      | Rows  | Cost (%CPU)| Time     |
------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |           |     1 |  2682   (1)| 00:00:33 |
|   1 |  SORT AGGREGATE    |           |     1 |            |          |
|   2 |   TABLE ACCESS FULL| PART_TEST |  2041K|  2682   (1)| 00:00:33 |
------------------------------------------------------------------------
Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
      12070  consistent gets
          0  physical reads
          0  redo size
        518  bytes sent via SQL*Net to client
        487  bytes received via SQL*Net from client
          2  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
          1  rows processed



再次测试结果

postgres@kefu-> pgbench -M prepared -n -r -f ./test.sql -T 10 -c 16 -j 4 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 10 s
number of transactions actually processed: 143258
tps = 14302.145681 (including connections establishing)
tps = 14333.252933 (excluding connections establishing)
statement latencies in milliseconds:
        0.002230        \setrandom id 1 1999999
        1.109931        select * from ora_part_test where id=:id;



4. Oracle测试2, PostgreSQL 代理节点, Server B : 
外部表配置 , 同Server A , 除了以下. 

digoal=# CREATE SERVER oradb FOREIGN DATA WRAPPER oracle_fdw
digoal-#           OPTIONS (dbserver '//172.16.3.67:1621/kefu');



测试脚本

pg93@sims-> cat test.sql 
\setrandom id 1 1999999
select * from ora_part_test where id=:id;



测试结果(类似PostgreSQL的网络测试结果, 依旧多了PostgreSQL这层开销)

pg93@sims-> pgbench -M prepared -n -r -f ./test.sql -T 10 -c 16 -j 4 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 10 s
number of transactions actually processed: 130146
tps = 13008.306581 (including connections establishing)
tps = 13035.169497 (excluding connections establishing)
statement latencies in milliseconds:
        0.003567        \setrandom id 1 1999999
        1.219330        select * from ora_part_test where id=:id;


TOP : 

top - 16:30:56 up 98 days,  6:28,  2 users,  load average: 1.06, 0.29, 0.10
Tasks: 193 total,   7 running, 186 sleeping,   0 stopped,   0 zombie
Cpu(s): 23.4%us, 10.3%sy,  0.0%ni, 55.0%id,  0.0%wa,  0.6%hi, 10.7%si,  0.0%st
Mem:   8168272k total,  3214016k used,  4954256k free,   323888k buffers
Swap:  8385920k total,   394256k used,  7991664k free,  2532604k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                
17663 oracle    15   0 4657m 104m 101m S 22.9  1.3   0:01.36 oraclekefu (LOCAL=NO)                                                  
17671 oracle    15   0 4657m 105m 102m R 21.6  1.3   0:01.33 oraclekefu (LOCAL=NO)                                                  
17681 oracle    15   0 4657m 103m  99m R 21.6  1.3   0:01.27 oraclekefu (LOCAL=NO)                                                  
17667 oracle    15   0 4657m 100m  96m R 21.2  1.3   0:01.21 oraclekefu (LOCAL=NO)                                                  
17659 oracle    15   0 4657m 103m  99m S 20.9  1.3   0:01.24 oraclekefu (LOCAL=NO)                                                  
17651 oracle    15   0 4657m 101m  97m R 20.6  1.3   0:01.21 oraclekefu (LOCAL=NO)                                                  
17657 oracle    15   0 4657m 101m  97m S 20.2  1.3   0:01.19 oraclekefu (LOCAL=NO)                                                  
17665 oracle    15   0 4657m 101m  97m R 19.9  1.3   0:01.18 oraclekefu (LOCAL=NO)                                                  
17677 oracle    15   0 4657m 102m  98m R 19.9  1.3   0:01.16 oraclekefu (LOCAL=NO)                                                  
17679 oracle    15   0 4657m  99m  95m S 19.3  1.2   0:01.12 oraclekefu (LOCAL=NO)                                                  
17655 oracle    15   0 4657m 100m  97m S 18.6  1.3   0:01.18 oraclekefu (LOCAL=NO)                                                  
17661 oracle    15   0 4657m 101m  97m S 18.6  1.3   0:01.19 oraclekefu (LOCAL=NO)                                                  
17669 oracle    15   0 4657m 101m  97m S 18.6  1.3   0:01.14 oraclekefu (LOCAL=NO)                                                  
17675 oracle    15   0 4657m 100m  97m S 18.6  1.3   0:01.14 oraclekefu (LOCAL=NO)                                                  
17653 oracle    15   0 4657m 100m  97m S 17.9  1.3   0:01.12 oraclekefu (LOCAL=NO)                                                  
17673 oracle    15   0 4657m 100m  97m S 17.3  1.3   0:01.00 oraclekefu (LOCAL=NO)



加大连接数测试 : 

pg93@sims-> pgbench -M prepared -n -r -f ./test.sql -T 10 -c 64 -j 4 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 64
number of threads: 4
duration: 10 s
number of transactions actually processed: 217883
tps = 21701.509154 (including connections establishing)
tps = 21909.369533 (excluding connections establishing)
statement latencies in milliseconds:
        0.004231        \setrandom id 1 1999999
        2.883401        select * from ora_part_test where id=:id;



TOP : 

top - 16:35:56 up 98 days,  6:33,  2 users,  load average: 4.67, 3.63, 1.65
Tasks: 242 total,  11 running, 231 sleeping,   0 stopped,   0 zombie
Cpu(s): 43.2%us, 17.6%sy,  0.0%ni, 27.5%id,  0.0%wa,  0.6%hi, 11.1%si,  0.0%st
Mem:   8168272k total,  3531768k used,  4636504k free,   323888k buffers
Swap:  8385920k total,   392944k used,  7992976k free,  2572976k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                
18570 oracle    15   0 4657m  62m  58m S 10.6  0.8   0:00.41 oraclekefu (LOCAL=NO)                                                  
18482 oracle    15   0 4657m  68m  65m S 10.3  0.9   0:00.49 oraclekefu (LOCAL=NO)                                                  
18476 oracle    15   0 4657m  69m  65m S  9.9  0.9   0:00.47 oraclekefu (LOCAL=NO)                                                  
18480 oracle    15   0 4657m  69m  66m S  9.9  0.9   0:00.47 oraclekefu (LOCAL=NO)                                                  
18522 oracle    15   0 4657m  66m  62m S  9.9  0.8   0:00.46 oraclekefu (LOCAL=NO)                                                  
18534 oracle    15   0 4657m  64m  60m S  9.9  0.8   0:00.44 oraclekefu (LOCAL=NO)                                                  
18538 oracle    15   0 4657m  67m  63m R  9.9  0.8   0:00.44 oraclekefu (LOCAL=NO)                                                  
18488 oracle    15   0 4657m  73m  70m S  9.6  0.9   0:00.46 oraclekefu (LOCAL=NO)                                                  
18536 oracle    15   0 4657m  65m  61m S  9.6  0.8   0:00.44 oraclekefu (LOCAL=NO)                                                  
18556 oracle    15   0 4657m  62m  59m S  9.6  0.8   0:00.41 oraclekefu (LOCAL=NO)                                                  
18592 oracle    15   0 4657m  60m  56m S  9.6  0.8   0:00.35 oraclekefu (LOCAL=NO)                                                  
18594 oracle    15   0 4657m  57m  53m S  9.6  0.7   0:00.35 oraclekefu (LOCAL=NO)                                                  
18486 oracle    15   0 4657m  67m  64m S  9.3  0.9   0:00.46 oraclekefu (LOCAL=NO)                                                  
18494 oracle    15   0 4657m  68m  64m S  9.3  0.9   0:00.45 oraclekefu (LOCAL=NO)                                                  
18508 oracle    15   0 4657m  67m  63m S  9.3  0.8   0:00.43 oraclekefu (LOCAL=NO)                                                  
18516 oracle    15   0 4657m  66m  63m S  9.3  0.8   0:00.42 oraclekefu (LOCAL=NO)                                                  
18518 oracle    15   0 4657m  65m  62m S  9.3  0.8   0:00.45 oraclekefu (LOCAL=NO)                                                  
18520 oracle    15   0 4657m  65m  62m S  9.3  0.8   0:00.45 oraclekefu (LOCAL=NO)                                                  
18552 oracle    15   0 4657m  65m  61m R  9.3  0.8   0:00.40 oraclekefu (LOCAL=NO)                                                  
18576 oracle    15   0 4657m  62m  58m S  9.3  0.8   0:00.38 oraclekefu (LOCAL=NO)                                                  
18584 oracle    15   0 4657m  61m  57m S  9.3  0.8   0:00.37 oraclekefu (LOCAL=NO)                                                  
18602 oracle    15   0 4657m  58m  54m S  9.3  0.7   0:00.33 oraclekefu (LOCAL=NO)                                                  
18484 oracle    15   0 4657m  67m  64m S  9.0  0.9   0:00.43 oraclekefu (LOCAL=NO)                                                  
18498 oracle    15   0 4657m  66m  63m R  9.0  0.8   0:00.41 oraclekefu (LOCAL=NO)                                                  
18504 oracle    15   0 4657m  65m  61m R  9.0  0.8   0:00.41 oraclekefu (LOCAL=NO)                                                  
18530 oracle    15   0 4657m  63m  60m S  9.0  0.8   0:00.40 oraclekefu (LOCAL=NO)                                                  
18546 oracle    15   0 4657m  61m  57m S  9.0  0.8   0:00.39 oraclekefu (LOCAL=NO)                                                  
18554 oracle    15   0 4657m  64m  60m S  9.0  0.8   0:00.37 oraclekefu (LOCAL=NO)                                                  
18578 oracle    15   0 4657m  59m  55m R  9.0  0.7   0:00.33 oraclekefu (LOCAL=NO)                                                  
18478 oracle    15   0 4657m  67m  64m S  8.6  0.8   0:00.44 oraclekefu (LOCAL=NO)                                                  
18490 oracle    15   0 4657m  67m  64m S  8.6  0.8   0:00.43 oraclekefu (LOCAL=NO)  



[小结]
1. 本文测试非常简单, 就是使用主键检索的查询, 从测试结果来看 
Oracle最高的tps达到了21909.
PostgreSQL最高的tps达到了91192.
但是由于Oracle测试时经过了一道PostgreSQL外部表, 所以这里的测试数据可比性不高, 不过从PG自身的测试来看, pg本身不应该存在瓶颈, 可能开销大在fdw这块 , 或者Oracle本身.
从第二点的测试可以看出, oracle的极限tps大概在3.1W, 性能是PostgreSQL 的1/3.
2. 为了得到Oracle的极限结果, 可以多开几个PostgreSQL代理节点. 例如加入Server C, Server D...同时使用pgbench做压力. 单服务器增加, tps不再增加时基本上就达到了Oracle的瓶颈.
2台pgbench+PostgreSQL fdw服务端同时测试结果如下 : 

pg93@db-172-16-3-39-> pgbench -M prepared -r -n -f ./test.sql -T 10 -c 32 -j 32 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 32
number of threads: 32
duration: 10 s
number of transactions actually processed: 150476
tps = 15030.276104 (including connections establishing)
tps = 15097.041916 (excluding connections establishing)
statement latencies in milliseconds:
        0.003546        \setrandom id 1 1999999
        2.109751        select * from ora_part_test where id=:id;
pg93@sims-> pgbench -M prepared -r -n -f ./test.sql -T 10 -c 32 -j 32 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 32
number of threads: 32
duration: 10 s
number of transactions actually processed: 163040
tps = 16270.382136 (including connections establishing)
tps = 16345.610920 (excluding connections establishing)


两台主机相加得出31442的tps.

3台pgbench+PostgreSQL fdw服务端同时测试结果与2台结果差不多, 所以基本上已经达到了oracle的瓶颈.

pg93@db-172-16-3-40-> pgbench -M prepared -r -n -f ./test.sql -T 10 -c 32 -j 32 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 32
number of threads: 32
duration: 10 s
number of transactions actually processed: 118793
tps = 11678.396544 (including connections establishing)
tps = 11738.799302 (excluding connections establishing)
statement latencies in milliseconds:
        0.003613        \setrandom id 1 1999999
        2.674441        select * from ora_part_test where id=:id;
pg93@db-172-16-3-40-> pgbench -M prepared -r -n -f ./test.sql -T 10 -c 16 -j 8 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 10 s
number of transactions actually processed: 95734
tps = 9566.060918 (including connections establishing)
tps = 9587.172573 (excluding connections establishing)
statement latencies in milliseconds:
        0.003193        \setrandom id 1 1999999
        1.660793        select * from ora_part_test where id=:id;

pg93@db-172-16-3-39-> pgbench -M prepared -r -n -f ./test.sql -T 10 -c 32 -j 32 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 32
number of threads: 32
duration: 10 s
number of transactions actually processed: 107971
tps = 10777.601164 (including connections establishing)
tps = 10819.936118 (excluding connections establishing)
statement latencies in milliseconds:
        0.003592        \setrandom id 1 1999999
        2.944798        select * from ora_part_test where id=:id;
pg93@db-172-16-3-39-> pgbench -M prepared -r -n -f ./test.sql -T 10 -c 16 -j 8 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 10 s
number of transactions actually processed: 104481
tps = 10442.999639 (including connections establishing)
tps = 10469.137077 (excluding connections establishing)
statement latencies in milliseconds:
        0.003401        \setrandom id 1 1999999
        1.520452        select * from ora_part_test where id=:id;

pg93@sims-> pgbench -M prepared -r -n -f ./test.sql -T 10 -c 32 -j 32 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 32
number of threads: 32
duration: 10 s
number of transactions actually processed: 92645
tps = 9246.452773 (including connections establishing)
tps = 9285.967241 (excluding connections establishing)
statement latencies in milliseconds:
        0.003388        \setrandom id 1 1999999
        3.434297        select * from ora_part_test where id=:id;
pg93@sims-> pgbench -M prepared -r -n -f ./test.sql -T 10 -c 16 -j 8 digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 8
duration: 10 s
number of transactions actually processed: 111006
tps = 11095.514926 (including connections establishing)
tps = 11121.780736 (excluding connections establishing)
statement latencies in milliseconds:
        0.003529        \setrandom id 1 1999999
        1.431322        select * from ora_part_test where id=:id;



[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201362355123969/
2. http://pgxn.org/dist/oracle_fdw/
