PostgreSQL research

PostgreSQL How to parser user input to internal type - for exp. tinterval

2015-05-27 14:06:05   查看原文>>

PostgreSQL支持的类型众多，对于常用的类型例如字符串，数字。我们在输入值时很好解决，但是当数据类型比较复杂时，应该如何书写，数据库才能正常的接收用户的输入呢？
比如我们可能会遇到输入语法错误的报错，使用\set VERBOSITY verbose可以显示报错代码，根据代码去找问题。
例如：

postgres=# \set VERBOSITY verbose
postgres=# select interval '1 a';
ERROR:  22007: invalid input syntax for type interval: "1 a"
LINE 1: select interval '1 a';
                        ^
LOCATION:  DateTimeParseError, datetime.c:3794


这个报错来自datetime.c, 解析用户输入时语法不合规。

其实PostgreSQL大多数的类型都带了in和out函数，分别表示用户输入转换为内部类型，内部类型转换为用户看到的表述。
例如：

 pg_catalog | interval_out            | cstring                     | interval
 pg_catalog | interval_in             | interval                    | cstring, oid, integer 


interval_in             对应：
src/backend/utils/adt/timestamp.c

/* interval_in()
 * Convert a string to internal form.
 *
 * External format(s):
 *      Uses the generic date/time parsing and decoding routines.
 */
Datum
interval_in(PG_FUNCTION_ARGS)
{
。。。
        dterr = ParseDateTime(str, workbuf, sizeof(workbuf), field,
                                                  ftype, MAXDATEFIELDS, &nf);
        if (dterr == 0)
                dterr = DecodeInterval(field, ftype, nf, range,
                                                           &dtype, tm, &fsec);

        /* if those functions think it's a bad format, try ISO8601 style */
        if (dterr == DTERR_BAD_FORMAT)
                dterr = DecodeISO8601Interval(str,
                                                                          &dtype, tm, &fsec);

        if (dterr != 0)
        {
                if (dterr == DTERR_FIELD_OVERFLOW)
                        dterr = DTERR_INTERVAL_OVERFLOW;
                DateTimeParseError(dterr, str, "interval");
        }
。。。


src/backend/utils/adt 这里包含了所有类型的内部函数。

acl.c               encode.c          jsonb_util.c        oid.c                    ri_triggers.c      tsvector.c
array_expanded.c    enum.c            json.c              oracle_compat.c          rowtypes.c         tsvector_op.c
arrayfuncs.c        expandeddatum.c   jsonfuncs.c         orderedsetaggs.c         ruleutils.c        tsvector_parser.c
array_selfuncs.c    float.c           levenshtein.c       pg_locale.c              selfuncs.c         txid.c
array_typanalyze.c  formatting.c      like.c              pg_lsn.c                 tid.c              uuid.c
array_userfuncs.c   format_type.c     like_match.c        pgstatfuncs.c            timestamp.c        varbit.c
arrayutils.c        genfile.c         lockfuncs.c         pg_upgrade_support.c     trigfuncs.c        varchar.c
ascii.c             geo_ops.c         mac.c               pseudotypes.c            tsginidx.c         varlena.c
bool.c              geo_selfuncs.c    misc.c              quote.c                  tsgistidx.c        version.c
cash.c              inet_cidr_ntop.c  nabstime.c          rangetypes.c             tsquery.c          windowfuncs.c
char.c              inet_net_pton.c   name.c              rangetypes_gist.c        tsquery_cleanup.c  xid.c
date.c              int8.c            network.c           rangetypes_selfuncs.c    tsquery_gist.c     xml.c
datetime.c          int.c             network_gist.c      rangetypes_spgist.c      tsquery_op.c
datum.c             jsonb.c           network_selfuncs.c  rangetypes_typanalyze.c  tsquery_rewrite.c
dbsize.c            jsonb_gin.c       numeric.c           regexp.c                 tsquery_util.c
domains.c           jsonb_op.c        numutils.c          regproc.c                tsrank.c


又比如今天群里一位兄弟提到的tinterval类型，不知道怎么输入。
我们可以在这里找到对应的转换函数：
src/backend/utils/adt/nabstime.c

/*
 *              tintervalin             - converts an tinterval string to internal format
 */
Datum
tintervalin(PG_FUNCTION_ARGS)
{
        char       *tintervalstr = PG_GETARG_CSTRING(0);
        TimeInterval tinterval;
        AbsoluteTime i_start,
                                i_end,
                                t1,
                                t2;

        parsetinterval(tintervalstr, &t1, &t2);

        tinterval = (TimeInterval) palloc(sizeof(TimeIntervalData));

        if (t1 == INVALID_ABSTIME || t2 == INVALID_ABSTIME)
                tinterval->status = T_INTERVAL_INVAL;   /* undefined  */
        else
                tinterval->status = T_INTERVAL_VALID;

        i_start = ABSTIMEMIN(t1, t2);
        i_end = ABSTIMEMAX(t1, t2);
        tinterval->data[0] = i_start;
        tinterval->data[1] = i_end;

        PG_RETURN_TIMEINTERVAL(tinterval);
}


输入解析如下：
对应格式 ["时间" "时间"]

/*
 *              parsetinterval -- parse a tinterval string
 *
 *              output parameters:
 *                              i_start, i_end: tinterval margins
 *
 *              Time interval:
 *              `[' {` '} `'' <AbsTime> `'' {` '} `'' <AbsTime> `'' {` '} `]'
 *
 *              OR      `Undefined Range'       (see also INVALID_INTERVAL_STR)
 *
 *              where <AbsTime> satisfies the syntax of absolute time.
 *
 *              e.g.  [  '  Jan 18 1902'   'Jan 1 00:00:00 1970']
 */
static void
parsetinterval(char *i_string,
                           AbsoluteTime *i_start,
                           AbsoluteTime *i_end)
{
        char       *p,
                           *p1;
        char            c;

        p = i_string;
        /* skip leading blanks up to '[' */
        while ((c = *p) != '\0')
        {
                if (IsSpace(c))
                        p++;
                else if (c != '[')
                        goto bogus;                     /* syntax error */
                else
                        break;
        }
        if (c == '\0')
                goto bogus;                             /* syntax error */
        p++;
        /* skip leading blanks up to '"' */
        while ((c = *p) != '\0')
        {
                if (IsSpace(c))
                        p++;
                else if (c != '"')
                        goto bogus;                     /* syntax error */
                else
                        break;
        }
        if (c == '\0')
                goto bogus;                             /* syntax error */
        p++;
        if (strncmp(INVALID_INTERVAL_STR, p, strlen(INVALID_INTERVAL_STR)) == 0)
                goto bogus;                             /* undefined range, handled like a syntax err. */
        /* search for the end of the first date and change it to a \0 */
        p1 = p;
        while ((c = *p1) != '\0')
        {
                if (c == '"')
                        break;
                p1++;
        }
        if (c == '\0')
                goto bogus;                             /* syntax error */
        *p1 = '\0';
        /* get the first date */
        *i_start = DatumGetAbsoluteTime(DirectFunctionCall1(abstimein,
                                                                                                                CStringGetDatum(p)));
        /* undo change to \0 */
        *p1 = c;
        p = ++p1;
        /* skip blanks up to '"', beginning of second date */
        while ((c = *p) != '\0')
        {
                if (IsSpace(c))
                        p++;
                else if (c != '"')
                        goto bogus;                     /* syntax error */
                else
                        break;
        }
        if (c == '\0')
                goto bogus;                             /* syntax error */
        p++;
        /* search for the end of the second date and change it to a \0 */
        p1 = p;
        while ((c = *p1) != '\0')
        {
                if (c == '"')
                        break;
                p1++;
        }
        if (c == '\0')
                goto bogus;                             /* syntax error */
        *p1 = '\0';
        /* get the second date */
        *i_end = DatumGetAbsoluteTime(DirectFunctionCall1(abstimein,
                                                                                                          CStringGetDatum(p)));
        /* undo change to \0 */
        *p1 = c;
        p = ++p1;
        /* skip blanks up to ']' */
        while ((c = *p) != '\0')
        {
                if (IsSpace(c))
                        p++;
                else if (c != ']')
                        goto bogus;                     /* syntax error */
                else
                        break;
        }
        if (c == '\0')
                goto bogus;                             /* syntax error */
        p++;
        c = *p;
        if (c != '\0')
                goto bogus;                             /* syntax error */

        /* it seems to be a valid tinterval */
        return;

bogus:
        ereport(ERROR,
                        (errcode(ERRCODE_INVALID_DATETIME_FORMAT),
                         errmsg("invalid input syntax for type tinterval: \"%s\"",
                                        i_string)));
        *i_start = *i_end = INVALID_ABSTIME;            /* keep compiler quiet */
}


例子：

postgres=# select tinterval '["2014-01-01" "2014-01-02"]';
                      tinterval                      
-----------------------------------------------------
 ["2014-01-01 00:00:00+08" "2014-01-02 00:00:00+08"]
(1 row)
postgres=# create table t(c1 tinterval);
CREATE TABLE
postgres=# insert into t values ( '["2014-01-01" "2014-01-02"]' );
INSERT 0 1


你也可以去回归测试中寻找例子：
src/test/regress/expected/tinterval.out 

--
-- TINTERVAL
--
CREATE TABLE TINTERVAL_TBL (f1  tinterval);
-- Should accept any abstime,
-- so do not bother with extensive testing of values
INSERT INTO TINTERVAL_TBL (f1)
   VALUES ('["-infinity" "infinity"]');
INSERT INTO TINTERVAL_TBL (f1)
   VALUES ('["May 10, 1947 23:59:12" "Jan 14, 1973 03:14:21"]');
INSERT INTO TINTERVAL_TBL (f1)
   VALUES ('["Sep 4, 1983 23:59:12" "Oct 4, 1983 23:59:12"]');
INSERT INTO TINTERVAL_TBL (f1)
   VALUES ('["epoch" "Mon May  1 00:30:30 1995"]');
INSERT INTO TINTERVAL_TBL (f1)
   VALUES ('["Feb 15 1990 12:15:03" "2001-09-23 11:12:13"]');
-- badly formatted tintervals
INSERT INTO TINTERVAL_TBL (f1)
   VALUES ('["bad time specifications" ""]');
ERROR:  invalid input syntax for type abstime: "bad time specifications"
LINE 2:    VALUES ('["bad time specifications" ""]');
                   ^
INSERT INTO TINTERVAL_TBL (f1)
   VALUES ('["" "infinity"]');
ERROR:  invalid input syntax for type abstime: ""
LINE 2:    VALUES ('["" "infinity"]');
                   ^
-- test tinterval operators
SELECT '' AS five, * FROM TINTERVAL_TBL;
 five |                               f1                                
------+-----------------------------------------------------------------
      | ["-infinity" "infinity"]
      | ["Sat May 10 23:59:12 1947 PST" "Sun Jan 14 03:14:21 1973 PST"]
      | ["Sun Sep 04 23:59:12 1983 PDT" "Tue Oct 04 23:59:12 1983 PDT"]
      | ["Wed Dec 31 16:00:00 1969 PST" "Mon May 01 00:30:30 1995 PDT"]
      | ["Thu Feb 15 12:15:03 1990 PST" "Sun Sep 23 11:12:13 2001 PDT"]
(5 rows)
......



tinterval和tsrange, tstzrange 有点类似。
gin索引实现了它的一些操作符。
┌───────────────┬────────────┬───────────┐
│_tinterval_ops │tinterval[] │&& <@ = @> │
└───────────────┴────────────┴───────────┘

tinterval支持的操作符或函数如下：

DATA(insert OID = 572 (  "~="      PGNSP PGUID b f f 704 704    16 572   0 tintervalsame eqsel eqjoinsel ));
DESCR("same as");
DATA(insert OID = 573 (  "<<"      PGNSP PGUID b f f 704 704    16       0       0 tintervalct - - ));
DESCR("contains");
DATA(insert OID = 574 (  "&&"      PGNSP PGUID b f f 704 704    16 574   0 tintervalov - - ));
DESCR("overlaps");
DATA(insert OID = 575 (  "#="      PGNSP PGUID b f f 704 703    16       0 576 tintervalleneq - - ));
DESCR("equal by length");
DATA(insert OID = 576 (  "#<>"     PGNSP PGUID b f f 704 703    16       0 575 tintervallenne - - ));
DESCR("not equal by length");
DATA(insert OID = 577 (  "#<"      PGNSP PGUID b f f 704 703    16       0 580 tintervallenlt - - ));
DESCR("less than by length");
DATA(insert OID = 578 (  "#>"      PGNSP PGUID b f f 704 703    16       0 579 tintervallengt - - ));
DESCR("greater than by length");
DATA(insert OID = 579 (  "#<="     PGNSP PGUID b f f 704 703    16       0 578 tintervallenle - - ));
DESCR("less than or equal by length");
DATA(insert OID = 580 (  "#>="     PGNSP PGUID b f f 704 703    16       0 577 tintervallenge - - ));
DESCR("greater than or equal by length");
DATA(insert OID = 583 (  "<?>"     PGNSP PGUID b f f 702 704    16       0       0 intinterval - - ));
DESCR("is contained by");
DATA(insert OID = 1284 (  "|"      PGNSP PGUID l f f     0 704 702       0       0 tintervalstart - - ));
DESCR("start of interval");
DATA(insert OID = 606 (  "<#>"     PGNSP PGUID b f f 702 702 704         0       0 mktinterval - - ));
DESCR("convert to tinterval");
DATA(insert OID = 811 (  "="       PGNSP PGUID b t f 704 704    16 811 812 tintervaleq eqsel eqjoinsel ));
DESCR("equal");
DATA(insert OID = 812 (  "<>"      PGNSP PGUID b f f 704 704    16 812 811 tintervalne neqsel neqjoinsel ));
DESCR("not equal");
DATA(insert OID = 813 (  "<"       PGNSP PGUID b f f 704 704    16 814 816 tintervallt scalarltsel scalarltjoinsel ));
DESCR("less than");
DATA(insert OID = 814 (  ">"       PGNSP PGUID b f f 704 704    16 813 815 tintervalgt scalargtsel scalargtjoinsel ));
DESCR("greater than");
DATA(insert OID = 815 (  "<="      PGNSP PGUID b f f 704 704    16 816 814 tintervalle scalarltsel scalarltjoinsel ));
DESCR("less than or equal");
DATA(insert OID = 816 (  ">="      PGNSP PGUID b f f 704 704    16 815 813 tintervalge scalargtsel scalargtjoinsel ));
DESCR("greater than or equal");



[参考]
1. http://www.postgresql.org/docs/9.4/static/xfunc-c.html
数据库类型和C类型对应关系图

Table 35-1. Equivalent C Types for Built-in SQL Types

┌──────────────────────────┬─────────────┬─────────────────────────────────────┐
│         SQL Type         │   C Type    │             Defined In              │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│abstime                   │AbsoluteTime │utils/nabstime.h                     │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│boolean                   │bool         │postgres.h (maybe compiler built-in) │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│box                       │BOX*         │utils/geo_decls.h                    │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│bytea                     │bytea*       │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│"char"                    │char         │(compiler built-in)                  │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│character                 │BpChar*      │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│cid                       │CommandId    │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│date                      │DateADT      │utils/date.h                         │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│smallint (int2)           │int16        │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│int2vector                │int2vector*  │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│integer (int4)            │int32        │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│real (float4)             │float4*      │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│double precision (float8) │float8*      │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│interval                  │Interval*    │datatype/timestamp.h                 │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│lseg                      │LSEG*        │utils/geo_decls.h                    │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│name                      │Name         │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│oid                       │Oid          │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│oidvector                 │oidvector*   │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│path                      │PATH*        │utils/geo_decls.h                    │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│point                     │POINT*       │utils/geo_decls.h                    │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│regproc                   │regproc      │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│reltime                   │RelativeTime │utils/nabstime.h                     │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│text                      │text*        │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│tid                       │ItemPointer  │storage/itemptr.h                    │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│time                      │TimeADT      │utils/date.h                         │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│time with time zone       │TimeTzADT    │utils/date.h                         │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│timestamp                 │Timestamp*   │datatype/timestamp.h                 │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│tinterval                 │TimeInterval │utils/nabstime.h                     │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│varchar                   │VarChar*     │postgres.h                           │
├──────────────────────────┼─────────────┼─────────────────────────────────────┤
│xid                       │TransactionId│postgres.h                           │
└──────────────────────────┴─────────────┴─────────────────────────────────────┘
2. src/test/regress/expected/tinterval.out
3. src/include/utils/nabstime.h
  Flag Counter
