PostgreSQL research

The MAX page size in PostgreSQL

2011-03-16 11:00:09   查看原文>>

PageSize是block size的抽象概念.同时也是I/O操作的最小单元。因此pagesize的大小选择一般要参考数据库应用类型，如OLTP一般默认的8K就够了。DW的话可以选择更大的PAGESIZE(最大支持32KB)。
另外还需要注意一个问题, 当一个对象的存储空间不足时, PostgreSQL一次只会扩展一个数据块, 并且扩展数据块需要对这个文件加排他锁, 当并发很高时, 如果数据块太小, 性能会下降严重, 因此高并发写的应用, 建议使用32KB的数据块.
数据库启动后可以在pg_setting中查看PostgreSQL的block size.
postgres=# select * from pg_settings where name = 'block_size';
-[ RECORD 1 ]-------------------------------
name       | block_size
setting    | 8192
unit       |
category   | Preset Options
short_desc | Shows the size of a disk block.
extra_desc |
context    | internal
vartype    | integer
source     | default
min_val    | 8192
max_val    | 8192
enumvals   |
boot_val   | 8192
reset_val  | 8192
sourcefile |
sourceline |
在数据库初始化配置的时候决定了pagesize的大小.
./configure --help
  --with-blocksize=BLOCKSIZE
                          set table block size in kB [8]
Set the block size, in kilobytes. This is the unit of storage and I/O within tables. The default, 8 kilobytes, is suitable for most situations; but other values may be useful in special cases. The value must be a power of 2 between 1 and 32 (kilobytes). Note that changing this value requires an initdb.
那么MAXSIZE到底是由什么决定的，来看看源码就会明白了 :
出自bufpage.h
PostgreSQL最大的pagesize=32K.
原因是每个page里面标记tuple的ItemIdData数据类型里面的lp_off和lp_len只有15个比特位，最大支持32K.

原文如下:
/*
 * A postgres disk page is an abstraction layered on top of a postgres
 * disk block (which is simply a unit of i/o, see block.h).
 *
 * specifically, while a disk block can be unformatted, a postgres
 * disk page is always a slotted page of the form:
 *
 * +----------------+---------------------------------+
 * | PageHeaderData | linp1 linp2 linp3 ...              |
 * +-----------+----+---------------------------------+
 * | ... linpN |                                      |
 * +-----------+--------------------------------------+
 * |           ^ pd_lower                              |
 * |                                                  |
 * |             v pd_upper                              |
 * +-------------+------------------------------------+
 * |             | tupleN ...                          |
 * +-------------+------------------+-----------------+
 * |       ... tuple3 tuple2 tuple1 | "special space" |
 * +--------------------------------+-----------------+
 *                                    ^ pd_special
 *
 * a page is full when nothing can be added between pd_lower and
 * pd_upper.
 *
 * all blocks written out by an access method must be disk pages.
 *
 * EXCEPTIONS:
 *
 * obviously, a page is not formatted before it is initialized by
 * a call to PageInit.
 *
 * NOTES:
 *
 * linp1..N form an ItemId array.  ItemPointers point into this array
 * rather than pointing directly to a tuple.  Note that OffsetNumbers
 * conventionally start at 1, not 0.
 *
 * tuple1..N are added "backwards" on the page.  because a tuple's
 * ItemPointer points to its ItemId entry rather than its actual
 * byte-offset position, tuples can be physically shuffled on a page
 * whenever the need arises.
 *
 * AM-generic per-page information is kept in PageHeaderData.
 *
 * AM-specific per-page data (if any) is kept in the area marked "special
 * space"; each AM has an "opaque" structure defined somewhere that is
 * stored as the page trailer.    an access method should always
 * initialize its pages with PageInit and then set its own opaque
 * fields.
 */

typedef Pointer Page;


/*
 * location (byte offset) within a page.
 *
 * note that this is actually limited to 2^15 because we have limited
 * ItemIdData.lp_off and ItemIdData.lp_len to 15 bits (see itemid.h).
 */
typedef uint16 LocationIndex;

/*
 * disk page organization
 *
 * space management information generic to any page
 *
 *        pd_lsn        - identifies xlog record for last change to this page.
 *        pd_tli        - ditto.
 *        pd_flags    - flag bits.
 *        pd_lower    - offset to start of free space.
 *        pd_upper    - offset to end of free space.
 *        pd_special    - offset to start of special space.
 *        pd_pagesize_version - size in bytes and page layout version number.
 *        pd_prune_xid - oldest XID among potentially prunable tuples on page.
 *
 * The LSN is used by the buffer manager to enforce the basic rule of WAL:
 * "thou shalt write xlog before data".  A dirty buffer cannot be dumped
 * to disk until xlog has been flushed at least as far as the page's LSN.
 * We also store the 16 least significant bits of the TLI for identification
 * purposes (it is not clear that this is actually necessary, but it seems
 * like a good idea).
 *
 * pd_prune_xid is a hint field that helps determine whether pruning will be
 * useful.    It is currently unused in index pages.
 *
 * The page version number and page size are packed together into a single
 * uint16 field.  This is for historical reasons: before PostgreSQL 7.3,
 * there was no concept of a page version number, and doing it this way
 * lets us pretend that pre-7.3 databases have page version number zero.
 * We constrain page sizes to be multiples of 256, leaving the low eight
 * bits available for a version number.
 *
 * Minimum possible page size is perhaps 64B to fit page header, opaque space
 * and a minimal tuple; of course, in reality you want it much bigger, so
 * the constraint on pagesize mod 256 is not an important restriction.
 * On the high end, we can only support pages up to 32KB because lp_off/lp_len
 * are 15 bits.
 */
