PostgreSQL research

how many objects can be locked per transaction

2011-03-01 9:36:32   查看原文>>

在PostgreSQL中，通过pg_locks这个视图可以查看到当前数据库的锁状态。
或者直接通过如下SQL查询:
SELECT l.locktype, l.database, l.relation, l.page, l.tuple, l.virtualxid, l.transactionid, l.classid, l.objid, l.objsubid, l.virtualtransaction, l.pid, l.mode, l.granted FROM pg_lock_status() l(locktype, database, relation, page, tuple, virtualxid, transactionid,classid, objid, objsubid, virtualtransaction, pid, mode,
granted);
这些锁的信息被存储在System V的共享内存中，只要共享内存足够，就可以继续获得锁。
这个内存区域的大小, 由3个参数决定, 
max_locks_per_transaction (integer) -- 单个事务的锁对象数量。

    The shared lock table tracks locks on max_locks_per_transaction * (max_connections + max_prepared_transactions) objects (e.g., tables); hence, no more than this many distinct objects can be locked at any one time. This parameter controls the average number of object locks allocated for each transaction; individual
transactions can lock more objects as long as the locks of all transactions fit in the lock table. This is not the number of rows that can be locked; that value is unlimited. The default, 64, has historically proven sufficient, but you might need to raise this value if you have clients that touch many different tables
in a single transaction. This parameter can only be set at server start.

    Increasing this parameter might cause PostgreSQL to request more System V shared memory than your operating system's default configuration allows. See Section 17.4.1 for information on how to adjust those parameters, if necessary.

    When running a standby server, you must set this parameter to the same or higher value than on the master server. Otherwise, queries will not be allowed in the standby server.
max_connections 最大允许的连接数.
max_prepared_transactions 最大允许的二阶事务数量.

数据库允许最多锁 max_locks_per_transaction * (max_connections + max_prepared_transactions) 个对象(例如表, 索引,toast表等等)

例:
假设 max_locks_per_transaction = 10
max_prepared_transactions = 0
max_connections = 40
按照文档的说明，整个数据库集群在同一时刻可以被锁的对象数应该等于400.
要模拟的话非常简单,  例如在一个事务中创建表即可.
postgres=# \set VERBOSITY verbose
postgres=# do language plpgsql $$
declare
begin
  for i in 1..20000 loop
    execute 'create table tblxxx'||i||'(id int)'; 
  end loop;
end;
$$;
WARNING:  53200: out of shared memory
CONTEXT:  SQL statement "create table tblxxx5786(id int)"
PL/pgSQL function inline_code_block line 5 at EXECUTE statement
LOCATION:  ShmemAlloc, shmem.c:205
ERROR:  53200: out of shared memory
HINT:  You might need to increase max_locks_per_transaction.
CONTEXT:  SQL statement "create table tblxxx5786(id int)"
PL/pgSQL function inline_code_block line 5 at EXECUTE statement
LOCATION:  LockAcquireExtended, lock.c:907
