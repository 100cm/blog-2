PostgreSQL research

How to Point to a Item

2011-03-16 15:26:08   查看原文>>


ItemPointers (index) -> 指向
ItemId (Array of (lp_off:15bit, lp_flags:2bit,lp_len:15) pairs pointing to the actual items. 4 bytes per item.) -> 指向
Item (tuple)


在PostgreSQL中 , 一个PAGE被pageinit之后的格式大概如下 :
 * +----------------+---------------------------------+
 * | PageHeaderData | linp1 linp2 linp3 ...              |
 * +-----------+----+---------------------------------+
 * | ... linpN |                                      |
 * +-----------+--------------------------------------+
 * |           ^ pd_lower                              |
 * |                                                  |
 * |             v pd_upper                              |
 * +-------------+------------------------------------+
 * |             | tupleN ...                          |
 * +-------------+------------------+-----------------+
 * |       ... tuple3 tuple2 tuple1 | "special space" |
 * +--------------------------------+-----------------+
 *                                    ^ pd_special
special space 是一个可选区域，如INDEX，可能会用到这个区域。对于HEAP TABLE来说这个区域不存在。
PageHeaderData占用24字节。
linpn是一个队列，包含ItemIdData，指向本PAGE内的tupleN（每个ItemIdData占用4字节,包含了len_offset,flag和tuple的length）。（空间从PAGE头部紧跟开始分配）
详细定义如下 :
typedef struct ItemIdData
{
    unsigned    lp_off:15,        /* offset to tuple (from start of page) */ # 之前我已经在另一篇博客提到最大的PAGESIZE=32K，因此这里的OFFSET15个比特位刚好够用.
                lp_flags:2,        /* state of item pointer, see below */
                lp_len:15;        /* byte length of tuple */
} ItemIdData;
/*
 * lp_flags has these possible states.    An UNUSED line pointer is available
 * for immediate re-use, the other states are not.
 */
#define LP_UNUSED        0        /* unused (should always have lp_len=0) */
#define LP_NORMAL        1        /* used (should always have lp_len>0) */
#define LP_REDIRECT        2        /* HOT redirect (should have lp_len=0) */
#define LP_DEAD            3        /* dead, may or may not have storage */
/*
 * Item offsets and lengths are represented by these types when
 * they're not actually stored in an ItemIdData.
 */
tupleN是真实的行记录数据，里面包含了行头部信息，可选的NULL BITMAP和OID信息以及列的值。（空间从PAGE的尾部或pd_special开始
反向分配）
从PAGE的结构可以看出定位到linpN就可以找到tuple了.
ItemPointers 由blockid和itemID组成。
ItemPointers point into this array rather than pointing directly to a tuple.
ItemPointers 指向ItemIdData的好处是不论TUPLE在PAGE里面怎么变化，只要ItemIdData的位置没有变化，索引的ItemPointer就不需要变化。
如下情况 : Because a tuple's ItemPointer points to its ItemId entry rather than its actual
byte-offset position, tuples can be physically shuffled on a page whenever the need arises.

下面来举例说明一下:
      Table "digoal.tbl_user_info_single"
  Column   |         Type          | Modifiers
-----------+-----------------------+-----------
 id        | bigint                | not null
 firstname | character varying(32) |
 lastname  | character varying(32) |
 corp      | character varying(64) |
 age       | integer               |
insert into tbl_user_info_single select generate_series(1,10000000),'zhou','digoal','sky-mobi',27;
digoal=> select max(ctid) from tbl_user_info_single;
     ctid    
--------------
 (1066667,89)
从这里也可以预估出数据文件的大小(前提是这是一个新建的空表,因为多次DML和VACUUM后就不准确了)。
digoal=> select * from pg_settings where name ~ 'block';
-[ RECORD 1 ]--------------------------------------------
name       | block_size
setting    | 8192
unit       |
category   | Preset Options
short_desc | Shows the size of a disk block.
extra_desc |
context    | internal
vartype    | integer
source     | default
min_val    | 8192
max_val    | 8192
enumvals   |
boot_val   | 8192
reset_val  | 8192
sourcefile |
sourceline |
从而计算出这个表的SIZE=1066667*8K=8333MB
digoal=> select pg_relation_filepath('tbl_user_info_single');
-[ RECORD 1 ]--------+-----------------------------------------------
pg_relation_filepath | pg_tblspc/16401/PG_9.0_201008051/16402/2062407

digoal=> \q
postgres@db-172-16-3-33-> ll $PGDATA/pg_tblspc/16401/PG_9.0_201008051/16402/2062407*
-rw------- 1 postgres postgres 8.0G Mar 16 14:45 /database/pgdata/tbs1/pg_root/pg_tblspc/16401/PG_9.0_201008051/16402/2062407
-rw------- 1 postgres postgres 142M Mar 16 14:45 /database/pgdata/tbs1/pg_root/pg_tblspc/16401/PG_9.0_201008051/16402/2062407.1
-rw------- 1 postgres postgres 2.1M Mar 16 14:15 /database/pgdata/tbs1/pg_root/pg_tblspc/16401/PG_9.0_201008051/16402/2062407_fsm

和前面的计算结果吻合。

评论

ss - 2014-03-21 10:42:04

goog[face0]
