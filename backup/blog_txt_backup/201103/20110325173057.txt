PostgreSQL research

An application logical tuning note

2011-03-25 17:30:57   查看原文>>

今天一位开发的同事来找我，有一个比较棘手的需求。
需求大概是这样的，
用户通过各种手段获得经验值，应用端需要记录用户获得经验值的记录到（表一），同时需要更新用户级别（表三）。用户需要实时的看到自己的级别。
另外有一张经验值和级别的隐射表(表二)，一张用户ID和用户级别的映射表（表三）（每次用户经验值变动后更新表三）。
有几种方法可以来实现：
方法一、
表一
user_id,time1,time2,score,res_col1,res_col2,type
表二
score,level
表三,user_id=Primary Key
user_id,level
每次用户的经验值变更都需要插入一条记录到表一，通过表一统计出user_id对应的sum(score)，通过sum(score)和表二的映射关系找到level.
再更新表三。这样做的弊端非常明显，表一需要永久保留。并且表一的数据量是非常庞大的，统计开销非常大。

方法二、
表一
user_id,time1,time2,score,res_col1,res_col2,type
表二
score,level
表三,user_id=Primary Key
user_id,level,score
同样，每次用户的经验值变更都需要插入一条记录到表一，同时找到表三当前的score,根据old.score+score和表二匹配出级别，update 表三new.score=old.score+score，同时可选的UPDATE表三的level。比方法一的开销大大降低。

方法三、
表一
user_id,time1,time2,score,res_col1,res_col2,type
表二，同时应用端缓存此配置
score,level
表三,user_id=Primary Key
user_id,level,score
同样，每次用户的经验值变更都需要插入一条记录到表一，同时找到表三当前的score,根据old.score+score和缓存的配置匹配出级别，update 表三new.score=old.score+score，同时可选的UPDATE表三的level。比方法二少了查询表二的开销。

另外,
对于表一，使用时间分区。
对于表三，使用user_id取模分区。(当一台数据库的性能无法支撑业务量的时候可以考虑增加数据库服务器，将分区分布到不同的数据库服务器来扩容)
这里的话可以配置表三的存储参数factor，空闲出一部分PAGE空间，用于HOT UPDATE。减少重复记录，降低碎片，以及索引的开销。

最终选择方法三来做。
