PostgreSQL research

[转]闲谈MongoDb+GridFS+Nginx

2010-12-29 15:10:56   查看原文>>

原文:
http://tech.techweb.com.cn/thread-433779-1-1.html
http://nightsailer.com/2009/11/13/499.html

MongoDb果然是个好东西. 我在最近的一个项目实践中, 实验性的用到了这个东西.
# {1 ^+ M6 Q) G# v在测试中,对于GridFS相当满意. 首先, 和传统的MogileFS不同, gridfs可以和其它的meta数据部署在同一个
  [+ ^+ R5 y& Pdb中,默认的会为gridfs的collection分别创建fs.files和fs.chunks.5 W. p" X  o9 x7 t" a. O% X
当存储一个文件时,可以附加存入任意的附加信息,因为这些信息实际上也是一个普通的collection.
' q0 V/ @0 r; X这个特性给我们省了好多的事情. 以前,如果要存储一个附件,通常的做法是,在主数据库中存放文件的属性,并且记录
" L/ T5 i' A; {* }4 w文件的path.当查询某个文件时,需要首先查询数据库,获得path,然后从存储系统中获得相应的文件.4 F/ R5 M& [6 U" N
在使用gridfs时,则非常简单, 我们可以直接将这些信息直接存储到文件中. 比如下面的PHP代码,存储上传的文件到gridfs:8 g8 T& a# `* L3 B6 ~. x& a, ^
. ]% d) X" P' ~6 L5 {9 u
public function store($file,$attrs=array()) {
1 U/ A4 L: {  l7 u2 Rif (!is_file($file)) {/ G& e, A1 I, B- J7 k
throw new CZone_Core_Service_Exception("File:$file not exists");) }' E, f( x# U: ^
}
* S- _; `  E* e$defaults = array(* F. g# h5 h" j( e0 Q
'content_type'=> null,* Q& t' u/ D1 |, @' U
'art_id'=>-1,% q1 R, V- V2 h$ x
'state' => self::STORE_STATE_TMP,( o& _9 w9 X2 i) B/ ^( ?
'created_on' => time(),6 f- K: i) |" P- x9 @6 z- N2 U
'is_thumb'=> false,
8 x+ [& b2 A; c7 C/ l'md5'=> md5_file($file), a! I$ |& Z3 O/ Z* S2 Y7 H
);
* \: T# I  j3 A6 R/ o$asset_attrs = $attrs+$defaults;& \) s; a& N! P' I" B
if (!isset($asset_attrs['content_type'])) {3 O9 ^6 O1 o3 Z1 N% h) r# z  X
$asset_attrs['content_type'] = Doggy_Util_File::mime_content_type($file);, k( E% g2 `  h
}
# I5 A, L& F5 b% z1 F/ ~$fs = $this->db->get_fs();; Z% x0 z! G8 U8 i
return $fs->storeFile($file,$asset_attrs);: v& O- N  w, x& w. p2 h0 H
}
0 m/ `$ m/ L/ d5 j4 H1 ~3 z
3 Y" q- n# u! P  a调用store时,可以附件任意属性数组. 之后, 检索文件时则可以根据这些属性来查找:
" d- [# o8 u# F# e7 ^3 J% K3 m* i8 \; a5 e) m5 J6 X
public function fetch_by_id($id) {
$ u3 D$ c- w" v& T5 D4 Z3 ^  x" P) Greturn $this->fetch(array('_id'=>$id));
' x; D: t# a4 J; g- c& D}# p0 J+ k9 Y, D" Z$ c5 h" c
public function delete_by_id($id) {3 M. \* ]& t% B
return $this->delete(array('_id'=>$id));- f5 k% Z" ]4 H  t( }. u  T* u3 Z
}
  e: q& k+ B6 h1 n/ c3 Gpublic function delete_art_assets($art_id) {/ X4 |: q6 h$ @4 l/ C! W
return $this->delete(array('art_id'=>$art_id));% C7 ]5 r/ m+ b# c# y* k: {
}
0 \& U  ?1 L6 p! ?, o# ^public function delete_asset($asset_id) {
2 Y$ `8 O. R6 {5 B& m) n3 treturn $this->delete_by_id($asset_id) && $this->delete_asset_thumbs($asset_id);
7 n2 v. n# A8 f}
' n* p: Y/ i$ i; L" npublic function delete($options) {
# K5 b1 I, A7 P" l" ]) A$ G! r$ iif (isset($options['_id'])) {
! O/ u* m: ?0 [' `  M" L$options['_id'] = Doggy_Mongo_Db::id($options['_id']);5 M2 M! H( M, K. N( D8 B
}
$ Y$ i, Y8 J* \" x& |1 s4 J$fs = $this->db->get_fs();% H! B2 h" M9 f
return $fs->remove($options);9 J+ K7 R8 N0 k/ b1 i) o; J4 n' t
}: Z7 R4 L$ e' @) s: {6 {& z
public function find_all($query=array(),$fields=array()) {
' A/ }1 E. O: d2 wreturn $this->db->fs_find($query,$fields);
6 H0 s. P; [( {+ g' n! U7 O' I$ v}
$ n% t6 b. g/ F  @. |
" M3 a) ?# D2 ?使用gridfs,可以把原先复杂的操作变得相当简单, 真正实现了mogodb设计者的想法,. m5 x& i6 n5 J: i# E+ a, h: N0 |
数据库为什么不能做文件系统?
' z3 K" y+ c% r& c+ G* F2 ~' `在实践中,我发现GridFS和之前研究的MogileFS一些基本方式其实是相通的. 只不过, mogilefs的存储节点是3 ]) W. o1 w/ L* r
使用了简化版本的DAV 而已.
1 F1 o7 v1 r  l2 H: K8 ~从这个角度,完全可以设计一个基于mongo gridfs的mogilefs.
! z2 U2 o3 q2 K. v7 c至于性能, 从我的体会来说, 还不错. 毕竟我的项目的目前看存储仅限于TB级别.
: V% N4 |) x( v/ d* N. u% v不过在生产环境中,国外有用于存储视频流的.
8 Z4 \3 C/ r* r! q) z0 `GridFS的一个优点是可以存储上百万的文件而无需担心扩容性.0 `  O" E! O/ ~( w) E. Y* M
通过同步复制,可以解决分布式文件的备份问题.
, I* M5 F8 h& h9 B; t$ C目前,mongo支持主-从和Replica Pairs以及受限的Master-Master Replication.2 q4 _$ C1 D/ q0 m
比较实用的还是前2种./ }. q6 ?: m7 _
通过ARP-ping可以实现一个双机热备切换,类似我正在用的mysql的mmm.
3 T; l0 u9 E; F0 M- B! Z% C, d在实验过后,感觉使用mongo是非常轻松. 很轻松就解决了高并发中经常会遇到的问题,
/ N: b  A  L# A: F" r比如实时的日志处理,实时的统计,更新某个字段.
3 g  k: s' ~" q# d! C& Y通过使用mongo的capped collection,可以实现cache, message queue等特性,无需附加成本.
: ]1 L" f& g# g1 O  {6 U2 q还有share session.
/ P& r7 g* k5 C- D, n部署. z# Q6 \& C# v
gridfs的部署的选择方案不多,大概有以下几种:  V; E; D- q3 T  D
1. 通过mongo client 的script, 比如PHP.
4 C$ t1 j8 v  V' V4 Q9 z5 u$ s优点是简单,缺点是每次都要读取mongo数据库. 虽然mongo的性能不错,但是似乎总是不忍.  [, H+ a( \" c! ?
另外,像PHP的DRIVER并不支持HTTP RANGE header,这样就无法支持断点续传.) h+ w7 c3 k5 |9 c5 {' l
2.使用Nginx module& S- W$ S4 f1 z* k
http://github.com/mdirolf/nginx-gridfs
; f" I* ]% n$ L& i0 ~1 S1 z这是gridfs的nginx module. 可以通过nginx直接访问读取mongo gridfs中的文件.
: v% v8 @2 Y0 q- h- K, Y( m和nginx对应的mogilefs module类似.
  d2 D: k' n" L" C) D优点: 由于直接通过nginx,速度是最快的.
/ ~! Y' c) E  ^( [- y缺点: 只能通过file_path来查找,目前不支持_id来查找.因此必须在file_path上建立索引.
( A" W  d+ r, V+ I  K  s0 T+ M优化方案:5 O! F( p5 i9 w5 E; D. b$ z7 ]
我自己构想了以下的优化方案:* Q6 R" O( v' K. E! {+ ^0 G& t
1. squid/varnish+script-backend5 ~0 o6 s* C! J$ C2 K- X
在nginx前端加上一个squid或者varnish作为反向加速. 如果没有则通过 PHP脚本来获取.
4 x9 E; W. M; o: f3 I7 ~2 w应用场景: 特别适合读取频繁的文件,比如用户的头像,热门图片,缩略图等. 不适合大文件.
3 w; A5 K5 R3 V6 g4 b1 ]缺点: 文件的过期必须正确设置. 此外配置好varnish或者squid
5 Q# D$ E0 u7 K* n2 s8 `2. 基于proxy_store或fastcgi-cache, try_files
$ I# B" n& a( f' x8 u这种方案的应用场景同1, 但都是使用nginx的相应模块即可实现.
* m0 O/ X9 A% _$ j* K2 {通过对fastcgi/proxy进行cache或store,就可以实现文件按需存储.
6 a  ]; S# c: A2 d1 x. b, r9 I当使用proxy_store时,当后端文件变动时,需要purge这些文件.实现起来不难.
& [, o, s! q0 H( L/ A对于大文件,我觉得性价比比较高的一个方案是:6 a, u/ |; L, l6 g0 J
使用Perl或者PHP写一个脚本作为fastcgi运行. 前端用nginx进行负载均衡.7 ?6 q. I7 u, N, O" c
如果使用Pelr则当前driver支持随机读取,支持断点续传. 用PHP则需要做个简单处理,
; w, N/ C  Z5 ?% L手动判断HEADER,并计算出offset,然后再读取相应的字节流.+ q7 `, D  y3 V3 l% M
注意,如果是用PHP,则最好的方案是单独编译一个PHP,仅保留”最基本”的特性.
! C" c4 B5 R, m5 ?  k这样,可以节省很多的资源占用,稳定性和速度也比较好.我建议的保留的特性有:) y; S) V5 B2 X" b( W* w% o: M) p
json+mongo+spl.7 h9 e7 }: @8 c2 x, j
PHP driver要比Perl更为成熟,虽然二者核心开发者都是一个人. Perl目前还是beta,也没有特别+ Y' E: k9 X* r5 N" Q+ {) I. H" b) z/ r
广泛的使用,但据说由于大部分使用的是PHP的C代码,所以还是非常可靠的.
& v4 i6 u: b" `+ J% c  _" F. v( ?其他一些信息:" Y  [4 s+ j/ P4 c6 Y
1.通过runcommand可以直接在mongodb端运行处理脚本. 比如像mapreduce,或者一些需要读取数据然后进行处理的.& ]& U* y7 j- A
这些command则是使用javascript方式来编写的,很容易. 好处就是避免了数据在服务端和客户端之间的读取和传输,
% V, a* D- I9 g3 L, g2 C提高效率.
: \$ Z( g3 |6 U2. sharding
: c: b3 D; i( r$ T+ Tsharding在目前开发版中已经具备,但还不成熟. 但是可以自己实现sharding比较好.因为目前的sharding还是比较硬性的.
- j/ b6 \# }# ]$ k2 C; k3.灵活使用magic操作符和upsert,比如$inc,$all,$in 等等
; o7 _1 s1 @2 r9 M- Z3 i5 E这些轻松解决一些麻烦的操作.
  I1 a: \" }7 I# m4 y5 t( J) p& k2 ?3.其他的复制方案* j) X$ x1 r# z$ {3 J
对于文件系统, 其实可以通过一个脚本来定期将文件复制到其他的节点. 实现类似mogilefs的功能.
& I9 O( l( f+ V0 P% S我对此比较有兴趣.
