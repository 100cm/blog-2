PostgreSQL research

PostgreSQL last_statrequest $xxx is later than collector's time $xxx

2010-12-21 1:16:35   查看原文>>

刚迁移过来的数据库起来后报了一堆错误:
2010-12-21 00:53:07.871 CST,,,30873,,4d0f88d1.7899,4919,,2010-12-21 00:48:17 CST,,0,LOG,00000,"last_statrequest 2010-12-21 00:53:21.972521+08 is later than collector's time 2010-12-21 00:53:07.870957+08",,,,,,,,,""
2010-12-21 00:53:27.263 CST,,,31193,,4d0f89ee.79d9,1,,2010-12-21 00:53:02 CST,2/0,0,WARNING,01000,"pgstat wait timeout",,,,,,,,,""

错误代码可以在PostgreSQL代码表找到解释 : 
┌───────────┬────────────────────────┐
│Error Code │     Condition Name     │
├───────────┴────────────────────────┤
│Class 00 — Successful Completion   │
├───────────┬────────────────────────┤
│00000      │successful_completion   │
├───────────┴────────────────────────┤
│Class 01 — Warning                 │
├───────────┬────────────────────────┤
│01000      │warning                 │
└───────────┴────────────────────────┘

错误原因可以在PostgreSQL源码部分找到解释 : 
src/backend/postmaster/pgstat.c
                /*
                 * If there is clock skew between backends and the collector, we could
                 * receive a stats request time that's in the future.  If so, complain
                 * and reset last_statrequest.  Resetting ensures that no inquiry
                 * message can cause more than one stats file write to occur.
                 */
                if (last_statrequest > last_statwrite)
                {
                        char       *reqtime;
                        char       *mytime;

                        /* Copy because timestamptz_to_str returns a static buffer */
                        reqtime = pstrdup(timestamptz_to_str(last_statrequest));
                        mytime = pstrdup(timestamptz_to_str(last_statwrite));
                        elog(LOG, "last_statrequest %s is later than collector's time %s",
                                 reqtime, mytime);
                        pfree(reqtime);
                        pfree(mytime);

                        last_statrequest = last_statwrite;
                }

系统DATE输出发现时钟频率严重不对:
postgres@db-192-168-173-64-sns-space-> date
Tue Dec 21 00:52:19 CST 2010
postgres@db-192-168-173-64-sns-space-> date
Tue Dec 21 00:52:20 CST 2010
postgres@db-192-168-173-64-sns-space-> date
Tue Dec 21 00:52:40 CST 2010
postgres@db-192-168-173-64-sns-space-> date
Tue Dec 21 00:52:41 CST 2010
postgres@db-192-168-173-64-sns-space-> date
Tue Dec 21 00:52:23 CST 2010
postgres@db-192-168-173-64-sns-space-> date
Tue Dec 21 00:52:24 CST 2010

看起来像是有两个硬件时钟在跑。
因此导致PostgreSQL认为时间错乱，抛出以上日志。
目前怀疑是IBM X3950服务器两台做堆叠后需操作系统兼容性不佳造成的，重启系统后恢复正常。
(修改两台服务器的时钟为一致后，服务器上的时钟还是不对。并且手工修改服务器时间后，时钟还是不对，jump一直存在.已经联系DATE的作者，等待反馈。)

后续处理 :
关闭服务器NTP同步和硬件时钟同步，开启两台堆叠服务器的NTP同步。没有效果。

IBM反馈:
Linux时钟介绍
Linux将时钟分为系统时钟(System Clock)和硬件(Real Time Clock，简称RTC)时钟两种
。系统时间是指当前Linux Kernel中的时钟，而硬件时钟则是主板上由电池供电的那个主
板硬件时钟，这个时钟可以在BIOS的“Standard BIOS Feature”项中进行设置。

Linux有两个时钟系统，Linux并没有默认哪个时钟系统。当Linux启动时，硬件时钟会去
读取系统时钟的设置，然后系统时钟就会独立于硬件运作。

从Linux启动过程来看，系统时钟和硬件时钟不会发生冲突，但Linux中的所有命令 (包括
函数)都是采用的系统时钟设置。不仅如此，系统时钟和硬件时钟还可以采用异步方式，
系统时间和硬件时间可以不同。



Linux下精确调整时间的工具--adjtimex

我们使用上述命令，虽然可以使系统时钟或者硬件时钟进行同步，但是，如果遇到更加精
确的计时要求，，就需要对系统时间做更精确的调整，在无法和NTP服务器同步的情况下
，我们可以考虑使用adjtimex，adjtimex是用来显示或者修改Linux内核的时间变量的工
具，他提供了对内核变量的直接访问功能，可以实现对系统时间的漂移进行修正。

注意：任何用户都可以用adjtimex命令察看时间变量，但只有root用户才可以更改这些参
数
举例说明：

在对系统时间进行调整之前，首先应该知道系统时间和RTC时间到底差了多少，也就是决
定系统时间的漂移率，可以通过简单命令来实现
#adjtimex --compare
--- current --- -- suggested –

cmos time | system-cmos | 2nd diff | tick freq | tick freq
1124251642 -0.658092 -0.658092 10000 0
1124251652 -0.659612 -0.001520 10000 0
1124251662 -0.661111 -0.001499 10000 0 10001 3271400
1124251672 -0.662609 -0.001498 10000 0 10001 3263588
1124251682 -0.664108 -0.001499 10000 0 10001 3269838
1124251692 -0.665607 -0.001499 10000 0 10001 3269838
1124251702 -0.667104 -0.001497 10000 0 10001 3257338
1124251712 -0.668605 -0.001501 10000 0 10002 -3269700
结果显示出两个时钟的差别，第一可以看出2nd diff表示系统时间在10秒周期内快了还是
慢了几秒种
这里可以看出系统时间在10秒钟内慢了0.001498秒（注意，这里系统会连续测试出好几个
连续的差别，一般可以参考平均值）
第二可以看到两个内核参数 tick 和freq 另外，系统也有一个对tick和freq的推荐值，
用这个值可以对系统时间进行校正
从上面结果看系统时钟每10秒慢了-0.001xxx秒（相对于RTC时间），利用-t参数可以重新
定义系统时间10秒的长度，由于比实际时间（RTC）慢了1微秒多，因此可以
把系统10秒（10000微秒）的长度定义成实际时间的10001微秒，也就是说让系统时间走的
快点，也可以说每系统时间走10秒（10000微秒）就快1微秒，从而系统时间跟上
了RTC时间，达到了时间校正的目的
#adjtimex --tick 10001

#adjtimex -c
--- current --- -- suggested –

cmos time | system-cmos | 2nd diff | tick freq | tick freq
1124251994 -0.710396 -0.710396 10001 0
1124252004 -0.710913 -0.000517 10001 0
1124252014 -0.711411 -0.000498 10001 0 10001 3264062
1124252024 -0.711910 -0.000499 10001 0 10001 3270312
1124252034 -0.712413 -0.000503 10001 0 10001 3296875
1124252044 -0.712911 -0.000498 10001 0 10001 3262500
1124252054 -0.713409 -0.000498 10001 0 10001 3264062
1124252064 -0.713908 -0.000499 10001 0 10001 3270312
请注意，时钟的差别已经不到1微秒了，但是还存在大约0.4--0.5微秒的差别，要修正更
高单位的差别，-t参数就无能为力了,需要用到偏移量参数-f
请用如下公式决定-f的修正值
f=差值*100000*65536
这里 f=0.000499*100000*65536=3270246.4
#adjtimex -f 3270246
#adjtimex -c
--- current --- -- suggested --
cmos time system-cmos 2nd diff tick freq tick freq
1124252365 -0.728704 -0.728704 10001 3270246
1124252375 -0.728723 -0.000019 10001 3270246
1124252385 -0.728721 0.000002 10001 3270246 10001 3256184
1124252395 -0.728722 -0.000001 10001 3270246 10001 3278058
1124252405 -0.728721 0.000001 10001 3270246 10001 3262434
1124252415 -0.728723 -0.000002 10001 3270246 10001 3284308
1124252425 -0.728719 0.000004 10001 3270246 10001 3243684
1124252435 -0.728721 -0.000002 10001 3270246 10001 3282746
可以看到两个时间已经非常接近了大约10秒种，会相差大约1-3豪秒(usec)
有关tick 和freq的数值，在suggested列里面已经由程序算出推荐值了，也可以参考推荐
值



对于Linux下的时间设置的命令，可以通过实际操作来形成一个直观的印象。而且，每个
发行版本的linux系统，执行了adjtimex 命令后，其输出稍有不同，如需具体的操作命令
，请联系您的系统提供商。

