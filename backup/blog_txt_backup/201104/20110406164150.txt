PostgreSQL research

PostgreSQL Role Membership

2011-04-06 16:41:50   查看原文>>

在PostgreSQL中有用户,角色以及组的术语，表达的是同样的意思。
因此在PostgreSQL的语法上,user,role,group实际上是相通的。
如,

create role
create user
create group


语法

postgres=# \h create role
Command:     CREATE ROLE
Description: define a new database role
Syntax:
CREATE ROLE name [ [ WITH ] option [ ... ] ]

where option can be:
   
      SUPERUSER | NOSUPERUSER
    | CREATEDB | NOCREATEDB
    | CREATEROLE | NOCREATEROLE
    | CREATEUSER | NOCREATEUSER
    | INHERIT | NOINHERIT
    | LOGIN | NOLOGIN
    | CONNECTION LIMIT connlimit
    | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password'
    | VALID UNTIL 'timestamp'
    | IN ROLE role_name [, ...]
    | IN GROUP role_name [, ...]
    | ROLE role_name [, ...]
    | ADMIN role_name [, ...]
    | USER role_name [, ...]
    | SYSID uid

postgres=# \h create user
Command:     CREATE USER
Description: define a new database role
Syntax:
CREATE USER name [ [ WITH ] option [ ... ] ]

where option can be:
   
      SUPERUSER | NOSUPERUSER
    | CREATEDB | NOCREATEDB
    | CREATEROLE | NOCREATEROLE
    | CREATEUSER | NOCREATEUSER
    | INHERIT | NOINHERIT
    | LOGIN | NOLOGIN
    | CONNECTION LIMIT connlimit
    | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password'
    | VALID UNTIL 'timestamp'
    | IN ROLE role_name [, ...]
    | IN GROUP role_name [, ...]
    | ROLE role_name [, ...]
    | ADMIN role_name [, ...]
    | USER role_name [, ...]
    | SYSID uid

postgres=# \h create group
Command:     CREATE GROUP
Description: define a new database role
Syntax:
CREATE GROUP name [ [ WITH ] option [ ... ] ]

where option can be:
   
      SUPERUSER | NOSUPERUSER
    | CREATEDB | NOCREATEDB
    | CREATEROLE | NOCREATEROLE
    | CREATEUSER | NOCREATEUSER
    | INHERIT | NOINHERIT
    | LOGIN | NOLOGIN
    | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password'
    | VALID UNTIL 'timestamp'
    | IN ROLE role_name [, ...]
    | IN GROUP role_name [, ...]
    | ROLE role_name [, ...]
    | ADMIN role_name [, ...]
    | USER role_name [, ...]
    | SYSID uid



很明显，干的是同一件事情。（下面的描述中将使用”用户“来代表，用户、角色和组。）
注意到，在创建一个用户时，可以选择inherit或noinherit。什么意思呢？这里就涉及到用户的membership。
可以把用户赋予给用户。
如 GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]
下面来看一下inherit和noinherit有什么区别 :

postgres=# create role role_a nosuperuser nocreatedb nocreaterole inherit login encrypted password '123456';
CREATE ROLE
postgres=# create role role_b nosuperuser nocreatedb nocreaterole noinherit login encrypted password '123456';
CREATE ROLE
postgres=# grant connect on database digoal to role_b;
GRANT
digoal=# revoke all on database digoal from public;
REVOKE
digoal=# \c digoal role_a
FATAL:  permission denied for database "digoal"
DETAIL:  User does not have CONNECT privilege.
Previous connection kept
digoal=# \c digoal role_b
You are now connected to database "digoal" as user "role_b".
digoal=> \c postgres postgres
You are now connected to database "postgres" as user "postgres".
postgres=# grant role_b to role_a;
GRANT ROLE
postgres=# \c digoal role_a  当role_b赋予给role_a后，由于role_a有inherit属性,所以登录role_a时会直接继承来自role_b的权限。
You are now connected to database "digoal" as user "role_a".
digoal=> \c postgres postgres
You are now connected to database "postgres" as user "postgres".
postgres=# alter role role_a noinherit;
ALTER ROLE
postgres=# \c digoal role_a   role_a关闭了inherit属性,所以登录role_a时不能直接继承来自role_b的权限，因此无法登陆digoal数据库。
FATAL:  permission denied for database "digoal"
DETAIL:  User does not have CONNECT privilege.
Previous connection kept

inherit特例,无法继承LOGIN, SUPERUSER,    CREATEDB, and CREATEROLE, CREATEUSER的权限。这些属于特殊权限，必须在建用户时直接赋予.



如果用户创建时选择的是noinherit ，那么被赋予的role只能通过set role来调用。如

postgres=# grant all on database digoal to public;
GRANT
postgres=# alter role role_a noinherit;
ALTER ROLE
postgres=# \c digoal digoal
digoal=> grant all on table tbl_test to role_b;
GRANT
digoal=> grant all on schema digoal to role_b;
GRANT
digoal=> \c digoal role_a;
digoal=> begin;delete from digoal.tbl_test;
BEGIN
ERROR:  permission denied for schema digoal
LINE 1: delete from digoal.tbl_test;
                    ^
digoal=> rollback;
digoal=> set role role_b;  没有inherit属性时，需要通过 set role 来切换 role。
SET
digoal=> begin;delete from digoal.tbl_test;
BEGIN
DELETE 4
digoal=> rollback;
ROLLBACK



回到原始ROLE :

digoal=> set role none;
SET
digoal=> begin;delete from digoal.tbl_test;
BEGIN
ERROR:  permission denied for schema digoal
LINE 1: delete from digoal.tbl_test;


                    ^
可以使用以下命令回到原始ROLE :

SET ROLE role_a ;
SET ROLE NONE ;
RESET ROLE ;



在SQL标准中，ROLE带有inherit属性，USER不带有inherit属性。但是在PostgreSQL中创建一个用户时，默认是inherit的。
看需求来设置了。
