PostgreSQL research

PostgreSQL 9.4 pg_stat_activity pg_stat_replication add backend's running xid & min running xid in database cluster.

2014-02-26 8:32:01   查看原文>>

Table 27-2. pg_stat_activity View
┌────────────┬───┬──────────────────────────────────────────────────────────┐
│backend_xid │xid│Toplevel transaction identifier of this backend, if any.  │
├────────────┼───┼──────────────────────────────────────────────────────────┤
│backend_xmin│xid│The current backend's xmin horizon.                       │
└────────────┴───┴──────────────────────────────────────────────────────────┘
Table 27-12. pg_stat_replication View
┌─────────────┬───┬──────────────────────────────────────────────────────┐
│backend_xmin │xid│This standby's xmin horizon reported by hot_standby.  │
└─────────────┴───┴──────────────────────────────────────────────────────┘
backend_xid指该backend正在运行的事务xid.
backend_xmin指当前数据库集群正在运行的最小的事务xid.

这个补丁的对应地址 : 
http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=dd1a3bccca241a998b4ebf39d67202698e5fa599
例如 : 
当前数据库中有两个未结束的事务, 事务号分别是1813和1816. 在以往我们可以通过txid_current_snapshot来获取这个信息.

digoal=# select * from txid_current_snapshot();
 txid_current_snapshot 
-----------------------
 1813:1818:1813,1816
(1 row)


现在我们可以通过pg_stat_activity这个视图获取到这些在执行的事务对应的backend.

digoal=# select pid,backend_xmin,backend_xid from pg_stat_activity ;
  pid  | backend_xmin | backend_xid 
-------+--------------+-------------
 21534 |         1813 |            
 21373 |              |        1813
 21428 |              |        1816
 21516 |              |            
(4 rows)


1813则是数据库集群未结束的最小事务号.

[参考]
1. src/include/storage/proc.h

/*
 * Prior to PostgreSQL 9.2, the fields below were stored as part of the
 * PGPROC.      However, benchmarking revealed that packing these particular
 * members into a separate array as tightly as possible sped up GetSnapshotData
 * considerably on systems with many CPU cores, by reducing the number of
 * cache lines needing to be fetched.  Thus, think very carefully before adding
 * anything else here.
 */
typedef struct PGXACT
{
        TransactionId xid;                      /* id of top-level transaction currently being
                                                                 * executed by this proc, if running and XID
                                                                 * is assigned; else InvalidTransactionId */

        TransactionId xmin;                     /* minimal running XID as it was when we were
                                                                 * starting our xact, excluding LAZY VACUUM:
                                                                 * vacuum must not remove tuples deleted by
                                                                 * xid >= xmin ! */

        uint8           vacuumFlags;    /* vacuum-related flags, see above */
        bool            overflowed;
        bool            delayChkpt;             /* true if this proc delays checkpoint start;
                                                                 * previously called InCommit */

        uint8           nxids;
} PGXACT;

/*
 * There is one ProcGlobal struct for the whole database cluster.
 */
typedef struct PROC_HDR
{
        /* Array of PGPROC structures (not including dummies for prepared txns) */
        PGPROC     *allProcs;
        /* Array of PGXACT structures (not including dummies for prepared txns) */
        PGXACT     *allPgXact;
        /* Length of allProcs array */
        uint32          allProcCount;
        /* Head of list of free PGPROC structures */
        PGPROC     *freeProcs;
        /* Head of list of autovacuum's free PGPROC structures */
        PGPROC     *autovacFreeProcs;
        /* Head of list of bgworker free PGPROC structures */
        PGPROC     *bgworkerFreeProcs;
        /* WALWriter process's latch */
        Latch      *walwriterLatch;
        /* Checkpointer process's latch */
        Latch      *checkpointerLatch;
        /* Current shared estimate of appropriate spins_per_delay value */
        int                     spins_per_delay;
        /* The proc of the Startup process, since not in ProcArray */
        PGPROC     *startupProc;
        int                     startupProcPid;
        /* Buffer id of the buffer that Startup process waits for pin on, or -1 */
        int                     startupBufferPinWaitBufId;
} PROC_HDR;

extern PROC_HDR *ProcGlobal;



2. http://www.postgresql.org/docs/devel/static/monitoring-stats.html#MONITORING-STATS-VIEWS


3. src/backend/storage/ipc/sinvaladt.c

+ * BackendIdGetTransactionIds
+ *     Get the xid and xmin of the backend. The result may be out of date
+ *     arbitrarily quickly, so the caller must be careful about how this
+ *     information is used.
+ */
+void
+BackendIdGetTransactionIds(int backendID, TransactionId *xid, TransactionId *xmin)
+{
+   ProcState  *stateP;
+   SISeg      *segP = shmInvalBuffer;
+   PGXACT     *xact;
+
+   *xid = InvalidTransactionId;
+   *xmin = InvalidTransactionId;
+
+   /* Need to lock out additions/removals of backends */
+   LWLockAcquire(SInvalWriteLock, LW_SHARED);
+
+   if (backendID > 0 && backendID <= segP->lastBackend)
+   {
+       stateP = &segP->procState[backendID - 1];
+       xact = &ProcGlobal->allPgXact[stateP->proc->pgprocno];
+
+       *xid = xact->xid;
+       *xmin = xact->xmin;
+   }
+
+   LWLockRelease(SInvalWriteLock);
+}


