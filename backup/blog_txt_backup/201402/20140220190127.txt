PostgreSQL research

PostgreSQL 9.4 add pg_lsn datatype store Internal PostgreSQL LSN

2014-02-20 19:01:27   查看原文>>

PostgreSQL 9.4 新增一个名为pg_lsn的数据类型, 用于表述LSN.
http://www.postgresql.org/docs/devel/static/datatype-pg-lsn.html

+  <sect1 id="datatype-pg-lsn">
+   <title><acronym>pg_lsn Type</acronym></title>
+
+   <indexterm zone="datatype-pg-lsn">
+    <primary>pg_lsn</primary>
+   </indexterm>
+
+   <para>
+    The <type>pg_lsn</type> data type can be used to store LSN (Log Sequence
+    Number) data which is a pointer to a location in the XLOG. This type is a
+    representation of XLogRecPtr and an internal system type of
+    <productname>PostgreSQL</productname>.
+   </para>
+
+   <para>
+    Internally, an LSN is a 64-bit integer, representing a byte position in
+    the write-ahead log stream.  It is printed as two hexadecimal numbers of
+    up to 8 HEXdigits each, separated by a slash; for example,
+    <literal>16/B374D848</>.  The <type>pg_lsn</type> type supports the
+    standard comparison operators, like <literal>=</literal> and 
+    <literal>&gt;</literal>.  Two LSNs can be subtracted using the
+    <literal>-</literal> operator; the result is the number of bytes separating
+    those write-ahead log positions.
+   </para>
+  </sect1>

pg_lsn类型支持减法运算, 大于, 小于, 大于等于, 小于等于, 等于的比较运算.
src/backend/utils/adt/pg_lsn.c
/*----------------------------------------------------------
25  * Formatting and conversion routines.
26  *---------------------------------------------------------*/
27
28 Datum
29 pg_lsn_in(PG_FUNCTION_ARGS)
30 {
31     char       *str = PG_GETARG_CSTRING(0);
32     int         len1, len2;
33     uint32      id, off;
34     XLogRecPtr  result;
35
36     /* Sanity check input format. */
37     len1 = strspn(str, "0123456789abcdefABCDEF");
38     if (len1 < 1 || len1 > MAXPG_LSNCOMPONENT || str[len1] != '/')
39         ereport(ERROR,
40                 (errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),
41                  errmsg("invalid input syntax for transaction log location: \"%s\"", str)));
42     len2 = strspn(str + len1 + 1, "0123456789abcdefABCDEF");
43     if (len2 < 1 || len2 > MAXPG_LSNCOMPONENT || str[len1 + 1 + len2] != '\0')
44         ereport(ERROR,
45                 (errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),
46                  errmsg("invalid input syntax for transaction log location: \"%s\"", str)));
47
48     /* Decode result. */
49     id = (uint32) strtoul(str, NULL, 16);
50     off = (uint32) strtoul(str + len1 + 1, NULL, 16);
51     result = (XLogRecPtr) ((uint64) id << 32) | off;
52
53     PG_RETURN_PG_LSN(result);
54 }
55
56 Datum
57 pg_lsn_out(PG_FUNCTION_ARGS)
58 {
59     XLogRecPtr  lsn = (XLogRecPtr) PG_GETARG_PG_LSN(0);
60     char        buf[MAXPG_LSNLEN + 1];
61     char       *result;
62     uint32      id, off;
63
64     /* Decode ID and offset */
65     id = (uint32) (lsn >> 32);
66     off = (uint32) lsn;
67
68     snprintf(buf, sizeof buf, "%X/%X", id, off);
69     result = pstrdup(buf);
70     PG_RETURN_CSTRING(result);
71 }
72
73 Datum
74 pg_lsn_recv(PG_FUNCTION_ARGS)
75 {
76     StringInfo  buf = (StringInfo) PG_GETARG_POINTER(0);
77     XLogRecPtr  result;
78
79     result = pq_getmsgint64(buf);
80     PG_RETURN_PG_LSN(result);
81 }
82
83 Datum
84 pg_lsn_send(PG_FUNCTION_ARGS)
85 {
86     XLogRecPtr lsn = (XLogRecPtr) PG_GETARG_PG_LSN(0);
87     StringInfoData buf;
88
89     pq_begintypsend(&buf);
90     pq_sendint64(&buf, lsn);
91     PG_RETURN_BYTEA_P(pq_endtypsend(&buf));
92 }
93
94
95 /*----------------------------------------------------------
96  *  Operators for PostgreSQL LSNs
97  *---------------------------------------------------------*/
98
99 Datum
100 pg_lsn_eq(PG_FUNCTION_ARGS)
101 {
102     XLogRecPtr lsn1 = (XLogRecPtr) PG_GETARG_PG_LSN(0);
103     XLogRecPtr lsn2 = (XLogRecPtr) PG_GETARG_PG_LSN(1);
104
105     PG_RETURN_BOOL(lsn1 == lsn2);
106 }
107
108 Datum
109 pg_lsn_ne(PG_FUNCTION_ARGS)
110 {
111     XLogRecPtr lsn1 = (XLogRecPtr) PG_GETARG_PG_LSN(0);
112     XLogRecPtr lsn2 = (XLogRecPtr) PG_GETARG_PG_LSN(1);
113
114     PG_RETURN_BOOL(lsn1 != lsn2);
115 }
116
117 Datum
118 pg_lsn_lt(PG_FUNCTION_ARGS)
119 {
120     XLogRecPtr lsn1 = (XLogRecPtr) PG_GETARG_PG_LSN(0);
121     XLogRecPtr lsn2 = (XLogRecPtr) PG_GETARG_PG_LSN(1);
122
123     PG_RETURN_BOOL(lsn1 < lsn2);
124 }
125
126 Datum
127 pg_lsn_gt(PG_FUNCTION_ARGS)
128 {
129     XLogRecPtr lsn1 = (XLogRecPtr) PG_GETARG_PG_LSN(0);
130     XLogRecPtr lsn2 = (XLogRecPtr) PG_GETARG_PG_LSN(1);
131
132     PG_RETURN_BOOL(lsn1 > lsn2);
133 }
134
135 Datum
136 pg_lsn_le(PG_FUNCTION_ARGS)
137 {
138     XLogRecPtr lsn1 = (XLogRecPtr) PG_GETARG_PG_LSN(0);
139     XLogRecPtr lsn2 = (XLogRecPtr) PG_GETARG_PG_LSN(1);
140
141     PG_RETURN_BOOL(lsn1 <= lsn2);
142 }
143
144 Datum
145 pg_lsn_ge(PG_FUNCTION_ARGS)
146 {
147     XLogRecPtr lsn1 = (XLogRecPtr) PG_GETARG_PG_LSN(0);
148     XLogRecPtr lsn2 = (XLogRecPtr) PG_GETARG_PG_LSN(1);
149
150     PG_RETURN_BOOL(lsn1 >= lsn2);
151 }
152
153
154 /*----------------------------------------------------------
155  *  Arithmetic operators on PostgreSQL LSNs.
156  *---------------------------------------------------------*/
157
158 Datum
159 pg_lsn_mi(PG_FUNCTION_ARGS)
160 {
161     XLogRecPtr lsn1 = (XLogRecPtr) PG_GETARG_PG_LSN(0);
162     XLogRecPtr lsn2 = (XLogRecPtr) PG_GETARG_PG_LSN(1);
163     char        buf[256];
164     Datum       result;
165
166     /* Negative results are not allowed. */
167     if (lsn1 < lsn2)
168         ereport(ERROR,
169                 (errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),
170                  errmsg("transaction log location out of range")));
171
172     /* Convert to numeric. */
173     snprintf(buf, sizeof buf, UINT64_FORMAT, lsn1 - lsn2);
174     result = DirectFunctionCall3(numeric_in,
175                                  CStringGetDatum(buf),
176                                  ObjectIdGetDatum(0),
177                                  Int32GetDatum(-1));
178
179     return result;
180 }


[参考]
1. http://blog.163.com/digoal@126/blog/static/1638770402012914112949546/
2. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=7d03a83f4d0736ba869fa6f93973f7623a27038a
