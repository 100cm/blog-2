PostgreSQL research

PostgreSQL QQ群 FAQ贴 - 1

2011-12-12 7:43:36   查看原文>>

QQ群里一些网友问到的问题，收集如下 : 
目录 : 
1. PostgreSQL存储过程中自定义异常怎么弄?
2. PostgreSQL9.1的同步事务在某些情况下用户主动cancel等待sync replication standby 的acknowledge,实际本地已提交.
3. PostgreSQL如何满足已经存在则更新, 不存在则插入的需求.
4. copy和insert哪个效率高?
5. PostgreSQL能不能限制数据库的大小?
6. 怎样给一个用户授予只读角色?
7. 不想让数据插入到某个表应该怎么做?
8. PostgreSQL 中有没有rownum这样的，显示结果集的序号?
9. PostgreSQL 函数中如何使用savepoint?
10.请问, pg脚本有宏替换, 计算字符串公式的能力? 类似 a=2 ; evaluate('5-a') ; 如果将这个值赋值给这个变量呢? zresult = evaluate('5-a') ;
11.UPDATE A表 FROM B表 ?
12. hex转decimal
13. PostgreSQL 时区.
14. PostgreSQL 不同的版本, 只读事务中是否允许 nextval() 取序列值;
15. 修改数据库记录的时候, 如何才能做到指修改日期, 而不修改时间?  例如 2012-06-16 08:20:12   改为 2012-07-01 08:20:12 ?
16. PostgreSQL 什么情况下模糊查询可以使用索引扫描?
17. INT类型如何显示前导0, 例如01,001.
18. postgresql能不能把在某个数据库上执行过的所有SQL都记录下来.
19. 在postgreSQL写SQL语句，更新字段里的值，该字段的值是这样的形式{"x":114.310134, "y":30.522772, "spatialReference":{"wkid":4326}，需要更新字符串里X Y的值，值是从其它变表查出来的，该如何写SQL语句呢？
20. PostgreSQL 列类型匹配判断. IS OF, IS NOT OF表达式.
21. PostgreSQL 字符串排序和什么有关.
22. PostgreSQL 支持的SQL最大长度.

内容 : 
1. Q : 
postgresql存储过程中自定义异常怎么弄?
A : 
http://www.postgresql.org/docs/9.1/static/plpgsql-errors-and-messages.html

2. Q : 
PostgreSQL9.1的同步事务在某些情况下用户主动cancel等待sync replication standby 的acknowledge,实际本地已提交.返回如下:
canceling the wait for synchronous replication and terminating connection due to administrator command.
The transaction has already committed locally, but might not have been replicated to the standby.
或者,
canceling wait for synchronous replication due to user request
The transaction has already committed locally, but might not have been replicated to the standby.
A : 
原因是,
                 * If a wait for synchronous replication is pending, we can neither
                 * acknowledge the commit nor raise ERROR or FATAL.  The latter would
                 * lead the client to believe that that the transaction aborted, which
                 * is not true: it's already committed locally. The former is no good
                 * either: the client has requested synchronous replication, and is
                 * entitled to assume that an acknowledged commit is also replicated,
                 * which might not be true. So in this case we issue a WARNING (which
                 * some clients may be able to interpret) and shut off further output.
                 * We do NOT reset ProcDiePending, so that the process will die after
                 * the commit is cleaned up.
或者
                 * It's unclear what to do if a query cancel interrupt arrives.  We
                 * can't actually abort at this point, but ignoring the interrupt
                 * altogether is not helpful, so we just terminate the wait with a
                 * suitable warning.
详细参考, src/backend/replication/syncrep.c

3. Q : 
PostgreSQL如何满足已经存在则更新, 不存在则插入的需求.
A : 

digoal=> create table exists_test (id int primary key,info text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "exists_test_pkey" for table "exists_test"
CREATE TABLE
digoal=> create or replace function insert_exists_test(i_id int,i_info text) returns void as $BODY$
declare
begin
perform 1 from exists_test where id=i_id;
if not found then
insert into exists_test(id,info) values (i_id,i_info);
return;
else
update exists_test set info=i_info where id=i_id;
return;
end if;
exception
when others then
raise exception 'Insert exists_test(id,info) values(%,%) error.',i_id,i_info;
return;
end;
$BODY$ language plpgsql;
digoal=> select insert_exists_test(1,'digoal');
digoal=> select insert_exists_test(1,'adigoal');
digoal=> select * from exists_test ;
 id |  info   
----+---------
  1 | adigoal



4. Q : 
copy和insert哪个效率高?
A : 
COPY效率高.
例如 : 

digoal=> create table copy_insert_compare(id int,info text);
CREATE TABLE
digoal=> insert into copy_insert_compare select generate_series(1,1000000),'digoal_test';
INSERT 0 1000000


copy到文件

digoal=# copy digoal.copy_insert_compare to '/home/postgres/copy_insert_compare';


导出为insert语句

pg_dump -f ./copy_insert_compare.sql -F p -E UTF8 -t digoal.copy_insert_compare --inserts -h 127.0.0.1 -U digoal digoal
-rw-r--r-- 1 postgres postgres  19M Dec 13 12:07 copy_insert_compare
-rw-rw-r-- 1 postgres postgres  61M Dec 13 12:09 copy_insert_compare.sql


首先文件大小就相差几倍.
COPY导入时间，

digoal=# copy digoal.copy_insert_compare from '/home/postgres/copy_insert_compare';
COPY 1000000
Time: 1456.939 ms


insert导入时间，

postgres@db-172-16-3-150-> date;nohup psql -h 127.0.0.1 digoal digoal -f ./copy_insert_compare.sql >/dev/null 2>&1;date;
Tue Dec 13 12:14:48 CST 2011
Tue Dec 13 12:16:56 CST 2011, 128秒


单一事务insert导入时间,(开始部分加入begin;结束部分加入commit;)

postgres@db-172-16-3-150-> date;nohup psql -h 127.0.0.1 digoal digoal -f ./copy_insert_compare.sql >/dev/null 2>&1;date;
Tue Dec 13 12:17:23 CST 2011
Tue Dec 13 12:19:28 CST 2011, 125秒


insert 慢了将近100倍。

5. Q : 
PostgreSQL能不能限制数据库的大小?
A : 
目前PostgreSQL对数据库, 表空间的大小都没有限制. 如果要限制表空间的大小, 可以考虑利用文件系统的配合来实现, 如linux的quota.

6. Q : 
怎样给一个用户授予只读角色?
A : 
PostgreSQL没有只读角色这个权限，但是可以通过修改用户的默认参数来达到只读的目的，如下 : 

digoal=# select usename,useconfig from pg_user where usename='digoal';
 usename | useconfig 
---------+-----------
 digoal  | 
(1 row)
digoal=# alter role digoal set default_transaction_read_only=true;
ALTER ROLE
digoal=# select usename,useconfig from pg_user where usename='digoal';
 usename |              useconfig               
---------+--------------------------------------
 digoal  | {default_transaction_read_only=true}
(1 row)


连接到digoal用户进行验证,

digoal=# \c digoal digoal
You are now connected to database "digoal" as user "digoal".
digoal=> insert into test values (1);
ERROR:  cannot execute INSERT in a read-only transaction
digoal=> delete from test ;
ERROR:  cannot execute DELETE in a read-only transaction
digoal=> drop table test ;
ERROR:  cannot execute DROP TABLE in a read-only transaction


重置用户参数 : 

digoal=> \c postgres postgres
You are now connected to database "postgres" as user "postgres".
postgres=# alter role digoal reset default_transaction_read_only;
ALTER ROLE
postgres=# select usename,useconfig from pg_user where usename='digoal';
 usename | useconfig 
---------+-----------
 digoal  | 
(1 row)



7. Q : 
不想让数据插入到某个表应该怎么做?
A : 
创建do instead nothing规则, 例如

digoal=> create rule r_insert as on insert to test do instead nothing;
CREATE RULE
digoal=> insert into test values (1);
INSERT 0 0
digoal=> select * from test ;
 id 
----
(0 rows)



8. Q : 
PostgresQL 中有没有rownum这样的，显示结果集的序号?
A : 
在Oracle里面rownum可以用来标示行号, 如 : 

SQL> select rownum,table_name from dba_tables where rownum<10;

    ROWNUM TABLE_NAME
---------- ------------------------------
         1 ICOL$
         2 CON$
         3 UNDO$
         4 PROXY_ROLE_DATA$
         5 FILE$
         6 UET$
         7 IND$
         8 SEG$
         9 COL$

9 rows selected.


PostgreSQL使用窗口函数row_number()可以满足同样的需求

postgres=# select * from (select row_number() over() as rownum,tablename from pg_tables) t where rownum<10;
 rownum |    tablename    
--------+-----------------
      1 | pg_statistic
      2 | pg_type
      3 | pg_attribute
      4 | pg_authid
      5 | pg_proc
      6 | pg_class
      7 | pg_database
      8 | pg_user_mapping
      9 | pg_constraint
(9 rows)



9. Q : 
PostgreSQL 函数中如何使用savepoint?
A : 
http://blog.163.com/digoal@126/blog/static/1638770402011112635938640/

10. Q : 
请问, pg脚本有宏替换, 计算字符串公式的能力? 类似 a=2 ; evaluate('5-a') ; 如果将这个值赋值给这个变量呢? result = evaluate('5-a') ;
A : 
PostgreSQL支持DO来执行匿名块, 实现类似上述的功能如下 : 

postgres=# do $$
postgres$# declare
postgres$# a int;
postgres$# result int;
postgres$# begin
postgres$# a := 2;
postgres$# result := 5-a;
postgres$# raise notice '%', result;
postgres$# end
postgres$# $$
postgres-# ;
NOTICE:  3
DO


另外, 通过PostgreSQL的客户端psql定义的变量也可以实现 : 
设置变量和它的值

postgres=# \set a 2
postgres=# \set result 5-:a


输出变量的值

postgres=# select :result;
 ?column? 
----------
        3
(1 row)


输出变量的值

postgres=# \echo :a
2
postgres=# \echo :result
5-:a


输出当前psql下的所有变量

postgres=# \set
AUTOCOMMIT = 'on'
PROMPT1 = '%/%R%# '
PROMPT2 = '%/%R%# '
PROMPT3 = '>> '
VERBOSITY = 'default'
VERSION = 'PostgreSQL 9.1.2 on x86_64-unknown-linux-gnu, compiled by gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-51), 64-bit'
DBNAME = 'postgres'
USER = 'postgres'
HOST = '127.0.0.1'
PORT = '1931'
ENCODING = 'UTF8'
LASTOID = '0'
a = '2'
result = '5-:a'


删除变量

\unset a
\unset result


可以参考man psql

11. Q : 
UPDATE A表 FROM B表 ?
A : 
首先A表和B表需要有关联的列, 关联之后A表和B表应该是多对一或者一对一的关系, 
如果是一对多会怎么样呢? 测试如下 : 

sar=> create table a (id int primary key, info text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "a_pkey" for table "a"
CREATE TABLE
sar=> create table b (id int, info text);
CREATE TABLE
sar=> insert into a select generate_series(1,10),'digoal';
INSERT 0 10
sar=> insert into b select generate_series(1,10),'Digoal';
INSERT 0 10
sar=> insert into b select generate_series(1,10),'DIGOAL';
INSERT 0 10
sar=> select * from a where id=1;
 id |  info  
----+--------
  1 | digoal
(1 row)

sar=> select * from b where id=1;
 id |  info  
----+--------
  1 | Digoal
  1 | DIGOAL
(2 rows)


执行如下更新之后, a.id 会等于什么呢? 是Digoal, 还是DIGOAL.

sar=> update a set info=b.info from b where a.id=b.id and a.id=1;
UPDATE 1
sar=> select * from a where id=1;
 id |  info  
----+--------
  1 | Digoal
(1 row)


看起来是第一次匹配到的B表的那条记录的info值.
所以在做多表关联的更新操作时, 需要注意这一点.

12. 
基本的用法是  SELECT x'FF'::integer; 一般写成函数.
可参看, 
http://postgresql.1045698.n5.nabble.com/Hex-to-Dec-Conversion-td3218223.html

13. 
时区参看
timezone参数
http://www.postgresql.org/docs/9.1/static/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-FORMAT
pg_timezone_names表
http://www.postgresql.org/docs/9.1/static/view-pg-timezone-names.html
或
src/backend/utils/adt/timestamp.c

14. PostgreSQL 不同的版本, 只读事务中是否允许 nextval() 取序列值;
8.3 允许只读事务通过nextval()取序列值.

psql
Welcome to psql 8.3.5, the PostgreSQL interactive terminal.
postgres=# create sequence seq_test;
CREATE SEQUENCE
postgres=# begin transaction read only;
BEGIN
postgres=# select nextval('seq_test'::regclass);
 nextval 
---------
       1
(1 row)



从9.0版本开始不允许.

psql (9.1.3)
Type "help" for help.
postgres=# create sequence seq_test;
CREATE SEQUENCE
postgres=# begin transaction read only;
BEGIN
postgres=# select nextval('seq');
ERROR:  25006: cannot execute nextval() in a read-only transaction
LOCATION:  PreventCommandIfReadOnly, utility.c:228


源码分析 : 
9.0版本开始, 增加了一个只读事务的判断, 某些命令(包括更改序列值的命令, 例如nextval)在只读事务中不允许执行.
源码如下 : 
src/backend/tcop/utility.c

/*
 * check_xact_readonly: is a utility command read-only?
 *
 * Here we use the loose rules of XactReadOnly mode: no permanent effects
 * on the database are allowed.
 */
static void
check_xact_readonly(Node *parsetree)
{
        if (!XactReadOnly)
                return;

        /*
         * Note: Commands that need to do more complicated checking are handled
         * elsewhere, in particular COPY and plannable statements do their own
         * checking.  However they should all call PreventCommandIfReadOnly to
         * actually throw the error.
         */

        switch (nodeTag(parsetree))
        {
                case T_AlterDatabaseStmt:
                case T_AlterDatabaseSetStmt:
                case T_AlterDomainStmt:
                case T_AlterFunctionStmt:
                case T_AlterRoleStmt:
                case T_AlterRoleSetStmt:
                case T_AlterObjectSchemaStmt:
                case T_AlterOwnerStmt:
                case T_AlterSeqStmt:
                case T_AlterTableStmt:
                case T_RenameStmt:
                case T_CommentStmt:
                case T_DefineStmt:
                case T_CreateCastStmt:
                case T_CreateConversionStmt:
                case T_CreatedbStmt:
                case T_CreateDomainStmt:
                case T_CreateFunctionStmt:
                case T_CreateRoleStmt:
                case T_IndexStmt:
                case T_CreatePLangStmt:
                case T_CreateOpClassStmt:
                case T_CreateOpFamilyStmt:
                case T_AlterOpFamilyStmt:
                case T_RuleStmt:
                case T_CreateSchemaStmt:
                case T_CreateSeqStmt:
                case T_CreateStmt:
                case T_CreateTableSpaceStmt:
                case T_CreateTrigStmt:
                case T_CompositeTypeStmt:
                case T_CreateEnumStmt:
                case T_ViewStmt:
                case T_DropCastStmt:
                case T_DropStmt:
                case T_DropdbStmt:
                case T_DropTableSpaceStmt:
                case T_RemoveFuncStmt:
                case T_DropRoleStmt:
                case T_DropPLangStmt:
                case T_RemoveOpClassStmt:
                case T_RemoveOpFamilyStmt:
                case T_DropPropertyStmt:
                case T_GrantStmt:
                case T_GrantRoleStmt:
                case T_AlterDefaultPrivilegesStmt:
                case T_TruncateStmt:
                case T_DropOwnedStmt:
                case T_ReassignOwnedStmt:
                case T_AlterTSDictionaryStmt:
                case T_AlterTSConfigurationStmt:
                case T_CreateFdwStmt:
                case T_AlterFdwStmt:
                case T_DropFdwStmt:
                case T_CreateForeignServerStmt:
                case T_AlterForeignServerStmt:
                case T_DropForeignServerStmt:
                case T_CreateUserMappingStmt:
                case T_AlterUserMappingStmt:
                case T_DropUserMappingStmt:
                case T_AlterTableSpaceOptionsStmt:
                        PreventCommandIfReadOnly(CreateCommandTag(parsetree));
                        break;
                default:
                        /* do nothing */
                        break;
        }
}

/*
 * PreventCommandIfReadOnly: throw error if XactReadOnly
 *
 * This is useful mainly to ensure consistency of the error message wording;
 * most callers have checked XactReadOnly for themselves.
 */
void
PreventCommandIfReadOnly(const char *cmdname)
{
        if (XactReadOnly)
                ereport(ERROR,
                                (errcode(ERRCODE_READ_ONLY_SQL_TRANSACTION),
                /* translator: %s is name of a SQL command, eg CREATE */
                                 errmsg("cannot execute %s in a read-only transaction",
                                                cmdname)));
}



15. 修改数据库记录的时候, 如何才能做到指修改日期, 而不修改时间?  例如 2012-06-16 08:20:12   改为 2012-07-01 08:20:12 ?
A : 

column_name::time+changed_date
for example : 
postgres=> create table test (col1 timestamp(0));
CREATE TABLE
postgres=> insert into test values (now());
INSERT 0 1
postgres=> select * from test;
        col1         
---------------------
 2012-07-02 13:53:38
(1 row)

postgres=> update test set col1 = '2011-01-01'::date+col1::time;
UPDATE 1
postgres=> select * from test;
        col1         
---------------------
 2011-01-01 13:53:38
(1 row)



16. PostgreSQL 什么情况下模糊查询可以使用索引扫描?
分为两种情况,
1. collate = C

digoal=> create table collate_c (id int primary key, info text collate "C");
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "collate_c_pkey" for table "collate_c"
CREATE TABLE
digoal=> insert into collate_c select generate_series(1,100000),repeat(random()::text,20);
INSERT 0 100000


索引使用默认的operator class, 即可支持"后模糊"查询.

digoal=> create index idx_collate_c_1 on collate_c (info);
CREATE INDEX
digoal=> explain analyze select * from collate_c where info ~ '^12';
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_collate_c_1 on collate_c  (cost=0.00..2.81 rows=10 width=348) (actual time=0.030..0.030 rows=0 loops=1)
   Index Cond: ((info >= '12'::text) AND (info < '13'::text))
   Filter: (info ~ '^12'::text)
 Total runtime: 0.056 ms
(4 rows)
digoal=> explain analyze select * from collate_c where info like '12%';
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_collate_c_1 on collate_c  (cost=0.00..2.81 rows=10 width=348) (actual time=0.026..0.026 rows=0 loops=1)
   Index Cond: ((info >= '12'::text) AND (info < '13'::text))
   Filter: (info ~~ '12%'::text)
 Total runtime: 0.051 ms
(4 rows)



2. collate <> C
第二种情况是列的collate <> C.
这种使用默认的operator class不支持模糊查询.

digoal=> create table collate_notc (id int primary key, info text collate "en_US");
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "collate_notc_pkey" for table "collate_notc"
CREATE TABLE
digoal=> insert into collate_notc select generate_series(1,100000),repeat(random()::text,20);
INSERT 0 100000
digoal=> create index idx_collate_notc_1 on collate_notc (info);
CREATE INDEX
digoal=> explain analyze select * from collate_notc where info ~ '^12';
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Seq Scan on collate_notc  (cost=0.00..6012.00 rows=10 width=348) (actual time=414.631..414.631 rows=0 loops=1)
   Filter: (info ~ '^12'::text)
   Rows Removed by Filter: 100000
 Total runtime: 414.661 ms
(4 rows)
digoal=> explain analyze select * from collate_notc where info like '12%';
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Seq Scan on collate_notc  (cost=0.00..6012.00 rows=10 width=348) (actual time=157.486..157.486 rows=0 loops=1)
   Filter: (info ~~ '12%'::text)
   Rows Removed by Filter: 100000
 Total runtime: 157.508 ms
(4 rows)
digoal=> create index idx_collate_notc_2 on collate_notc (info varchar_pattern_ops);
CREATE INDEX
digoal=> explain analyze select * from collate_notc where info ~ '^12';
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_collate_notc_2 on collate_notc  (cost=0.00..2.81 rows=10 width=348) (actual time=0.482..0.482 rows=0 loops=1)
   Index Cond: ((info ~>=~ '12'::text) AND (info ~<~ '13'::text))
   Filter: (info ~ '^12'::text)
 Total runtime: 0.506 ms
(4 rows)

digoal=> explain analyze select * from collate_notc where info like '12%';
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_collate_notc_2 on collate_notc  (cost=0.00..2.81 rows=10 width=348) (actual time=0.073..0.073 rows=0 loops=1)
   Index Cond: ((info ~>=~ '12'::text) AND (info ~<~ '13'::text))
   Filter: (info ~~ '12%'::text)
 Total runtime: 0.097 ms
(4 rows)

digoal=> drop index idx_collate_notc_2;
DROP INDEX
digoal=> explain analyze select info from collate_notc where info like '12%';
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Seq Scan on collate_notc  (cost=0.00..6012.00 rows=10 width=344) (actual time=204.449..204.449 rows=0 loops=1)
   Filter: (info ~~ '12%'::text)
   Rows Removed by Filter: 100000
 Total runtime: 204.471 ms
(4 rows)

digoal=> set enable_seqscan=off;
SET


但是, 当查询的结果集只包含索引列字段时, 可以选择Index Only Scan.
当然这个效率显然不如使用ops来的高.

digoal=> explain analyze select info from collate_notc where info like '12%';
                                                                   QUERY PLAN                                                       
             
------------------------------------------------------------------------------------------------------------------------------------
-------------
 Index Only Scan using idx_collate_notc_1 on collate_notc  (cost=0.00..11870.79 rows=10 width=344) (actual time=746.763..746.763 row
s=0 loops=1)
   Filter: (info ~~ '12%'::text)
   Rows Removed by Filter: 100000
   Heap Fetches: 100000
 Total runtime: 746.786 ms
(5 rows)

digoal=> explain analyze select * from collate_notc where info like '12%';
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on collate_notc  (cost=10000000000.00..10000006012.00 rows=10 width=348) (actual time=175.617..175.617 rows=0 loops=1)
   Filter: (info ~~ '12%'::text)
   Rows Removed by Filter: 100000
 Total runtime: 175.646 ms
(4 rows)



查询支持的collate
digoal=> select * from pg_collation ;
参考 : 
http://www.postgresql.org/docs/9.2/static/indexes-opclass.html

17. INT类型如何显示前导0, 例如01,001.

digoal=> select to_char(123, '0000');
 to_char 
---------
  0123
(1 row)

digoal=> select to_char(123, '00000');
 to_char 
---------
  00123
(1 row)

digoal=> select to_char(123, '00000.0');
 to_char  
----------
  00123.0
(1 row)



18. postgresql能不能把在某个数据库上执行过的所有SQL都记录下来.

digoal=# alter database digoal set log_min_duration_statement=0;
ALTER DATABASE
或者
digoal=# alter database digoal set log_statement='all';
ALTER DATABASE
-- 只记录下digoal数据库的所有SQL, 其他数据库则按系统默认的配置.
语法 : 
ALTER DATABASE name SET configuration_parameter { TO | = } { value | DEFAULT }
ALTER DATABASE name SET configuration_parameter FROM CURRENT
ALTER DATABASE name RESET configuration_parameter
ALTER DATABASE name RESET ALL
PostgreSQL的权限分级较多, 例如可以按角色配置权限, 也可以按数据库配置权限, 也可以按会话配置权限等等.


19. Q : 
在postgreSQL写SQL语句，更新字段里的值，该字段的值是这样的形式{"x":114.310134, "y":30.522772, "spatialReference":{"wkid":4326}，需要更新字符串里X Y的值，值是从其它变表查出来的，该如何写SQL语句呢？
A : 
digoal=# select regexp_replace ('{"x":114.310134, "y":30.522772, "spatialReference":{"wkid":4326}','()[0-9]+\.[0-9]+(, "y":)[0-9]+\.[0-9]+()','\11234\25678\3','g');
                    regexp_replace                     
-------------------------------------------------------
 {"x":1234, "y":5678, "spatialReference":{"wkid":4326}
(1 row)
\11234\25678\3 中 \n 位置表示规则表达式中的括号部分. 最多可使用1-9
详细介绍参考
http://www.postgresql.org/docs/9.3/static/functions-matching.html#FUNCTIONS-POSIX-REGEXP

20. Q:
PostgreSQL 列类型匹配判断. IS OF, IS NOT OF表达式.
A:
digoal=# \d+ pg_class
                          Table "pg_catalog.pg_class"
     Column     |   Type    | Modifiers | Storage  | Stats target | Description 
----------------+-----------+-----------+----------+--------------+-------------
 relname        | name      | not null  | plain    |              | 
 relnamespace   | oid       | not null  | plain    |              | 
 reltype        | oid       | not null  | plain    |              | 
 reloftype      | oid       | not null  | plain    |              | 
 relowner       | oid       | not null  | plain    |              | 
 relam          | oid       | not null  | plain    |              | 
 relfilenode    | oid       | not null  | plain    |              | 
 reltablespace  | oid       | not null  | plain    |              | 
 relpages       | integer   | not null  | plain    |              | 
 reltuples      | real      | not null  | plain    |              | 
 relallvisible  | integer   | not null  | plain    |              | 
 reltoastrelid  | oid       | not null  | plain    |              | 
 reltoastidxid  | oid       | not null  | plain    |              | 
 relhasindex    | boolean   | not null  | plain    |              | 
 relisshared    | boolean   | not null  | plain    |              | 
 relpersistence | "char"    | not null  | plain    |              | 
 relkind        | "char"    | not null  | plain    |              | 
 relnatts       | smallint  | not null  | plain    |              | 
 relchecks      | smallint  | not null  | plain    |              | 
 relhasoids     | boolean   | not null  | plain    |              | 
 relhaspkey     | boolean   | not null  | plain    |              | 
 relhasrules    | boolean   | not null  | plain    |              | 
 relhastriggers | boolean   | not null  | plain    |              | 
 relhassubclass | boolean   | not null  | plain    |              | 
 relispopulated | boolean   | not null  | plain    |              | 
 relfrozenxid   | xid       | not null  | plain    |              | 
 relminmxid     | xid       | not null  | plain    |              | 
 relacl         | aclitem[] |           | extended |              | 
 reloptions     | text[]    |           | extended |              | 
Indexes:
    "pg_class_oid_index" UNIQUE, btree (oid)
    "pg_class_relname_nsp_index" UNIQUE, btree (relname, relnamespace)
Has OIDs: yes

digoal=# select relname is of (text) from pg_class limit 1;
 ?column? 
----------
 f
(1 row)
digoal=# select relname is of (name) from pg_class limit 1;
 ?column? 
----------
 t
(1 row)

PostgreSQL7.3添加到特性.
参考: src/backend/parser/gram.y


21. 
PostgreSQL 字符串排序和什么有关.
A : 
排序需要考虑collate 以及数据库所在系统的glibc版本. 如下测试都是在PostgreSQL 9.3中, UTF8的数据库中执行的, 因为操作系统的glibc版本不一样, 所以结果也不一样.
CentOS 6.4
digoal=# select id,bytea(id) from ( values('a'),('b'),('你好'),('中国') ) as t(id) order by id collate "C";
  id  |     bytea      
------+----------------
 a    | \x61
 b    | \x62
 中国 | \xe4b8ade59bbd
 你好 | \xe4bda0e5a5bd
(4 rows)

digoal=# select id,bytea(id) from ( values('a'),('b'),('你好'),('中国') ) as t(id) order by id collate "zh_CN";
  id  |     bytea      
------+----------------
 a    | \x61
 b    | \x62
 你好 | \xe4bda0e5a5bd
 中国 | \xe4b8ade59bbd
(4 rows)

CentOS 5.x
postgres=# select id,bytea(id) from ( values('a'),('b'),('你好'),('中国') ) as t(id) order by id collate "zh_CN";
  id  |     bytea      
------+----------------
 a    | \x61
 b    | \x62
 中国 | \xe4b8ade59bbd
 你好 | \xe4bda0e5a5bd
(4 rows)

postgres=# select id,bytea(id) from ( values('a'),('b'),('你好'),('中国') ) as t(id) order by id collate "C";
  id  |     bytea      
------+----------------
 a    | \x61
 b    | \x62
 中国 | \xe4b8ade59bbd
 你好 | \xe4bda0e5a5bd
(4 rows)
还可以参考此文
http://blog.163.com/digoal@126/blog/static/163877040201173003547236/

22. PostgreSQL 支持的SQL最大长度.
A : 
2G
src/include/lib/stringinfo.h
/*-------------------------
 * StringInfoData holds information about an extensible string.
 *              data    is the current buffer for the string (allocated with palloc).
 *              len             is the current string length.  There is guaranteed to be
 *                              a terminating '\0' at data[len], although this is not very
 *                              useful when the string holds binary data rather than text.
 *              maxlen  is the allocated size in bytes of 'data', i.e. the maximum
 *                              string size (including the terminating '\0' char) that we can
 *                              currently store in 'data' without having to reallocate
 *                              more space.  We must always have maxlen > len.
 *              cursor  is initialized to zero by makeStringInfo or initStringInfo,
 *                              but is not otherwise touched by the stringinfo.c routines.
 *                              Some routines use it to scan through a StringInfo.
 *-------------------------
 */
typedef struct StringInfoData
{
        char       *data;
        int                     len;
        int                     maxlen;
        int                     cursor;
} StringInfoData;

Flag Counter

评论

renny - 2013-10-22 10:49:27

3. PostgreSQL如何满足已经存在则更新, 不存在则插入的需求.
两句SQL就可以搞定的问题，为什么要搞那么复杂？
SQL1: update t1 set b =t2.b from t2 where t1.a=t2.a;
SQL2: insert into t1 select a,b from t2 where not exists (select 1 from t1 where t1.a =t2.a);
另外，我的经验是不到万不得已，不应该使用自定义函数，在SQL语句中使用自定义函数如果数据一多就会慢得出奇，因为对于每一行数据都要调用一次函数完整地计算一次/。

德哥@Digoal 回复 renny - 2013-10-22 10:49:27

HI, 用函数封装更高效, 同时在高并发的情况下, 可以减少query start, query parse, query plan.
函数使用举例 : 
create or replace function (v1 type1, ... vn typen) returns void as $$
declare 
begin
  update tbl set c1=v1, ... cn=vn where pk=?;
  if not found then
    insert into tbl (c1, ... cn) values (v1, ... vn);
  end if;
end;
$$ language plpgsql strict;
建议您测试一下两种方式在高并发下的性能.
肯定是函数要好. 

德哥@Digoal 回复 renny - 2013-10-22 10:49:27

性能优化可参考如下
http://blog.163.com/digoal@126/blog/static/163877040201221382150858/
http://blog.163.com/digoal@126/blog/static/163877040201221333411196/
再次感谢您对PostgreSQL的关注.

renny 回复德哥@Digoal - 2013-10-22 10:49:27

我是这么理解的，你的方法适用于OLTP场景，我的方法适用于BI场景，我在以往的BI应用经验中由于自定义函数而引起的性能问题确实屡见不鲜；另外在很多OLTP里，一般会将这种“是否存在”的判断放在上层应用，而不是在数据库再开发一层，因为OLTP项目中几乎没有专职的数据库开发人员，而他们大多存在于BI项目中。


德哥@Digoal 回复 renny - 2013-10-22 10:49:27

恩,bi交互少,这点开销不是重头.
当然这种是否存在的判断放应用层来做也是可以的.
方法多种多样.


return NULL - 2013-03-03 22:44:31

很欣喜刚开始学习postgres  搜索with的递归用法竟然找个这个博客  感谢分享

qhjhemcwf663 - 2013-01-17 0:08:02

我珍惜身边的每一份真诚友情，无论它是不是已经过去，无论它会不会有将来。也许不会天长地久，也许会淡忘，也许会疏远，但却从来都不应该遗忘。它是一粒种子，珍惜了，就会在彼此的心里萌芽，抽叶，开花，直至结果。而那种绽放时的清香也将伴你我前行一生一世……愿我的好朋友幸福快乐！

lizhenqiu0628 - 2012-10-17 17:29:02

我日志里的【治疗鼻炎偏方大全】也许能帮到你身边有需要的患者朋友！

