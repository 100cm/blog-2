PostgreSQL research

query slow in function & loop

2014-09-26 11:45:13   查看原文>>

一位朋友对proxy返回慢的疑惑. 数据节点5000万记录, 直接查询需要8秒.

db3=> explain analyze select * from user_infosingle;
                                                            QUERY PLAN                                             
               
-------------------------------------------------------------------------------------------------------------------
---------------
 Seq Scan on user_infosingle  (cost=0.00..1461539.00 rows=50000000 width=126) (actual time=0.029..6182.157 rows=500
00000 loops=1)
 Total runtime: 8216.026 ms
(2 rows)


在代理节点查询2000万条需要72秒, (当然如果走索引的话因为扫描问题会变慢, 就看是不是索引了)
这里除了走索引会变慢, 另外还有慢的原因是函数自身的开销.(即使是全表, 在函数中返回也比直接查询慢)

db3=> \c proxy proxy
You are now connected to database "proxy" as user "proxy".
proxy=> explain analyze select * from digoal.dquery('select * from user_info where userid >=29000000 and userid <=49000000') as (userid int,engname text,cnname text,occupation text,birthday date,signname text,email text,qq numeric,crt_time timestamp without time zone,mod_time timestamp without time zone);
                                                        QUERY PLAN                                                 
       
-------------------------------------------------------------------------------------------------------------------
-------
 Function Scan on dquery  (cost=0.25..10.25 rows=1000 width=216) (actual time=67987.856..71008.713 rows=20000001 lo
ops=1)
 Total runtime: 72601.779 ms
(2 rows)


他的场景

数据节点：create or replace function digoal.dquery(q text)
returns setof record as $x$
declare                            
    ret record;                      
begin                              
    for ret in execute q loop   
        return next ret;               
    end loop;                        
    return;                          
end;    
$x$ language plpgsql;
create or replace function digoal.ddlExec(query text) 
returns integer as $x$
declare
   ret integer;
begin
execute query;
   return 1;
end;
$x$ language plpgsql;
create or replace function digoal.dmlExec(query text) returns integer as $x$
declare
   ret integer;
begin
        execute query;
   return 1;
end;
$x$ language plpgsql;

代理节点：\c proxy postgres 
CREATE OR REPLACE FUNCTION digoal.dquery(query text) RETURNS setof
record AS $$
CLUSTER 'cluster_srv1';
RUN ON ALL;
$$ LANGUAGE plproxy;
CREATE OR REPLACE FUNCTION digoal.ddlexec(query text) RETURNS setof integer
AS $$
CLUSTER 'cluster_srv1';
RUN ON ALL;
$$ LANGUAGE plproxy;
CREATE OR REPLACE FUNCTION digoal.dmlexec(query text) RETURNS setof integer
AS $$
CLUSTER 'cluster_srv1';
RUN ON ANY;
$$ LANGUAGE plproxy;


为了说明这个慢的问题, 我创建2个函数, 一个是直接返回QUERY, 一个是在循环中返回.

postgres=# create or replace function f1(q text) returns setof record as $$
declare
begin
  return query execute q;
end;
$$ language plpgsql;
CREATE FUNCTION

postgres=# create or replace function f2(q text) returns setof record as $$
declare
  res record;
begin
  for res in execute q loop 
    return next res; 
  end loop; 
  return;
end;
$$ language plpgsql;
CREATE FUNCTION


直接查询1000万条记录, 返回需要2.3秒

postgres=# explain analyze select generate_series(1,10000000);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Result  (cost=0.00..5.01 rows=1000 width=0) (actual time=0.010..1599.016 rows=10000000 loops=1)
 Total runtime: 2373.759 ms
(2 rows)


通过f1函数查询需要6.2秒

postgres=# explain analyze select * from f1('select generate_series(1,10000000)') as t(id int);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Function Scan on f1 t  (cost=0.25..10.25 rows=1000 width=4) (actual time=3567.414..5397.201 rows=10000000 loops=1)
 Total runtime: 6218.298 ms
(2 rows)


通过f2查询需要8.4秒.

postgres=# explain analyze select * from f2('select generate_series(1,10000000)') as t(id int);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Function Scan on f2 t  (cost=0.25..10.25 rows=1000 width=4) (actual time=5807.632..7639.567 rows=10000000 loops=1)
 Total runtime: 8447.196 ms
(2 rows)


另外, proxy还需要经过一层网络传输, 也会拖慢查询, 包括dblink或fdw的开销. (更大的返回数据量甚至可能导致内存溢出)
并且dblink的开销(在大数据量返回的情况下)远超想象.

我们来看看使用dblink后带来的额外开销, 10000万的查询变成了17秒 : 

postgres=# create extension dblink;
CREATE EXTENSION
postgres=# SELECT dblink_connect('myconn', 'dbname=postgres');
 dblink_connect 
----------------
 OK
(1 row)
postgres=# explain analyze SELECT * FROM dblink('myconn','select * from generate_series(1,10000000)') AS t(a int);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Function Scan on dblink t  (cost=0.00..10.00 rows=1000 width=4) (actual time=14572.580..16627.163 rows=10000000 loops=1)
 Total runtime: 17449.628 ms
(2 rows)


透过dblink执行远程函数f1和f2

postgres=# explain analyze SELECT * FROM dblink('myconn','select * from f1($$select * from generate_series(1,10000000)$$) as t(a int)') AS t(a int);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Function Scan on dblink t  (cost=0.00..10.00 rows=1000 width=4) (actual time=19037.371..21097.883 rows=10000000 loops=1)
 Total runtime: 21922.628 ms
(2 rows)
postgres=# explain analyze SELECT * FROM dblink('myconn','select * from f2($$select * from generate_series(1,10000000)$$) as t(a int)') AS t(a int);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Function Scan on dblink t  (cost=0.00..10.00 rows=1000 width=4) (actual time=20984.230..23028.411 rows=10000000 loops=1)
 Total runtime: 23847.770 ms
(2 rows)


dblink是在接收到所有结果集后, 才开始返回数据的.

postgres=# \set FETCH_COUNT 1
postgres=# SELECT * FROM dblink('myconn','select * from f2($$select * from generate_series(1,10000000)$$) as t(a int)') AS t(a int);


.... 这里需要等待所有结果返回, 23秒后才开始返回第一条记录.

小数据量可能没有什么感觉

postgres=# explain analyze SELECT * FROM dblink('myconn','select * from generate_series(1,10)') AS t(a int);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Function Scan on dblink t  (cost=0.00..10.00 rows=1000 width=4) (actual time=0.371..0.373 rows=10 loops=1)
 Total runtime: 0.392 ms
(2 rows)


要让dblink使用游标, 使用dblink_open和dblink_fetch接口.

dblink_open -- opens a cursor in a remote database
dblink_fetch -- returns rows from an open cursor in a remote database


例如 : 

postgres=# SELECT dblink_connect('myconn', 'hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres');
 dblink_connect 
----------------
 OK
(1 row)
postgres=# SELECT * FROM dblink_open('myconn','cur1', 'select * from t1') ;
 dblink_open 
-------------
 OK
(1 row)
postgres=# SELECT * FROM dblink_fetch('myconn','cur1',1) as t(id int);
  id   
-------
 10909
(1 row)

postgres=# SELECT * FROM dblink_fetch('myconn','cur1',1) as t(id int);
  id   
-------
 10910
(1 row)

postgres=# SELECT * FROM dblink_fetch('myconn','cur1',1) as t(id int);
  id   
-------
 10911
(1 row)



Flag Counter
