PostgreSQL research

[摘]在linux内核中修改TCP MSS值

2013-11-15 17:48:23   查看原文>>

http://blog.csdn.net/force_eagle/article/details/4592271
http://www.netfilter.org/documentation/HOWTO/netfilter-extensions-HOWTO-4.html
http://lartc.org/howto/lartc.cookbook.mtu-mss.html

As explained above, Path MTU Discovery doesn't work as well as it should anymore. If you know for a fact that a hop somewhere in your network has a limited (<1500) MTU, you cannot rely on PMTU Discovery finding this out.

Besides MTU, there is yet another way to set the maximum packet size, the so called Maximum Segment Size. This is a field in the TCP Options part of a SYN packet.

Recent Linux kernels, and a few PPPoE drivers (notably, the excellent Roaring Penguin one), feature the possibility to 'clamp the MSS'.

The good thing about this is that by setting the MSS value, you are telling the remote side unequivocally 'do not ever try to send me packets bigger than this value'. No ICMP traffic is needed to get this to work.

The bad thing is that it's an obvious hack - it breaks 'end to end' by modifying packets. Having said that, we use this trick in many places and it works like a charm.

In order for this to work you need at least iptables-1.2.1a and Linux 2.4.3 or higher. The basic command line is:

# iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS  --clamp-mss-to-pmtu
This calculates the proper MSS for your link. If you are feeling brave, or think that you know best, you can also do something like this:

# iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 128
This sets the MSS of passing SYN packets to 128. Use this if you have VoIP with tiny packets, and huge http packets which are causing chopping in your voice calls.

MTU: Maxitum Transmission Unit 最大传输单元
MSS: Maxitum Segment Size 最大分段大小
 
MSS最大传输大小的缩写，是TCP协议里面的一个概念。
MSS就是TCP数据包每次能够传输的最大数据分段。为了达到最佳的传输效能TCP协议在建立连接的时候通常要协商双方的MSS值，这个值TCP协议在实现的时候往往用MTU值代替（需要减去IP数据包包头的大小20Bytes和TCP数据段的包头20Bytes）, 通讯双方会根据双方提供的MSS值得最小值确定为这次连接的最大MSS值。
 
而一般以太网MTU都为1500, 所以在以太网中, 往往TCP MSS为1460。
 
协商TCP MSS大小具体过程如下：
TCP client发出SYN报文，其中option选项填充的MSS字段一般为(MTU-IP头大小-TCP头大小)，同样TCP server收到SYN报文后，会发送SYN＋ACK报文应答，option选项填充的mss字段也为(MTU-IP头大小-TCP头大小)；协商双方会比较SYN和SYN+ACK报文中MSS字段大小，选择较小的MSS作为发送TCP分片的大小。
 
对于涉及PPPOE＋NAT、IPsec、L2TP、GRE等组网，通常由于报文太大需要分片，这样会降低传输速率; 所以选择一个合适的MSS对传输数据来说比较重要. linux中一般可以通过netfilter iptables设置TCP MSS来解决。
 
iptables -A FORWARD -p tcp- -tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
这条规则的目的就是改变TCP MSS以适应PMTU(Path MTU)
 
iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN- j TCPMSS --set-mss 128
设置MSS为128
 
以下是一段内核中修改TCP MSS的代码:
[cpp] view plaincopy
static inline u32 set_tcp_mss(struct sk_buff *pskb, struct tcphdr  *tcph, u16 mtu)  
{  
    u32 optlen, i;  
    u8  *op;  
    u16 newmss, oldmss;  
    u8  *mss;  
  
    if ( !tcph->syn )  
        return 0;  
  
    // 判断是否为合法tcp选项  
    if (tcph->doff*4 < sizeof(struct tcphdr))  
        return 0;  
  
    optlen = tcph->doff*4 - sizeof(struct tcphdr);  
    if (!optlen)  
        return 0;  
  
    // 扫描是否有MSS选项  
    op = ((u8*)tcph + sizeof(struct tcphdr));  
    for (i = 0; i < optlen; ) {  
        if (op[i] == TCPOPT_MSS  
            && (optlen - i) >= TCPOLEN_MSS  
            && op[i+1] == TCPOLEN_MSS) {  
            u16 mssval;  
              
            //newmss = htons( 1356 );  
            oldmss = (op[i+3] << 8) | op[i+2];  
            mssval = (op[i+2] << 8) | op[i+3];  
              
            // 是否小于MTU-( iphdr + tcphdr )  
            if ( mssval > mtu - 40 ) {  
                newmss = htons( mtu - 52 );   
            }  
            else {  
                break;  
            }  
        //   
        mss = &newmss;  
            op[i+2] = newmss & 0xFF;  
            op[i+3] = (newmss & 0xFF00) >> 8;  
            // 计算checksum  
            inet_proto_csum_replace2( &tcph->check, pskb,  
                oldmss, newmss, 0);  
              
            mssval = (op[i+2] << 8) | op[i+3];  
            dprintf( "Change TCP MSS %d to %d/n", ntohs( oldmss ), mssval );  
            break;  
              
        }  
        if (op[i] < 2)  
            i++;  
        else  
            i += op[i+1] ? : 1;  
    }  
    return 0;  
}  
windows可以通过一个工具来修改  DrTCP  http://www.dslreports.com/drtcp
