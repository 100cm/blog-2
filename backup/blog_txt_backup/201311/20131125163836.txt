PostgreSQL research

Why checkpoint no error report in recovery hot_standby PostgreSQL Database

2013-11-25 16:38:36   查看原文>>

在hot standby中执行checkpoint中不会报错, 今天在处理一个pg_xlog文件系统满了的事件中发现了这个问题, 一开始我以为这肯定不是个recovery状态的数据库.
过程如下  : 
改完wal_keep_segments后, 执行checkpoint把pg_xlog消掉一些.

postgres=# select pg_is_in_recovery();
 pg_is_in_recovery 
-------------------
 t
(1 row)
postgres=# checkpoint;


执行完后, pg_xlog文件消掉了, 也没报错.
为啥在standby中可以执行checkpoint命令呢?

看完这个代码就知道原因了, 实际上checkpoint包含了很多动作, 包括RequestCheckpoint的调用, 但是这个调用是不允许在recovery库执行的, 所以这里做了一个规避(RecoveryInProgress() ? 0 : CHECKPOINT_FORCE). 
checkpoint命令的其他调用如果没有被规避的话, 都会被正常的调用, 例如本例清除pg_xlog的动作.
src/backend/tcop/utility.c

                case T_CheckPointStmt:
                        if (!superuser())
                                ereport(ERROR,
                                                (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                                                 errmsg("must be superuser to do CHECKPOINT")));

                        /*
                         * You might think we should have a PreventCommandDuringRecovery()
                         * here, but we interpret a CHECKPOINT command during recovery as
                         * a request for a restartpoint instead. We allow this since it
                         * can be a useful way of reducing switchover time when using
                         * various forms of replication.
                         */
                        RequestCheckpoint(CHECKPOINT_IMMEDIATE | CHECKPOINT_WAIT |
                                                          (RecoveryInProgress() ? 0 : CHECKPOINT_FORCE));
                        break;



src/backend/postmaster/checkpointer.c

/*
 * RequestCheckpoint
 *              Called in backend processes to request a checkpoint
 *
 * flags is a bitwise OR of the following:
 *      CHECKPOINT_IS_SHUTDOWN: checkpoint is for database shutdown.
 *      CHECKPOINT_END_OF_RECOVERY: checkpoint is for end of WAL recovery.
 *      CHECKPOINT_IMMEDIATE: finish the checkpoint ASAP,
 *              ignoring checkpoint_completion_target parameter.
 *      CHECKPOINT_FORCE: force a checkpoint even if no XLOG activity has occurred
 *              since the last one (implied by CHECKPOINT_IS_SHUTDOWN or
 *              CHECKPOINT_END_OF_RECOVERY).
 *      CHECKPOINT_WAIT: wait for completion before returning (otherwise,
 *              just signal checkpointer to do it, and return).
 *      CHECKPOINT_CAUSE_XLOG: checkpoint is requested due to xlog filling.
 *              (This affects logging, and in particular enables CheckPointWarning.)
 */
void
RequestCheckpoint(int flags)
{
        /* use volatile pointer to prevent code rearrangement */
        volatile CheckpointerShmemStruct *cps = CheckpointerShmem;
        int                     ntries;
        int                     old_failed,
                                old_started;

        /*
         * If in a standalone backend, just do it ourselves.
         */
        if (!IsPostmasterEnvironment)
        {
                /*
                 * There's no point in doing slow checkpoints in a standalone backend,
                 * because there's no other backends the checkpoint could disrupt.
                 */
                CreateCheckPoint(flags | CHECKPOINT_IMMEDIATE);

                /*
                 * After any checkpoint, close all smgr files.  This is so we won't
                 * hang onto smgr references to deleted files indefinitely.
                 */
                smgrcloseall();

                return;
        }

        /*
         * Atomically set the request flags, and take a snapshot of the counters.
         * When we see ckpt_started > old_started, we know the flags we set here
         * have been seen by checkpointer.
         *
         * Note that we OR the flags with any existing flags, to avoid overriding
         * a "stronger" request by another backend.  The flag senses must be
         * chosen to make this work!
         */
        SpinLockAcquire(&cps->ckpt_lck);

        old_failed = cps->ckpt_failed;
        old_started = cps->ckpt_started;
        cps->ckpt_flags |= flags;

        SpinLockRelease(&cps->ckpt_lck);

        /*
         * Send signal to request checkpoint.  It's possible that the checkpointer
         * hasn't started yet, or is in process of restarting, so we will retry a
         * few times if needed.  Also, if not told to wait for the checkpoint to
         * occur, we consider failure to send the signal to be nonfatal and merely
         * LOG it.
         */
        for (ntries = 0;; ntries++)
        {
                if (CheckpointerShmem->checkpointer_pid == 0)
                {
                        if (ntries >= 20)       /* max wait 2.0 sec */
                        {
                                elog((flags & CHECKPOINT_WAIT) ? ERROR : LOG,
                                         "could not request checkpoint because checkpointer not running");
                                break;
                        }
                }
                else if (kill(CheckpointerShmem->checkpointer_pid, SIGINT) != 0)
                {
                        if (ntries >= 20)       /* max wait 2.0 sec */
                        {
                                elog((flags & CHECKPOINT_WAIT) ? ERROR : LOG,
                                         "could not signal for checkpoint: %m");
                                break;
                        }
                }
                else
                        break;                          /* signal sent successfully */

                CHECK_FOR_INTERRUPTS();
                pg_usleep(100000L);             /* wait 0.1 sec, then retry */
        }

        /*
         * If requested, wait for completion.  We detect completion according to
         * the algorithm given above.
         */
        if (flags & CHECKPOINT_WAIT)
        {
                int                     new_started,
                                        new_failed;

                /* Wait for a new checkpoint to start. */
                for (;;)
                {
                        SpinLockAcquire(&cps->ckpt_lck);
                        new_started = cps->ckpt_started;
                        SpinLockRelease(&cps->ckpt_lck);

                        if (new_started != old_started)
                                break;

                        CHECK_FOR_INTERRUPTS();
                        pg_usleep(100000L);
                }

                /*
                 * We are waiting for ckpt_done >= new_started, in a modulo sense.
                 */
                for (;;)
                {
                        int                     new_done;

                        SpinLockAcquire(&cps->ckpt_lck);
                        new_done = cps->ckpt_done;
                        new_failed = cps->ckpt_failed;
                        SpinLockRelease(&cps->ckpt_lck);

                        if (new_done - new_started >= 0)
                                break;

                        CHECK_FOR_INTERRUPTS();
                        pg_usleep(100000L);
                }

                if (new_failed != old_failed)
                        ereport(ERROR,
                                        (errmsg("checkpoint request failed"),
                                         errhint("Consult recent messages in the server log for details.")));
        }
}



