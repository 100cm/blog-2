PostgreSQL research

PostgreSQL incremental basebackup exp.

2013-11-08 22:52:11   查看原文>>

本文较老, 建议使用支持快照的文件系统如ZFS来实施基于块的增量备份.

PostgreSQL 物理文件备份一般分为$PGDATA(同时含所有表空间)的备份以及pg_xlog的归档文件的备份.
在做PITR数据恢复时会用到这两部分文件. 
一般可按照数据库的xlog量以及数据库的io能力做好备份策略.
例如 : 
方案一 :
1. 每周一次全备$PGDATA(同时含所有表空间).
2. 以及pg_xlog的归档文件保存.

方案二 : 
1. 使用rsync做全备$PGDATA(同时含所有表空间). 如果基础数据非常庞大的话, 可以使用rsync的增量传输功能, 减少网络拷贝量.
2. 以及pg_xlog的归档文件保存.

方案三 : 
1. 对于逻辑上不会变化的表, 在freeze后, 可以封存. 只需要备份一次即可. 以此来减少备份量也是可以的.
freeze后, 所有的xid都会更改为frozenXid.(2)

方案三的操作流程,
1. 首先要在业务层面划分好不会变化的表 
2. 对这些表做vacuum freeze处理, 同时执行checkpoint, 将脏块刷出缓存.
3. 找出这些表对应的filenode
4. 备份这些filenode, 同时记录好备份信息.
5. 下次做全量备份时, 排除这些filenode.
6. 还原时记得还原这些filenode.

找出这些表对应的filenode可以使用以下函数 : 

create or replace function get_frozen_path(i_nsp name, i_relname name) returns setof text as $$
declare
  v_path text;
  v_dir text;
  v_filenode text;
  v_regclass regclass;
  v_filename text;
  v_idx_oid oid;
begin
  -- execute 'vacuum freeze '||i_nsp||'.'||i_relname;
  -- table
  v_regclass := (i_nsp||'.'||i_relname)::regclass;
  v_path := pg_relation_filepath(v_regclass);
  v_dir := substring(v_path, '(.*/)[0-9]+$');
  v_filenode := substring(v_path, '.*/([0-9]+)$');

  for v_filename in select * from pg_ls_dir(v_dir) as t(ab) where ab ~ ('^'||v_filenode) and ab !~ ('^'||v_filenode||'[0-9]') order by 1 loop
    raise notice '%', v_dir||v_filename;
  end loop;
  -- table toast
  select reltoastrelid::regclass into v_regclass from pg_class where relnamespace=(select oid from pg_namespace where nspname=i_nsp) and relname=i_relname;
  v_path := pg_relation_filepath(v_regclass);
  v_dir := substring(v_path, '(.*/)[0-9]+$');
  v_filenode := substring(v_path, '.*/([0-9]+)$');

  for v_filename in select * from pg_ls_dir(v_dir) as t(ab) where ab ~ ('^'||v_filenode) and ab !~ ('^'||v_filenode||'[0-9]') order by 1 loop
    raise notice '%', v_dir||v_filename;
  end loop;

  select reltoastidxid::regclass into v_regclass from pg_class where relnamespace=(select oid from pg_namespace where nspname=i_nsp) and relname=i_relname;
  v_path := pg_relation_filepath(v_regclass);
  v_dir := substring(v_path, '(.*/)[0-9]+$');
  v_filenode := substring(v_path, '.*/([0-9]+)$');

  for v_filename in select * from pg_ls_dir(v_dir) as t(ab) where ab ~ ('^'||v_filenode) and ab !~ ('^'||v_filenode||'[0-9]') order by 1 loop
    raise notice '%', v_dir||v_filename;
  end loop;

  -- index
  for v_idx_oid in select indexrelid from pg_index where indrelid=(i_nsp||'.'||i_relname)::regclass loop
  -- table
  v_regclass := v_idx_oid;
  v_path := pg_relation_filepath(v_regclass);
  v_dir := substring(v_path, '(.*/)[0-9]+$');
  v_filenode := substring(v_path, '.*/([0-9]+)$');

  for v_filename in select * from pg_ls_dir(v_dir) as t(ab) where ab ~ ('^'||v_filenode) and ab !~ ('^'||v_filenode||'[0-9]') order by 1 loop
    raise notice '%', v_dir||v_filename;
  end loop;
  -- table toast
  select reltoastrelid::regclass into v_regclass from pg_class where oid=v_idx_oid;
  v_path := pg_relation_filepath(v_regclass);
  v_dir := substring(v_path, '(.*/)[0-9]+$');
  v_filenode := substring(v_path, '.*/([0-9]+)$');

  for v_filename in select * from pg_ls_dir(v_dir) as t(ab) where ab ~ ('^'||v_filenode) and ab !~ ('^'||v_filenode||'[0-9]') order by 1 loop
    raise notice '%', v_dir||v_filename;
  end loop;

  select reltoastidxid::regclass into v_regclass from pg_class where oid=v_idx_oid;
  v_path := pg_relation_filepath(v_regclass);
  v_dir := substring(v_path, '(.*/)[0-9]+$');
  v_filenode := substring(v_path, '.*/([0-9]+)$');

  for v_filename in select * from pg_ls_dir(v_dir) as t(ab) where ab ~ ('^'||v_filenode) and ab !~ ('^'||v_filenode||'[0-9]') order by 1 loop
    raise notice '%', v_dir||v_filename;
  end loop;
  end loop;
end
$$ language plpgsql strict;


例如 : 

digoal=# \dt+ t
                     List of relations
  Schema  | Name | Type  |  Owner   |  Size   | Description 
----------+------+-------+----------+---------+-------------
 postgres | t    | table | postgres | 8475 MB | 
(1 row)

digoal=# \di+
                           List of relations
  Schema  |   Name   | Type  |  Owner   | Table |  Size   | Description 
----------+----------+-------+----------+-------+---------+-------------
 postgres | idx_t_c1 | index | postgres | t     | 1099 MB | 
 postgres | idx_t_c2 | index | postgres | t     | 9661 MB | 
(2 rows)

digoal=# \d t
           Unlogged table "postgres.t"
 Column |            Type             | Modifiers 
--------+-----------------------------+-----------
 id     | integer                     | 
 c1     | text                        | 
 c2     | text                        | 
 c3     | text                        | 
 c4     | text                        | 
 c5     | text                        | 
 c6     | text                        | 
 c7     | text                        | 
 c8     | text                        | 
 c9     | text                        | 
 c10    | text                        | 
 c11    | text                        | 
 c12    | text                        | 
 c13    | timestamp without time zone | 
Indexes:
    "idx_t_c1" btree (c1)
    "idx_t_c2" btree (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12)

digoal=# select get_frozen_path('postgres','t');
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447.1
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447.2
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447.3
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447.4
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447.5
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447.6
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447.7
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447.8
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447_fsm
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447_init
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66447_vm
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66448
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.1
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.2
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.3
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.4
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.5
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.6
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.7
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.8
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546.9
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66546_init
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66545
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66545.1
NOTICE:  pg_tblspc/66422/PG_9.3_201306121/16384/66545_init
 get_frozen_path 
-----------------
(0 rows)


这些就是涉及的filenode, 一次备份即可.

