PostgreSQL research

PostgreSQL why use bitmap index scan on Mechanical DISK (not index scan)

2013-11-27 16:57:07   查看原文>>

在上一篇文章中讲了一下explain cost常量的校准, 校准的目的是为了让explain输出的cost和实际的执行时间匹配. 
感兴趣的童鞋可以参考 : 
http://blog.163.com/digoal@126/blog/static/163877040201310255717379/
本文要讲一讲PostgreSQL的bitmap index scan.
通常索引的用法是index scan, 这种tuple fetch方法是按照索引的顺序来获取heap table中的实际数据的.

digoal=# create table tbl(id int, info text, crt_time timestamp);
CREATE TABLE
digoal=# insert into tbl select trunc(random()*1000000), md5(random()::text), clock_timestamp() from generate_series(1,1000000);
INSERT 0 1000000
digoal=# create index idx_tbl_id on tbl(id);
CREATE INDEX
digoal=# explain analyze select ctid,* from tbl where id<50;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_id on tbl  (cost=0.42..46.19 rows=44 width=51) (actual time=0.010..0.138 rows=66 loops=1)
   Index Cond: (id < 50)
 Total runtime: 0.179 ms
(3 rows)


实际输出的数据也是索引中组织的顺序(id的顺序), 但是这些记录在HEAP表中的顺序又是什么样的呢? 来看一下这个SQL语句的输出.

digoal=# select ctid,* from tbl where id<50;
    ctid    | id |               info               |          crt_time          
------------+----+----------------------------------+----------------------------
 (6746,88)  |  0 | 9d0bd1f9e2a2dec268176a1c30d35d91 | 2013-11-27 16:16:35.104228
 (3596,103) |  0 | 8c9d231a02e9246494420502febdba98 | 2013-11-27 16:16:30.143426
 (7127,2)   |  1 | d380eebc0b204806a5561f88eac60c4c | 2013-11-27 16:16:35.710574
 (4182,57)  |  1 | 03512db2f998d2194704aa5841629800 | 2013-11-27 16:16:31.055188
 (2460,9)   |  3 | 2a18e2f0fea7edeca9eef178772a1443 | 2013-11-27 16:16:28.410977
 (1182,27)  |  3 | ad42e49c9dd9523c5cd09cd905f9bc6a | 2013-11-27 16:16:26.526868
 (2446,87)  |  5 | 3dc28dcdbe1f186ffee64167c39e4ac6 | 2013-11-27 16:16:28.391088
 (2186,88)  |  5 | d3e88acd04ebf1eee4f2ad9e027565e7 | 2013-11-27 16:16:28.000452
 (758,42)   |  6 | cf94371c57f37d8101578731cbd17fe5 | 2013-11-27 16:16:25.922565
 (8156,89)  |  7 | f98f8af894439a5a10c7b30cac5b55d6 | 2013-11-27 16:16:37.371522
 (7540,67)  |  7 | c699c7f1dc2e3f4641f107507a3f65c2 | 2013-11-27 16:16:36.377514
 (4535,61)  |  7 | 265b6ed28a52781effa88f131cd0760c | 2013-11-27 16:16:31.60564
 (3776,97)  |  8 | 19587be3f7c6f144a96104092054c24f | 2013-11-27 16:16:30.420263
 (6820,34)  |  9 | 45fd7be0d697474fb0a4fd06f7adbc66 | 2013-11-27 16:16:35.220746
 (4917,43)  |  9 | c5167d758c4756be4d5067e962e6ab35 | 2013-11-27 16:16:32.208947
 (4546,62)  |  9 | 8c84da762f082af53c9f6485997d483b | 2013-11-27 16:16:31.622895
 (321,47)   |  9 | 9862a95b4097dbd9cdc0604f4d30d626 | 2013-11-27 16:16:25.333253
 (6515,94)  | 10 | 60b58e0c1893470b5820b24b27c435aa | 2013-11-27 16:16:34.731281
 (1781,22)  | 11 | 27336b5bb9cb707f148f95104a8a37e1 | 2013-11-27 16:16:27.39882
 (549,92)   | 11 | 71176a9fe423190a1016f7fbd88d793e | 2013-11-27 16:16:25.640157
 (6494,41)  | 12 | 6949d23d991c96029f2aab78aad1a996 | 2013-11-27 16:16:34.69169
 (6233,61)  | 12 | 1d9c712efffb3e46f7c2978237ebffc4 | 2013-11-27 16:16:34.278794
 (5093,54)  | 13 | d32a1c91c1f0df37eeed380858056da9 | 2013-11-27 16:16:32.483506
 (8779,52)  | 15 | d068fe97b4ae428067fac78f65a60aaf | 2013-11-27 16:16:38.377479
 (697,29)   | 15 | eb3877f0c80ab774752a7f01b9f92e16 | 2013-11-27 16:16:25.840375
 (7848,47)  | 17 | 2eab244114ea589567b67019dddcc80f | 2013-11-27 16:16:36.870001
 (6276,67)  | 18 | 90a8aea4f33d2392227d201e7be7f454 | 2013-11-27 16:16:34.346321
 (4734,24)  | 18 | 7683e2089ae935530ec7522e5b9fe659 | 2013-11-27 16:16:31.917192
 (619,49)   | 20 | 28bf03bb27cfab74b9d82658f75065d6 | 2013-11-27 16:16:25.735401
 (5810,71)  | 21 | f7d7d1d755dca861bf0b51d614a159b5 | 2013-11-27 16:16:33.612123
 (2910,82)  | 21 | 48d6ea08185aa4931324ab2a480e2514 | 2013-11-27 16:16:29.092565
 (2175,99)  | 21 | 26a9c1a2b4214dd5ea9889f37c683880 | 2013-11-27 16:16:27.984316
 (694,63)   | 21 | 161e4e948613d1dafbcdcfb31140625e | 2013-11-27 16:16:25.836873
 (5144,100) | 22 | 578fbc1a322b6352c63b86160d91b378 | 2013-11-27 16:16:32.563874
 (595,72)   | 22 | d437a5d81fbb1818caced949bee741cc | 2013-11-27 16:16:25.702936
 (9149,93)  | 26 | a4e4cba8e85ec775142530c4d96c4dc3 | 2013-11-27 16:16:38.989989
 (4682,71)  | 27 | 5b4b5628e93488b3bc1933e0dbff8e22 | 2013-11-27 16:16:31.837029
 (7123,80)  | 31 | 2a2ac461aebc4bc58378ae20d258fabd | 2013-11-27 16:16:35.705067
 (4824,30)  | 31 | c68ed527cac804d4ebdf4a463657dfcc | 2013-11-27 16:16:32.058964
 (6158,70)  | 32 | c718372be46a253a29881e9585f921dd | 2013-11-27 16:16:34.160599
 (3765,30)  | 32 | 00a45375579e1f43ceb7d8a873eba3f9 | 2013-11-27 16:16:30.402245
 (9132,81)  | 33 | fbde79db78dffd8a072c363d9806bdcd | 2013-11-27 16:16:38.961699
 (7915,60)  | 33 | 25c1cbef46a52e498bead19224978a82 | 2013-11-27 16:16:36.978633
 (2641,93)  | 33 | 73a1563152d4efc5339418d2522e3063 | 2013-11-27 16:16:28.688222
 (6354,72)  | 35 | 5c7dfc6b8a33d87e398230ea378636b6 | 2013-11-27 16:16:34.46999
 (398,15)   | 35 | 080b1511185738c595027bc7e577b103 | 2013-11-27 16:16:25.434516
 (7941,95)  | 36 | 5be05a35a63de2182b6f7800bcc62fe5 | 2013-11-27 16:16:37.020692
 (6795,34)  | 38 | 8badab36f59646f528ad8609040f4f6a | 2013-11-27 16:16:35.180702
 (6674,29)  | 38 | e47872e6791bb8435d03ae447e539378 | 2013-11-27 16:16:34.988681
 (6476,103) | 39 | 5fa14162be8c79a19b8c1399dff44f73 | 2013-11-27 16:16:34.663475
 (6765,88)  | 40 | 6fb6e00224c36b8bdb596e3f0771c95a | 2013-11-27 16:16:35.134123
 (3008,16)  | 40 | 10bb08a261eeb0d2a10710cd4e433ac8 | 2013-11-27 16:16:29.23959
 (6939,59)  | 43 | 89d97fdd7668d4660e07e83cf140ac15 | 2013-11-27 16:16:35.411964
 (5734,68)  | 44 | e031bd41748d4ffb453b284b2b4da980 | 2013-11-27 16:16:33.492805
 (5673,74)  | 44 | 6d51ff56367a3f5697625c423611f103 | 2013-11-27 16:16:33.393517
 (4502,80)  | 44 | 65c6eb557460a849071441dc2143e1d7 | 2013-11-27 16:16:31.553703
 (2940,31)  | 44 | 052dba2a21dec816bf7f5da9aa9ce207 | 2013-11-27 16:16:29.137311
 (1718,41)  | 44 | 5f4c9f63cf4e402411eb5f961caa7a74 | 2013-11-27 16:16:27.30134
 (576,3)    | 44 | b5a10e2e82e3c7ec47dca7746683e7ec | 2013-11-27 16:16:25.675869
 (8775,30)  | 45 | b653f3553f546b833d9ab0fb6ad7226d | 2013-11-27 16:16:38.370898
 (8150,98)  | 45 | 275044af9ff53b2d6762c9521ccba083 | 2013-11-27 16:16:37.361846
 (2168,55)  | 45 | 9514167ea164af19a21030ca54131978 | 2013-11-27 16:16:27.973063
 (782,55)   | 45 | a1cb44ec4c1e21a6ec66e5ee598d5b1a | 2013-11-27 16:16:25.954953
 (6549,77)  | 48 | 5199ff4dad52eec90396b2e818adb2bd | 2013-11-27 16:16:34.785146
 (2265,43)  | 48 | 6379ccacebcd0c44fa6482ba528cf987 | 2013-11-27 16:16:28.118353
 (3926,68)  | 49 | 6a923f5cd98b6400f54da62b136123dd | 2013-11-27 16:16:30.651638
(66 rows)


从输出结果我们可以看出, HEAP表中存储的顺序和ID的排序完全无关, 对于机械盘, 随机块扫描比连续的数据块扫描要慢很多, 这在我以前写的一篇 BLOG中使用systemtap跟踪过, 数据可以通过柱状图直观的观察到.
http://blog.163.com/digoal@126/blog/static/163877040201310255717379/
那么我们要在这个SQL中优化IO响应怎么办呢? PostgreSQL提供了bitmap index scan这种tuple fetch方法.
bitmap index scan中, PostgreSQL从索引中取出itempoint中的blocknum, 这些blocknum排序后转到bitmap heap scan. 因为从bitmap index scan中得到的部署itempoint , 而是itempoint中的blocknum, 所以在bitmap heap scan时只有blocknum的信息, 而不是精准的itempoint, 总共需要两次check (一次发生在bitmap index scan, 另一次发生在bitmap heap
scan).
如下, 将random_page_cost调整为40, 这样的话, index scan的成本就高了. PostgreSQL会选择bitmap index scan来降低random scan带来的开销.

digoal=# set random_page_cost=40;
SET
digoal=# explain analyze select ctid,* from tbl where id<50;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on tbl  (cost=40.77..1683.57 rows=44 width=51) (actual time=0.043..0.189 rows=66 loops=1)
   Recheck Cond: (id < 50)  -- 二次CHECK, 因为从bitmap index scan只提供块的信息,没有item offset
   ->  Bitmap Index Scan on idx_tbl_id  (cost=0.00..40.75 rows=44 width=0) (actual time=0.021..0.021 rows=66 loops=1)
         Index Cond: (id < 50)  -- 一次CHECK
 Total runtime: 0.230 ms
(5 rows)


通过bitmap scan的输出如下, 我们看到输出顺序以及按照blocknum排序了.

digoal=# select ctid,* from tbl where id<50;
    ctid    | id |               info               |          crt_time          
------------+----+----------------------------------+----------------------------
 (321,47)   |  9 | 9862a95b4097dbd9cdc0604f4d30d626 | 2013-11-27 16:16:25.333253
 (398,15)   | 35 | 080b1511185738c595027bc7e577b103 | 2013-11-27 16:16:25.434516
 (549,92)   | 11 | 71176a9fe423190a1016f7fbd88d793e | 2013-11-27 16:16:25.640157
 (576,3)    | 44 | b5a10e2e82e3c7ec47dca7746683e7ec | 2013-11-27 16:16:25.675869
 (595,72)   | 22 | d437a5d81fbb1818caced949bee741cc | 2013-11-27 16:16:25.702936
 (619,49)   | 20 | 28bf03bb27cfab74b9d82658f75065d6 | 2013-11-27 16:16:25.735401
 (694,63)   | 21 | 161e4e948613d1dafbcdcfb31140625e | 2013-11-27 16:16:25.836873
 (697,29)   | 15 | eb3877f0c80ab774752a7f01b9f92e16 | 2013-11-27 16:16:25.840375
 (758,42)   |  6 | cf94371c57f37d8101578731cbd17fe5 | 2013-11-27 16:16:25.922565
 (782,55)   | 45 | a1cb44ec4c1e21a6ec66e5ee598d5b1a | 2013-11-27 16:16:25.954953
 (1182,27)  |  3 | ad42e49c9dd9523c5cd09cd905f9bc6a | 2013-11-27 16:16:26.526868
 (1718,41)  | 44 | 5f4c9f63cf4e402411eb5f961caa7a74 | 2013-11-27 16:16:27.30134
 (1781,22)  | 11 | 27336b5bb9cb707f148f95104a8a37e1 | 2013-11-27 16:16:27.39882
 (2168,55)  | 45 | 9514167ea164af19a21030ca54131978 | 2013-11-27 16:16:27.973063
 (2175,99)  | 21 | 26a9c1a2b4214dd5ea9889f37c683880 | 2013-11-27 16:16:27.984316
 (2186,88)  |  5 | d3e88acd04ebf1eee4f2ad9e027565e7 | 2013-11-27 16:16:28.000452
 (2265,43)  | 48 | 6379ccacebcd0c44fa6482ba528cf987 | 2013-11-27 16:16:28.118353
 (2446,87)  |  5 | 3dc28dcdbe1f186ffee64167c39e4ac6 | 2013-11-27 16:16:28.391088
 (2460,9)   |  3 | 2a18e2f0fea7edeca9eef178772a1443 | 2013-11-27 16:16:28.410977
 (2641,93)  | 33 | 73a1563152d4efc5339418d2522e3063 | 2013-11-27 16:16:28.688222
 (2910,82)  | 21 | 48d6ea08185aa4931324ab2a480e2514 | 2013-11-27 16:16:29.092565
 (2940,31)  | 44 | 052dba2a21dec816bf7f5da9aa9ce207 | 2013-11-27 16:16:29.137311
 (3008,16)  | 40 | 10bb08a261eeb0d2a10710cd4e433ac8 | 2013-11-27 16:16:29.23959
 (3596,103) |  0 | 8c9d231a02e9246494420502febdba98 | 2013-11-27 16:16:30.143426
 (3765,30)  | 32 | 00a45375579e1f43ceb7d8a873eba3f9 | 2013-11-27 16:16:30.402245
 (3776,97)  |  8 | 19587be3f7c6f144a96104092054c24f | 2013-11-27 16:16:30.420263
 (3926,68)  | 49 | 6a923f5cd98b6400f54da62b136123dd | 2013-11-27 16:16:30.651638
 (4182,57)  |  1 | 03512db2f998d2194704aa5841629800 | 2013-11-27 16:16:31.055188
 (4502,80)  | 44 | 65c6eb557460a849071441dc2143e1d7 | 2013-11-27 16:16:31.553703
 (4535,61)  |  7 | 265b6ed28a52781effa88f131cd0760c | 2013-11-27 16:16:31.60564
 (4546,62)  |  9 | 8c84da762f082af53c9f6485997d483b | 2013-11-27 16:16:31.622895
 (4682,71)  | 27 | 5b4b5628e93488b3bc1933e0dbff8e22 | 2013-11-27 16:16:31.837029
 (4734,24)  | 18 | 7683e2089ae935530ec7522e5b9fe659 | 2013-11-27 16:16:31.917192
 (4824,30)  | 31 | c68ed527cac804d4ebdf4a463657dfcc | 2013-11-27 16:16:32.058964
 (4917,43)  |  9 | c5167d758c4756be4d5067e962e6ab35 | 2013-11-27 16:16:32.208947
 (5093,54)  | 13 | d32a1c91c1f0df37eeed380858056da9 | 2013-11-27 16:16:32.483506
 (5144,100) | 22 | 578fbc1a322b6352c63b86160d91b378 | 2013-11-27 16:16:32.563874
 (5673,74)  | 44 | 6d51ff56367a3f5697625c423611f103 | 2013-11-27 16:16:33.393517
 (5734,68)  | 44 | e031bd41748d4ffb453b284b2b4da980 | 2013-11-27 16:16:33.492805
 (5810,71)  | 21 | f7d7d1d755dca861bf0b51d614a159b5 | 2013-11-27 16:16:33.612123
 (6158,70)  | 32 | c718372be46a253a29881e9585f921dd | 2013-11-27 16:16:34.160599
 (6233,61)  | 12 | 1d9c712efffb3e46f7c2978237ebffc4 | 2013-11-27 16:16:34.278794
 (6276,67)  | 18 | 90a8aea4f33d2392227d201e7be7f454 | 2013-11-27 16:16:34.346321
 (6354,72)  | 35 | 5c7dfc6b8a33d87e398230ea378636b6 | 2013-11-27 16:16:34.46999
 (6476,103) | 39 | 5fa14162be8c79a19b8c1399dff44f73 | 2013-11-27 16:16:34.663475
 (6494,41)  | 12 | 6949d23d991c96029f2aab78aad1a996 | 2013-11-27 16:16:34.69169
 (6515,94)  | 10 | 60b58e0c1893470b5820b24b27c435aa | 2013-11-27 16:16:34.731281
 (6549,77)  | 48 | 5199ff4dad52eec90396b2e818adb2bd | 2013-11-27 16:16:34.785146
 (6674,29)  | 38 | e47872e6791bb8435d03ae447e539378 | 2013-11-27 16:16:34.988681
 (6746,88)  |  0 | 9d0bd1f9e2a2dec268176a1c30d35d91 | 2013-11-27 16:16:35.104228
 (6765,88)  | 40 | 6fb6e00224c36b8bdb596e3f0771c95a | 2013-11-27 16:16:35.134123
 (6795,34)  | 38 | 8badab36f59646f528ad8609040f4f6a | 2013-11-27 16:16:35.180702
 (6820,34)  |  9 | 45fd7be0d697474fb0a4fd06f7adbc66 | 2013-11-27 16:16:35.220746
 (6939,59)  | 43 | 89d97fdd7668d4660e07e83cf140ac15 | 2013-11-27 16:16:35.411964
 (7123,80)  | 31 | 2a2ac461aebc4bc58378ae20d258fabd | 2013-11-27 16:16:35.705067
 (7127,2)   |  1 | d380eebc0b204806a5561f88eac60c4c | 2013-11-27 16:16:35.710574
 (7540,67)  |  7 | c699c7f1dc2e3f4641f107507a3f65c2 | 2013-11-27 16:16:36.377514
 (7848,47)  | 17 | 2eab244114ea589567b67019dddcc80f | 2013-11-27 16:16:36.870001
 (7915,60)  | 33 | 25c1cbef46a52e498bead19224978a82 | 2013-11-27 16:16:36.978633
 (7941,95)  | 36 | 5be05a35a63de2182b6f7800bcc62fe5 | 2013-11-27 16:16:37.020692
 (8150,98)  | 45 | 275044af9ff53b2d6762c9521ccba083 | 2013-11-27 16:16:37.361846
 (8156,89)  |  7 | f98f8af894439a5a10c7b30cac5b55d6 | 2013-11-27 16:16:37.371522
 (8775,30)  | 45 | b653f3553f546b833d9ab0fb6ad7226d | 2013-11-27 16:16:38.370898
 (8779,52)  | 15 | d068fe97b4ae428067fac78f65a60aaf | 2013-11-27 16:16:38.377479
 (9132,81)  | 33 | fbde79db78dffd8a072c363d9806bdcd | 2013-11-27 16:16:38.961699
 (9149,93)  | 26 | a4e4cba8e85ec775142530c4d96c4dc3 | 2013-11-27 16:16:38.989989
(66 rows)


对于非机械盘, 或者这部分数据已经在OS CACHE 或者PostgreSQL shared buffer中的情况, 使用bitmap scan则毫无用处. 反而会增加block排序以及多次check带来的cpu operator开销.
另外需要提一下, 对于机械盘, 如果是经常有按照某列做范围查询的需求, 可以对这个表根据这个列上的索引做一下cluster. (还需要注意cluster是DDL操作, 会带来排他锁和对这个表的重组, 导致所有索引需要重建, 推荐DML较少的大表在有此类需求的情况下可以考虑) . 
做完cluster后, heap table中的存储顺序则与这个列的索引排序一致了. 

digoal=# cluster tbl USING idx_tbl_id ;
CLUSTER
digoal=# set enable_bitmapscan=off;
SET
digoal=# select ctid,* from tbl where id<50;
  ctid  | id |               info               |          crt_time          
--------+----+----------------------------------+----------------------------
 (0,1)  |  0 | 8c9d231a02e9246494420502febdba98 | 2013-11-27 16:16:30.143426
 (0,2)  |  0 | 9d0bd1f9e2a2dec268176a1c30d35d91 | 2013-11-27 16:16:35.104228
 (0,3)  |  1 | d380eebc0b204806a5561f88eac60c4c | 2013-11-27 16:16:35.710574
 (0,4)  |  1 | 03512db2f998d2194704aa5841629800 | 2013-11-27 16:16:31.055188
 (0,5)  |  3 | 2a18e2f0fea7edeca9eef178772a1443 | 2013-11-27 16:16:28.410977
 (0,6)  |  3 | ad42e49c9dd9523c5cd09cd905f9bc6a | 2013-11-27 16:16:26.526868
 (0,7)  |  5 | d3e88acd04ebf1eee4f2ad9e027565e7 | 2013-11-27 16:16:28.000452
 (0,8)  |  5 | 3dc28dcdbe1f186ffee64167c39e4ac6 | 2013-11-27 16:16:28.391088
 (0,9)  |  6 | cf94371c57f37d8101578731cbd17fe5 | 2013-11-27 16:16:25.922565
 (0,10) |  7 | 265b6ed28a52781effa88f131cd0760c | 2013-11-27 16:16:31.60564
 (0,11) |  7 | f98f8af894439a5a10c7b30cac5b55d6 | 2013-11-27 16:16:37.371522
 (0,12) |  7 | c699c7f1dc2e3f4641f107507a3f65c2 | 2013-11-27 16:16:36.377514
 (0,13) |  8 | 19587be3f7c6f144a96104092054c24f | 2013-11-27 16:16:30.420263
 (0,14) |  9 | 9862a95b4097dbd9cdc0604f4d30d626 | 2013-11-27 16:16:25.333253
 (0,15) |  9 | 8c84da762f082af53c9f6485997d483b | 2013-11-27 16:16:31.622895
 (0,16) |  9 | c5167d758c4756be4d5067e962e6ab35 | 2013-11-27 16:16:32.208947
 (0,17) |  9 | 45fd7be0d697474fb0a4fd06f7adbc66 | 2013-11-27 16:16:35.220746
 (0,18) | 10 | 60b58e0c1893470b5820b24b27c435aa | 2013-11-27 16:16:34.731281
 (0,19) | 11 | 27336b5bb9cb707f148f95104a8a37e1 | 2013-11-27 16:16:27.39882
 (0,20) | 11 | 71176a9fe423190a1016f7fbd88d793e | 2013-11-27 16:16:25.640157
 (0,21) | 12 | 1d9c712efffb3e46f7c2978237ebffc4 | 2013-11-27 16:16:34.278794
 (0,22) | 12 | 6949d23d991c96029f2aab78aad1a996 | 2013-11-27 16:16:34.69169
 (0,23) | 13 | d32a1c91c1f0df37eeed380858056da9 | 2013-11-27 16:16:32.483506
 (0,24) | 15 | d068fe97b4ae428067fac78f65a60aaf | 2013-11-27 16:16:38.377479
 (0,25) | 15 | eb3877f0c80ab774752a7f01b9f92e16 | 2013-11-27 16:16:25.840375
 (0,26) | 17 | 2eab244114ea589567b67019dddcc80f | 2013-11-27 16:16:36.870001
 (0,27) | 18 | 7683e2089ae935530ec7522e5b9fe659 | 2013-11-27 16:16:31.917192
 (0,28) | 18 | 90a8aea4f33d2392227d201e7be7f454 | 2013-11-27 16:16:34.346321
 (0,29) | 20 | 28bf03bb27cfab74b9d82658f75065d6 | 2013-11-27 16:16:25.735401
 (0,30) | 21 | 26a9c1a2b4214dd5ea9889f37c683880 | 2013-11-27 16:16:27.984316
 (0,31) | 21 | f7d7d1d755dca861bf0b51d614a159b5 | 2013-11-27 16:16:33.612123
 (0,32) | 21 | 161e4e948613d1dafbcdcfb31140625e | 2013-11-27 16:16:25.836873
 (0,33) | 21 | 48d6ea08185aa4931324ab2a480e2514 | 2013-11-27 16:16:29.092565
 (0,34) | 22 | d437a5d81fbb1818caced949bee741cc | 2013-11-27 16:16:25.702936
 (0,35) | 22 | 578fbc1a322b6352c63b86160d91b378 | 2013-11-27 16:16:32.563874
 (0,36) | 26 | a4e4cba8e85ec775142530c4d96c4dc3 | 2013-11-27 16:16:38.989989
 (0,37) | 27 | 5b4b5628e93488b3bc1933e0dbff8e22 | 2013-11-27 16:16:31.837029
 (0,38) | 31 | c68ed527cac804d4ebdf4a463657dfcc | 2013-11-27 16:16:32.058964
 (0,39) | 31 | 2a2ac461aebc4bc58378ae20d258fabd | 2013-11-27 16:16:35.705067
 (0,40) | 32 | c718372be46a253a29881e9585f921dd | 2013-11-27 16:16:34.160599
 (0,41) | 32 | 00a45375579e1f43ceb7d8a873eba3f9 | 2013-11-27 16:16:30.402245
 (0,42) | 33 | 73a1563152d4efc5339418d2522e3063 | 2013-11-27 16:16:28.688222
 (0,43) | 33 | fbde79db78dffd8a072c363d9806bdcd | 2013-11-27 16:16:38.961699
 (0,44) | 33 | 25c1cbef46a52e498bead19224978a82 | 2013-11-27 16:16:36.978633
 (0,45) | 35 | 5c7dfc6b8a33d87e398230ea378636b6 | 2013-11-27 16:16:34.46999
 (0,46) | 35 | 080b1511185738c595027bc7e577b103 | 2013-11-27 16:16:25.434516
 (0,47) | 36 | 5be05a35a63de2182b6f7800bcc62fe5 | 2013-11-27 16:16:37.020692
 (0,48) | 38 | e47872e6791bb8435d03ae447e539378 | 2013-11-27 16:16:34.988681
 (0,49) | 38 | 8badab36f59646f528ad8609040f4f6a | 2013-11-27 16:16:35.180702
 (0,50) | 39 | 5fa14162be8c79a19b8c1399dff44f73 | 2013-11-27 16:16:34.663475
 (0,51) | 40 | 6fb6e00224c36b8bdb596e3f0771c95a | 2013-11-27 16:16:35.134123
 (0,52) | 40 | 10bb08a261eeb0d2a10710cd4e433ac8 | 2013-11-27 16:16:29.23959
 (0,53) | 43 | 89d97fdd7668d4660e07e83cf140ac15 | 2013-11-27 16:16:35.411964
 (0,54) | 44 | 65c6eb557460a849071441dc2143e1d7 | 2013-11-27 16:16:31.553703
 (0,55) | 44 | 052dba2a21dec816bf7f5da9aa9ce207 | 2013-11-27 16:16:29.137311
 (0,56) | 44 | 6d51ff56367a3f5697625c423611f103 | 2013-11-27 16:16:33.393517
 (0,57) | 44 | e031bd41748d4ffb453b284b2b4da980 | 2013-11-27 16:16:33.492805
 (0,58) | 44 | 5f4c9f63cf4e402411eb5f961caa7a74 | 2013-11-27 16:16:27.30134
 (0,59) | 44 | b5a10e2e82e3c7ec47dca7746683e7ec | 2013-11-27 16:16:25.675869
 (0,60) | 45 | b653f3553f546b833d9ab0fb6ad7226d | 2013-11-27 16:16:38.370898
 (0,61) | 45 | 9514167ea164af19a21030ca54131978 | 2013-11-27 16:16:27.973063
 (0,62) | 45 | a1cb44ec4c1e21a6ec66e5ee598d5b1a | 2013-11-27 16:16:25.954953
 (0,63) | 45 | 275044af9ff53b2d6762c9521ccba083 | 2013-11-27 16:16:37.361846
 (0,64) | 48 | 5199ff4dad52eec90396b2e818adb2bd | 2013-11-27 16:16:34.785146
 (0,65) | 48 | 6379ccacebcd0c44fa6482ba528cf987 | 2013-11-27 16:16:28.118353
 (0,66) | 49 | 6a923f5cd98b6400f54da62b136123dd | 2013-11-27 16:16:30.651638
(66 rows)



[参考]
1. src/backend/commands/explain.c

/*
 * ExplainNode -
 *        Appends a description of a plan tree to es->str
 *
 * planstate points to the executor state node for the current plan node.
 * We need to work from a PlanState node, not just a Plan node, in order to
 * get at the instrumentation data (if any) as well as the list of subplans.
 *
 * ancestors is a list of parent PlanState nodes, most-closely-nested first.
 * These are needed in order to interpret PARAM_EXEC Params.
 *
 * relationship describes the relationship of this plan node to its parent
 * (eg, "Outer", "Inner"); it can be null at top level.  plan_name is an
 * optional name to be attached to the node.
 *
 * In text format, es->indent is controlled in this function since we only
 * want it to change at plan-node boundaries.  In non-text formats, es->indent
 * corresponds to the nesting depth of logical output groups, and therefore
 * is controlled by ExplainOpenGroup/ExplainCloseGroup.
 */
static void
ExplainNode(PlanState *planstate, List *ancestors,
                        const char *relationship, const char *plan_name,
                        ExplainState *es)
{
...略
                case T_BitmapHeapScan:
                        show_scan_qual(((BitmapHeapScan *) plan)->bitmapqualorig,
                                                   "Recheck Cond", planstate, ancestors, es);
                        if (((BitmapHeapScan *) plan)->bitmapqualorig)
                                show_instrumentation_count("Rows Removed by Index Recheck", 2,
                                                                                   planstate, es);
                        /* FALL THRU */
...略


2. src/backend/nodes/tidbitmap.c

 * tidbitmap.c
 *        PostgreSQL tuple-id (TID) bitmap package
 *
 * This module provides bitmap data structures that are spiritually
 * similar to Bitmapsets, but are specially adapted to store sets of
 * tuple identifiers (TIDs), or ItemPointers.  In particular, the division
 * of an ItemPointer into BlockNumber and OffsetNumber is catered for.
 * Also, since we wish to be able to store very large tuple sets in
 * memory with this data structure, we support "lossy" storage, in which
 * we no longer remember individual tuple offsets on a page but only the
 * fact that a particular page needs to be visited.
 *
 * The "lossy" storage uses one bit per disk page, so at the standard 8K  -- "失真"存储, 只存储块信息, 所以带来了二次check
 * BLCKSZ, we can represent all pages in 64Gb of disk space in about 1Mb
 * of memory.  People pushing around tables of that size should have a
 * couple of Mb to spare, so we don't worry about providing a second level
 * of lossiness.  In theory we could fall back to page ranges at some
 * point, but for now that seems useless complexity.
 *
 * We also support the notion of candidate matches, or rechecking.      This
 * means we know that a search need visit only some tuples on a page,
 * but we are not certain that all of those tuples are real matches.
 * So the eventual heap scan must recheck the quals for these tuples only,
 * rather than rechecking the quals for all tuples on the page as in the
 * lossy-bitmap case.  Rechecking can be specified when TIDs are inserted
 * into a bitmap, and it can also happen internally when we AND a lossy
 * and a non-lossy page.
 *
 *
 * Copyright (c) 2003-2013, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *        src/backend/nodes/tidbitmap.c


3. http://www.postgresql.org/docs/9.3/static/using-explain.html
4. http://blog.163.com/digoal@126/blog/static/163877040201310255717379/
