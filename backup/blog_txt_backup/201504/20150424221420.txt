PostgreSQL research

disable user execute delete query without where condition

2015-04-24 22:14:20   查看原文>>

当我们有一个这样的需求时，如何来实现？
例如不允许某些用户执行不带where条件的DELETE语句。
这个可以通过语句级触发器实现, 但是注意，因为取SQL用的是pg_stat_activity, 如果在函数内执行，只能取到调用最外层的SQL，所以不适用于inline code或函数调用的情形。要实现的话请自行写hook来实现。
例如:
create table test2(id int);
insert into test2 select generate_series(1,100);

CREATE OR REPLACE FUNCTION public.tg1()
 RETURNS trigger
 LANGUAGE plpgsql
 STRICT
AS $function$
declare
  v_sql text;
  v_users text := TG_ARGV[0];
begin
  if regexp_split_to_array(v_users, ',') @> array[CURRENT_USER::text] then
    select query into v_sql from pg_stat_activity where pid=pg_backend_pid();
    if (TG_OP = 'DELETE' and v_sql !~* ' where ') then 
      raise notice '% ', v_sql; 
      raise exception 'you can not execute delete without where condition!';
    else
      return OLD;
    end if;
  end if;
  return OLD;
end;
$function$;

postgres=# create trigger tg1 before delete on test2 for each statement execute procedure tg1('digoal,test');
CREATE TRIGGER

postgres=# grant all on table test2 to public;
GRANT
postgres=# \c postgres test
You are now connected to database "postgres" as user "test".
postgres=> delete from test2;
NOTICE:  delete from test2; 
ERROR:  you can not execute delete without where condition!
postgres=> \c postgres digoal
You are now connected to database "postgres" as user "digoal".
postgres=> delete from test2;
NOTICE:  delete from test2; 
ERROR:  you can not execute delete without where condition!
postgres=> \c postgres postgres
You are now connected to database "postgres" as user "postgres".
postgres=# delete from test2;
DELETE 100

不允许普通用户执行不带WHERE条件的DELETE语句。
postgres=# CREATE OR REPLACE FUNCTION public.tg1()
 RETURNS trigger
 LANGUAGE plpgsql
 STRICT
AS $function$
declare
  v_sql text;
  v_user boolean;            
begin
  select rolsuper into v_user from pg_roles where rolname=CURRENT_USER;
  if not v_user then                                              
    select query into v_sql from pg_stat_activity where pid=pg_backend_pid();
    if (TG_OP = 'DELETE' and v_sql !~* ' where ') then                       
      raise notice '% ', v_sql;                        
      raise exception 'you can not execute delete without where condition!';
    else                                                                    
      return OLD;
    end if;      
  end if;  
  return OLD;
end;         
$function$;

postgres=# create trigger tg1 before delete on test2 for each statement execute procedure tg1();

postgres=# delete from test2;
DELETE 0
postgres=# \c postgres test
You are now connected to database "postgres" as user "test".
postgres=> delete from test2;
NOTICE:  delete from test2; 
ERROR:  you can not execute delete without where condition!
postgres=> \c postgres digoal
You are now connected to database "postgres" as user "digoal".
postgres=> delete from test2;
NOTICE:  delete from test2; 
ERROR:  you can not execute delete without where condition!
Flag Counter
