PostgreSQL research

PostgreSQL USE dictionary table reduce storage requirement

2013-07-21 10:17:33   查看原文>>

本文要讲的是如何将大量的重复数据字典话,降低存储空间需求的目的. 
字典化其实在PostgreSQL数据库的系统表中屡见不鲜. 
例如oid字段, 很多系统表通过这个字段进行关联. 同时它也可以在一些类型中进行透明的转换.

digoal=# select oid,relname from pg_class  limit 1;
 oid  |   relname    
------+--------------
 2619 | pg_statistic
(1 row)


pg_class中的oid和regclass类型可以透明转换.

digoal=# select 2619::regclass;
   regclass   
--------------
 pg_statistic
(1 row)
digoal=# select 'pg_statistic'::regclass::oid;
 oid  
------
 2619
(1 row)


同时oid也是众多系统表关联的字段. 这里的pg_type.oid, pg_tablespace.oid等等.

digoal=# \d pg_class
      Table "pg_catalog.pg_class"
     Column     |   Type    | Modifiers 
----------------+-----------+-----------
 relname        | name      | not null
 relnamespace   | oid       | not null
 reltype        | oid       | not null
 reloftype      | oid       | not null
 relowner       | oid       | not null
 relam          | oid       | not null
 relfilenode    | oid       | not null
 reltablespace  | oid       | not null
 relpages       | integer   | not null
 reltuples      | real      | not null
 relallvisible  | integer   | not null
 reltoastrelid  | oid       | not null
 relhasindex    | boolean   | not null
 relisshared    | boolean   | not null
 relpersistence | "char"    | not null
 relkind        | "char"    | not null
 relnatts       | smallint  | not null
 relchecks      | smallint  | not null
 relhasoids     | boolean   | not null
 relhaspkey     | boolean   | not null
 relhasrules    | boolean   | not null
 relhastriggers | boolean   | not null
 relhassubclass | boolean   | not null
 relispopulated | boolean   | not null
 relfrozenxid   | xid       | not null
 relminmxid     | xid       | not null
 relacl         | aclitem[] | 
 reloptions     | text[]    | 
Indexes:
    "pg_class_oid_index" UNIQUE, btree (oid)
    "pg_class_relname_nsp_index" UNIQUE, btree (relname, relnamespace)


详见 : http://www.postgresql.org/docs/9.3/static/catalog-pg-class.html

应用场景举例 : 
创建字典表, 建立ID和字符串的一一对应关系.

digoal=# create table dict (id serial4 primary key, info text unique);
CREATE TABLE


创建测试表, 使用字典id代替字符串. 如果test表会很大的话, 可以减少存储.

digoal=# create table test (dict_id int, crt_time timestamp default clock_timestamp());
CREATE TABLE


创建字符串转换成字典id的函数, 不存在对应关系的话自动创建一个id.

digoal=# 
create or replace function text_to_dict(text) returns int as $$
declare 
  res int;
begin
  select id into res from dict where info=$1;
  if found then
    return res;
  else
    insert into dict(info) values($1) returning id into res;
    return res;
  end if;
  return null;
end;
$$ language plpgsql strict;


但是需要注意, 规避恶意攻击, 造成字典表膨胀.
创建字典ID 转字符串的函数.

create or replace function dict_to_text(int) returns text as $$
declare 
  res text;
begin
  select info into res from dict where id=$1;
  return res;
end;
$$ language plpgsql strict;



使用字符串, 插入test表. 

digoal=# insert into test (dict_id) values (text_to_dict('abc'));
INSERT 0 1
digoal=# insert into test (dict_id) values (text_to_dict('abc'));
INSERT 0 1
digoal=# insert into test (dict_id) values (text_to_dict('abc'));
INSERT 0 1
digoal=# select * from test ;
 dict_id |          crt_time          
---------+----------------------------
       1 | 2013-07-21 08:30:17.259049
       1 | 2013-07-21 08:30:18.033941
       1 | 2013-07-21 08:30:19.848933
(3 rows)
digoal=# insert into test (dict_id) values (text_to_dict('abcd'));
INSERT 0 1
digoal=# select * from test;
 dict_id |          crt_time          
---------+----------------------------
       1 | 2013-07-21 08:30:17.259049
       1 | 2013-07-21 08:30:18.033941
       1 | 2013-07-21 08:30:19.848933
       2 | 2013-07-21 08:30:45.972354
(4 rows)


text_to_dict将自动生成字典中不存在的字符串映射.

使用text_to_dict自动转换字符串和字典的映射关系, 如果是全新字典将带来巨大的性能问题.
使用转换函数插入的性能如下:

digoal=# insert into test (dict_id) select text_to_dict(md5(random()::text)) from generate_series(1,100000);
INSERT 0 100000
Time: 4745.590 ms


直接使用ID插入的性能如下:

digoal=# insert into test (dict_id) select generate_series(1,100000);
INSERT 0 100000
Time: 173.297 ms
digoal=# select 4745/173.0;
      ?column?       
---------------------
 27.4277456647398844
(1 row)


如果插入的都是全新字符串的话性能相差了几十倍.
如果是固定字符串插入. 相差也非常大.

digoal=# select * from dict limit 1;
   id   |               info               
--------+----------------------------------
 100007 | 269b2a3ceece7b5eccca4efbebe54f6b
(1 row)
Time: 0.443 ms
digoal=#  insert into test (dict_id) select text_to_dict('269b2a3ceece7b5eccca4efbebe54f6b') from generate_series(1,100000);
INSERT 0 100000
Time: 2075.123 ms


将函数改成immutable, 固定输入在整个SQL中先执行后以常量替代, 那么以下text_to_dict('269b2a3ceece7b5eccca4efbebe54f6b')只执行一次.

digoal=# alter function text_to_dict (text) immutable;
ALTER FUNCTION
Time: 0.245 ms
digoal=#  insert into test (dict_id) select text_to_dict('269b2a3ceece7b5eccca4efbebe54f6b') from generate_series(1,100000);
INSERT 0 100000
Time: 181.132 ms


这个时间和直接输入ID 是接近的, 但是就无法适用在绑定变量中了.

digoal=#  insert into test (dict_id) select text_to_dict(md5(random()::text)) from generate_series(1,100000);
ERROR:  0A000: INSERT is not allowed in a non-volatile function
CONTEXT:  SQL statement "insert into dict(info) values($1) returning id"
PL/pgSQL function text_to_dict(text) line 8 at SQL statement
LOCATION:  _SPI_execute_plan, spi.c:2062
Time: 15.496 ms


查询性能如何呢?

digoal=# select count(*) from test ;
 count  
--------
 200005
(1 row)
Time: 18.933 ms
digoal=# select count(dict_to_text(dict_id)) from test ;
 count  
--------
 200005
(1 row)
Time: 2890.798 ms
digoal=# select 2890/18.0;
       ?column?       
----------------------
 160.5555555555555556
(1 row)


如果都是差异化数据, 相差几百倍.

存储空间相差多少呢? 下面来计算一下. pg_column_size计算的大小未包含column_head_size. 这个后面会讲到.

digoal=# select pg_column_size(info),pg_column_size(id),id,info from dict limit 10;;
 pg_column_size | pg_column_size | id |               info               
----------------+----------------+----+----------------------------------
              4 |              4 |  1 | abc
              5 |              4 |  2 | abcd
              7 |              4 |  3 | abcdef
             33 |              4 |  4 | dbab1a0f8c3e8395d53d4b1439941a76
             33 |              4 |  5 | 09b07fa8e5d072e08c942dc3be5c740e
             33 |              4 |  6 | 3effe76ee7f025dafdb7719bc32544c5
             33 |              4 |  7 | 507455aea4fd0026a56cd9f3bdb209ec
             33 |              4 |  8 | 6f233fb8e47a837fc51e7b3d79cfcc8a
             33 |              4 |  9 | 5e494c39988a4562b30fdfe7503469e1
             33 |              4 | 10 | 389ce74e776aeaa6935c4c3a6e49c773
(10 rows)


创建pageinspect扩展, 计算精确的列占用大小.

digoal=# create extension pageinspect;
CREATE EXTENSION
digoal=# create table t1(id int);
CREATE TABLE
Time: 1.050 ms
digoal=# create table t2(id text);
CREATE TABLE
Time: 3.103 ms
digoal=# insert into t2 values ('dbab1a0f8c3e8395d53d4b1439941a76'),('dbab1a0f8c3e8395d53d4b1439941a76');
INSERT 0 2
Time: 0.414 ms
digoal=# insert into t1 values (1),(1);
INSERT 0 2
Time: 0.300 ms
digoal=# select * from heap_page_items(get_raw_page('t1',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid 
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------
  1 |   8160 |        1 |     28 |   1758 |      0 |        0 | (0,1)  |           1 |       2048 |     24 | NULL   |  NULL
  2 |   8128 |        1 |     28 |   1758 |      0 |        0 | (0,2)  |           1 |       2048 |     24 | NULL   |  NULL
(2 rows)
Time: 0.259 ms


int占用列占用4字节的存储+1字节的column_head_size.
tuple_head=27字节.
所以一条记录的总长为32字节.

digoal=# select * from heap_page_items(get_raw_page('t2',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid 
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------
  1 |   8128 |        1 |     57 |   1757 |      0 |        0 | (0,1)  |           1 |       2050 |     24 | NULL   |  NULL
  2 |   8064 |        1 |     57 |   1757 |      0 |        0 | (0,2)  |           1 |       2050 |     24 | NULL   |  NULL
(2 rows)
Time: 0.173 ms


'dbab1a0f8c3e8395d53d4b1439941a76'占用32字节的数据存储+1字节的'\0'结束符+4字节的column_head_size
tuple_head=27字节.
所以一条记录的总长为64字节.
使用变长字符串, 仅列头就要4字节, 再加上实际的字符串空间占用, 相比int型空间占用几倍以上是在所难免的. 
而使用字典要考虑的是字典数据的转换带来的额外CPU开销, 是不是值得这么去做.
当然转换的工作不一定要放在数据库中操作, 前端还可以搞个key-value存储, 先去key-value取, 取不到再到数据库中取. 减轻数据库的压力.

[其他]
如果要做到和系统表的oid那样可以在字符串和oid之间相互透明的转换. 或者说你如果想要一种类似oid功能的数据类型.
那么可以自定义一个这样的类型, 同时也要自定义输入输出函数, 以及相关的操作符函数等等来完善这个类型的功能.
CREATE TYPE name (
    INPUT = input_function,
    OUTPUT = output_function
    [ , RECEIVE = receive_function ]
    [ , SEND = send_function ]
    [ , TYPMOD_IN = type_modifier_input_function ]
    [ , TYPMOD_OUT = type_modifier_output_function ]
    [ , ANALYZE = analyze_function ]
    [ , INTERNALLENGTH = { internallength | VARIABLE } ]
    [ , PASSEDBYVALUE ]
    [ , ALIGNMENT = alignment ]
    [ , STORAGE = storage ]
    [ , LIKE = like_type ]
    [ , CATEGORY = category ]
    [ , PREFERRED = preferred ]
    [ , DEFAULT = default ]
    [ , ELEMENT = element ]
    [ , DELIMITER = delimiter ]
    [ , COLLATABLE = collatable ]
)
具体的扩展实现可以参考citext, hstore等扩展包的做法.
http://www.postgresql.org/docs/9.3/static/citext.html
http://www.postgresql.org/docs/9.3/static/hstore.html

[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201351743331312/
2. http://www.postgresql.org/docs/9.2/static/storage-page-layout.html
3. src/include/access/htup.h
4. src/backend/access/common/heaptuple.c
变长字段(可选toast存储), 字段头为4字节.
如果是定长字段, 那么小于126字节时, 只需要1字节的头.

 * Before Postgres 8.3 varlenas always had a 4-byte length header, and
 * therefore always needed 4-byte alignment (at least).  This wasted space
 * for short varlenas, for example CHAR(1) took 5 bytes and could need up to
 * 3 additional padding bytes for alignment.
 *
 * Now, a short varlena (up to 126 data bytes) is reduced to a 1-byte header
 * and we don't align it.  To hide this from datatype-specific functions that
 * don't want to deal with it, such a datum is considered "toasted" and will
 * be expanded back to the normal 4-byte-header format by pg_detoast_datum.
 * (In performance-critical code paths we can use pg_detoast_datum_packed
 * and the appropriate access macros to avoid that overhead.)  Note that this
 * conversion is performed directly in heap_form_tuple, without invoking
 * tuptoaster.c.


5. http://www.postgresql.org/docs/9.3/static/catalog-pg-class.html
