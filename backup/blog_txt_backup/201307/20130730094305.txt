PostgreSQL research

PostgreSQL JDBC 9.2-1000+ failover support

2013-07-30 9:43:05   查看原文>>

PostgreSQL jdbc 9.2 1000以及以上版本开始支持配置多个数据库连接, 
http://jdbc.postgresql.org/changes.html#all-committers

Version 9.2-1000 (2012-09-27)
add Implementation of simple connection failover Committed by davec. Thanks to Mikko Tiihonen.


目前的模式采用round-robin模式连接, 直到成功获取连接. 代码见本文末尾部分.
配置方法如下 : 
jdbc:postgresql://host1:port1,host2:port2,...../test
目前这个版本的功能比较单一, 并且存在一定的性能问题 : 

By Chen Huajun
Hi All,
In the latest jdbc driver,multi backends can be assigned in the URL as following. 

 >With latest jdbc drivers you can simply configure multiple host:port pairs in the url separated by comma: 
 >jdbc:postgresql://host1:port1,host2:port2/test 
 >It has only the most basic failover support. When a new connection is opened the hosts are tried in round-robin until a connection is successfully established. 

But there is a performance problem .if the first host is down, 
all connecting must be blocked until connect timeout at first, 
and then try connect to the next host. 

Why not adjust the order of hosts dynamically? 
For excample, after a successful connecting,if the target host is not the first host, 
swap the target host and the first host. 
And then subsequent connecting will try the most suitable host at first. 


该补丁截止2013-07-30尚未提交. 
那么基于这个补丁, 能做些什么事情呢?
1. 首先如果数据库本身已经做了集群, 例如 : 
https://github.com/digoal/sky_postgresql_cluster
那么pgjdbc中只需要配置vip即可. 不需要配置多个数据库.
2. 对于未配置HA的数据库系统, jdbc的这个功能能够起到一定的作用, 例如当主节点挂掉, 备节点可以提供只读的功能. 基于这个特点可以在程序中将读的数据源和写的数据源分开, 当主节点挂掉时确保读的应用不受到影响. 
3. 还有一种应用场景是仅提供写的应用, 多个数据库的表结构一致, 都可以写. 这种在没有做数据库HA的情况下就比较适合了. 例如日志型的应用, 在大数据中这种场景比较普遍.
DATABASEs : 
192.168.1.2:5432/digoal
192.168.1.3:5432/digoal
192.168.1.4:5432/digoal
配置 : 
jdbc:postgresql://192.168.1.2:5432,192.168.1.3:5432,192.168.1.4:5432/digoal
如果场景中涉及部分共用数据集, 可以通过应用层面或者数据库层面做一些数据同步来实现.

[参考]
1. https://github.com/pgjdbc/pgjdbc
2. http://jdbc.postgresql.org/download.html
3. http://postgresql.1045698.n5.nabble.com/Re-Failover-Datasource-td4496411.html
4. http://amutu.com/blog/2013/07/postgresql-jdbc%E6%94%AF%E6%8C%81fail-over%E9%85%8D%E7%BD%AE/
5. https://github.com/digoal/sky_postgresql_cluster
6. postgresql-jdbc-9.2-1003.src/org/postgresql/core/ConnectionFactory.java

/*-------------------------------------------------------------------------
*
* Copyright (c) 2004-2011, PostgreSQL Global Development Group
* Copyright (c) 2004, Open Cloud Limited.
*
*
*-------------------------------------------------------------------------
*/
package org.postgresql.core;

import java.util.Properties;
import java.sql.SQLException;

import org.postgresql.util.HostSpec;
import org.postgresql.util.PSQLException;
import org.postgresql.util.GT;
import org.postgresql.util.PSQLState;

/**
 * Handles protocol-specific connection setup.
 *
 * @author Oliver Jowett (oliver@opencloud.com)
 */
public abstract class ConnectionFactory {
    /**
     * Protocol version to implementation instance map.
     * If no protocol version is specified, instances are
     * tried in order until an exception is thrown or a non-null
     * connection is returned.
     */
    private static final Object[][] versions = {
                { "3", new org.postgresql.core.v3.ConnectionFactoryImpl() },
                { "2", new org.postgresql.core.v2.ConnectionFactoryImpl() },
            };

    /**
     * Establishes and initializes a new connection.
     *<p>
     * If the "protocolVersion" property is specified, only that protocol
     * version is tried. Otherwise, all protocols are tried in order, falling
     * back to older protocols as necessary.
     *<p>
     * Currently, protocol versions 3 (7.4+) and 2 (pre-7.4) are supported.
     *
     * @param hostSpecs at least one host and port to connect to; multiple elements for round-robin failover
     * @param user the username to authenticate with; may not be null.
     * @param database the database on the server to connect to; may not be null.
     * @param info extra properties controlling the connection;
     *    notably, "password" if present supplies the password to authenticate with.
     * @param logger the logger to use for this connection
     * @return the new, initialized, connection
     * @throws SQLException if the connection could not be established.
     */
    public static ProtocolConnection openConnection(HostSpec[] hostSpecs, String user, String database, Properties info, Logger logger) throws SQLException {
        String protoName = info.getProperty("protocolVersion");

        for (int i = 0; i < versions.length; ++i)
        {
            String versionProtoName = (String) versions[i][0];
            if (protoName != null && !protoName.equals(versionProtoName))
                continue;

            ConnectionFactory factory = (ConnectionFactory) versions[i][1];
            ProtocolConnection connection = factory.openConnectionImpl(hostSpecs, user, database, info, logger);
            if (connection != null)
                return connection;
        }

        throw new PSQLException(GT.tr("A connection could not be made using the requested protocol {0}.", protoName),
                                PSQLState.CONNECTION_UNABLE_TO_CONNECT);
    }

    /**
     * Implementation of {@link #openConnection} for a particular protocol version.
     * Implemented by subclasses of {@link ConnectionFactory}.
     *
     * @param hostSpecs at least one host and port to connect to; multiple elements for round-robin failover
     * @param user the username to authenticate with; may not be null.
     * @param database the database on the server to connect to; may not be null.
     * @param info extra properties controlling the connection;
     *    notably, "password" if present supplies the password to authenticate with.
     * @param logger the logger to use for this connection
     * @return the new, initialized, connection, or <code>null</code> if this protocol
     *    version is not supported by the server.
     * @throws SQLException if the connection could not be established for a reason other
     *    than protocol version incompatibility.
     */
    public abstract ProtocolConnection openConnectionImpl(HostSpec[] hostSpecs, String user, String database, Properties info, Logger logger) throws SQLException;
}



