PostgreSQL research

PostgreSQL use pgbench and mysql_fdw test MySQL & PostgreSQL performance

2013-07-23 18:41:14   查看原文>>

一位搞智能解析的兄弟在做压力测试的时候发现瓶颈在MySQL数据库. 5台数据库总共能处理1万多每秒的解析请求.
MySQL表结构如下 : 

CREATE TABLE `xxx_com_table` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `ttl` int(11) default '1800',
  `rdtype` varchar(255) default NULL,
  `rdata` varchar(255) default NULL,
  `ispzoneid` int(4) default '0',
  `weight` int(4) default '100',
  `iflive` int(4) default '1',
  `disable` int(4) default '0',
  `bak2` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=263 DEFAULT CHARSET=latin1;


索引 : 

create index idx_test on xxx_com_table(name);


数据187条, 以下数据已经将域名和IP隐藏 : 

INSERT INTO `xxx_com_table` (`id`, `name`, `ttl`, `rdtype`, `rdata`, `ispzoneid`, `weight`, `iflive`, `disable`, `bak2`) VALUES (53,'xxx.com',43200,'SOA','dns1.skymobiapp.net. dns2.skymobiapp.net. 201005081 28800 60 86400 3600',0,90,1,0,NULL),(54,'xxx.com',43200,'NS','dns1.skymobiapp.net.',0,90,1,0,NULL),(55,'xxx.com',43200,'NS','dns2.skymobiapp.net.',0,90,1,0,NULL),(56,'xxx.com',43200,'MX','20 email.xxx.com',0,90,1,0,NULL),(57,'email.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(58,'www.xxx.com',200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(59,'www.xxx.com',200,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(60,'www.xxx.com',200,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(95,'mrp.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(94,'upload.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(64,'*.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(65,'m.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(66,'g.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(67,'d.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(68,'charge.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(69,'pay.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(70,'user.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(71,'p.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(72,'wap.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(73,'lottery.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(74,'w.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(75,'qb.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(76,'h.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(77,'app.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(78,'down.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(79,'t.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(80,'v.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(81,'sns.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(82,'qq.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(83,'xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(84,'xxx.com',900,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(85,'xxx.com',900,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(86,'*.xxx.com',900,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(87,'*.xxx.com',900,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(88,'xxx.com',43200,'NS','dns3.skymobiapp.net.',0,90,1,0,NULL),(89,'tsina.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(117,'active.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(97,'i.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(92,'caipiao.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(100,'token.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(99,'news.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(101,'j.xxx.com',900,'CNAME','mp.igeku.com',0,90,1,0,NULL),(102,'q.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(103,'a.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(125,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(105,'caipiao1.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(106,'comment.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(107,'video.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(108,'cs.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(109,'mcardoms.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(110,'x.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(111,'of.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(112,'game.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(113,'kf.xxx.com',3600,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(114,'kf.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(115,'mrpd.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(116,'mm.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(118,'jump.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(119,'mp.xxx.com',7200,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(120,'jf.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(121,'wb.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(124,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(126,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8606,95,1,0,NULL),(127,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8607,95,1,0,NULL),(128,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8608,95,1,0,NULL),(129,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8609,95,1,0,NULL),(130,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8610,95,1,0,NULL),(131,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8611,95,1,0,NULL),(132,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8612,95,1,0,NULL),(133,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8613,95,1,0,NULL),(134,'proxy.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8614,95,1,0,NULL),(135,'brw.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(136,'tg.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(137,'pp.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(138,'skysdk.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(139,'dou.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(140,'jfs.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(141,'mns.xxx.com',300,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(142,'mjf.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(143,'skyec.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(144,'proxy2.xxx.com ',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(145,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(146,'pet.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(159,'pk.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(148,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8606,95,1,0,NULL),(149,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8607,95,1,0,NULL),(150,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8608,95,1,0,NULL),(151,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8609,95,1,0,NULL),(152,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8610,95,1,0,NULL),(153,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8611,95,1,0,NULL),(154,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8612,95,1,0,NULL),(155,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8613,95,1,0,NULL),(156,'proxy2.xxx.com',1800,'A','nnn.nnn.nnn.nnn',8614,95,1,0,NULL),(160,'pk.xxx.com',1800,'A','nnn.nnn.nnn.nnn',1,100,1,0,NULL),(168,'3rdplat.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(167,'wao.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(161,'localgame.xxx.com',3600,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(162,'Crts.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(163,'Crmm.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(164,'Cris.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(165,'Crms.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(166,'Cras.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(169,'vs.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(170,'swift.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(172,'pk.xxx.com',1800,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(173,'s.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(174,'playcac.xxx.com',1800,'A','nnn.nnn.nnn.nnn',1,100,1,0,NULL),(175,'playcac.xxx.com',1800,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(176,'playcac.xxx.com',1800,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(177,'playcac.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(258,'www.xxx.com',200,'A','nnn.nnn.nnn.nnn',1,100,1,0,NULL),(180,'shouxin.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(181,'pk.xxx.com',1800,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(182,'sx.xxx.com',1800,'CNAME','shouxin.xxx.com',0,90,1,0,NULL),(183,'chkvercac.xxx.com',1800,'A','nnn.nnn.nnn.nnn',1,100,1,0,NULL),(184,'chkvercac.xxx.com',1800,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(185,'chkvercac.xxx.com',1800,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(186,'chkvercac.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(187,'autoupcac.xxx.com',1800,'CNAME','autoupcac.xxx.com.cdn20.com',1,100,1,0,NULL),(188,'autoupcac.xxx.com',1800,'CNAME','autoupcac.xxx.com.cdn20.com',2,100,1,0,NULL),(189,'autoupcac.xxx.com',1800,'CNAME','autoupcac.xxx.com.cdn20.com',4,100,1,0,NULL),(190,'autoupcac.xxx.com',1800,'CNAME','autoupcac.xxx.com.cdn20.com',0,90,1,0,NULL),(191,'smscac.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(192,'smscac.xxx.com',900,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(193,'smscac.xxx.com',900,'A','nnn.nnn.nnn.nnn ',4,100,1,0,NULL),(194,'smscac.xxx.com ',900,'A','nnn.nnn.nnn.nnn',1,100,1,0,NULL),(195,'gm.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(205,'master.xxx.com',900,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(201,'testcdn.xxx.com',900,'CNAME','testcdn.xxx.com.cdn20.com',0,90,1,0,NULL),(257,'starwarpay.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(203,'mopo.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(204,'master.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(200,'pkdl.xxx.com',900,'CNAME','pkdl.xxx.com.cdn20.com',0,90,1,0,NULL),(206,'master.xxx.com',900,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(207,'data.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(208,'swift.xxx.com',1800,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(209,'swift.xxx.com',1800,'A','nnn.nnn.nnn.nnn',1,100,1,0,NULL),(210,'swift.xxx.com',1800,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(211,'adplugin.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(212,'abchina.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(213,'charge.xxx.com',900,'A','nnn.nnn.nnn.nnn',1,90,1,0,NULL),(214,'charge.xxx.com',900,'A','nnn.nnn.nnn.nnn',2,90,1,0,NULL),(215,'charge.xxx.com',900,'A','nnn.nnn.nnn.nnn',4,90,1,0,NULL),(216,'openads.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(217,'opensdk.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(218,'sdkpassport.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(219,'openpay.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(220,'sharekit.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(221,'opencoin.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(222,'keystore.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(223,'freesky.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(224,'appstore.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(225,'passport.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(226,'devwiki.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(227,'freeads.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(228,'freecurrency.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(229,'devbbs.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(230,'res.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(231,'ddg.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(232,'ddz.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(253,'starwar1.xxx.com',1800,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL),(234,'gs5z.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(235,'help.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(236,'niuniu.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(237,'freedbg.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(238,'flybox.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(239,'flyboxnew1.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(240,'flybox_new.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(241,'opensky.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(242,'bbs.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(243,'ke.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(244,'opensdktest.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(245,'sdkpassporttest.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(246,'openpaytest.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(247,'ozb-cp.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(248,'test-www.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(249,'xhyj-wap.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(250,'ttld.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(251,'file.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(252,'browser.xxx.com',1800,'CNAME','www.xxx.com',0,90,1,0,NULL),(254,'starwar1.xxx.com',1800,'A','nnn.nnn.nnn.nnn',1,90,1,0,NULL),(255,'starwar1.xxx.com',1800,'A','nnn.nnn.nnn.nnn',2,90,1,0,NULL),(256,'starwar1.xxx.com',1800,'A','nnn.nnn.nnn.nnn',4,90,1,0,NULL),(260,'pxcac.xxx.com',900,'A','nnn.nnn.nnn.nnn',1,100,1,0,NULL),(261,'pxcac.xxx.com',900,'A','nnn.nnn.nnn.nnn',2,100,1,0,NULL),(262,'pxcac.xxx.com',900,'A','nnn.nnn.nnn.nnn',4,100,1,0,NULL),(259,'pxcac.xxx.com',900,'A','nnn.nnn.nnn.nnn',0,90,1,0,NULL);


查询语句 : 

SELECT ttl, rdtype, rdata FROM [table_name] WHERE name = 'domainname' and ( ispzoneid in (1,2,3,4)) and iflive = 1 and disable = 0 and weight = (select max(weight) [table_name] WHERE name = 'domainname' and ( ispzoneid=0 or ispzoneid=1 or ispzoneid = 100) and iflive = 1 and disable = 0);


其中iflive = 1 and disable = 0条件固定不变. name的条件可变,  ispzoneid的条件可变. 但是基本上平均每次返回2条数据.
所以后面压力测试时只压1条固定的SQL . 

压力测试的过程如下 : 
首先要下载mysql_fdw模块.

git clone https://github.com/dpage/mysql_fdw
mv mysql_fdw postgresql-9.3beta2/contrib/
cd postgresql-9.3beta2/contrib/mysql_fdw
export PATH=/opt/pgsql/bin:$PATH
gmake clean
gmake
gmake install



安装mysql_fdw, 创建外部表.

digoal=# create extension mysql_fdw;
CREATE EXTENSION
digoal=# CREATE SERVER mysql_svr 
    FOREIGN DATA WRAPPER mysql_fdw 
    OPTIONS (address '127.0.0.1', port '3306');
digoal=# CREATE foreign TABLE f_xxx_com_table (
  id serial8 NOT NULL,             
  name varchar(255) default NULL,              
  ttl int8 default 1800,
  rdtype varchar(255) default NULL,
  rdata varchar(255) default NULL,
  ispzoneid int default 0,
  weight int default 100,
  iflive int default 1,
  disable int default 0,
  bak2 varchar(255) default NULL
)SERVER mysql_svr
    OPTIONS (database 'test', table 'xxx_com_table');
digoal=# CREATE USER MAPPING FOR PUBLIC  
    SERVER mysql_svr 
    OPTIONS (username 'root', password 'root');
digoal=# SELECT ttl, rdtype, rdata, weight FROM f_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0 and weight = (select max(weight) from f_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0);
 ttl | rdtype |     rdata     | weight 
-----+--------+---------------+--------
 200 | A      | nnn.nnn.nnn.nnn |    100
 200 | A      | nnn.nnn.nnn.nnn |    100
(2 rows)


执行计划 : 

digoal=# explain verbose SELECT ttl, rdtype, rdata, weight FROM f_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0 and weight = (select max(weight) from f_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0);
                                                                                                                                    
           QUERY PLAN                                                                                                               
                                
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
--------------------------------
 Foreign Scan on public.f_xxx_com_table  (cost=207.48..394.48 rows=187 width=1044)
   Output: f_xxx_com_table.ttl, f_xxx_com_table.rdtype, f_xxx_com_table.rdata, f_xxx_com_table.weight
   Filter: (((f_xxx_com_table.name)::text = 'www.xxx.com'::text) AND (f_xxx_com_table.iflive = 1) AND (f_xxx_com_table.disab
le = 0) AND (f_xxx_com_table.weight = $0) AND (f_xxx_com_table.ispzoneid = ANY ('{0,2,4,100}'::integer[])))
   Local server startup cost: 10
   MySQL query: SELECT * FROM xxx_com_table
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=197.47..197.48 rows=1 width=4)
           Output: max(f_xxx_com_table_1.weight)
           ->  Foreign Scan on public.f_xxx_com_table f_xxx_com_table_1  (cost=10.00..197.00 rows=187 width=4)
                 Output: f_xxx_com_table_1.id, f_xxx_com_table_1.name, f_xxx_com_table_1.ttl, f_xxx_com_table_1.rdtype, f_xxx_com_table_1.rdata, f_xxx_com_table_1.ispzoneid, f_xxx_com_table_1.weight, f_xxx_com_table_1.iflive, f_xxx_com_table_1.di
sable, f_xxx_com_table_1.bak2
                 Filter: (((f_xxx_com_table_1.name)::text = 'www.xxx.com'::text) AND (f_xxx_com_table_1.iflive = 1) AND (f_51m
rp_com_table_1.disable = 0) AND (f_xxx_com_table_1.ispzoneid = ANY ('{0,2,4,100}'::integer[])))
                 Local server startup cost: 10
                 MySQL query: SELECT * FROM xxx_com_table
(13 rows)


调整外部表定义

digoal=# drop foreign table f_xxx_com_table ;
DROP FOREIGN TABLE
digoal=# CREATE foreign TABLE f_xxx_com_table (
  ttl int8 default 1800,
  rdtype varchar(255) default NULL,
  rdata varchar(255) default NULL,
  weight int default 100
)SERVER mysql_svr
    OPTIONS (database 'test', query 'SELECT ttl, rdtype, rdata, weight FROM xxx_com_table WHERE name = ''www.xxx.com'' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0 and weight = (select max(weight) from xxx_com_table WHERE name = ''www.xxx.com'' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0)');


执行计划 : 

digoal=# explain verbose SELECT * from f_xxx_com_table ;
                                                                                                                                    
               QUERY PLAN                                                                                                           
                                        
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------
 Foreign Scan on public.f_xxx_com_table  (cost=10.00..22.00 rows=12 width=1044)
   Output: ttl, rdtype, rdata, weight
   Local server startup cost: 10
   MySQL query: SELECT ttl, rdtype, rdata, weight FROM xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and
 iflive = 1 and disable = 0 and weight = (select max(weight) from xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2
,4,100) and iflive = 1 and disable = 0)
(4 rows)



开始压力测试 : 

vi test.sql
select * from f_xxx_com_table;


测试过程中出现了大量的错误, 原因是tcp端口耗尽.

pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 16 -T 10 digoal 
Client 13 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 4 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 5 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 12 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 6 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 9 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 1 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 2 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 0 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 14 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 10 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 15 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 8 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 3 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 11 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
Client 7 aborted in state 0: ERROR:  failed to connect to MySQL: Can't connect to MySQL server on '127.0.0.1' (99)
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 16
duration: 10 s
number of transactions actually processed: 56221
tps = 6674.017214 (including connections establishing)
tps = 6691.236768 (excluding connections establishing)
statement latencies in milliseconds:
        2.382606        select * from f_xxx_com_table;


查看系统出现了大量的TIME_WAIT, 原因是mysql_fdw未使用连接池, 同时未释放连接. 所以造成了大量的TIME_WAIT.
找mysql_fdw代码中发现一些注释,

        /* 
         * TODO: Find a way to stash this connection object away, so we don't have
         * to reconnect to MySQL again later.
         */


所以这也是目前mysql_fdw的要解决的问题.
为了测试能够顺利进行通过修改以下系统内核参数来解决, 快速的回收和重用TIME_WAIT的端口 : 

sysctl -w net.ipv4.tcp_tw_recycle=1
sysctl -w net.ipv4.tcp_timestamps=1

再次测试的时候不会报错了 : 

pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 16 -T 10 digoal 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 16
duration: 10 s
number of transactions actually processed: 67684
tps = 6763.815486 (including connections establishing)
tps = 6780.616849 (excluding connections establishing)
statement latencies in milliseconds:
        2.356691        select * from f_xxx_com_table;



另一种方法是使用unix sock连接mysql. 不会出现TIME_WAIT的问题. 
需要修改mysql_fdw的代码, 如下 : 

if (!mysql_real_connect(conn, svr_address, svr_username, svr_password, svr_database, svr_port, NULL, 0))


改成 : 

if (!mysql_real_connect(conn, svr_address, svr_username, svr_password, svr_database, svr_port, "/tmp/mysql.sock", 0))


重新编译

export PATH=/opt/pgsql/bin:$PATH
gmake clean
gmake
gmake install


同时需要修改mysql参数文件, 重启数据库. 或者将mysql.sock做个/tmp/mysql.sock的软链接.

vi /usr/my.cnf
socket  = /tmp/mysql.sock
service mysql restart


同时需要修改foreign server : 

digoal=# alter server mysql_svr options(set address 'localhost');
ALTER SERVER


重启PostgreSQL

pg_ctl restart -m fast


重新测试的结果如下 : 

pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 16 -T 10 digoal 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 16
duration: 10 s
number of transactions actually processed: 73191
tps = 7314.796705 (including connections establishing)
tps = 7329.218719 (excluding connections establishing)
statement latencies in milliseconds:
        2.180269        select * from f_xxx_com_table;



接下来将表和数据转换到postgresql中进行测试, 看看同样的服务器和测试语句得到的性能如何 : 

CREATE TABLE t_xxx_com_table (
  id serial8 NOT NULL,
  name varchar(255) default NULL,
  ttl int8 default 1800,
  rdtype varchar(255) default NULL,
  rdata varchar(255) default NULL,
  ispzoneid int default 0,
  weight int default 100,
  iflive int default 1,
  disable int default 0,
  bak2 varchar(255) default NULL,
  PRIMARY KEY  (id)
);


插入187条数据, SQL略.

digoal=# select count(*) from t_xxx_com_table;
 count 
-------
   187
(1 row)
digoal=# SELECT ttl, rdtype, rdata, weight FROM t_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0 and weight = (select max(weight) from t_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0);
 ttl | rdtype |     rdata     | weight 
-----+--------+---------------+--------
 200 | A      | nnn.nnn.nnn.nnn |    100
 200 | A      | nnn.nnn.nnn.nnn |    100
(2 rows)


创建索引, 因为条件固定, 所以可以创建partial index : 

"idx_t_xxx_com_table_1" btree (name) WHERE iflive = 1 AND disable = 0


执行计划 : 

digoal=# explain verbose SELECT ttl, rdtype, rdata, weight FROM t_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0 and weight = (select max(weight) from t_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0);
                                                                                                                                    
           QUERY PLAN                                                                                                               
                                
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
--------------------------------
 Index Scan using idx_t_xxx_com_table_1 on public.t_xxx_com_table  (cost=4.41..8.52 rows=1 width=29)
   Output: t_xxx_com_table.ttl, t_xxx_com_table.rdtype, t_xxx_com_table.rdata, t_xxx_com_table.weight
   Index Cond: ((t_xxx_com_table.name)::text = 'www.xxx.com'::text)
   Filter: ((t_xxx_com_table.weight = $0) AND (t_xxx_com_table.ispzoneid = ANY ('{0,2,4,100}'::integer[])))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=4.25..4.26 rows=1 width=4)
           Output: max(t_xxx_com_table_1.weight)
           ->  Index Scan using idx_t_xxx_com_table_1 on public.t_xxx_com_table t_xxx_com_table_1  (cost=0.14..4.25 rows=3 wid
th=4)
                 Output: t_xxx_com_table_1.id, t_xxx_com_table_1.name, t_xxx_com_table_1.ttl, t_xxx_com_table_1.rdtype, t_xxx_com_table_1.rdata, t_xxx_com_table_1.ispzoneid, t_xxx_com_table_1.weight, t_xxx_com_table_1.iflive, t_xxx_com_table_1.di
sable, t_xxx_com_table_1.bak2
                 Index Cond: ((t_xxx_com_table_1.name)::text = 'www.xxx.com'::text)
                 Filter: (t_xxx_com_table_1.ispzoneid = ANY ('{0,2,4,100}'::integer[]))
(11 rows)


压力测试脚本 : 

vi test.sql
SELECT ttl, rdtype, rdata, weight FROM t_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0 and weight = (select max(weight) from t_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0);


压力测试结果 : 

pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 16 -T 10 digoal 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 16
duration: 10 s
number of transactions actually processed: 1012195
tps = 101167.277451 (including connections establishing)
tps = 101443.078008 (excluding connections establishing)
statement latencies in milliseconds:
        0.153884        SELECT ttl, rdtype, rdata, weight FROM t_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0 and weight = (select max(weight) from t_xxx_com_table WHERE name = 'www.xxx.com' and ispzoneid in (0,2,4,100) and iflive = 1 and disable = 0);



[小结]
1. 本例测试下来mysql比postgresql性能差了13.84倍. 测试过程中mysql进程的CPU使用率为480%左右. 总共8核的CPU.
2. 当然使用pgbench来测试mysql对于mysql来说有失公平, 因为还要在pg层面有连接和解析处理过程. 所以为了得到更准确的数据有兴趣的朋友可以自己搞搞测试, 一起用sysbech测试过, mysql确实不如PostgreSQL. 
http://blog.163.com/digoal@126/blog/static/163877040201341441042613/
http://blog.163.com/digoal@126/blog/static/1638770402013414549515/
3. 我这位同事自己通过压dns, 下来的情况比我这里测试到的mysql性能没什么分别, 从侧面说明mysql确实不是非常OK. 
4. 另一篇PostgreSQL和Oracle对比的
http://blog.163.com/digoal@126/blog/static/16387704020137834025753/

[参考]
1. https://github.com/dpage/mysql_fdw/blob/master/mysql_fdw.c
2. http://anaturb.net/MySQL/mysql_c.htm
3. http://blog.163.com/digoal@126/blog/static/163877040201341441042613/
4. http://blog.163.com/digoal@126/blog/static/1638770402013414549515/
Flag Counter
