PostgreSQL research

PostgreSQL 9.4 WILL support auto-updatable view WITH CHECK OPTION

2013-07-31 16:51:23   查看原文>>

PostgreSQL 9.3 引入了支持自动dml的视图, 免去了写规则或触发器达到DML目的烦恼.
http://blog.163.com/digoal@126/blog/static/163877040201301483549300/
http://blog.163.com/digoal@126/blog/static/16387704020134922356437/
但是9.3的可自动更新视图不支持with check option.
9.4新增了with check option这个功能

WITH CHECK OPTION support for auto-updatable VIEWs

For simple views which are automatically updatable, this patch allows
the user to specify what level of checking should be done on records
being inserted or updated.  For 'LOCAL CHECK', new tuples are validated
against the conditionals of the view they are being inserted into, while
for 'CASCADED CHECK' the new tuples are validated against the
conditionals for all views involved (from the top down).

This option is part of the SQL specification.

Dean Rasheed, reviewed by Pavel Stehule


测试如下 : 

pg94@db-192-168-100-216-> psql
psql (9.4devel)
Type "help" for help.

digoal=# create table test (id int primary key , info text, crt_time timestamp);
CREATE TABLE
digoal=# insert into test select generate_series(1,10000),md5(random()::text),clock_timestamp();
INSERT 0 10000
digoal=# create view v_test1 as select * from test where id>0;
CREATE VIEW
digoal=# create view v_test2 as select * from test where id>0 with local check option;
CREATE VIEW
digoal=# create view v_test3 as select * from test where id>0 with cascaded check option;
CREATE VIEW
digoal=# create view v_test4 as select * from v_test2 where id>0;
CREATE VIEW
digoal=# create view v_test5 as select * from v_test3 where id>0;
CREATE VIEW

digoal=# \set VERBOSITY verbose
digoal=# update v_test1 set id=-1 where id=1;
UPDATE 1
digoal=# update v_test2 set id=-2 where id=2;
ERROR:  44000: new row violates WITH CHECK OPTION for view "v_test2"
DETAIL:  Failing row contains (-2, 770758090375c68f0f985fab7d723b44, 2013-07-31 16:26:03.159758).
LOCATION:  ExecWithCheckOptions, execMain.c:1665
digoal=# update v_test3 set id=-2 where id=2;
ERROR:  44000: new row violates WITH CHECK OPTION for view "v_test3"
DETAIL:  Failing row contains (-2, 770758090375c68f0f985fab7d723b44, 2013-07-31 16:26:03.159758).
LOCATION:  ExecWithCheckOptions, execMain.c:1665
digoal=# update v_test4 set id=-2 where id=2;
ERROR:  44000: new row violates WITH CHECK OPTION for view "v_test2"
DETAIL:  Failing row contains (-2, 770758090375c68f0f985fab7d723b44, 2013-07-31 16:26:03.159758).
LOCATION:  ExecWithCheckOptions, execMain.c:1665
digoal=# update v_test5 set id=-2 where id=2;
ERROR:  44000: new row violates WITH CHECK OPTION for view "v_test3"
DETAIL:  Failing row contains (-2, 770758090375c68f0f985fab7d723b44, 2013-07-31 16:26:03.159758).
LOCATION:  ExecWithCheckOptions, execMain.c:1665


local和cascade的测试如下 : 
with check option默认为cascade的, 会检查里层的视图的where 条件.

digoal=# create view v_test6 as select * from v_test1 with local check option;
CREATE VIEW
digoal=# create view v_test7 as select * from v_test1 with cascaded check option;
CREATE VIEW
digoal=# update v_test6 set id=-2 where id=2;
UPDATE 1
digoal=# update v_test7 set id=-3 where id=3;
ERROR:  44000: new row violates WITH CHECK OPTION for view "v_test1"
DETAIL:  Failing row contains (-3, 1fc442a49bc3d63a1006a4e62237e340, 2013-07-31 16:26:03.159775).
LOCATION:  ExecWithCheckOptions, execMain.c:1665



检查为级联模式, 如下, 最内层的v_test1的约束被检查了.

digoal=# create view v_test8 as select * from v_test1;
CREATE VIEW
digoal=# create view v_test9 as select * from v_test8 with cascaded check option;
CREATE VIEW
digoal=# update v_test9 set id=-3 where id=3;
ERROR:  44000: new row violates WITH CHECK OPTION for view "v_test1"
DETAIL:  Failing row contains (-3, 1fc442a49bc3d63a1006a4e62237e340, 2013-07-31 16:26:03.159775).
LOCATION:  ExecWithCheckOptions, execMain.c:1665


PostgreSQL 9.4 WILL support auto-updatable view WITH CHECK OPTION - 德哥@Digoal - PostgreSQL
 

更多测试参考 : 
src/test/regress/expected/updatable_views.out

[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=4cbe3ac3e86790d05c569de4585e5075a62a9b41
2. http://www.postgresql.org/docs/devel/static/sql-createview.html
3. http://blog.163.com/digoal@126/blog/static/163877040201301483549300/
4. http://blog.163.com/digoal@126/blog/static/16387704020134922356437/
5. 

WITH [ CASCADED | LOCAL ] CHECK OPTION
This option controls the behavior of automatically updatable views. When this option is specified, INSERT and UPDATE commands on the view will be checked to ensure that new rows satisfy the view-defining condition (that is, the new rows are checked to ensure that they are visible through the view). If they are not, the update will be rejected. If the CHECK OPTION is not specified, INSERT and UPDATE commands on the view are allowed to create rows that are not visible through the view. The following check options are supported:

LOCAL
New rows are only checked against the conditions defined directly in the view itself. Any conditions defined on underlying base views are not checked (unless they also specify the CHECK OPTION).

CASCADED
New rows are checked against the conditions of the view and all underlying base views. If the CHECK OPTION is specified, and neither LOCAL nor CASCADED is specified, then CASCADED is assumed.

The CHECK OPTION may not be used with RECURSIVE views.

Note that the CHECK OPTION is only supported on views that are automatically updatable, and do not have INSTEAD OF triggers or INSTEAD rules. If an automatically updatable view is defined on top of a base view that has INSTEAD OF triggers, then the LOCAL CHECK OPTION may be used to check the conditions on the automatically updatable view, but the conditions on the base view with INSTEAD OF triggers will not be checked (a cascaded check option will not cascade down to a trigger-updatable view, and any check options defined directly on a trigger-updatable view will be ignored). If the view or any of its base relations has an INSTEAD rule that causes the INSERT or UPDATE command to be rewritten, then all check options will be ignored in the rewritten query, including any checks from automatically updatable views defined on top of the relation with the INSTEAD rule.


