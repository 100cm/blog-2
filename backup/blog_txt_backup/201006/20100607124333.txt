PostgreSQL research

Security-Enhanced PostgreSQL

2010-06-07 12:43:33   查看原文>>

当前，越来越多的应用程序使用到数据库的场景越来越多，使用数据库作为动态信息的保存等等。在这样的复杂环境下面，仅仅考虑单个组件的安全是不够的，应该考虑到全局的安全策略一致。2010年5月份举行的全球PostgreSQL数据库讨论大会就数据安全这个类别有专门的演讲《A secure web-application stack using SE-PostgreSQL》。包括将要在牛津大学
举办的CHAR(10)会议中也有SE-PostgreSQL的专题演讲。

本文主要介绍数据库部分， PostgreSQL与SELinux的安全策略一致性设计方案和简单范例。

何为SE-PostgreSQL?

Security-Enhanced PostgreSQL(简写SE-PostgreSQL) 是一个PostgreSQL内建的安全扩展。与SElinux一起提供自操作系统到数据库系统一致的精细化强制访问控制特性。

为何需要SE-PostgreSQL？

未使用强安全控制的RDBMS进程间通信实例图：

2010年06月07日 - 德哥(DiGoal,Just Do It!) - Just Do it

SELinux 是操作系统特性，用于在被操作系统管理的所有文件上实施安全策略，包括文件，sockets,内部进程通信对象等等。保护机密信息不被泄露是SELinux的最重要的目标。尽管如此，如果信息通道没有相应的策略的话，信息泄露可能出现在信息通道环节。所见通常会说，整个系统的安全级别决定于最脆弱的信息交换通道。所以要确保整个系统的安全，必须
建立系统一致性的安全策略就像SELinux所做的一样。

通常情况下，私有信息的隔离是在用户级别来隔离的。但是不得不考虑到的是内部进程通信，这些对于SELinux来说是不可见的。

为了避免这种不受控制的信息泄露，必须将SELinux的策略做到更加底层。比如RDBMS系统就是所谓的不受SELinux控制的底层。

SE-PostgreSQL可以利用SELinux特性控制这些不被SELinux控制的系统资源，就好象被操作系统使用SELinux管理一样。从而使整个系统的安全策略一致。

统一的信息流控制实例:

2010年06月07日 - 德哥(DiGoal,Just Do It!) - Just Do it

左边是传统的PostgreSQL,右边是SE-PostgreSQL.

在传统的PostgreSQL系统（并且操作系统使用了SELinux策略）中：

在系统级用户层面，当他往文件系统写数据的时候，数据被打上了安全标签。当底层用户需要访问这个在文件系统上的数据时，违反策略的话将不被允许访问。

在系统级用户层面，当他往数据库插入一条记录时，PostgreSQL不记录安全标签信息，所以的话底层用户可以有权限访问到这些记录。

在SE-PostgreSQL（并且操作系统使用了SELinux策略）中：

写入文件系统的情况与传统的PostgreSQL结果一致。

写入数据库时，记录将被打上安全标记，所以底层用户没有权限的情况下将不能访问到在SE-PostgreSQL中的资源。

因此在SE-PostgreSQL中，在整个数据流控制过程中使用了系统级一致的访问控制策略。

强访问控制（MAC）：

传统的PostgreSQL有一致超级用户，类似操作系统的ROOT，可以访问，修改，删除任意数据库对象。

SE-PostgreSQL提供强访问控制特性，应用在所有的数据库客户端和所有用户上。

当MAC或数据库原有的GRANT/REVOKE控制的访问权限不能满足时，将无法访问到被访问的资源。

精细化访问控制(fine-grained access control)：

SE-PostgreSQL提供比传统PostgreSQL更加强大的精细化访问控制功能，包括列访问控制和行访问控制。

如图：

2010年06月07日 - 德哥(DiGoal,Just Do It!) - Just Do it
 图上这张表一共包含6行记录，其中4行标记为unclassified,2行标记为secret,这种类似于SELinux的安全标签存储在表的系统列security_context上。当高层用户访问时可以看到6行，但是底层用户访问是带secret的两行将被忽略。

列级别访问控制，当用户访问不被授权的列时，访问被拒绝。

SE-PostgreSQL使用范例：

1. 行级访问控制

使用下列SQL在SystemLow-SystemHigh,unconfiged_t域创建范例表，函数。

CREATE TABLE genre (
gid     integer primary key,
dsc     varchar (32)
);
GRANT ALL ON genre TO PUBLIC;
CREATE TABLE drink (
id      integer primary key,
gid     integer references genre(gid),
name    varchar(32),
price   integer
);
GRANT ALL ON drink TO PUBLIC;
INSERT INTO genre (gid, dsc)
VALUES (5, ’soft drink’),
(6, ‘fizzwater’),
(7, ‘alcohol’);
INSERT INTO drink (id, gid, name, price)
VALUES (11, NULL, ‘water’, 100),
(12,    6, ‘coke’,  120),
(13,    5, ‘milk’,  150),
(14,    5, ‘juice’, 130),
(15,    6, ‘cider’, 140),
(16, NULL, ’soup’,  180),
(17,    7, ‘beer’,  240),
(18,    7, ‘wine’,  480);
UPDATE genre SET security_context = ’system_u:object_r:sepgsql_table_t:s0:c0′ WHERE gid = 6;
UPDATE drink SET security_context = ’system_u:object_r:sepgsql_table_t:s0:c0′ WHERE id IN (15,16,17);

在unconfined_t:SystemLow-SystemHigh环境中访问将获得所有行。

kaigai=# SELECT security_context, * FROM drink;

security_context             | id | gid | name  | price

——————————————+—-+—–+——-+——-

unconfined_u:object_r:sepgsql_table_t:s0 | 11 |     | water |   100

unconfined_u:object_r:sepgsql_table_t:s0 | 12 |   6 | coke  |   120

unconfined_u:object_r:sepgsql_table_t:s0 | 13 |   5 | milk  |   150

unconfined_u:object_r:sepgsql_table_t:s0 | 14 |   5 | juice |   130

unconfined_u:object_r:sepgsql_table_t:s0 | 18 |   7 | wine  |   480

system_u:object_r:sepgsql_table_t:s0:c0  | 15 |   6 | cider |   140

system_u:object_r:sepgsql_table_t:s0:c0  | 16 |     | soup  |   180

system_u:object_r:sepgsql_table_t:s0:c0  | 17 |   7 | beer  |   240

(8 rows)

kaigai=#

如果使用弱权限访问时，任何被授权的行将被过滤。

[kaigai@saba test]$ runcon -l s0 psql -q

kaigai=# SELECT sepgsql_getcon();

sepgsql_getcon

——————————————-

unconfined_u:unconfined_r:unconfined_t:s0

(1 row)

kaigai=# SELECT security_context, * FROM drink;

security_context             | id | gid | name  | price

——————————————+—-+—–+——-+——-

unconfined_u:object_r:sepgsql_table_t:s0 | 11 |     | water |   100

unconfined_u:object_r:sepgsql_table_t:s0 | 12 |   6 | coke  |   120

unconfined_u:object_r:sepgsql_table_t:s0 | 13 |   5 | milk  |   150

unconfined_u:object_r:sepgsql_table_t:s0 | 14 |   5 | juice |   130

unconfined_u:object_r:sepgsql_table_t:s0 | 18 |   7 | wine  |   480

(5 rows)

kaigai=#

SE-PostgreSQL输出时将过滤掉违反策略的行，并且SE策略在JOIN之前，所以JOIN操作获得的结果还是一样的。

使用策略后得到的结果。

[kaigai@saba test]$ runcon -l s0 psql -q

kaigai=# SELECT sepgsql_getcon();

sepgsql_getcon

——————————————-

unconfined_u:unconfined_r:unconfined_t:s0

(1 row)

kaigai=# SELECT * FROM drink left join genre on drink.gid = genre.gid;

id | gid | name  | price | gid |    dsc

—-+—–+——-+——-+—–+————

11 |     | water |   100 |     |

12 |   6 | coke  |   120 |     |

13 |   5 | milk  |   150 |   5 | soft drink

14 |   5 | juice |   130 |   5 | soft drink

18 |   7 | wine  |   480 |   7 | alcohol

(5 rows)

kaigai=#

2. 列级访问控制

在unconfiged_u域创建如下示例表与函数：

CREATE TABLE customer (

cid     integer primary key,

cname   varchar(32),

credit  varchar(32)  CONTEXT = ’system_u:object_r:sepgsql_secret_table_t:s0′

);

GRANT ALL ON customer TO PUBLIC;

INSERT INTO customer (cid, cname, credit)

VALUES ( 10, ‘jack’, ‘1111-2222-3333-4444′),

( 13, ‘adam’, ‘5555-6666-7777-8888′),

( 14, ‘liza’, ‘9876-5432-1098-7654′);

CREATE OR REPLACE FUNCTION show_credit (integer) RETURNS text

LANGUAGE ’sql’

CONTEXT = ’system_u:object_r:sepgsql_trusted_proc_t’

AS ‘SELECT substring(credit from ”^[0-9]+-”) || ”xxxx-xxxx-xxxx” FROM customer WHERE CID = $1′;

注意到customer表的credit列被定义为sepgsql_secret_table_t类型，

所以看下面的例子，违反策略的话将返回异常：

[tak@saba ~]$ id -Z

user_u:user_r:user_t:s0

[tak@saba ~]$ psql postgres

Welcome to psql 8.3.0, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms

\h for help with SQL commands

\? for help with psql commands

\g or terminate with semicolon to execute query

\q to quit

postgres=# SELECT sepgsql_getcon();

sepgsql_getcon

————————-

user_u:user_r:user_t:s0

(1 row)

postgres=# SELECT * FROM customer;

ERROR:  SELinux: denied { select }                            \

scontext=user_u:user_r:user_t:s0                      \

tcontext=system_u:object_r:sepgsql_secret_table_t:s0  \

tclass=db_column name=customer.credit

不选择这个credit列的话返回正常：

postgres=# SELECT cid, cname FROM customer;

cid | cname

—–+——-

10 | jack

13 | adam

14 | liza

(3 rows)

注意到，前面还建立了一个受信任的函数，使用这个函数访问敏感信息是一个相对可靠的方法：

访问该函数时，被转移到sepgsql_trusted_proc_t域，因此允许访问CREDIT列，函数中使用了隐式的方法访问CREDIT列。相对来说还是安全的。

postgres=# SELECT cid, cname, show_credit(cid) FROM customer;

cid | cname |     show_credit

—–+——-+———————

10 | jack  | 1111-xxxx-xxxx-xxxx

13 | adam  | 5555-xxxx-xxxx-xxxx

14 | liza  | 9876-xxxx-xxxx-xxxx

(3 rows)

postgres=#

 最终安全目标（整套系统的安全策略一致）：

2010年06月07日 - 德哥(DiGoal,Just Do It!) - Just Do it
 
 

