PostgreSQL research

Deal with Pgbouncer Error “closing because: Old V2 protocol not supported”

2010-06-04 16:45:45   查看原文>>

大概是在2008年的时候，斯凯的数据库已经初具规模了，为了更好的掌握数据库运行状态，做了一个服务器运行状态统计信息收集的系统。（当时对很多开源的工具还不太了解。现在想想发现和HQ，OACLE的grid control非常类似：

架构图如下:

Deal with Pgbouncer Error “closing because: Old V2 protocol not supported” - 德哥(DiGoal,Just Do It!) - Not Only DBA

分为三个层次：

第一个部分：

agent,部署在被监控的服务器上面，收集实时的服务器运行状况，发送到repository.

我这里是使用ISQL来实现的（需要在被监控的服务器上安装unixODBC）。

第二部分：

Repository，用于存储来自被监控的服务器发送过来的数据。另一个功能是提供给HTML服务器生成报告的历史数据。

我这里使用了一个PostgreSQL来作为Repository。

第三部分：

Ctl层和HTML展现层，用于配置一些展现需要的信息，获取来自REPOSITORY的数据并在HTML上展现出来。

最近在一个测试环境中搭建了一套一样的环境。与之前不同的是，这次增加了一个PostgreSQL的连接池pgbouncer 1.3.3。

数据库使用的是PostgreSQL9beta1 。

一用就出现问题了，Agent去连接repository的时候报“[ISQL]ERROR: Could not SQLConnect”这样的错误。

到pgbouncer的日志中看到如下输出：

2010-06-04 15:35:04.733 15323 LOG C-0×998e490: (nodb)/(nouser)@xxx.xxx.xxx.xxx:17905 closing because: Old V2 protocol not supported (age=0)
2010-06-04 15:35:04.733 15323 WARNING C-0×998e490: (nodb)/(nouser)@xxx.xxx.xxx.xxx:17905 Pooler Error: Old V2 protocol not supported
从日志上分析，客户端发起请求使用的V2协议已经不被Pgbouncer支持了。
接下来马上绕过pgbouncer，agent直接和postgresql9连接，成功。
OK，找到问题的根源了，来解决它，毕竟PGBOUNCER还是要使用滴。
首先翻阅了PGBOUNCER的说明文档，最后在pgbouncer的维基发现有这么一句话”Supports protocol V3 only, so backend version must be >= 7.4.”
也就是说pgbouncer仅仅支持V3是没错的啦。
OK，那来看看ODBC的配置里面有没有可以指定协议版本的，又翻阅了一下unixODBC的手册，发现下面一段话：

Protocol: Note that when using SSL connections this setting is ignored.
6.2: Forces driver to use PostgreSQL 6.2(V0) protocol, which had different byte ordering, protocol, and other semantics.
6.3: Use the 6.3(V1) protocol. This is compatible with both V1(6.3) and V2(6.4 to 7.3) backends.
6.4+: Use the 6.4(V2) protocol. This is only compatible with 6.4 and higher backends.
7.4+: Use the 7.4(V3) protocol. This is only compatible with 7.4 and higher backends.
很明显，是可以改滴，赶紧吧odbc.ini修改了一下
[PostgreSQL]
Description         = Test to Postgres
Driver              = PostgreSQL
Trace               = Yes
TraceFile           = /tmp/sql.log
Database            = xxx
Servername          = xxx.xxx.xxx.xxx
UserName            =
Password            =
Port                = 20013
Protocol            = 7.4
ReadOnly            = No
RowVersioning       = No
ShowSystemTables    = No
ShowOidColumn       = No
FakeOidIndex        = No
ConnSettings        =
再次使用ISQL连接pgbouncer，还是报一样的错误，这下纳闷了。
毫无头绪。
不过很快就有了新的突破，/etc/odbcinst.ini找一下用的SO是不是太老了，压根就没有V3的支持。
# Included in the unixODBC package
[PostgreSQL]
Description     = ODBC for PostgreSQL
Driver          = /usr/lib64/libodbcpsql.so
Setup           = /usr/lib64/libodbcpsqlS.so
FileUsage       = 1
马上去postgresql-odbc上面下了一个最新的psqlodbc编译安装。
重新指向so文件。
[PostgreSQL]
Description         = Test to Postgres
#Driver              = PostgreSQL
Driver              = /usr/local/lib/psqlodbcw.so
Trace               = Yes
TraceFile           = /tmp/sql.log
Database            = xxx
Servername          = xxx.xxx.xxx.xxx
UserName            =
Password            =
Port                = 20013
Protocol            = 7.4  #(这里调成6.4的话也是会报V2不被支持的错误的)
ReadOnly            = No
RowVersioning       = No
ShowSystemTables    = No
ShowOidColumn       = No
FakeOidIndex        = No
ConnSettings        =
终于，Old V2的异常消失了，这时有一个
[08P01][unixODBC]ERROR: Unsupported startup parameter: geqo
[ISQL]ERROR: Could not SQLConnect
从异常信息上看geqo是一个已经废弃的参数，在pgbouncer里面忽略这个参数，重新连接，一切正常。
总结：
对待这种情况一定要淡定，坚持,总会有突破口的(当然对英文文档的阅读能力和平时的积累是必不可少的)。
[参考]
pgbouncer
unixODBC
unixODBC-devel
psqlodbc
www.easysoft.com
[依赖关系]
安装 psqlodbc 需要先安装 unixODBC-devel

 

