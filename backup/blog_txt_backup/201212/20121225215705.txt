PostgreSQL research

PostgreSQL MVCC - age introduce

2012-12-25 21:57:05   查看原文>>

PostgreSQL 靠xid以及tuple的事务状态标记(t_infomask)来判断TUPLE的可见性.
另外vacuum以及autovacuum也需要xid来判断是否将TUPLE修改为frozen的状态.
涉及到几个数据库参数可参见postgresql.conf
这里主要讲一下怎么计算tuple的age. (因为xid是32位的, 是循环使用的, 所以需要frozen机制)
计算age可以用到函数age(xid)

digoal=> \sf+ age(xid)
        CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
         RETURNS integer
         LANGUAGE internal
         STABLE STRICT
1       AS $function$xid_age$function$;


举例 : 

digoal=> select ctid,cmin,cmax,xmin,xmax,age(xmin),* from test limit 1;
    ctid    | cmin | cmax |    xmin    | xmax | age | id | info 
------------+------+------+------------+------+-----+----+------
 (13136,30) |    0 |    0 | 1155636848 |    0 |  20 |  2 | test
(1 row)


获取两个事务后 : 

digoal=> select txid_current();
 txid_current 
--------------
   1155636868
(1 row)

digoal=> select txid_current();
 txid_current 
--------------
   1155636869
(1 row)


age增加2 : 

digoal=> select ctid,cmin,cmax,xmin,xmax,age(xmin),* from test limit 1;
    ctid    | cmin | cmax |    xmin    | xmax | age | id | info 
------------+------+------+------------+------+-----+----+------
 (13136,30) |    0 |    0 | 1155636848 |    0 |  22 |  2 | test
(1 row)


22这个值等于下一个xid-xmin, 解释见末尾的 GetStableLatestTransactionId : 

digoal=> select (1155636869+1)-1155636848;
 ?column? 
----------
       22
(1 row)


LatestTransactionId 也可以通过以下函数得到 : 

digoal=> select txid_current_snapshot();
 txid_current_snapshot  
------------------------
 1155636870:1155636870:
(1 row)


注意txid_current()和txid_current_snapshot()得到的是txid, 64比特. xid是32比特的. 
因为这个测试库的事务量目前还未超过20亿, xid还未rotate, 所以txid-xid的到age是可行的, 如果xid已经rotate了, 那么直接减就不对了.
参见 : 
http://blog.163.com/digoal@126/blog/static/1638770402011830105342275/
http://blog.163.com/digoal@126/blog/static/16387704020118301222520/

txid_current()和txid_current_snapshot()对应的internal函数如下 : 

digoal=> \sf+ txid_current_snapshot
        CREATE OR REPLACE FUNCTION pg_catalog.txid_current_snapshot()
         RETURNS txid_snapshot
         LANGUAGE internal
         STABLE STRICT
1       AS $function$txid_current_snapshot$function$
digoal=> \sf+ txid_current
        CREATE OR REPLACE FUNCTION pg_catalog.txid_current()
         RETURNS bigint
         LANGUAGE internal
         STABLE STRICT
1       AS $function$txid_current$function$

/*
 * Public functions.
 *
 * txid_current() and txid_current_snapshot() are the only ones that
 * communicate with core xid machinery.  All the others work on data
 * returned by them.
 */

/*
 * txid_current() returns int8
 *
 *      Return the current toplevel transaction ID as TXID
 *      If the current transaction does not have one, one is assigned.
 */
Datum
txid_current(PG_FUNCTION_ARGS)
{
        txid            val;
        TxidEpoch       state;

        /*
         * Must prevent during recovery because if an xid is not assigned we try
         * to assign one, which would fail. Programs already rely on this function
         * to always return a valid current xid, so we should not change this to
         * return NULL or similar invalid xid.
         */
        PreventCommandDuringRecovery("txid_current()");

        load_xid_epoch(&state);

        val = convert_xid(GetTopTransactionId(), &state);

        PG_RETURN_INT64(val);
}

/*
 * txid_current_snapshot() returns txid_snapshot
 *
 *              Return current snapshot in TXID format
 *
 * Note that only top-transaction XIDs are included in the snapshot.
 */
Datum
txid_current_snapshot(PG_FUNCTION_ARGS)
{
        TxidSnapshot *snap;
        uint32          nxip,
                                i,
                                size;
        TxidEpoch       state;
        Snapshot        cur;

        cur = GetActiveSnapshot();
        if (cur == NULL)
                elog(ERROR, "no active snapshot set");

        load_xid_epoch(&state);

        /* allocate */
        nxip = cur->xcnt;
        size = TXID_SNAPSHOT_SIZE(nxip);
        snap = palloc(size);
        SET_VARSIZE(snap, size);

        /* fill */
        snap->xmin = convert_xid(cur->xmin, &state);
        snap->xmax = convert_xid(cur->xmax, &state);
        snap->nxip = nxip;
        for (i = 0; i < nxip; i++)
                snap->xip[i] = convert_xid(cur->xip[i], &state);

        /* we want them guaranteed to be in ascending order */
        sort_snapshot(snap);

        PG_RETURN_POINTER(snap);
}



vacuum freeze后, xmin变成了2, 这个2的含义可以参看src/include/access/transam.h, 在本文末尾 : 

digoal=> vacuum FREEZE test;
VACUUM
digoal=> select ctid,cmin,cmax,xmin,xmax,age(xmin),* from test limit 1;
    ctid    | cmin | cmax | xmin | xmax |    age     | id | info 
------------+------+------+------+------+------------+----+------
 (13136,30) |    0 |    0 |    2 |    0 | 2147483647 |  2 | test
(1 row)


函数age(xid)的源码如下 : 

src/backend/utils/adt/xid.c
/*
 *              xid_age                 - compute age of an XID (relative to latest stable xid)
 */
Datum
xid_age(PG_FUNCTION_ARGS)
{
        TransactionId xid = PG_GETARG_TRANSACTIONID(0);
        TransactionId now = GetStableLatestTransactionId();

        /* Permanent XIDs are always infinitely old */
        if (!TransactionIdIsNormal(xid))
                PG_RETURN_INT32(INT_MAX);

        PG_RETURN_INT32((int32) (now - xid));
}


当前如果已分配xid则使用当前xid, 如果未分配则使用下一个xid.
src/backend/access/transam/xact.c
/*
 *      GetStableLatestTransactionId
 *
 * Get the transaction's XID if it has one, else read the next-to-be-assigned
 * XID.  Once we have a value, return that same value for the remainder of the
 * current transaction.  This is meant to provide the reference point for the
 * age(xid) function, but might be useful for other maintenance tasks as well.
 */
TransactionId
GetStableLatestTransactionId(void)
{
        static LocalTransactionId lxid = InvalidLocalTransactionId;
        static TransactionId stablexid = InvalidTransactionId;

        if (lxid != MyProc->lxid)
        {
                lxid = MyProc->lxid;
                stablexid = GetTopTransactionIdIfAny();
                if (!TransactionIdIsValid(stablexid))
                        stablexid = ReadNewTransactionId();
        }

        Assert(TransactionIdIsValid(stablexid));

        return stablexid;
}



【参考】
1. http://blog.163.com/digoal@126/blog/static/163877040201183043153622/
2. http://blog.163.com/digoal@126/blog/static/1638770402011830105342275/
3. http://blog.163.com/digoal@126/blog/static/16387704020118301222520/
4. http://www.postgresql.org/docs/9.2/static/runtime-config-autovacuum.html
5. http://www.postgresql.org/docs/9.2/static/routine-vacuuming.html#VACUUM-FOR-WRAPAROUND
6. http://blog.163.com/digoal@126/blog/static/163877040201210134586363/
7. http://blog.163.com/digoal@126/blog/static/163877040201041111516154/
8. src/include/access/transam.h

00020 /* ----------------
00021  *      Special transaction ID values
00022  *
00023  * BootstrapTransactionId is the XID for "bootstrap" operations, and
00024  * FrozenTransactionId is used for very old tuples.  Both should
00025  * always be considered valid.
00026  *
00027  * FirstNormalTransactionId is the first "normal" transaction id.
00028  * Note: if you need to change it, you must change pg_class.h as well.
00029  * ----------------
00030  */
00031 #define InvalidTransactionId        ((TransactionId) 0)
00032 #define BootstrapTransactionId      ((TransactionId) 1)
00033 #define FrozenTransactionId         ((TransactionId) 2)
00034 #define FirstNormalTransactionId    ((TransactionId) 3)
00035 #define MaxTransactionId            ((TransactionId) 0xFFFFFFFF)
00036 
00037 /* ----------------
00038  *      transaction ID manipulation macros
00039  * ----------------
00040  */
00041 #define TransactionIdIsValid(xid)       ((xid) != InvalidTransactionId)
00042 #define TransactionIdIsNormal(xid)      ((xid) >= FirstNormalTransactionId)
00043 #define TransactionIdEquals(id1, id2)   ((id1) == (id2))
00044 #define TransactionIdStore(xid, dest)   (*(dest) = (xid))
00045 #define StoreInvalidTransactionId(dest) (*(dest) = InvalidTransactionId)


Flag Counter
