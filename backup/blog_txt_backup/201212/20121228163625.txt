PostgreSQL research

PostgreSQL json_accessors

2012-12-28 16:36:25   查看原文>>

PostgreSQL 9.2开始引入了json数据类型, 目前数据库自带的支持操作还比较少. 只有2个函数如下 : 

Table 9-39. JSON Support Functions

┌───────────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────────────────────────────────────┬───────────────────┐
│               Function                │                                                                                Description                                                                                 │                Example                 │  Example Result   │
├───────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────────────────────────────────────┼───────────────────┤
│array_to_json(anyarray [, pretty_bool])│Returns the array as JSON. A PostgreSQL multidimensional array becomes a JSON array of arrays. Line feeds will be added between dimension 1 elements if pretty_bool is true.│array_to_json('{{1,5},{99,100}}'::int[])│[[1,5],[99,100]]   │
├───────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────────────────────────────────────┼───────────────────┤
│row_to_json(record [, pretty_bool])    │Returns the row as JSON. Line feeds will be added between level 1 elements if pretty_bool is true.                                                                          │row_to_json(row(1,'foo'))               │{"f1":1,"f2":"foo"}│
└───────────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────────────────────────────────────┴───────────────────┘
前段时间写过一篇关于javascript转用PostgreSQL 函数语言来实现的文章, 
http://blog.163.com/digoal@126/blog/static/163877040201293082737559/
文中使用了普通的表, 虽然实现了与mongoDB中同样的功能, 但是丢失了mongoDB的数据非结构化的弹性, 例如日志的格式变更, PostgreSQL中就需要修改表结构.
要规避这个结构化的限制, 可以选择使用json类型或者text类型.
本文针对text类型展开讲解. 使用json_accessors这个插件来实现对text类型存储json格式的数据进行分析.
【安装】

wget http://api.pgxn.org/dist/json_accessors/1.3.5/json_accessors-1.3.5.zip
unzip json_accessors-1.3.5.zip
mv json_accessors-1.3.5 postgresql-9.2.1/contrib/
su - root
. /home/ocz/.bash_profile
cd /home/ocz/postgresql-9.2.1/contrib/json_accessors-1.3.5
gmake clean
gmake
gmake install
su - ocz
ocz@db-172-16-3-150-> psql
psql (9.2.1)
Type "help" for help.
postgres=# \c digoal postgres
You are now connected to database "digoal" as user "postgres".
digoal=# create extension json_accessors;
CREATE EXTENSION



SQL脚本内容如下 : 
包含所有支持的操作函数.

$PGHOME/share/extension/json_accessors--1.3.5.sql
/* json_accessors.sql */

-- complain if script is sourced in psql, rather than via CREATE EXTENSION
\echo Use "create extension json_accessors" to load this file. \quit

-- must be run as a normal user

-- Scalar functions

-- JSON builder
create or replace function json_get_object(text, text) returns text
 as 'MODULE_PATHNAME' language C immutable strict;

create or replace function json_get_text(text, text) returns text
 as 'MODULE_PATHNAME' language C immutable strict;

create or replace function json_get_boolean(text, text) returns boolean
 as 'MODULE_PATHNAME' language C immutable strict;

create or replace function json_get_int(text, text) returns int
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_get_bigint(text, text) returns bigint
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_get_numeric(text, text) returns numeric
 as 'MODULE_PATHNAME' language C immutable strict;

create or replace function json_get_timestamp(text, text) returns timestamp without time zone
 as 'MODULE_PATHNAME' language C immutable strict;

-- Array functions

create or replace function json_array_to_object_array(text) returns text[]
 as 'MODULE_PATHNAME' language C immutable strict;

create or replace function json_array_to_text_array(text) returns text[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_array_to_boolean_array(text) returns boolean[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_array_to_int_array(text) returns int[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_array_to_bigint_array(text) returns bigint[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_array_to_numeric_array(text) returns numeric[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_array_to_timestamp_array(text) returns timestamp without time zone[]
 as 'MODULE_PATHNAME' language C immutable strict; 

-- Indirect array functions

create or replace function json_get_object_array(text, text) returns text[]
 as 'MODULE_PATHNAME' language C immutable strict;

create or replace function json_get_text_array(text, text) returns text[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_get_boolean_array(text, text) returns boolean[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_get_int_array(text, text) returns int[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_get_bigint_array(text, text) returns bigint[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_get_numeric_array(text, text) returns numeric[]
 as 'MODULE_PATHNAME' language C immutable strict; 

create or replace function json_get_timestamp_array(text, text) returns timestamp without time zone[]
 as 'MODULE_PATHNAME' language C immutable strict; 



【使用举例】
测试表 : 

digoal=> create table json_text_test (info text);



测试数据 : 
就用前面一篇BLOG的数据, 但是需要把timestamp的格式修改一下, 否则parse格式会报错.

digoal=> insert into json_text_test values ('{
        "timestamp" : "2012-10-29T17:22:47.616Z",
 "level" : "INFO",
        "thread" : "DubboServerHandler-thread-183",
        "message" : "unknow tag:212, just ignore.",
        "loggerName" : {
                "fullyQualifiedClassName" : "stc.skymobi.bean.tlv.decode.decoders.BeanTLVDecoder",
                "package" : [
                        "stc",
                        "skymobi",
                        "bean",
                        "tlv",
                        "decode",
                        "decoders",
                        "BeanTLVDecoder"
                ],
                "className" : "BeanTLVDecoder"
        },
        "fileName" : "BeanTLVDecoder.java",
        "method" : "decode",
        "lineNumber" : "93",
        "class" : {
                "fullyQualifiedClassName" : "stc.skymobi.bean.tlv.decode.decoders.BeanTLVDecoder",
                "package" : [
                        "stc",
                        "skymobi",
                        "bean",
                        "tlv",
                        "decode",
                        "decoders",
                        "BeanTLVDecoder"
                ],
                "className" : "BeanTLVDecoder"
        },
        "host" : {
                "process" : "20592@10_10_10_130.localdomain",
                "name" : "10_10_10_130.localdomain",
                "ip" : "10.10.10.130"
        }
}');



测试数据获取 : 
获取text值 : 

digoal=> select ctid,json_get_text(info, 'message') from json_text_test;
 ctid  |        json_get_text         
-------+------------------------------
 (0,1) | unknow tag:212, just ignore.
(1 row)



获取int值 : 

digoal=> select ctid,json_get_text(info, 'lineNumber') from json_text_test;
 ctid  | json_get_text 
-------+---------------
 (0,1) | 93
(1 row)



获取json子对象 : 

digoal=> select ctid,json_get_object(info, 'loggerName') from json_text_test;
 ctid  |                                                                                       json_get_object                      
                                                                  
-------+----------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------
 (0,1) | {"fullyQualifiedClassName":"stc.skymobi.bean.tlv.decode.decoders.BeanTLVDecoder","package":["stc","skymobi","bean","tlv","d
ecode","decoders","BeanTLVDecoder"],"className":"BeanTLVDecoder"}
(1 row)



获取子对象中的对象 : 

digoal=> select json_get_text(json_get_object(info, 'loggerName'),'classname') from json_text_test;
 json_get_text  
----------------
 BeanTLVDecoder
(1 row)



获取时间值 : 
注意json_accessors提供的时间转换是12小时制的, 如果要24小时制, 可以改改代码.

digoal=> select json_get_timestamp(info, 'timestamp') from json_text_test;
ERROR:  hour "17" is invalid for the 12-hour clock
HINT:  Use the 24-hour clock, or give an hour between 1 and 12.


改一下json_accessors.c以下代码 : 

        /* format: yyyy-MM-dd HH:mm:ss */
        timestampWithTz = DirectFunctionCall2(to_timestamp,
                                                 PointerGetDatum(cstring_to_text(elem->valuestring)),
                                        PointerGetDatum(cstring_to_text("YYYY-MM-DD HH:MI:SS")));


改成 : 

        /* format: yyyy-MM-dd HH24:mm:ss */
        timestampWithTz = DirectFunctionCall2(to_timestamp,
                                                 PointerGetDatum(cstring_to_text(elem->valuestring)),
                                        PointerGetDatum(cstring_to_text("YYYY-MM-DD HH24:MI:SS")));


重新编译一下 : 

su - root
. /home/ocz/.bash_profile
cd /home/ocz/postgresql-9.2.1/contrib/json_accessors-1.3.5
gmake clean
gmake
gmake install


再次执行正常 : 

digoal=> select json_get_timestamp(info, 'timestamp') from json_text_test;
 json_get_timestamp  
---------------------
 2012-10-29 17:22:47
(1 row)



索引测试 : 

digoal=> create index idx_json_text_test_1 on json_text_test ( json_get_timestamp(info, 'timestamp'));
CREATE INDEX
digoal=> explain analyze select * from json_text_test where json_get_timestamp(info, 'timestamp') >= '2012-12-12 09:00:00';
                                                              QUERY PLAN                                                            
  
------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_json_text_test_1 on json_text_test  (cost=0.00..2.27 rows=1 width=32) (actual time=0.015..0.015 rows=0 loops=1)
   Index Cond: (json_get_timestamp(info, 'timestamp'::text) >= '2012-12-12 09:00:00'::timestamp without time zone)
 Total runtime: 0.051 ms



【小结】
1. 使用text类型提高了弹性, 增加日志输出的属性不需要修改表结构.
例如 : 
在以上json类型中增加1个mod_time属性, 不需要改表结构, 直接插入就可以了.

insert into json_text_test values ('{
        "mod_time" : "2012-10-30T07:22:47.616Z",
 "timestamp" : "2012-10-29T17:22:47.616Z",
 "level" : "INFO",
        "thread" : "DubboServerHandler-thread-183",
        "message" : "unknow tag:212, just ignore.",
        "loggerName" : {
                "fullyQualifiedClassName" : "stc.skymobi.bean.tlv.decode.decoders.BeanTLVDecoder",
                "package" : [
                        "stc",
                        "skymobi",
                        "bean",
                        "tlv",
                        "decode",
                        "decoders",
                        "BeanTLVDecoder"
                ],
                "className" : "BeanTLVDecoder"
        },
        "fileName" : "BeanTLVDecoder.java",
        "method" : "decode",
        "lineNumber" : "93",
        "class" : {
                "fullyQualifiedClassName" : "stc.skymobi.bean.tlv.decode.decoders.BeanTLVDecoder",
                "package" : [
                        "stc",
                        "skymobi",
                        "bean",
                        "tlv",
                        "decode",
                        "decoders",
                        "BeanTLVDecoder"
                ],
                "className" : "BeanTLVDecoder"
        },
        "host" : {
                "process" : "20592@10_10_10_130.localdomain",
                "name" : "10_10_10_130.localdomain",
                "ip" : "10.10.10.130"
        }
}');


统计的SQL也不需要改变. 不会影响统计.

digoal=> select json_get_timestamp(info, 'timestamp'),json_get_timestamp(info, 'mod_time') from json_text_test where json_get_timestamp(info, 'timestamp') <= '2012-12-12 09:00:00';
 json_get_timestamp  | json_get_timestamp  
---------------------+---------------------
 2012-10-29 17:22:47 | 2012-10-30 07:22:47
 2012-10-29 17:22:47 | 
(2 rows)



【参考】
1. http://sourceforge.net/projects/cjson/
2. http://people.planetpostgresql.org/andrew/index.php?/archives/249-Using-PLV8-to-index-JSON.html
3. http://blog.163.com/digoal@126/blog/static/163877040201293082737559/
4. https://github.com/alx3apps/postgresql-json-accessors
5. http://pgxn.org/dist/json_accessors/
6. http://git.postgresql.org/gitweb/?p=json-datatype.git;a=summary
7. http://www.postgresql.org/docs/9.2/static/functions-json.html
8. http://www.postgresql.org/docs/9.2/static/datatype-json.html
9. http://www.ietf.org/rfc/rfc4627.txt
10. http://pgxn.org/dist/plv8/
