PostgreSQL research

which xlog files in pg_xlog dir can be deleted when File system full

2013-01-18 9:37:46   查看原文>>

今天早上镜子兄弟他们的服务器存储数据库以及归档的分区都满了，导致数据库DOWN机。
具体的原因可能是归档文件未即使删除，导致归档目录满。
然后又由于归档目录满，导致归档失败也就是archive_command返回失败，因此pg_xlog中的文件将不会被rotate掉，持续增长。
因此pg_xlog也满了。
数据库写pg_xlog失败自然就挂了。

下面看看遇到这种问题如何解决?
测试环境 : 

PostgreSQL 9.2.1


测试数据 : 

digoal=> create table test (id int primary key,info text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_pkey" for table "test"
CREATE TABLE
digoal=> insert into test select generate_series(1,1000000), repeat(md5(clock_timestamp()::text),30);
INSERT 0 1000000


给数据库施加压力 : 
ocz@db-172-16-3-150-> vi test.sql

\setrandom id 1 1000000
update test set info=repeat(md5(clock_timestamp()::text),30) where id=:id;


施加压力 : 

ocz@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 8 -j 4 -T 600 -h 127.0.0.1 -p 9201 -U digoal digoal


在压力测试结束前, 模拟1次异常DOWN库 : 

ocz@db-172-16-3-150-> pg_ctl stop -m immediate
waiting for server to shut down.... done
server stopped


查看控制文件中数据库的状态 : 

ocz@db-172-16-3-150-> pg_controldata
Database cluster state:               in production


因为是异常停库, 所以数据库状态还显示为 in production . 否则应该是shut down
查看控制文件中检查点REDO的位置信息 : 

Latest checkpoint's REDO location:    96E9/634883D8


根据这个Prior checkpoint location位置信息找到对应的pg_xlog文件。
本例使用的xlog文件为16MB每个, 如果你的不是16MB, 那么最后不是除以16, 以你这边的替代之.

634883D8 = 1665696728
1665696728 / 1024 / 1024 = 1588.53218841552734375
1588.53218841552734375 / 16 = 99.283261775970458984375
99.283261775970458984375 转换成16进制 >= 63


所以pg_xlog的文件名末尾在63之前的都可以删除.

ocz@db-172-16-3-150-> cd $PGDATA/pg_xlog
ocz@db-172-16-3-150-> ll -rt
total 1.1G
-rw------- 1 ocz ocz 16M Jan 18 08:22 00000001000096E900000040
-rw------- 1 ocz ocz 16M Jan 18 08:22 00000001000096E900000041
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E900000042
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E900000043
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E900000044
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E900000045
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E900000046
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E900000047
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E900000048
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E900000049
-rw------- 1 ocz ocz 16M Jan 18 08:23 00000001000096E90000004A
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E90000004B
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E90000004C
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E90000004D
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E90000004E
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E90000004F
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000050
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000051
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000052
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000053
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000054
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000055
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000056
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000057
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000058
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E900000059
-rw------- 1 ocz ocz 16M Jan 18 08:25 00000001000096E90000005A
-rw------- 1 ocz ocz 16M Jan 18 08:26 00000001000096E90000005B
-rw------- 1 ocz ocz 16M Jan 18 09:21 00000001000096E90000005C
-rw------- 1 ocz ocz 16M Jan 18 09:21 00000001000096E90000005D
-rw------- 1 ocz ocz 16M Jan 18 09:21 00000001000096E90000005E
-rw------- 1 ocz ocz 16M Jan 18 09:21 00000001000096E90000005F
-rw------- 1 ocz ocz 16M Jan 18 09:21 00000001000096E900000060
-rw------- 1 ocz ocz 16M Jan 18 09:21 00000001000096E900000061
-rw------- 1 ocz ocz 16M Jan 18 09:21 00000001000096E900000062
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000063
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000064
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000065
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000066
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000067
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000068
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000069
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006A
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006B
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006C
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006D
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006E
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006F
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000070
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000071
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000072
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000073
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000074
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000075
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000076
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000077
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000078
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000079
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000007A
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000007B
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E90000007C
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E90000007D
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E90000007E
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E90000007F
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E900000080
drwx------ 2 ocz ocz 44K Jan 18 09:26 archive_status
截取要删除的部分执行.
ocz@db-172-16-3-150-> ll -rt|awk '{print "rm -rf "$9}'
可删除的文件为 : 
rm -rf 00000001000096E900000040
rm -rf 00000001000096E900000041
rm -rf 00000001000096E900000042
rm -rf 00000001000096E900000043
rm -rf 00000001000096E900000044
rm -rf 00000001000096E900000045
rm -rf 00000001000096E900000046
rm -rf 00000001000096E900000047
rm -rf 00000001000096E900000048
rm -rf 00000001000096E900000049
rm -rf 00000001000096E90000004A
rm -rf 00000001000096E90000004B
rm -rf 00000001000096E90000004C
rm -rf 00000001000096E90000004D
rm -rf 00000001000096E90000004E
rm -rf 00000001000096E90000004F
rm -rf 00000001000096E900000050
rm -rf 00000001000096E900000051
rm -rf 00000001000096E900000052
rm -rf 00000001000096E900000053
rm -rf 00000001000096E900000054
rm -rf 00000001000096E900000055
rm -rf 00000001000096E900000056
rm -rf 00000001000096E900000057
rm -rf 00000001000096E900000058
rm -rf 00000001000096E900000059
rm -rf 00000001000096E90000005A
rm -rf 00000001000096E90000005B
rm -rf 00000001000096E90000005C
rm -rf 00000001000096E90000005D
rm -rf 00000001000096E90000005E
rm -rf 00000001000096E90000005F
rm -rf 00000001000096E900000060
rm -rf 00000001000096E900000061
rm -rf 00000001000096E900000062


删除后剩余文件 : 

ocz@db-172-16-3-150-> ll
total 481M
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000063
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000064
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000065
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000066
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000067
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000068
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000069
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006A
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006B
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006C
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006D
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006E
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000006F
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000070
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000071
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000072
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000073
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000074
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000075
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000076
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000077
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000078
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E900000079
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000007A
-rw------- 1 ocz ocz 16M Jan 18 09:25 00000001000096E90000007B
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E90000007C
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E90000007D
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E90000007E
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E90000007F
-rw------- 1 ocz ocz 16M Jan 18 09:26 00000001000096E900000080
drwx------ 2 ocz ocz 44K Jan 18 09:26 archive_status


启动数据库 : 

ocz@db-172-16-3-150-> pg_ctl start
server starting
ocz@db-172-16-3-150-> LOG:  00000: loaded library "pg_stat_statements"
LOCATION:  load_libraries, miscinit.c:1249


查看日志中的数据库恢复过程, 直到数据库打开 : 

ocz@db-172-16-3-150-> cat postgresql-2013-01-18_092726.csv
2013-01-18 09:27:26.958 CST,,,6583,,50f8a4fe.19b7,1,,2013-01-18 09:27:26 CST,,0,LOG,00000,"database system was interrupted; last known up at 2013-01-18 09:24:28 CST",,,,,,,,"StartupXLOG, xlog.c:6136",""
2013-01-18 09:27:26.958 CST,,,6583,,50f8a4fe.19b7,2,,2013-01-18 09:27:26 CST,,0,LOG,00000,"database system was not properly shut down; automatic recovery in progress",,,,,,,,"StartupXLOG, xlog.c:6396",""
2013-01-18 09:27:26.963 CST,,,6583,,50f8a4fe.19b7,3,,2013-01-18 09:27:26 CST,,0,LOG,00000,"redo starts at 96E9/634883D8",,,,,,,,"StartupXLOG, xlog.c:6625",""
2013-01-18 09:28:10.703 CST,,,6583,,50f8a4fe.19b7,4,,2013-01-18 09:27:26 CST,,0,LOG,00000,"record with zero length at 96E9/8013A8A0",,,,,,,,"ReadRecord, xlog.c:3990",""
2013-01-18 09:28:10.703 CST,,,6583,,50f8a4fe.19b7,5,,2013-01-18 09:27:26 CST,,0,LOG,00000,"redo done at 96E9/8013A860",,,,,,,,"StartupXLOG, xlog.c:6770",""
2013-01-18 09:28:10.703 CST,,,6583,,50f8a4fe.19b7,6,,2013-01-18 09:27:26 CST,,0,LOG,00000,"last completed transaction was at log time 2013-01-18 09:26:08.780037+08",,,,,,,,"StartupXLOG, xlog.c:6775",""
2013-01-18 09:28:10.715 CST,,,6583,,50f8a4fe.19b7,7,,2013-01-18 09:27:26 CST,,0,LOG,00000,"checkpoint starting: end-of-recovery immediate",,,,,,,,"LogCheckpointStart, xlog.c:7602",""
2013-01-18 09:28:11.099 CST,,,6583,,50f8a4fe.19b7,8,,2013-01-18 09:27:26 CST,,0,LOG,00000,"checkpoint complete: wrote 14713 buffers (2.8%); 0 transaction log file(s) added, 0 removed, 0 recycled; write=0.165 s, sync=0.215 s, total=0.395 s; sync files=8, longest=0.176 s, average=0.026 s",,,,,,,,"LogCheckpointEnd, xlog.c:7690",""
2013-01-18 09:28:11.115 CST,,,6612,,50f8a52b.19d4,1,,2013-01-18 09:28:11 CST,,0,LOG,00000,"autovacuum launcher started",,,,,,,,"AutoVacLauncherMain, autovacuum.c:407",""
2013-01-18 09:28:11.116 CST,,,6581,,50f8a4fe.19b5,1,,2013-01-18 09:27:26 CST,,0,LOG,00000,"database system is ready to accept connections",,,,,,,,"reaper, postmaster.c:2408",""

【其他】
1. 如果想保住所有的归档文件以及未归档成功的pg_xlog文件, 那就扩容吧。数据库启动后会自动继续归档未成功的XLOG。
2. pg_xlog文件的命名规则可参考 : 
http://blog.163.com/digoal@126/blog/static/1638770402012914112949546/
3. checkpoint和恢复时都会有删除pg_xlog不需要的文件的操作.
如下 : 
src/backend/access/transam/xlog.c

/*
 * Recycle or remove all log files older or equal to passed log/seg#
 *
 * endptr is current (or recent) end of xlog; this is used to determine
 * whether we want to recycle rather than delete no-longer-wanted log files.
 */
static void
RemoveOldXlogFiles(uint32 log, uint32 seg, XLogRecPtr endptr)
{
        uint32          endlogId;
        uint32          endlogSeg;
        int                     max_advance;
        DIR                *xldir;
        struct dirent *xlde;
        char            lastoff[MAXFNAMELEN];
        char            path[MAXPGPATH];

#ifdef WIN32
        char            newpath[MAXPGPATH];
#endif
        struct stat statbuf;

        /*
         * Initialize info about where to try to recycle to.  We allow recycling
         * segments up to XLOGfileslop segments beyond the current XLOG location.
         */
        XLByteToPrevSeg(endptr, endlogId, endlogSeg);
        max_advance = XLOGfileslop;

        xldir = AllocateDir(XLOGDIR);
        if (xldir == NULL)
                ereport(ERROR,
                                (errcode_for_file_access(),
                                 errmsg("could not open transaction log directory \"%s\": %m",
                                                XLOGDIR)));

        XLogFileName(lastoff, ThisTimeLineID, log, seg);
        elog(DEBUG2, "attempting to remove WAL segments older than log file %s",
                 lastoff);

        while ((xlde = ReadDir(xldir, XLOGDIR)) != NULL)
        {
                /*
                 * We ignore the timeline part of the XLOG segment identifiers in
                 * deciding whether a segment is still needed.  This ensures that we
                 * won't prematurely remove a segment from a parent timeline. We could
                 * probably be a little more proactive about removing segments of
                 * non-parent timelines, but that would be a whole lot more
                 * complicated.
                 *
                 * We use the alphanumeric sorting property of the filenames to decide
                 * which ones are earlier than the lastoff segment.
                 */
                if (strlen(xlde->d_name) == 24 &&
                        strspn(xlde->d_name, "0123456789ABCDEF") == 24 &&
                        strcmp(xlde->d_name + 8, lastoff + 8) <= 0)
                {
                        if (RecoveryInProgress() || XLogArchiveCheckDone(xlde->d_name))
                        {
                                snprintf(path, MAXPGPATH, XLOGDIR "/%s", xlde->d_name);

                                /* Update the last removed location in shared memory first */
                                UpdateLastRemovedPtr(xlde->d_name);

                                /*
                                 * Before deleting the file, see if it can be recycled as a
                                 * future log segment. Only recycle normal files, pg_standby
                                 * for example can create symbolic links pointing to a
                                 * separate archive directory.
                                 */
                                if (lstat(path, &statbuf) == 0 && S_ISREG(statbuf.st_mode) &&
                                        InstallXLogFileSegment(&endlogId, &endlogSeg, path,
                                                                                   true, &max_advance, true))
                                {
                                        ereport(DEBUG2,
                                                        (errmsg("recycled transaction log file \"%s\"",
                                                                        xlde->d_name)));
                                        CheckpointStats.ckpt_segs_recycled++;
                                        /* Needn't recheck that slot on future iterations */
                                        if (max_advance > 0)
                                        {
                                                NextLogSeg(endlogId, endlogSeg);
                                                max_advance--;
                                        }
                                }
                                else
                                {
                                        /* No need for any more future segments... */
                                        int                     rc;

                                        ereport(DEBUG2,
                                                        (errmsg("removing transaction log file \"%s\"",
                                                                        xlde->d_name)));

#ifdef WIN32

                                        /*
                                         * On Windows, if another process (e.g another backend)
                                         * holds the file open in FILE_SHARE_DELETE mode, unlink
                                         * will succeed, but the file will still show up in
                                         * directory listing until the last handle is closed. To
                                         * avoid confusing the lingering deleted file for a live
                                         * WAL file that needs to be archived, rename it before
                                         * deleting it.
                                         *
                                         * If another process holds the file open without
                                         * FILE_SHARE_DELETE flag, rename will fail. We'll try
                                         * again at the next checkpoint.
                                         */
                                        snprintf(newpath, MAXPGPATH, "%s.deleted", path);
                                        if (rename(path, newpath) != 0)
                                        {
                                                ereport(LOG,
                                                                (errcode_for_file_access(),
                                                                 errmsg("could not rename old transaction log file \"%s\": %m",
                                                                                path)));
                                                continue;
                                        }
                                        rc = unlink(newpath);
#else
                                        rc = unlink(path);
#endif
                                        if (rc != 0)
                                        {
                                                ereport(LOG,
                                                                (errcode_for_file_access(),
                                                                 errmsg("could not remove old transaction log file \"%s\": %m",
                                                                                path)));
                                                continue;
                                        }
                                        CheckpointStats.ckpt_segs_removed++;
                                }

                                XLogArchiveCleanup(xlde->d_name);
                        }
                }
        }

        FreeDir(xldir);
}



调用删除函数 : 

1. 
/*
 * Establish a restartpoint if possible.
 *
 * This is similar to CreateCheckPoint, but is used during WAL recovery
 * to establish a point from which recovery can roll forward without
 * replaying the entire recovery log.
 *
 * Returns true if a new restartpoint was established. We can only establish
 * a restartpoint if we have replayed a safe checkpoint record since last
 * restartpoint.
 */
bool
CreateRestartPoint(int flags)

2. 
/*
 * Perform a checkpoint --- either during shutdown, or on-the-fly
 *
 * flags is a bitwise OR of the following:
 *      CHECKPOINT_IS_SHUTDOWN: checkpoint is for database shutdown.
 *      CHECKPOINT_END_OF_RECOVERY: checkpoint is for end of WAL recovery.
 *      CHECKPOINT_IMMEDIATE: finish the checkpoint ASAP,
 *              ignoring checkpoint_completion_target parameter.
 *      CHECKPOINT_FORCE: force a checkpoint even if no XLOG activity has occurred
 *              since the last one (implied by CHECKPOINT_IS_SHUTDOWN or
 *              CHECKPOINT_END_OF_RECOVERY).
 *
 * Note: flags contains other bits, of interest here only for logging purposes.
 * In particular note that this routine is synchronous and does not pay
 * attention to CHECKPOINT_WAIT.
 */
void
CreateCheckPoint(int flags)

        /*
         * Delete old log files (those no longer needed even for previous
         * checkpoint or the standbys in XLOG streaming).
         */
        if (_logId || _logSeg)
        {
                KeepLogSeg(recptr, &_logId, &_logSeg);
                PrevLogSeg(_logId, _logSeg);
                RemoveOldXlogFiles(_logId, _logSeg, recptr);
        }



【参考】
1. http://blog.163.com/digoal@126/blog/static/16387704020130109400557/
2. http://blog.163.com/digoal@126/blog/static/163877040201171233710582/
3. http://blog.163.com/digoal@126/blog/static/1638770402012914112949546/
4. src/include/catalog/pg_control.h
5. src/backend/access/transam/xlog.c
