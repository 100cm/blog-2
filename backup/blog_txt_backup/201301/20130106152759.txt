PostgreSQL research

PostgreSQL pl/v8 language (use google v8 javascript engine)

2013-01-06 15:27:59   查看原文>>

PostgreSQL 过程语言较多, 如pljava, plpgsql, pltcl, plpython 等.
因为前段时间想劝说一些使用mongoDB的业务迁移到PostgreSQL, 开发人员认为PostgreSQL不支持javascript比较犹豫.
那么PostgreSQL如何支持javascript呢? 其中一种方法是使用plv8语言.
本文涉及到的是plv8的安装部分.
详细的使用请参考 : 
http://api.pgxn.org/src/plv8/plv8-1.3.0/
安装前首先确认gcc和gmake的版本, gcc请使用4.1.x, gmake请使用3.81以上版本.

[root@db-172-16-3-33 ~]# gcc -v
Using built-in specs.
Target: x86_64-redhat-linux
Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-libgcj-multifile --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --disable-plugin --with-java-home=/usr/lib/jvm/java-1.4.2-gcj-1.4.2.0/jre --with-cpu=generic --host=x86_64-redhat-linux
Thread model: posix
gcc version 4.1.2 20080704 (Red Hat 4.1.2-51)

[root@db-172-16-3-33 ~]# gmake -v
GNU Make 3.81
Copyright (C) 2006  Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
This program built for x86_64-redhat-linux-gnu



python 版本同样需要注意, 使用2.4.3版本可能编译无法通过, 语法错误. 
如果遇到python版本问题, 请使用2.7.3版本.

首先下载v8引擎, 两种方式如下 : 

git clone git://github.com/v8/v8.git v8
或者
wget --no-check-certificate https://github.com/v8/v8/archive/master.zip



接下来安装v8引擎, 因为plv8要用到libv8.so 共享库.
请使用plv8要求的v8版本. 不一定要最新的. 例如1.4.1版本的plv8说明 : 

plv8 1.4.1
plv8 is tested with:

- PG: version 8.4, 9.0, 9.1, 9.2 and 9.3dev (maybe older are allowed)
- V8: version 3.14.5
- g++: version 4.5.1


进到目录 : 

cd v8 或 cd v8-master



v8依赖谷歌的gyp, 需要把gyp的源码放到v8的源码根目录的build/gyp位置.

make dependencies
或在v8源码根目录执行如下 : 
svn co http://gyp.googlecode.com/svn/trunk build/gyp



如果python版本太低则可能遇到以下编译错误 : 

root@db-172-16-3-33-> make x64.release
GYP_GENERATORS=make \
        build/gyp/gyp --generator-output="out" build/all.gyp \
                      -Ibuild/standalone.gypi --depth=. \
                      -Dv8_target_arch=x64 \
                      -S.x64  -Dv8_enable_backtrace=1 -Dv8_can_use_vfp2_instructions=true -Darm_fpu=vfpv2 -Dv8_can_use_vfp3_instructions=true -Darm_fpu=vfpv3
Traceback (most recent call last):
  File "build/gyp/gyp", line 15, in ?
    import gyp
  File "build/gyp/pylib/gyp/__init__.py", line 8, in ?
    import gyp.input
  File "build/gyp/pylib/gyp/input.py", line 14, in ?
    import gyp.common
  File "build/gyp/pylib/gyp/common.py", line 395
    with open(source_path) as source_file:
            ^
SyntaxError: invalid syntax
make: *** [out/Makefile.x64] Error 1



安装2.7.3的python版本.

wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tgz
tar -zxvf Python-2.7.3.tgz
cd Python-2.7.3
./configure 
make
make install
root@db-172-16-3-33-> python -V
Python 2.7.3



重新到v8源码目录安装v8.

cd v8 或 cd v8-master
root@db-172-16-3-33-> make x64.release
cc1plus: warnings being treated as errors
../src/heap.h: In member function ‘v8::internal::byte** v8::internal::Heap::store_buffer_top_address()’:
../src/heap.h:1264: warning: dereferencing type-punned pointer will break strict-aliasing rules
make[1]: *** [/root/v8-master/out/x64.release/obj.target/v8_base/src/accessors.o] Error 1
make[1]: Leaving directory `/root/v8-master/out'
make: *** [x64.release] Error 2



加上werror=no可以编译通过.

gmake x64.release -j 4 library=shared werror=no



找到libv8.so

root@db-172-16-3-33-> find / -name libv8.so -print
/root/v8-master/out/x64.release/lib.target/libv8.so
/root/v8-master/out/x64.release/obj.target/tools/gyp/libv8.so
root@db-172-16-3-33-> md5sum /root/v8-master/out/x64.release/lib.target/libv8.so
b03edfbfda768381047a5ad679bb69be  /root/v8-master/out/x64.release/lib.target/libv8.so
root@db-172-16-3-33-> md5sum /root/v8-master/out/x64.release/obj.target/tools/gyp/libv8.so
b03edfbfda768381047a5ad679bb69be  /root/v8-master/out/x64.release/obj.target/tools/gyp/libv8.so


将libv8.so拷贝到$PGHOME/lib

root@db-172-16-3-33-> which psql
/home/digoal/pgsql91/bin/psql
root@db-172-16-3-33-> cp /root/v8-master/out/x64.release/lib.target/libv8.so /home/digoal/pgsql91/lib/



安装plv8前, 确保pg_config在PATH中 : 

su - root
. /home/digoal/.bash_profile
root@db-172-16-3-33-> which pg_config
/home/digoal/pgsql91/bin/pg_config



下载plv8源码 : 

cd /home/digoal
wget http://api.pgxn.org/dist/plv8/1.3.0/plv8-1.3.0.zip
unzip plv8-1.3.0.zip


将解压后的plv8放到PostgreSQL 源码的contrib目录下 : 

mv plv8-1.3.0 postgresql-9.1.3/contrib/
cd postgresql-9.1.3/contrib/plv8-1.3.0/


修改Makefile, 因为要用到v8.h的头文件

less plv8.h
#include <v8.h>
#ifdef ENABLE_DEBUGGER_SUPPORT
#include <v8-debug.h>
#endif  // ENABLE_DEBUGGER_SUPPORT


vi Makefile

CCFLAGS = -Wall $(OPTFLAGS) $(OPT_ENABLE_DEBUGGER_SUPPORT)
改成
CCFLAGS = -Wall $(OPTFLAGS) $(OPT_ENABLE_DEBUGGER_SUPPORT) -I/root/v8-master/include


安装plv8 : 

gmake clean
gmake
gmake install



plv8带三个extension, plv8, plls, plcoffee. 如下 : 

cd $PGHOME/share/extension/
digoal@db-172-16-3-33-> cat plv8--1.3.0.sql 
CREATE FUNCTION plv8_call_handler() RETURNS language_handler
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE FUNCTION plv8_inline_handler(internal) RETURNS void
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE FUNCTION plv8_call_validator(oid) RETURNS void
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE TRUSTED LANGUAGE plv8
 HANDLER plv8_call_handler
 INLINE plv8_inline_handler
 VALIDATOR plv8_call_validator;
CREATE DOMAIN plv8_int2array AS int2[];
CREATE DOMAIN plv8_int4array AS int4[];
CREATE DOMAIN plv8_float4array AS float4[];
CREATE DOMAIN plv8_float8array AS float8[];

digoal@db-172-16-3-33-> cat plls--1.3.0.sql 
CREATE FUNCTION plls_call_handler() RETURNS language_handler
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE FUNCTION plls_inline_handler(internal) RETURNS void
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE FUNCTION plls_call_validator(oid) RETURNS void
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE TRUSTED LANGUAGE plls
 HANDLER plls_call_handler
 INLINE plls_inline_handler
 VALIDATOR plls_call_validator;

digoal@db-172-16-3-33-> cat plcoffee--1.3.0.sql 
CREATE FUNCTION plcoffee_call_handler() RETURNS language_handler
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE FUNCTION plcoffee_inline_handler(internal) RETURNS void
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE FUNCTION plcoffee_call_validator(oid) RETURNS void
 AS 'MODULE_PATHNAME' LANGUAGE C;
CREATE TRUSTED LANGUAGE plcoffee
 HANDLER plcoffee_call_handler
 INLINE plcoffee_inline_handler
 VALIDATOR plcoffee_call_validator;



在需要用的数据库中创建extension .

root@db-172-16-3-33-> su - digoal
digoal@db-172-16-3-33-> psql digoal
psql (9.1.3)
Type "help" for help.
digoal=> \c digoal postgres
You are now connected to database "digoal" as user "postgres".
digoal=# create extension plv8;
CREATE EXTENSION
digoal=# create extension plls;
CREATE EXTENSION
digoal=# create extension plcoffee;
CREATE EXTENSION



【测试】
本文略

[其他]
1. 如果遇到类似

ar: illegal option -- T


的错误, 说明你下载了较新版本的v8, ar时使用了T选项.

root@digoal-Dell-System-Vostro-3450:~# ar -V
GNU ar (GNU Binutils for Ubuntu) 2.22
Copyright 2011 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) any later version.
This program has absolutely no warranty.
man ar
       T   Make the specified archive a thin archive.  If it already exists and is a regular archive, the existing members must
           be present in the same directory as archive.
ar -h
  [T]          - make a thin archive


老版本的ar没有T选项, 所以编译v8时将报错 .
怎么处理呢. 在执行完svn co http://gyp.googlecode.com/svn/trunk build/gyp后
检索crsT.

[root@db-172-16-3-33 v8-3.21.0]# grep -r crsT *
[root@db-172-16-3-33 v8-3.21.0]# vi build/gyp/pylib/gyp/generator/make.py
[root@db-172-16-3-33 v8-3.21.0]# vi build/gyp/pylib/gyp/generator/.svn/text-base/make.py.svn-base


把crsT改成crs, 例如

cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)


保存, 执行

[root@db-172-16-3-33 v8-3.21.0]# make x64 -j 4 library=shared werror=no


即可

【参考】
1. http://www.ecma-international.org/publications/standards/Ecma-262.htm
2. http://en.wikipedia.org/wiki/Ecma
3. https://developers.google.com/v8/intro
4. http://docs.mongodb.org/manual/release-notes/2.4/
5. http://pgxn.org/dist/plv8/doc/plv8.html
6. https://github.com/v8/v8
7. http://code.google.com/p/v8/
8. http://code.google.com/p/gyp/
9. git install
http://blog.163.com/digoal@126/blog/static/163877040201242512825860/
10. https://code.google.com/p/v8/wiki/BuildingWithGYP Flag Counter
