PostgreSQL research

PostgreSQL "Parallel" create index test

2012-03-02 11:40:21   查看原文>>

熟悉Oracle的同学肯定知道Oracle中有并行的HINT, 在创建索引是如果使用并行可大大提高速度, 当然是以加大资源开销为代价的. 
在PostgreSQL中没有并行的概念, 一个SQL只会用到一个CPU核.
在做还原的时候 , 创建索引会消耗很多时间. 因为没有办法开启并行.
接下来我模拟一下PostgreSQL中开启并行来创建索引. (利用了PostgreSQL的partial index特性.)
首先创建测试表 : 

digoal=> create table t1 (id int) ;
CREATE TABLE


插入测试数据 : 

digoal=> insert into t1 select generate_series(0,31999999);
INSERT 0 32000000


接下来我们不使用并行看看创建一个索引要多长时间 : 

digoal=> create index idx_t1_id on t1(id) tablespace digoal_idx;
CREATE INDEX
Time: 61502.509 ms


接下来我们把ID字段按照它的值拆分成8个段, 并行的创建8个partial索引.
这里使用ruby的多线程 : 

#!/opt/ruby/bin/ruby
$id = 0

h1 = [:a,:b,:c,:d,:e,:f,:g,:h]

(0..7).each {
  |x|
  %x/psql -h 127.0.0.1 -p 1931 digoal digoal -c "drop index idx_t1_id_#{x}"/
}

(0..7).each {
  |x|
  h1["#{x}".to_i] = Thread.new {
    id = $id
    $id += 4000000
    Thread.pass
    puts( %x/date +%F%T/ )
    %x/psql -h 127.0.0.1 -p 1931 digoal digoal -c "create index idx_t1_id_#{x} on t1(id) tablespace digoal_idx where id>=#{id} and id<#{id+4000000}"/
    puts( %x/date +%F%T/ )
  }
}

(0..7).each {
  |x|
  p h1["#{x}".to_i].join
}


执行结果 : 

2012-03-0211:32:45
2012-03-0211:32:45
2012-03-0211:32:45
2012-03-0211:32:45
2012-03-0211:32:45
2012-03-0211:32:45
2012-03-0211:32:45
2012-03-0211:32:45
2012-03-0211:32:52
2012-03-0211:32:52
2012-03-0211:32:53
2012-03-0211:32:53
2012-03-0211:32:53
#<Thread:0x0000000adb8f80 dead>
2012-03-0211:32:53
2012-03-0211:32:53
2012-03-0211:32:53
#<Thread:0x0000000adb8e90 dead>
#<Thread:0x0000000adb8da0 dead>
#<Thread:0x0000000adb8cb0 dead>
#<Thread:0x0000000adb8bc0 dead>
#<Thread:0x0000000adb93b8 dead>
#<Thread:0x0000000ad98f00 dead>
#<Thread:0x0000000ad996d0 dead>


并行创建耗时 : 8秒,
单线程创建是使用partial index并行创建耗时的7.6875倍.
我在想PG是不是可以考试考虑一下在创建索引的时候可以引入多线程呢.
但是请不要在生产中这么使用, 因为某些查询的执行计划会有问题, 例如跨了partial index的查询可能就走全表扫描了. 但是单个索引的情况下是不会发生这种情况的.
例如 : 
下面这个查询跨了WHERE id >= 0 AND id < 4000000和WHERE id >= 4000000 AND id < 8000000的索引.

digoal=> explain analyze select * from t1 where id>=3999995 and id<4000009;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Seq Scan on t1  (cost=0.00..621593.00 rows=160000 width=4) (actual time=581.265..6931.473 rows=14 loops=1)
   Filter: ((id >= 3999995) AND (id < 4000009))
 Total runtime: 6931.529 ms
(3 rows)


不跨partial index的查询会走索引 : 

digoal=> explain analyze select * from t1 where id>=3999995 and id<4000000;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on t1  (cost=2518.47..122518.18 rows=160000 width=4) (actual time=0.033..0.035 rows=5 loops=1)
   Recheck Cond: ((id >= 3999995) AND (id < 4000000))
   ->  Bitmap Index Scan on idx_t1_id_0  (cost=0.00..2478.47 rows=160000 width=0) (actual time=0.023..0.023 rows=5 loops=1)
         Index Cond: ((id >= 3999995) AND (id < 4000000))
 Total runtime: 0.131 ms
(5 rows)


下面是单一(complete)索引的情况, 走的就是索引了.

digoal=> explain analyze select * from t1 where id>=3999995 and id<4000009;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on t1  (cost=2520.00..122519.72 rows=160000 width=4) (actual time=0.094..0.104 rows=14 loops=1)
   Recheck Cond: ((id >= 3999995) AND (id < 4000009))
   ->  Bitmap Index Scan on idx_t1_id_8  (cost=0.00..2480.00 rows=160000 width=0) (actual time=0.084..0.084 rows=14 loops=1)
         Index Cond: ((id >= 3999995) AND (id < 4000009))
 Total runtime: 0.156 ms



