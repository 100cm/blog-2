PostgreSQL research

UPDATE column's value equal to another column(OLD or NEW).

2012-03-12 9:31:33   查看原文>>

某些场景可能会用到update 语句中列值等于另一个列值的情况或者用到另一个列值的表达式.
但是被关联的那个列也改变了, 也就是产生了一个NEW, 还有一个OLD的值.
那么在更新的过程中用的是OLD还是NEW呢?
例子 : 

digoal=> create table test (id int, col1 int, col2 int,col3 int);
CREATE TABLE
Time: 1.035 ms
digoal=> insert into test values (1,10,20,30);
INSERT 0 1
Time: 0.582 ms
digoal=> update test set col1=col1+1,col2=col1+10,col3=col1+col2;
UPDATE 1
Time: 1.225 ms
digoal=> select * from test ;
 id | col1 | col2 | col3 
----+------+------+------
  1 |   11 |   20 |   30
(1 row)


显然col2=col1+10和col3=col1+col2这里用到的实际上是OLD.col1和OLD.col2.
再看看ORACLE中是否也是一样的情况 : 

SQL> create table test(id int primary key,col1 int, col2 int,col3 int);
Table created.

SQL> insert into test values (1,10,20,30);
1 row created.

SQL> commit;
Commit complete.

SQL> update test set col1=col1+1,col2=col1+10,col3=col1+col2;
1 row updated.

SQL> select * from test;
        ID       COL1       COL2       COL3
---------- ---------- ---------- ----------
         1         11         20         30


Oracle也一样用的是OLD值.

如果要让数据库使用NEW值怎么办呢? 可以使用触发器来实现, 将NEW值进行修改后返回, 使用BEFORE触发器 : 

digoal=> CREATE FUNCTION test_update() RETURNS trigger AS $$
digoal$> BEGIN
digoal$> NEW.col2=NEW.col1+10;
digoal$> NEW.col3=NEW.col1+NEW.col2;
digoal$> RETURN NEW;
digoal$> END;
digoal$> $$ LANGUAGE plpgsql;
CREATE FUNCTION
Time: 2.550 ms
digoal=> 
digoal=> CREATE TRIGGER test_update BEFORE UPDATE ON test
digoal->     FOR EACH ROW EXECUTE PROCEDURE test_update();
CREATE TRIGGER
Time: 1.224 ms


使用触发器后, 更新col1前触发器修正了NEW.col2和NEW.col3. 因此结果被我们修改了.

digoal=> truncate test;
TRUNCATE TABLE
Time: 5.334 ms
digoal=> insert into test values (1,10,20,30);
INSERT 0 1
Time: 0.579 ms
digoal=> select ctid,* from test;
 ctid  | id | col1 | col2 | col3 
-------+----+------+------+------
 (0,1) |  1 |   10 |   20 |   30
(1 row)

这里虽然update只修改了col1的值, 但是在触发器内我们顺带修改了col2和col3, 因此结果是col1,col2,col3都修改了
digoal=> update test set col1=col1+1;
UPDATE 1

digoal=> select ctid,* from test;
 ctid  | id | col1 | col2 | col3 
-------+----+------+------+------
 (0,2) |  1 |   11 |   21 |   32
(1 row)


同时从ctid可以看出, 使用这种方法, 更新只产生了一条tuple. 而不是两条. 

但是这种方法太隐晦了, 如果要使用NEW值更新的话, 最好可以在语法中体现出来, 目前PG不支持, 现实中我们可以这么做.


update test set col1=col1+1,col2=(col1+1)+10,col3=(col1+1)+((col1+1)+10);


因为我们的需求是 : 

NEW.col1 = OLD.col1+1
NEW.col2 = NEW.col1 + 10 = OLD.col1+1 + 10
NEW.col3 = NEW.col1 + NEW.col2 = .....


这种方法也只会产生一个新的tuple版本.

如果使用with的写法, 会产生多条垃圾.

with t1(pk int, col1 int) as (update test set col1=col1+1 where pk=? returning (NEW.pk, NEW.col1)) update test set col2=t1.col1 from t1 where test.pk=? and test.pk=t1.pk;


【参考】
http://www.postgresql.org/docs/9.1/static/plpgsql-trigger.html
