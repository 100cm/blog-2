PostgreSQL research

Add label type & operators & indexAM for PostgreSQL (like full text search) ?

2015-06-02 11:48:11   查看原文>>

用户画像在数据挖掘中是一种比较常见的应用，例如根据用户的访问行为，地理位置，基本属性等信息，分析后给用户贴上各种标签。有了这种数据之后，可以结合业务数据为运营提供参考，例如某个商品或游戏的人群分布情况；也可以为运营提供运营策略支持等。
标签系统的常见操作：
1. 选出带有某些标签的人群，并按照标签权重排序。
2. 选出多种标签组合的人群（例如包含某些标签，并且不包含某些标签）

标签系统和PostgreSQL的全文检索类型非常类似。
全文检索将分词和查询组合分为两种数据类型，
tsvector - 分词类型存储文本分析后的有意义的词语+位置信息+权重（其实不应该叫权重，应该叫文本层次）；
tsquery - 查询组合就是查询条件的组合，例如包含哪些分词，不包含哪些分词，还支持规则表达式。

全文检索包括几个重要的步骤：
1. parsers将文本按照一定的规则分拆成多个token，并且给token按类型归类例如（url, word, number, file, tag, version .....)。

CREATE TEXT SEARCH PARSER name (
    START = start_function ,
    GETTOKEN = gettoken_function ,
    END = end_function ,
    LEXTYPES = lextypes_function
    [, HEADLINE = headline_function ]
)


2. dictionaries将token转换为规则化的分词（即lexeme）（例如去除复数，大小写转换），同时去除一些没有意义的词如stop word。

CREATE TEXT SEARCH DICTIONARY name (
    TEMPLATE = template
    [, option = value [, ... ]]
)
CREATE TEXT SEARCH DICTIONARY my_russian (
    template = snowball,
    language = russian,
    stopwords = myrussian
);

ALTER TEXT SEARCH DICTIONARY name (
    option [ = value ] [, ... ]
)
The following example command changes the stopword list for a Snowball-based dictionary. Other parameters remain unchanged.

ALTER TEXT SEARCH DICTIONARY my_dict ( StopWords = newrussian );
The following example command changes the language option to dutch, and removes the stopword option entirely.

ALTER TEXT SEARCH DICTIONARY my_dict ( language = dutch, StopWords );


3. templates提供dictionaries下层的功能，创建字典时需指定一个模板，以及一些参数。

CREATE TEXT SEARCH TEMPLATE name (
    [ INIT = init_function , ]
    LEXIZE = lexize_function
)


4. configurations选择一个parser，并配置token类型和字典的对应关系（如每种token type用哪些字典来处理)。

CREATE TEXT SEARCH CONFIGURATION name (
    PARSER = parser_name |
    COPY = source_config
)
ALTER TEXT SEARCH CONFIGURATION name
    ADD MAPPING FOR token_type [, ... ] WITH dictionary_name [, ... ]
ALTER TEXT SEARCH CONFIGURATION name
    ALTER MAPPING FOR token_type [, ... ] WITH dictionary_name [, ... ]
ALTER TEXT SEARCH CONFIGURATION name
    ALTER MAPPING REPLACE old_dictionary WITH new_dictionary
ALTER TEXT SEARCH CONFIGURATION name
    ALTER MAPPING FOR token_type [, ... ] REPLACE old_dictionary WITH new_dictionary
ALTER TEXT SEARCH CONFIGURATION name
    DROP MAPPING [ IF EXISTS ] FOR token_type [, ... ]
ALTER TEXT SEARCH CONFIGURATION name RENAME TO new_name
ALTER TEXT SEARCH CONFIGURATION name OWNER TO { new_owner | CURRENT_USER | SESSION_USER }
ALTER TEXT SEARCH CONFIGURATION name SET SCHEMA new_schema


全文检索类型的限制：
1. The length of each lexeme must be less than 2K bytes
规则化后的lexeme必须要与2K，
2. The length of a tsvector (lexemes + positions) must be less than 1 megabyte
tsvector类型长度不超过1MB。
这两个限制见src/include/tsearch/ts_type.h

typedef struct
{
        uint32
                                haspos:1,
                                len:11,                 /* MAX 2Kb */
                                pos:20;                 /* MAX 1Mb */
} WordEntry;


3. The number of lexemes must be less than 2^64
一个tsvector中不能存储超过2的64次方个lexeme.
4. Position values in tsvector must be greater than 0 and no more than 16,383
位置值不超过

#define MAXENTRYPOS (1<<14)

。。。
                        if (res - a >= MAXNUMPOS - 1 ||
                                WEP_GETPOS(*res) == MAXENTRYPOS - 1)
                                break;
。。。


5. No more than 256 positions per lexeme
每个lexeme不能超过256个位置。

#define MAXNUMPOS       (256)


6. The number of nodes (lexemes + operators) in a tsquery must be less than 32,768
tsquery，lexeme和operators累计不能超过32,768个。

根据标签系统的特性，以及标签系统的常用操作，我们如果要创建一个标签数据类型，应该注意哪些呢？
1. 同样我们应该包含两个类型，一个用来表示标签，一个用来表示查询条件
1.1. 标签+权重，每个标签应该有权重信息，例如数字越大权重越大。
1.2. 标签+权重组合描述查询条件，例如'x:>1' || ( 'y:<10' && 'z' ) 表述包含权重大于1的X标签，或者包含权重小于10的y标签与不关心权重的Z标签。
2. 操作符，可以添加，替换，删除标签，修改查询条件等。
3. 函数
4. 聚合函数
5. 窗口函数
6. 索引
产生标签的算法不在本文讨论范围，可以考虑使用外部算法，或者在PostgreSQL中结合PL/R实现。

[参考] 
1. http://www.postgresql.org/docs/devel/static/textsearch-intro.html 
2. src/include/tsearch/ts_type.h
3. src/backend/utils/adt/tsvector.c
4. src/backend/utils/adt/tsquery.c
Flag Counter
