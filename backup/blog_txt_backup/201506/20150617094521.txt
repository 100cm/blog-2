PostgreSQL research

PostgreSQL 9.5 new feature - pg_xlogdump option --stats to display summary statistics

2015-06-17 9:45:21   查看原文>>

PostgreSQL 9.5 对pg_xlogdump的一个小改进，可以从XLOG中输出按照rmgr或record为单位进行统计的统计信息，降低分析门槛，有助于未来优化PG核心代码或应用程序。
http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=bdd5726c347016ea34e9fb68d1b8b71046e25d2e

Add the capability to display summary statistics to pg_xlogdump.

The new --stats/--stats=record options to pg_xlogdump display per
rmgr/per record statistics about the parsed WAL. This is useful to
understand what the WAL primarily consists of, to allow targeted
optimizations on application, configuration, and core code level.


测试：

pg95@db-172-16-3-150-> pg_xlogdump -z -p /data03/pgdata95/pg_root/pg_xlog 0000000100000007000000B7
Type                                           N      (%)          Record size      (%)             FPI size      (%)        Combined size      (%)
----                                           -      ---          -----------      ---             --------      ---        -------------      ---
XLOG                                           3 (  0.00)                  312 (  0.01)                    0 (  0.00)                  312 (  0.01)
Transaction                                73143 ( 49.41)              2340620 ( 45.25)                    0 (  0.00)              2340620 ( 45.25)
Storage                                        6 (  0.00)                  240 (  0.00)                    0 (  0.00)                  240 (  0.00)
CLOG                                           1 (  0.00)                   28 (  0.00)                    0 (  0.00)                   28 (  0.00)
Database                                       0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
Tablespace                                     0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
MultiXact                                      0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
RelMap                                         0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
Standby                                        0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
Heap2                                       1454 (  0.98)                43884 (  0.85)                    0 (  0.00)                43884 (  0.85)
Heap                                       73268 ( 49.49)              2782995 ( 53.80)                    0 (  0.00)              2782995 ( 53.80)
Btree                                        171 (  0.12)                 4472 (  0.09)                    0 (  0.00)                 4472 (  0.09)
Hash                                           0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
Gin                                            0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
Gist                                           0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
Sequence                                       0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
SPGist                                         0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
BRIN                                           0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
CommitTs                                       0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
ReplicationOrigin                              0 (  0.00)                    0 (  0.00)                    0 (  0.00)                    0 (  0.00)
                                        --------                      --------                      --------                      --------
Total                                     148046                       5172551 [100.00%]                   0 [0.00%]               5172551 [100%]
pg_xlogdump: FATAL:  error in WAL record at 7/B78E6990: invalid record length at 7/B78E6A00

pg95@db-172-16-3-150-> pg_xlogdump --stats=record -p /data03/pgdata95/pg_root/pg_xlog 0000000100000007000000B7
Type                                           N      (%)          Record size      (%)             FPI size      (%)        Combined size      (%)
----                                           -      ---          -----------      ---             --------      ---        -------------      ---
XLOG/CHECKPOINT_ONLINE                         3 (  0.00)                  312 (  0.01)                    0 (  0.00)                  312 (  0.01)
Transaction/COMMIT                         73142 ( 49.40)              2340544 ( 45.25)                    0 (  0.00)              2340544 ( 45.25)
Transaction/COMMIT                             1 (  0.00)                   76 (  0.00)                    0 (  0.00)                   76 (  0.00)
Storage/CREATE                                 6 (  0.00)                  240 (  0.00)                    0 (  0.00)                  240 (  0.00)
CLOG/ZEROPAGE                                  1 (  0.00)                   28 (  0.00)                    0 (  0.00)                   28 (  0.00)
Heap2/CLEAN                                  793 (  0.54)                25376 (  0.49)                    0 (  0.00)                25376 (  0.49)
Heap2/VISIBLE                                661 (  0.45)                18508 (  0.36)                    0 (  0.00)                18508 (  0.36)
Heap/INSERT                                   76 (  0.05)                 2052 (  0.04)                    0 (  0.00)                 2052 (  0.04)
Heap/DELETE                                   43 (  0.03)                 1376 (  0.03)                    0 (  0.00)                 1376 (  0.03)
Heap/HOT_UPDATE                            73141 ( 49.40)              2779358 ( 53.73)                    0 (  0.00)              2779358 ( 53.73)
Heap/INPLACE                                   7 (  0.00)                  182 (  0.00)                    0 (  0.00)                  182 (  0.00)
Heap/INSERT+INIT                               1 (  0.00)                   27 (  0.00)                    0 (  0.00)                   27 (  0.00)
Btree/INSERT_LEAF                            164 (  0.11)                 4264 (  0.08)                    0 (  0.00)                 4264 (  0.08)
Btree/NEWROOT                                  3 (  0.00)                   96 (  0.00)                    0 (  0.00)                   96 (  0.00)
Btree/VACUUM                                   4 (  0.00)                  112 (  0.00)                    0 (  0.00)                  112 (  0.00)
                                        --------                      --------                      --------                      --------
Total                                     148046                       5172551 [100.00%]                   0 [0.00%]               5172551 [100%]
pg_xlogdump: FATAL:  error in WAL record at 7/B78E6990: invalid record length at 7/B78E6A00



pg_xlogdump用法可参考
http://blog.163.com/digoal@126/blog/static/163877040201312311244246

[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201312311244246
2. http://www.postgresql.org/docs/devel/static/pgxlogdump.html
3. src/bin/pg_xlogdump/pg_xlogdump.c

/*
 * Display summary statistics about the records seen so far.
 */
static void
XLogDumpDisplayStats(XLogDumpConfig *config, XLogDumpStats *stats)
{
        int                     ri,
                                rj;
        uint64          total_count = 0;
        uint64          total_rec_len = 0;
        uint64          total_fpi_len = 0;
        uint64          total_len = 0;
        double          rec_len_pct,
                                fpi_len_pct;

        /* ---
         * Make a first pass to calculate column totals:
         * count(*),
         * sum(xl_len+SizeOfXLogRecord),
         * sum(xl_tot_len-xl_len-SizeOfXLogRecord), and
         * sum(xl_tot_len).
         * These are used to calculate percentages for each record type.
         * ---
         */

        for (ri = 0; ri < RM_NEXT_ID; ri++)
        {
                total_count += stats->rmgr_stats[ri].count;
                total_rec_len += stats->rmgr_stats[ri].rec_len;
                total_fpi_len += stats->rmgr_stats[ri].fpi_len;
        }
        total_len = total_rec_len + total_fpi_len;

        /*
         * 27 is strlen("Transaction/COMMIT_PREPARED"), 20 is strlen(2^64), 8 is
         * strlen("(100.00%)")
         */
        printf("%-27s %20s %8s %20s %8s %20s %8s %20s %8s\n"
                   "%-27s %20s %8s %20s %8s %20s %8s %20s %8s\n",
                   "Type", "N", "(%)", "Record size", "(%)", "FPI size", "(%)", "Combined size", "(%)",
                   "----", "-", "---", "-----------", "---", "--------", "---", "-------------", "---");

        for (ri = 0; ri < RM_NEXT_ID; ri++)
        {
                uint64          count,
                                        rec_len,
                                        fpi_len,
                                        tot_len;
                const RmgrDescData *desc = &RmgrDescTable[ri];

                if (!config->stats_per_record)
                {
                        count = stats->rmgr_stats[ri].count;
                        rec_len = stats->rmgr_stats[ri].rec_len;
                        fpi_len = stats->rmgr_stats[ri].fpi_len;
                        tot_len = rec_len + fpi_len;

                        XLogDumpStatsRow(desc->rm_name,
                                                         count, total_count, rec_len, total_rec_len,
                                                         fpi_len, total_fpi_len, tot_len, total_len);
                }
                else
                {
                        for (rj = 0; rj < MAX_XLINFO_TYPES; rj++)
                        {
                                const char *id;

                                count = stats->record_stats[ri][rj].count;
                                rec_len = stats->record_stats[ri][rj].rec_len;
                                fpi_len = stats->record_stats[ri][rj].fpi_len;
                                tot_len = rec_len + fpi_len;

                                /* Skip undefined combinations and ones that didn't occur */
                                if (count == 0)
                                        continue;

                                /* the upper four bits in xl_info are the rmgr's */
                                id = desc->rm_identify(rj << 4);
                                if (id == NULL)
                                        id = psprintf("UNKNOWN (%x)", rj << 4);

                                XLogDumpStatsRow(psprintf("%s/%s", desc->rm_name, id),
                                                                 count, total_count, rec_len, total_rec_len,
                                                                 fpi_len, total_fpi_len, tot_len, total_len);
                        }
                }
        }

        printf("%-27s %20s %8s %20s %8s %20s %8s %20s\n",
                   "", "--------", "", "--------", "", "--------", "", "--------");

        /*
         * The percentages in earlier rows were calculated against the column
         * total, but the ones that follow are against the row total. Note that
         * these are displayed with a % symbol to differentiate them from the
         * earlier ones, and are thus up to 9 characters long.
         */

        rec_len_pct = 0;
        if (total_len != 0)
                rec_len_pct = 100 * (double) total_rec_len / total_len;

        fpi_len_pct = 0;
        if (total_len != 0)
                fpi_len_pct = 100 * (double) total_fpi_len / total_len;

        printf("%-27s "
                   "%20" INT64_MODIFIER "u %-9s"
                   "%20" INT64_MODIFIER "u %-9s"
                   "%20" INT64_MODIFIER "u %-9s"
                   "%20" INT64_MODIFIER "u %-6s\n",
                   "Total", stats->count, "",
                   total_rec_len, psprintf("[%.02f%%]", rec_len_pct),
                   total_fpi_len, psprintf("[%.02f%%]", fpi_len_pct),
                   total_len, "[100%]");
}



Flag Counter

