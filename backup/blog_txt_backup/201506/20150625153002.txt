PostgreSQL research

don't modify table multi-times in CTE, will cause bug.

2015-06-25 15:30:02   查看原文>>

虽然PostgreSQL现在支持在CTE中使用更新，删除等操作，但是不建议同一个表的同一条记录在CTE的多个子句中更新多次。
这样做容易产生BUG，或者数据不一致(可能是意想不到的结果)。

测试：

create table t1(id int,info text);
create table t2(id int,info text);
create table t3(id int,info text);
insert into t1 values (1,'test'),(2,'abc');
insert into t2 values (2,'test'),(3,'abc');
insert into t3 values (1,'abc'),(2,'test');



更新t1表，在CTE内部更新一次，在外部再更新一次。

postgres=# explain with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info) update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Update on t1  (cost=3326.11..5196.03 rows=123008 width=48)
   CTE tm1
     ->  Update on t1 t1_1  (cost=728.10..2598.02 rows=123008 width=48)
           ->  Merge Join  (cost=728.10..2598.02 rows=123008 width=48)
                 Merge Cond: (t1_1.info = t2.info)
                 ->  Sort  (cost=364.05..376.45 rows=4960 width=38)
                       Sort Key: t1_1.info
                       ->  Seq Scan on t1 t1_1  (cost=0.00..59.60 rows=4960 width=38)
                 ->  Sort  (cost=364.05..376.45 rows=4960 width=42)
                       Sort Key: t2.info
                       ->  Seq Scan on t2  (cost=0.00..59.60 rows=4960 width=42)
   ->  Merge Join  (cost=728.10..2598.02 rows=123008 width=48)
         Merge Cond: (t1.id = t3.id)
         ->  Sort  (cost=364.05..376.45 rows=4960 width=10)
               Sort Key: t1.id
               ->  Seq Scan on t1  (cost=0.00..59.60 rows=4960 width=10)
         ->  Sort  (cost=364.05..376.45 rows=4960 width=42)
               Sort Key: t3.id
               ->  Seq Scan on t3  (cost=0.00..59.60 rows=4960 width=42)
(19 rows)



在外部的SQL看不到内部的更新，所以依旧以老的值匹配，所以得到这样的结果。

postgres=# with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info) update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info;
 id | info 
----+------
  1 | abc
  2 | test
(2 rows)
postgres=# select ctid,* from t1;
 ctid  | id | info 
-------+----+------
 (0,3) |  1 | abc
 (0,4) |  2 | test
(2 rows)


分析，
1. 内部CTE更新后的结果
(2,'test'),(3,'abc');  -- 但是，外部SQL看不到这个结果。所以忽略。
2. 外部更新的结果
(1,'abc'),(2,'test');  --  这是最终结果。

我们换个方式验证外部SQL看不到CTE的更新。
如果要看到CTE的更新，需使用returning，并查看CTE表。

postgres=# create table t(id int,info text);
CREATE TABLE
postgres=# insert into t values (1,'abc');
INSERT 0 1
postgres=# with tm1(id,info) as (update t set info='new' returning *) select * from t;
 id | info 
----+------
  1 | abc
(1 row)
postgres=# select * from t;
 id | info 
----+------
  1 | new
(1 row)
如果要查看CTE更新后的数据，需要使用returning并查看CTE表。
postgres=# with tm1(id,info) as (update t set info='digoal' returning *) select * from tm1;
 id |  info  
----+--------
  1 | digoal
(1 row)



接下来换个SQL，使用两个CTE，对t1表进行更新。你会发现结果有点意想不到了。

postgres=# truncate t1;
TRUNCATE TABLE
postgres=# insert into t1 values (1,'test'),(2,'abc');
INSERT 0 2

注意这里使用了merge join
postgres=# explain with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info), tm2(c3,c4) as (update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info) select * from tm1,tm2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Nested Loop  (cost=5196.03..332272934.55 rows=15130968064 width=72)
   CTE tm1
     ->  Update on t1  (cost=728.10..2598.02 rows=123008 width=48)
           ->  Merge Join  (cost=728.10..2598.02 rows=123008 width=48)
                 Merge Cond: (t1.info = t2.info)
                 ->  Sort  (cost=364.05..376.45 rows=4960 width=38)
                       Sort Key: t1.info
                       ->  Seq Scan on t1  (cost=0.00..59.60 rows=4960 width=38)
                 ->  Sort  (cost=364.05..376.45 rows=4960 width=42)
                       Sort Key: t2.info
                       ->  Seq Scan on t2  (cost=0.00..59.60 rows=4960 width=42)
   CTE tm2
     ->  Update on t1 t1_1  (cost=728.10..2598.02 rows=123008 width=48)
           ->  Merge Join  (cost=728.10..2598.02 rows=123008 width=48)
                 Merge Cond: (t1_1.id = t3.id)
                 ->  Sort  (cost=364.05..376.45 rows=4960 width=10)
                       Sort Key: t1_1.id
                       ->  Seq Scan on t1 t1_1  (cost=0.00..59.60 rows=4960 width=10)
                 ->  Sort  (cost=364.05..376.45 rows=4960 width=42)
                       Sort Key: t3.id
                       ->  Seq Scan on t3  (cost=0.00..59.60 rows=4960 width=42)
   ->  CTE Scan on tm1  (cost=0.00..2460.16 rows=123008 width=36)
   ->  CTE Scan on tm2  (cost=0.00..2460.16 rows=123008 width=36)
(23 rows)

postgres=# with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info), tm2(c3,c4) as (update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info) select * from tm1,tm2;
 c1 | c2  | c3 | c4  
----+-----+----+-----
  3 | abc |  1 | abc
(1 row)

postgres=# select ctid,* from t1;
 ctid  | id | info 
-------+----+------
 (0,3) |  3 | abc
 (0,4) |  1 | abc
(2 rows)


分析一下更新过程，注意merge join用到了排序，这是和结果至关重要的：

括号内是ctid
t1                           t2                  t1(updated)
(0,2)  2, abc;        3, abc;         (0,3)  3, abc;
(0,1)  1, test;        2, test;          
括号内是ctid
t1                           t3                  t1(updated)
(0,1)  1, test;        1, abc;         (0,4)  1, abc;
(0,2)  2, abc;        2, test;         
当更新第二条记录时，数据已经变成这样了ctid指向被第一次更新后的ctid：
t1                           t2                  t1(updated)
(0,2)  2, abc;        3, abc;         (0,3)  3, abc;
(0,4)  1, abc;        2, test;          info不匹配，不更新
括号内是ctid
t1                           t3                  t1(updated)
(0,1)  1, test;        1, abc;         (0,4)  1, abc;
(0,3)  3, abc;        2, test;         id不匹配，不更新
所以最终的结果是：
 (0,3) |  3 | abc
 (0,4) |  1 | abc


这个更新的结果和执行计划有关。

下面分析一下这三个表，执行计划会改变。

postgres=# truncate t1;
TRUNCATE TABLE
postgres=# insert into t1 values (1,'test'),(2,'abc');
INSERT 0 2
postgres=# analyze t1;
ANALYZE
postgres=# analyze t2;
ANALYZE
postgres=# analyze t3;
ANALYZE


重新测试，对于这种SQL，结果和前面是一样的，前面也分析过原因了。
CTE内部和CTE外部的视角差别造成的结果。而且从执行计划来看，CTE外部的SQL是后执行的，所以如果记录都被更改了，那么结果就是外部为准。

postgres=# explain with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info) update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Update on t1  (cost=2.10..4.21 rows=2 width=20)
   CTE tm1
     ->  Update on t1 t1_1  (cost=0.00..2.10 rows=2 width=20)
           ->  Nested Loop  (cost=0.00..2.10 rows=2 width=20)
                 Join Filter: (t1_1.info = t2.info)
                 ->  Seq Scan on t1 t1_1  (cost=0.00..1.02 rows=2 width=10)
                 ->  Materialize  (cost=0.00..1.03 rows=2 width=14)
                       ->  Seq Scan on t2  (cost=0.00..1.02 rows=2 width=14)
   ->  Nested Loop  (cost=0.00..2.10 rows=2 width=20)
         Join Filter: (t1.id = t3.id)
         ->  Seq Scan on t1  (cost=0.00..1.02 rows=2 width=10)
         ->  Materialize  (cost=0.00..1.03 rows=2 width=14)
               ->  Seq Scan on t3  (cost=0.00..1.02 rows=2 width=14)
(13 rows)

postgres=# with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info) update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info;
 id | info 
----+------
  1 | abc
  2 | test
(2 rows)
UPDATE 2

postgres=# select ctid,* from t1;
 ctid  | id | info 
-------+----+------
 (0,3) |  1 | abc
 (0,4) |  2 | test
(2 rows)



但是，对于两个修改动作都在CTE中完成的这种写法，操作结果就和执行计划有关了。
下面的SQL和前面一样，只是执行计划不一样，结果也不一样。

postgres=# truncate t1;
TRUNCATE TABLE
postgres=# insert into t1 values (1,'test'),(2,'abc');
INSERT 0 2
postgres=# analyze t1;
ANALYZE
postgres=# explain with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info), tm2(c3,c4) as (update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info) select * from tm1,tm2;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Nested Loop  (cost=4.21..4.35 rows=4 width=72)
   CTE tm1
     ->  Update on t1  (cost=0.00..2.10 rows=2 width=20)
           ->  Nested Loop  (cost=0.00..2.10 rows=2 width=20)
                 Join Filter: (t1.info = t2.info)
                 ->  Seq Scan on t1  (cost=0.00..1.02 rows=2 width=10)
                 ->  Materialize  (cost=0.00..1.03 rows=2 width=14)
                       ->  Seq Scan on t2  (cost=0.00..1.02 rows=2 width=14)
   CTE tm2
     ->  Update on t1 t1_1  (cost=0.00..2.10 rows=2 width=20)
           ->  Nested Loop  (cost=0.00..2.10 rows=2 width=20)
                 Join Filter: (t1_1.id = t3.id)
                 ->  Seq Scan on t1 t1_1  (cost=0.00..1.02 rows=2 width=10)
                 ->  Materialize  (cost=0.00..1.03 rows=2 width=14)
                       ->  Seq Scan on t3  (cost=0.00..1.02 rows=2 width=14)
   ->  CTE Scan on tm1  (cost=0.00..0.04 rows=2 width=36)
   ->  CTE Scan on tm2  (cost=0.00..0.04 rows=2 width=36)
(17 rows)

postgres=# with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info), tm2(c3,c4) as (update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info) select * from tm1,tm2;
 c1 |  c2  | c3 |  c4  
----+------+----+------
  2 | test |  2 | test
(1 row)

postgres=# select ctid,* from t1;
 ctid  | id | info 
-------+----+------
 (0,3) |  2 | test
 (0,4) |  2 | test
(2 rows)


分析：
CTE是同级别的，同时执行。所以对数据的修改就看谁更快。快慢取决于扫描方法，扫描顺序等。
这里的t1用到了全表扫描，关联用到了嵌套循环，注意全表扫描是从头开始的，这和执行结果至关重要。
所以：

括号内是ctid
t1                           t2                  t1(updated)
(0,1)  1, test;        2, test;         (0,3)  2, test;
(0,2)  2, abc;        3, abc;         
括号内是ctid
t1                           t3                  t1(updated)
(0,1)  1, test;        1, abc;         已被更新，迅速掠过
(0,2)  2, abc;        2, test;         (0,4)  2, test;

当CTE tm1 更新第二条记录时：
t1                           t2                  t1(updated)
(0,2)  1, abc;        2, test;          已被更新，迅速掠过
所以最终的结果是：
 (0,3) |  2 | test
 (0,4) |  2 | test



如果将t1表的两条记录的物理顺序颠倒，结果又不一样了。

postgres=# truncate t1;
TRUNCATE TABLE
postgres=# insert into t1 values (2,'abc'),(1,'test');
INSERT 0 2
postgres=# analyze t1;
ANALYZE
postgres=# with tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info), tm2(c3,c4) as (update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info) select * from tm1,tm2;
 c1 | c2  | c3 | c4  
----+-----+----+-----
  3 | abc |  1 | abc
(1 row)

即使将tm1,tm2颠倒结果一样。
postgres=# truncate t1;
TRUNCATE TABLE
postgres=# insert into t1 values (2,'abc'),(1,'test');
INSERT 0 2
postgres=# with tm2(c3,c4) as (update t1 set info=t3.info from t3 where t1.id=t3.id returning t1.id,t1.info), tm1(c1,c2) as (update t1 set id=t2.id from t2 where t1.info=t2.info returning t1.id,t1.info) select * from tm1,tm2;
 c1 | c2  | c3 | c4
----+-----+----+-----
  3 | abc |  1 | abc
(1 row)

所以，在CTE中有多个更新时，如果出现对同一条记录的多次更新，会得到意想不到的结果，需要特别注意。
[参考]
1. http://www.postgresql.org/docs/devel/static/queries-with.html
手册中也有提到，不要在一条SQL中多次修改同一条记录，会有意想不到的结果。
Trying to update the same row twice in a single statement is not supported. Only one of the modifications takes place, but it is not easy (and sometimes not possible) to reliably predict which one. This also applies to deleting a row that was already updated in the same statement: only the update is performed.
Therefore you should generally avoid trying to modify a single row twice in a single statement. In particular avoid writing WITH sub-statements that could affect the same rows changed by the main statement or a sibling sub-statement. The effects of such a statement will not be predictable.

Flag Counter
