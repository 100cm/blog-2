PostgreSQL research

PostgreSQL 支持的SQL最长有多长? ISO/IEC 9075-3:2008

2012-05-17 14:11:03   查看原文>>

今天一位开发的同事聊起PostgreSQL支持的SQL最长有多长?

查了一下，PostgreSQL没有对SQL长度做限制, 只是在查询时列的数量不能超过1664.
如下:
ISO/IEC 9075-3:2008 这本白皮书要购买, 所以无法提供与此相应的内容给大家.
下面是PostgreSQL代码中的一部分.


-- Note: Sizing items are defined in ISO/IEC 9075-3:2008, clause 9.2.

CREATE TABLE sql_sizing (
    sizing_id       cardinal_number,
    sizing_name     character_data,
    supported_value cardinal_number,
    comments        character_data
) WITHOUT OIDS;

INSERT INTO sql_sizing VALUES (34,    'MAXIMUM CATALOG NAME LENGTH', 63, NULL);
INSERT INTO sql_sizing VALUES (30,    'MAXIMUM COLUMN NAME LENGTH', 63, NULL);
INSERT INTO sql_sizing VALUES (97,    'MAXIMUM COLUMNS IN GROUP BY', 0, NULL);
INSERT INTO sql_sizing VALUES (99,    'MAXIMUM COLUMNS IN ORDER BY', 0, NULL);
INSERT INTO sql_sizing VALUES (100,   'MAXIMUM COLUMNS IN SELECT', 1664, NULL); -- match MaxTupleAttributeNumber
INSERT INTO sql_sizing VALUES (101,   'MAXIMUM COLUMNS IN TABLE', 1600, NULL); -- match MaxHeapAttributeNumber
INSERT INTO sql_sizing VALUES (1,     'MAXIMUM CONCURRENT ACTIVITIES', 0, NULL);
INSERT INTO sql_sizing VALUES (31,    'MAXIMUM CURSOR NAME LENGTH', 63, NULL);
INSERT INTO sql_sizing VALUES (0,     'MAXIMUM DRIVER CONNECTIONS', NULL, NULL);
INSERT INTO sql_sizing VALUES (10005, 'MAXIMUM IDENTIFIER LENGTH', 63, NULL);
INSERT INTO sql_sizing VALUES (32,    'MAXIMUM SCHEMA NAME LENGTH', 63, NULL);
INSERT INTO sql_sizing VALUES (20000, 'MAXIMUM STATEMENT OCTETS', 0, NULL);
INSERT INTO sql_sizing VALUES (20001, 'MAXIMUM STATEMENT OCTETS DATA', 0, NULL);
INSERT INTO sql_sizing VALUES (20002, 'MAXIMUM STATEMENT OCTETS SCHEMA', 0, NULL);
INSERT INTO sql_sizing VALUES (35,    'MAXIMUM TABLE NAME LENGTH', 63, NULL);
INSERT INTO sql_sizing VALUES (106,   'MAXIMUM TABLES IN SELECT', 0, NULL);
INSERT INTO sql_sizing VALUES (107,   'MAXIMUM USER NAME LENGTH', 63, NULL);
INSERT INTO sql_sizing VALUES (25000, 'MAXIMUM CURRENT DEFAULT TRANSFORM GROUP LENGTH', NULL, NULL);
INSERT INTO sql_sizing VALUES (25001, 'MAXIMUM CURRENT TRANSFORM GROUP LENGTH', NULL, NULL);
INSERT INTO sql_sizing VALUES (25002, 'MAXIMUM CURRENT PATH LENGTH', 0, NULL);
INSERT INTO sql_sizing VALUES (25003, 'MAXIMUM CURRENT ROLE LENGTH', NULL, NULL);
INSERT INTO sql_sizing VALUES (25004, 'MAXIMUM SESSION USER LENGTH', 63, NULL);
INSERT INTO sql_sizing VALUES (25005, 'MAXIMUM SYSTEM USER LENGTH', 63, NULL);

UPDATE sql_sizing
    SET supported_value = (SELECT typlen-1 FROM pg_catalog.pg_type WHERE typname = 'name'),
        comments = 'Might be less, depending on character set.'
    WHERE supported_value = 63;

GRANT SELECT ON sql_sizing TO PUBLIC;



-- 使用array_agg可以方便的产生一个逗号隔开的数字串如.

select array_agg(val) from (select generate_series(1,1664) as val) as t;



-- 尝试一个SQL中查询1665个列时报错  : 

select 1,2,3,....,1665;
ERROR:  target lists can have at most 1664 entries


注意到限制里面的
MAXIMUM STATEMENT OCTETS
MAXIMUM STATEMENT OCTETS DATA
MAXIMUM STATEMENT OCTETS SCHEMA
介绍:

20000 SQL_MAXIMUM_STMT_OCTETS — SMALLINT << XXX the number is wrong, 20000 is SQL_GETPARAMDATA_EXTENSIONS >> The return is the maximum number of octets that can exist in any SQL statement, or zero if there's no fixed limit. This is the maximum size of the string parameter in an SQLPrepare or SQLExecDirect function call. In ODBC, this code does not exist; the ODBC code SQL_MAXIMUM_STATEMENT_LENGTH is a different value.
 20001 SQL_MAXIMUM_STMT_OCTETS_DATA — SMALLINT The return is the maximum number of octets that can exist in an SQL-data statement (such as INSERT), or zero if there's no fixed limit.
 20002 SQL_MAXIMUM_STMT_OCTETS_SCHEMA — SMALLINT The return is the maximum number of octets that can exist in an SQL-Schema statement (such as CREATE SCHEMA), or zero if there's no fixed limit.


另外我们知道一个变长字段如text允许的最大长度是1GBytes, 所以至少SQL的长度会超过1GBytes.

【参考】
src/backend/catalog/information_schema.sql


