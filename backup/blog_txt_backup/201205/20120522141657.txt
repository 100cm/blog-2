PostgreSQL research

PostgreSQL 9.2 can archive xlog realtime by adding pg_receivexlog utilis

2012-05-22 14:16:57   查看原文>>

PostgreSQL 9.2 流复制增强，包括级联流复制，请参考我以前写的BLOG：
http://blog.163.com/digoal@126/blog/static/1638770402012012361519/
同时PostgreSQL 9.2 把receive xlog的功能"独立"出一个小工具pg_receivexlog. 这个工具可以利用流复制协议实时的获取数据库产生的xlog信息, 并写入到指定的目录中.
以前我们备份XLOG的时候, 需要等到archive发生之后, 去备份归档出来的文件. (当然其实如果建立了流复制的standby的话, standby其实也是在实时的接收主节点发过来的xlog信息的. 但是pg_receivexlog工具不需要建立standby, 它是一个独立的小工具, 就是用来实时的接收xlog的)
有了pg_receivexlog之后, 备份xlog的信息将更加实时. 这个在企业中应该会大受欢迎.
因为PostgreSQL 9.2支持级联复制, 所以pg_receivexlog可以直接连主库也可以连级联的备库.
下面我们用3台主机来测试一下.
主节点 : 172.16.3.33
hot_standby节点 : 172.16.3.39
备份节点(执行pg_receivexlog的节点) : 172.16.3.40
主节点的需要修改的配置 : 
postgresql.conf
pg_hba.conf

hot_standby节点需要修改的配置 : 
~/.pgpass
$PGDATA/recovery.conf

备份节点的配置 : 
~/.pgpass
以上如何配置可参看我以前写过的关于流复制的BLOG, 里面有数篇可供参考.
http://blog.163.com/digoal@126/blog/static/1638770402010411111817376/

全部配置好后, 
1. 在主节点创建测试表

pg92@db-172-16-3-33-> psql digoal postgres
psql (9.2beta1)
Type "help" for help.
digoal=# create table t1 (id int, info text);
CREATE TABLE



2. 这里测试备份节点使用pg_receivexlog连接到hot_standby节点去获取xlog的信息.
首先要创建备份目录,(存放xlog文件)

[root@db-172-16-3-40 ~]# cd /pgdata/digoal/1921/data02
[root@db-172-16-3-40 data02]# mkdir pg92beta1_arch_realtime
[root@db-172-16-3-40 data02]# chown pg92:pg92 pg92beta1_arch_realtime
su - pg92
pg92@db-172-16-3-40->  pg_receivexlog -D /pgdata/digoal/1921/data02/pg92beta1_arch_realtime -v -s 10 -h 172.16.3.39 -p 1919 -U replica -w 
pg_receivexlog: starting log streaming at 0/80000000 (timeline 1)


从上面的输出可以看到pg_receivexlog已经连接上了172.16.3.39, 开始接收的XLOG文件为0/80000000.

3. 接下来到主节点执行一个SQL, 插入大量数据. 使之产生xlog信息.

pg92@db-172-16-3-33-> psql digoal postgres
psql (9.2beta1)
Type "help" for help.
digoal=# insert into t1 select generate_series(1,1000000),'digoal'||generate_series(1,1000000);
INSERT 0 1000000



4. 回到172.16.3.40, 可以看到类似如下输出 : 

pg_receivexlog: finished segment at 0/82000000 (timeline 1)
pg_receivexlog: finished segment at 0/83000000 (timeline 1)
pg_receivexlog: finished segment at 0/84000000 (timeline 1)
pg_receivexlog: finished segment at 0/85000000 (timeline 1)
pg_receivexlog: finished segment at 0/86000000 (timeline 1)
pg_receivexlog: finished segment at 0/87000000 (timeline 1)



到相应的目录可以查看到文件如下 : 

pg92@db-172-16-3-40-> ll /pgdata/digoal/1921/data02/pg92beta1_arch_realtime
total 144M
-rw------- 1 pg92 pg92 16M May 22 13:27 000000010000000000000080
-rw------- 1 pg92 pg92 16M May 22 13:27 000000010000000000000081
-rw------- 1 pg92 pg92 16M May 22 13:27 000000010000000000000082
-rw------- 1 pg92 pg92 16M May 22 13:27 000000010000000000000083
-rw------- 1 pg92 pg92 16M May 22 13:27 000000010000000000000084
-rw------- 1 pg92 pg92 16M May 22 13:27 000000010000000000000085
-rw------- 1 pg92 pg92 16M May 22 13:28 000000010000000000000086
-rw------- 1 pg92 pg92 16M May 22 13:28 000000010000000000000087
-rw------- 1 pg92 pg92 16M May 22 13:31 000000010000000000000088.partial



5. 在hot_standby节点可以查看到, 它既有wal_receiver进程又有wal_sender进程.

pg92@db-172-16-3-39-> ps -ewfL|grep pg92
root      5505  5394  5505  0    1 13:18 pts/0    00:00:00 su - pg92
pg92      5506  5505  5506  0    1 13:18 pts/0    00:00:00 -bash
pg92      5553     1  5553  0    1 13:19 pts/0    00:00:00 /opt/pgsql92/bin/postgres
pg92      5558  5553  5558  0    1 13:19 ?        00:00:00 postgres: logger process   
pg92      5559  5553  5559  0    1 13:19 ?        00:00:02 postgres: startup process   recovering 000000010000000000000088
pg92      5560  5553  5560  0    1 13:19 ?        00:00:00 postgres: wal receiver process   streaming 0/880D2820
pg92      5561  5553  5561  0    1 13:19 ?        00:00:00 postgres: checkpointer process   
pg92      5562  5553  5562  0    1 13:19 ?        00:00:00 postgres: writer process   
pg92      5563  5553  5563  0    1 13:19 ?        00:00:00 postgres: stats collector process   
pg92      5582  5553  5582  0    1 13:26 ?        00:00:00 postgres: wal sender process replica 172.16.3.40(52680) streaming 0/880D2820
pg92      5588  5506  5588  0    1 13:27 pts/0    00:00:00 ps -ewfL
pg92      5589  5506  5589  0    1 13:27 pts/0    00:00:00 grep pg92



6. 接下来模拟pg_receivexlog异常中断, 看看重新启动后能不能把中断过程中产生的XLOG接收过来. 答案当然是可以的, 但是需要配置wal_keep_segments够大, 也就是中断过程中产生的XLOG要还在pg_receivexlog连接的数据库服务器上, 否则就没办法了(只能通过archived的文件去取).
主节点配置的wal_keep_segments=16, hot_standby节点也是16. 所以只要pg_receivexlog中断过程中产生的xlog个数不超过16都是可以接上去的.

pg92@db-172-16-3-33-> psql digoal postgres
psql (9.2beta1)
Type "help" for help.
digoal=# show wal_keep_segments;
 wal_keep_segments 
-------------------
 16
(1 row)


-- 主节点再次插入大量数据

digoal=# insert into t1 select generate_series(1,1000000),'digoal'||generate_series(1,1000000);
INSERT 0 1000000



7. 接下来启动172.16.3.40上的pg_receivexlog, 看看中断过程中产生的xlog能不能接收过来. 答案当然是没问题的, 因为这个过程中只产生了10个xlog文件. 没有超过16.

pg92@db-172-16-3-40-> pg_receivexlog -D /pgdata/digoal/1921/data02/pg92beta1_arch_realtime -v -s 10 -h 172.16.3.39 -p 1919 -U replica -w
pg_receivexlog: starting log streaming at 0/88000000 (timeline 1)
pg_receivexlog: finished segment at 0/89000000 (timeline 1)
pg_receivexlog: finished segment at 0/8A000000 (timeline 1)
pg_receivexlog: finished segment at 0/8B000000 (timeline 1)
pg_receivexlog: finished segment at 0/8C000000 (timeline 1)
pg_receivexlog: finished segment at 0/8D000000 (timeline 1)
pg_receivexlog: finished segment at 0/8E000000 (timeline 1)
pg_receivexlog: finished segment at 0/8F000000 (timeline 1)
pg_receivexlog: finished segment at 0/90000000 (timeline 1)
pg_receivexlog: finished segment at 0/91000000 (timeline 1)



8. 接下来模拟中断过程中主节点产生了超过16个XLOG文件的情况.


pg92@db-172-16-3-40-> pg_receivexlog -D /pgdata/digoal/1921/data02/pg92beta1_arch_realtime -v -s 10 -h 172.16.3.39 -p 1919 -U replica -w
pg_receivexlog: starting log streaming at 0/C5000000 (timeline 1)
pg_receivexlog: received interrupt signal, exiting.
pg_receivexlog: not renaming 0000000100000000000000C5, segment is not complete.


中断, 查看当前文件如下 : 

pg92@db-172-16-3-40-> ll
total 16M
-rw------- 1 pg92 pg92 16M May 22 13:58 0000000100000000000000C5.partial


9. 在主节点执行如下 : 

pg92@db-172-16-3-33-> psql digoal postgres
psql (9.2beta1)
Type "help" for help.
digoal=# create table t1 (id int, info text);
CREATE TABLE
digoal=# insert into t1 select generate_series(1,1000000),'digoal'||generate_series(1,1000000);
INSERT 0 1000000
digoal=# truncate t1;
TRUNCATE TABLE
digoal=# insert into t1 select generate_series(1,5000000),'digoal'||generate_series(1,5000000);
INSERT 0 5000000
digoal=# insert into t1 select generate_series(1,5000000),'digoal'||generate_series(1,5000000);
INSERT 0 5000000
digoal=# delete from t1;
DELETE 10000000


执行完确保pg_xlog目录中已经没有0000000100000000000000C5这个文件了. 或者该文件已经被覆写.

10. 在备份节点上重新执行pg_receivexlog, 发现它重新从0/F6000000开始同步, 而不是0/C5000000.

pg92@db-172-16-3-40-> pg_receivexlog -D /pgdata/digoal/1921/data02/pg92beta1_arch_realtime -v -s 10 -h 172.16.3.39 -p 1919 -U replica -w
pg_receivexlog: starting log streaming at 0/F6000000 (timeline 1)



【参考】
PostgreSQL 9.2 devel adding cascading replication support
http://blog.163.com/digoal@126/blog/static/1638770402012012361519/
src/bin/pg_basebackup/pg_receivexlog.c
src/bin/pg_basebackup/streamutil.c
