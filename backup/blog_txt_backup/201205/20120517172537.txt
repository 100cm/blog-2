PostgreSQL research

PostgreSQL 9.2 range type usage case

2012-05-17 17:25:37   查看原文>>

上一篇BLOG介绍了PostgreSQL 9.2引入的新类型range. 
接下来讲讲实际的应用场景, 例如通过IP地址定位这个IP是什么地方的. 
假设我用iprange存储一段IP对应一个地名, 根据用户提交上来的IP可以去检索出这个IP属于什么地名的.
首先要创建iprange类型.

digoal=# create type iprange as range (subtype=inet);
CREATE TYPE


创建测试表

digoal=# create table ip_info (id serial primary key,iprange iprange,location text);
NOTICE:  CREATE TABLE will create implicit sequence "ip_info_id_seq" for serial column "ip_info.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "ip_info_pkey" for table "ip_info"
CREATE TABLE


创建exclude约束, 注意我这里使用了text类型的gist索引, 所以需要先加载btree_gist模块, 否则会创建不成功.

digoal=# alter table ip_info add constraint ck_exclude_iprange exclude using gist(location with =, iprange with &&);
NOTICE:  ALTER TABLE / ADD EXCLUDE will create implicit index "ck_exclude_iprange" for table "ip_info"
ALTER TABLE


插入测试数据

digoal=# insert into ip_info (iprange,location) values (iprange('192.168.1.0'::inet,'192.168.1.10'::inet,'[]'),'北京');
INSERT 0 1
digoal=# insert into ip_info (iprange,location) values (iprange('192.168.1.11'::inet,'192.168.1.20'::inet,'[]'),'上海');
INSERT 0 1
digoal=# insert into ip_info (iprange,location) values (iprange('192.168.1.21'::inet,'192.168.1.30'::inet,'[]'),'南京');
INSERT 0 1
digoal=# insert into ip_info (iprange,location) values (iprange('192.168.1.31'::inet,'192.168.1.40'::inet,'[]'),'杭州');
INSERT 0 1
digoal=# insert into ip_info (iprange,location) values (iprange('192.168.1.41'::inet,'192.168.1.50'::inet,'[]'),'南昌');
INSERT 0 1
digoal=# insert into ip_info (iprange,location) values (iprange('192.168.1.51'::inet,'192.168.1.60'::inet,'[]'),'广州');
INSERT 0 1
digoal=# insert into ip_info (iprange,location) values (iprange('192.168.1.61'::inet,'192.168.1.70'::inet,'[]'),'重庆');
INSERT 0 1
digoal=# insert into ip_info (iprange,location) values (iprange('192.168.1.71'::inet,'192.168.1.80'::inet,'[]'),'香港');
INSERT 0 1


查看当前的表结构

digoal=# \d ip_info
                          Table "public.ip_info"
  Column  |  Type   |                      Modifiers                       
----------+---------+------------------------------------------------------
 id       | integer | not null default nextval('ip_info_id_seq'::regclass)
 iprange  | iprange | 
 location | text    | 
Indexes:
    "ip_info_pkey" PRIMARY KEY, btree (id)
    "ck_exclude_iprange" EXCLUDE USING gist (location WITH =, iprange WITH &&)


测试查询

digoal=# select * from ip_info where iprange @> '192.168.1.1'::inet;
 id |          iprange           | location 
----+----------------------------+----------
  1 | [192.168.1.0,192.168.1.10] | 北京
(1 row)


查看执行计划.

digoal=# explain select * from ip_info where iprange @> '192.168.1.1'::inet;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Index Scan using ck_exclude_iprange on ip_info  (cost=0.00..8.27 rows=1 width=68)
   Index Cond: (iprange @> '192.168.1.1'::inet)
(2 rows)


