PostgreSQL research

PostgreSQL 9.2 Reduce the overhead of serializable isolation level locks

2012-05-18 11:08:22   查看原文>>

PostgreSQL 9.1引入了真正的serializable隔离级别, 采用的是predicate locking, 在pg_locks视图中可以见到SIReadLock的锁.
详细的可以参考
http://www.postgresql.org/docs/9.1/static/transaction-iso.html#XACT-SERIALIZABLE
或者PG DBA2000培训中的讲解
http://blog.163.com/digoal@126/blog/static/16387704020123167410863/
或者这篇blog
http://blog.163.com/digoal@126/blog/static/16387704020118162950691/
这里不多做解释.

下面针对serializable和read committed这2个隔离级别在PostgreSQL 9.1和PostgreSQL 9.2上测试一下性能差别.
测试的数据库在同一台服务器上面，使用同样的存储，测试时没有其他程序在运行，测试9.1时关闭9.2以免影响测试结果。
pg9.1和9.2都设置synchronous_commit = off, 以规避IO影响.
编辑pgbench用到的测试脚本

vi slitest.sql
\setrandom id1 1 10000000
\setrandom id2 1 10000000
select * from f_sli_test(:id1,:id2);


创建测试表, 插入测试数据

digoal=# create table sli_test (id int primary key,info text);
digoal=# insert into sli_test select generate_series(1,10000000),'digoal'||generate_series(1,10000000);


创建测试函数 : 

digoal=# create or replace function f_sli_test(i_id1 int,i_id2 int) returns void as $$
declare 
v_info text;
begin
select info into v_info from sli_test where id=i_id1;
update sli_test set info=v_info where id=i_id2;
end;
$$ language plpgsql;



1. PostgreSQL 9.2测试 : 
-- 测试时把数据加载到OS CACHE, 规避IO影响.

digoal=# select relname from pg_class where oid=(select reltoastrelid from pg_class where relname='sli_test');
    relname     
----------------
 pg_toast_16403
(1 row)

digoal=# checkpoint;
CHECKPOINT

digoal=# select * from pgfadvise_willneed('sli_test');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/16384/16403 |         4096 |       127910 |        656976
(1 row)

digoal=# select * from pgfadvise_willneed('sli_test_pkey');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/16384/16409 |         4096 |        54842 |        656982
(1 row)

digoal=# select * from pgfadvise_willneed('pg_toast.pg_toast_16403');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/16384/16406 |         4096 |            0 |        656992
(1 row)



修改默认隔离级别为serializable, 测试开始.

vi $PGDATA/postgresql.conf
default_transaction_isolation = 'serializable'
pg_ctl reload


测试结果

pg92@db-172-16-3-150-> pgbench -M prepared -c 16 -f ./slitest.sql -j 16 -n -r -T 60 -h 127.0.0.1 -U postgres digoal
Client 10 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function f_sli_test(integer,integer) line 5 at SQL statement
Client 3 aborted in state 2: ERROR:  could not serialize access due to concurrent update
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function f_sli_test(integer,integer) line 5 at SQL statement
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 16
duration: 60 s
number of transactions actually processed: 1256757
tps = 20936.335686 (including connections establishing)
tps = 20940.506101 (excluding connections establishing)
statement latencies in milliseconds:
        0.002762        \setrandom id1 1 10000000
        0.000762        \setrandom id2 1 10000000
        0.730918        select * from f_sli_test(:id1,:id2);



修改默认隔离级别为read committed, checkpoint消除IO影响, 

vi $PGDATA/postgresql.conf
default_transaction_isolation = 'read committed'
pg_ctl reload



并重新加载到OS CACHE

pg92@db-172-16-3-150-> psql digoal postgres
psql (9.2beta1)
Type "help" for help.

digoal=# checkpoint;
CHECKPOINT
digoal=# select * from pgfadvise_willneed('sli_test');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/16384/16403 |         4096 |       128308 |        469220
(1 row)

digoal=# select * from pgfadvise_willneed('sli_test_pkey');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/16384/16409 |         4096 |        54842 |        469220
(1 row)

digoal=# select * from pgfadvise_willneed('pg_toast.pg_toast_16403');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/16384/16406 |         4096 |            0 |        469222
(1 row)

digoal=# \q


测试结果:

pg92@db-172-16-3-150-> pgbench -M prepared -c 16 -f ./slitest.sql -j 16 -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 16
duration: 60 s
number of transactions actually processed: 1440480
tps = 23994.689746 (including connections establishing)
tps = 23999.176878 (excluding connections establishing)
statement latencies in milliseconds:
        0.002852        \setrandom id1 1 10000000
        0.000780        \setrandom id2 1 10000000
        0.660045        select * from f_sli_test(:id1,:id2);



2. 以下是PostgreSQL 9.1下面的测试 : 

digoal=# checkpoint;
CHECKPOINT

digoal=# select relname from pg_class where oid=(select reltoastrelid from pg_class where relname='sli_test');
    relname     
----------------
 pg_toast_18544
(1 row)

digoal=# select * from pgfadvise_willneed('sli_test');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/18517/18544 |         4096 |       127938 |        456254
(1 row)

digoal=# select * from pgfadvise_willneed('sli_test_pkey');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/18517/18550 |         4096 |        54842 |        456262
(1 row)

digoal=# select * from pgfadvise_willneed('pg_toast.pg_toast_18544');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/18517/18547 |         4096 |            0 |        456262
(1 row)



修改默认隔离级别为serializable, 测试开始.

vi $PGDATA/postgresql.conf
default_transaction_isolation = 'serializable'
pg_ctl reload


测试结果

pg91@db-172-16-3-150-> pgbench -M prepared -c 16 -f ./slitest.sql -j 16 -n -r -T 60 -h 127.0.0.1 -U postgres digoal
Client 15 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 3 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 6 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 4 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 9 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 1 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 14 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 13 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 0 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 10 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 5 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
Client 7 aborted in state 2: ERROR:  could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during write.
HINT:  The transaction might succeed if retried.
CONTEXT:  SQL statement "update sli_test set info=v_info where id=i_id2"
PL/pgSQL function "f_sli_test" line 6 at SQL statement
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 16
duration: 60 s
number of transactions actually processed: 1152276
tps = 19204.369227 (including connections establishing)
tps = 19208.411669 (excluding connections establishing)
statement latencies in milliseconds:
        0.002684        \setrandom id1 1 10000000
        0.000782        \setrandom id2 1 10000000
        0.499726        select * from f_sli_test(:id1,:id2);



PostgreSQL 9.1 read committed隔离级别的测试结果

pg91@db-172-16-3-150-> psql digoal postgres
psql (9.1.3)
Type "help" for help.

digoal=# checkpoint;
CHECKPOINT

digoal=# select relname from pg_class where oid=(select reltoastrelid from pg_class where relname='sli_test');
    relname     
----------------
 pg_toast_18544
(1 row)

digoal=# select * from pgfadvise_willneed('sli_test');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/18517/18544 |         4096 |       127938 |        456254
(1 row)

digoal=# select * from pgfadvise_willneed('sli_test_pkey');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/18517/18550 |         4096 |        54842 |        456262
(1 row)

digoal=# select * from pgfadvise_willneed('pg_toast.pg_toast_18544');
     relpath      | os_page_size | rel_os_pages | os_pages_free 
------------------+--------------+--------------+---------------
 base/18517/18547 |         4096 |            0 |        456262
(1 row)

vi $PGDATA/postgresql.conf
default_transaction_isolation = 'read committed'
pg_ctl reload

pg91@db-172-16-3-150-> pgbench -M prepared -c 16 -f ./slitest.sql -j 16 -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 16
duration: 60 s
number of transactions actually processed: 1514654
tps = 25228.275608 (including connections establishing)
tps = 25233.873383 (excluding connections establishing)
statement latencies in milliseconds:
        0.002639        \setrandom id1 1 10000000
        0.000771        \setrandom id2 1 10000000
        0.627759        select * from f_sli_test(:id1,:id2);



【小结】
PostgreSQL 9.2在serializable 隔离级别上QPS有一定提升，但是在read committed隔离级别上性能比9.1有所下降。
如下:
PostgreSQL 9.2 Reduce the overhead of serializable isolation level locks - 德哥@Digoal - The Heart,The World.
为什么read committed的性能会下降呢?
我上面的测试配置的shared_mem=512MB, 小于测试表的SIZE 700MB. 
后面把shared_mem改成2048MB后再次测试, 9.2全面超越
PostgreSQL 9.2 Reduce the overhead of serializable isolation level locks - 德哥@Digoal - The Heart,The World.
 

【参考】
http://www.postgresql.org/docs/9.2/static/release-9-2.html
http://www.postgresql.org/docs/9.1/static/transaction-iso.html#XACT-SERIALIZABLE
