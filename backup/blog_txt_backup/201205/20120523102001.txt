PostgreSQL research

PostgreSQL distinct on and window function row_number() usage

2012-05-23 10:20:01   查看原文>>

前段时间的PGDBA2000培训中讲过的一个例子, 取一个班级中各门学科成绩的第一名的信息.
很多场景适用, 因此摘录出来.
例子 : 
测试表

create table std_score (username text,subject text,score numeric);



测试数据

insert into std_score values('刘德华','数学',95.5);
insert into std_score values('刘德华','语文',85.5);
insert into std_score values('刘德华','英语',99.5);
insert into std_score values('刘德华','物理',79.5);
insert into std_score values('刘德华','化学',79.5);
insert into std_score values('张学友','数学',94.5);
insert into std_score values('张学友','语文',84.5);
insert into std_score values('张学友','英语',94.5);
insert into std_score values('张学友','物理',74.5);
insert into std_score values('张学友','化学',74.5);
insert into std_score values('黎明','数学',96.5);
insert into std_score values('黎明','语文',85.5);
insert into std_score values('黎明','英语',98.5);
insert into std_score values('黎明','物理',89.5);
insert into std_score values('黎明','化学',69.5);
insert into std_score values('李连杰','数学',75.5);
insert into std_score values('李连杰','语文',95.5);
insert into std_score values('李连杰','英语',79.5);
insert into std_score values('李连杰','物理',89.5);
insert into std_score values('李连杰','化学',99.5);
insert into std_score values('郭富城','数学',91.5);
insert into std_score values('郭富城','语文',82.5);
insert into std_score values('郭富城','英语',93.5);
insert into std_score values('郭富城','物理',69.5);
insert into std_score values('郭富城','化学',69.5);
insert into std_score values('叶孤城','数学',99.5);
insert into std_score values('叶孤城','语文',82.5);
insert into std_score values('叶孤城','英语',69.5);
insert into std_score values('叶孤城','物理',89.5);
insert into std_score values('叶孤城','化学',99.5);
insert into std_score values('digoal','数学',89.5);
insert into std_score values('digoal','语文',89.5);
insert into std_score values('digoal','英语',89.5);
insert into std_score values('digoal','物理',89.5);
insert into std_score values('digoal','化学',89.5);



取出各门学科第一名的同学.
方法一, 使用窗口函数

test=> select username,subject,score from (select *,row_number() over (partition by subject order by score desc) rn from std_score) t where rn=1;
 username | subject | score 
----------+---------+-------
 叶孤城   | 化学    |  99.5
 叶孤城   | 数学    |  99.5
 黎明     | 物理    |  89.5
 刘德华   | 英语    |  99.5
 李连杰   | 语文    |  95.5
(5 rows)
Time: 0.405 ms



方法二, 使用distinct on 语法

test=> select distinct on (subject) username,subject,score from std_score order by subject,score desc;
 username | subject | score 
----------+---------+-------
 叶孤城   | 化学    |  99.5
 叶孤城   | 数学    |  99.5
 黎明     | 物理    |  89.5
 刘德华   | 英语    |  99.5
 李连杰   | 语文    |  95.5
(5 rows)
Time: 0.232 ms



方法三, 使用in子句

test=> select * from std_score where (subject,score) in (select subject,max(score) score from std_score group by subject) order by subject;
 username | subject | score 
----------+---------+-------
 李连杰   | 化学    |  99.5
 叶孤城   | 化学    |  99.5
 叶孤城   | 数学    |  99.5
 叶孤城   | 物理    |  89.5
 digoal   | 物理    |  89.5
 黎明     | 物理    |  89.5
 李连杰   | 物理    |  89.5
 刘德华   | 英语    |  99.5
 李连杰   | 语文    |  95.5
(9 rows)
Time: 0.603 ms



取最后一名也很容易, 刚好相反 : 

test=> select username,subject,score from (select *,row_number() over (partition by subject order by score) rn from std_score) t where rn=1;
 username | subject | score 
----------+---------+-------
 郭富城   | 化学    |  69.5
 李连杰   | 数学    |  75.5
 郭富城   | 物理    |  69.5
 叶孤城   | 英语    |  69.5
 叶孤城   | 语文    |  82.5
(5 rows)

Time: 0.546 ms
test=> select distinct on (subject) username,subject,score from std_score order by subject,score;
 username | subject | score 
----------+---------+-------
 郭富城   | 化学    |  69.5
 李连杰   | 数学    |  75.5
 郭富城   | 物理    |  69.5
 叶孤城   | 英语    |  69.5
 叶孤城   | 语文    |  82.5
(5 rows)

Time: 0.245 ms
test=> select * from std_score where (subject,score) in (select subject,min(score) score from std_score group by subject) order by subject;
 username | subject | score 
----------+---------+-------
 黎明     | 化学    |  69.5
 郭富城   | 化学    |  69.5
 李连杰   | 数学    |  75.5
 郭富城   | 物理    |  69.5
 叶孤城   | 英语    |  69.5
 郭富城   | 语文    |  82.5
 叶孤城   | 语文    |  82.5
(7 rows)

Time: 0.649 ms


除了使用group by子句, distinct on和窗口函数也可以作为子句如,

digoal=# explain select * from std_score where (subject,score) in (select distinct on (subject) subject,score from std_score order by subject,score desc);
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Merge Semi Join  (cost=7.96..14.96 rows=12 width=23)
   Merge Cond: ((public.std_score.subject = public.std_score.subject) AND (public.std_score.score = public.std_score.score))
   ->  Index Scan using idx_test on std_score  (cost=0.00..6.78 rows=35 width=23)
   ->  Sort  (cost=7.96..7.97 rows=5 width=14)
         Sort Key: public.std_score.subject, public.std_score.score
         ->  Unique  (cost=7.67..7.85 rows=5 width=14)
               ->  Sort  (cost=7.67..7.76 rows=35 width=14)
                     Sort Key: public.std_score.subject, public.std_score.score
                     ->  Index Only Scan using idx_test on std_score  (cost=0.00..6.78 rows=35 width=14)
(9 rows)
digoal=# select * from std_score where (subject,score) in (select distinct on (subject) subject,score from std_score order by subject,score desc) order by subject;
 username | subject | score
----------+---------+-------
 李连杰   | 化学    |  99.5
 叶孤城   | 化学    |  99.5
 叶孤城   | 数学    |  99.5
 黎明     | 物理    |  89.5
 李连杰   | 物理    |  89.5
 叶孤城   | 物理    |  89.5
 digoal   | 物理    |  89.5
 刘德华   | 英语    |  99.5
 李连杰   | 语文    |  95.5
(9 rows)



【注意】
使用窗口函数和distinct on 的语法取排名, 并列排名没有取到.

【参考】
http://blog.163.com/digoal@126/blog/static/16387704020124793313702
