PostgreSQL research

PostgreSQL 9.2 PL/pgSQL improve

2012-05-21 21:52:47   查看原文>>

PostgreSQL 9.2  对PL/pgSQL做出了如下改进 : 

1. Allow the PL/pgSQL OPEN cursor command to supply parameters by name (Yeb Havinga, Kevin Grittner, Tom Lane)
2. Add a GET STACKED DIAGNOSTICS PL/pgSQL command to retrieve exception info (Pavel Stehule, Shigeru Hanada, David Wheeler)
3. Speed up PL/pgSQL array assignment by caching type information (Pavel Stehule)
4. Improve performance and memory consumption of the PL/pgSQL ELSIF clauses (Tom Lane)
5. Output the function signature, not just the name, in PL/pgSQL error messages (Pavel Stehule, Abhijit Menon-Sen, Tom Lane)


接下来分别测试一下使用 : 
1. OPEN打开游标时支持使用参数名字 , 以前的版本则只支持参数值传递. 支持参数名的方法使得游标的调用更加灵活.
例如 : 

DECLARE
    curs3 CURSOR (key integer) FOR SELECT * FROM tenk1 WHERE unique1 = key;
BEGIN
OPEN curs3(42);  -- 老的版本只支持这种传递.
OPEN curs3(key := 42);  -- PostgreSQL9.2支持参数名.


PostgreSQL 9.2 运行结果 : 

pg92@db-172-16-3-150-> psql digoal postgres
psql (9.2beta1)
Type "help" for help.
digoal=# CREATE OR REPLACE function f_92test () returns void as $$
digoal$# DECLARE
digoal$#     curs3 CURSOR (key integer) FOR SELECT * FROM t1 WHERE id = key;
digoal$# BEGIN
digoal$# -- OPEN curs3(42);
digoal$# OPEN curs3(key := 42);
digoal$# CLOSE curs3;
digoal$# RETURN;
digoal$# END;
digoal$# $$ language plpgsql;
CREATE FUNCTION
digoal=# select * from f_92test();
 f_92test 
----------
 
(1 row)


PostgreSQL 9.1 运行结果 : 

pgdba2000@db-172-16-3-33-> psql test test
psql (9.1.3)
Type "help" for help.
test=> CREATE OR REPLACE function f_92test () returns void as $$
test$> DECLARE
test$>     curs3 CURSOR (key integer) FOR SELECT * FROM t1 WHERE id = key;
test$> BEGIN
test$> -- OPEN curs3(42);
test$> OPEN curs3(key := 42);
test$> CLOSE curs3;
test$> RETURN;
test$> END;
test$> $$ language plpgsql;
ERROR:  syntax error at or near ":="
LINE 6: OPEN curs3(key := 42);
                       ^



2. PostgreSQL 增加了获取PL/pgSQL错误信息的语法GET STACKED DIAGNOSTICS.
通过GET STACKED DIAGNOSTICS可以在函数执行异常时在EXCEPTION中捕获错误信息如 : 错误代码, 错误主信息, 错误详细信息, 错误提示信息, 发生错误的行信息.
例子 : 

pg92@db-172-16-3-150-> psql digoal postgres
psql (9.2beta1)
Type "help" for help.

digoal=# CREATE OR REPLACE FUNCTION f_test () returns void as $$
digoal$# declare
digoal$# v1 text;
digoal$# v2 text;
digoal$# v3 text;
digoal$# v4 text;
digoal$# v5 text;
digoal$# begin
digoal$# select 1;  -- 这行,第9行有问题.
digoal$# exception
digoal$# when others then
digoal$# GET STACKED DIAGNOSTICS
digoal$#   v1 := RETURNED_SQLSTATE,
digoal$#   v2 := MESSAGE_TEXT,
digoal$#   v3 := PG_EXCEPTION_DETAIL,
digoal$#   v4 := PG_EXCEPTION_HINT,
digoal$#   v5 := PG_EXCEPTION_CONTEXT;
digoal$# raise notice 'v1: %,
digoal$# v2: %,
digoal$# v3: %,
digoal$# v4: %,
digoal$# v5: %.',v1,v2,v3,v4,v5;
digoal$# end;
digoal$# $$ language plpgsql;
CREATE FUNCTION
digoal=# select * from f_test();
NOTICE:  v1: 42601,
v2: query has no destination for result data,
v3: ,
v4: If you want to discard the results of a SELECT, use PERFORM instead.,
v5: PL/pgSQL function f_test() line 9 at SQL statement.
 f_test 
--------
 
(1 row)



3. PostgreSQL 9.2通过缓存类型信息加速PL/pgSQL array类型的指派.

4. 对ELSIF子句有性能提升.
这个可以使用pgbench来测试一下提升有多少?
-- 测试函数, 大量使用ELSIF子句.

CREATE OR REPLACE function f_elsif(i_int int) returns int as $$
declare
begin
if i_int = 0 then
  return i_int;
elsif i_int = 1 then
  return i_int;
elsif i_int = 2 then
  return i_int;
elsif i_int = 3 then
  return i_int;
elsif i_int = 4 then
  return i_int;
elsif i_int = 5 then
  return i_int;
elsif i_int = 6 then
  return i_int;
elsif i_int = 7 then
  return i_int;
elsif i_int = 8 then
  return i_int;
elsif i_int = 9 then
  return i_int;
elsif i_int = 10 then
  return i_int;
elsif i_int = 11 then
  return i_int;
elsif i_int = 12 then
  return i_int;
elsif i_int = 13 then
  return i_int;
elsif i_int = 14 then
  return i_int;
elsif i_int = 15 then
  return i_int;
elsif i_int = 16 then
  return i_int;
elsif i_int = 17 then
  return i_int;
elsif i_int = 18 then
  return i_int;
elsif i_int = 19 then
  return i_int;
elsif i_int = 20 then
  return i_int;
elsif i_int = 21 then
  return i_int;
elsif i_int = 22 then
  return i_int;
elsif i_int = 23 then
  return i_int;
elsif i_int = 24 then
  return i_int;
elsif i_int = 25 then
  return i_int;
elsif i_int = 26 then
  return i_int;
elsif i_int = 27 then
  return i_int;
elsif i_int = 28 then
  return i_int;
elsif i_int = 29 then
  return i_int;
elsif i_int = 30 then
  return i_int;
elsif i_int = 31 then
  return i_int;
elsif i_int = 32 then
  return i_int;
elsif i_int = 33 then
  return i_int;
elsif i_int = 34 then
  return i_int;
elsif i_int = 35 then
  return i_int;
elsif i_int = 36 then
  return i_int;
elsif i_int = 37 then
  return i_int;
elsif i_int = 38 then
  return i_int;
elsif i_int = 39 then
  return i_int;
elsif i_int = 40 then
  return i_int;
elsif i_int = 41 then
  return i_int;
elsif i_int = 42 then
  return i_int;
elsif i_int = 43 then
  return i_int;
elsif i_int = 44 then
  return i_int;
elsif i_int = 45 then
  return i_int;
elsif i_int = 46 then
  return i_int;
elsif i_int = 47 then
  return i_int;
elsif i_int = 48 then
  return i_int;
elsif i_int = 49 then
  return i_int;
elsif i_int = 50 then
  return i_int;
elsif i_int = 51 then
  return i_int;
else 
  return i_int;
end if;
end;
$$ language plpgsql;


PostgreSQL 9.2 测试结果 : 

pg92@db-172-16-3-33-> pgbench -M prepared -c 8 -j 8 -f ./elsif.sql -n -r -T 60 -h 127.0.0.1 -U postgres digoal
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 538752
tps = 8978.986300 (including connections establishing)
tps = 8979.976151 (excluding connections establishing)
statement latencies in milliseconds:
        0.889331        select * from f_elsif(10000);



PostgreSQL 9.1 测试结果 : 

pgdba2000@db-172-16-3-33-> pgbench -M prepared -c 8 -j 8 -f ./elsif.sql -n -r -T 60 -h 127.0.0.1 -U test test
Password: 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 536916
tps = 8948.449964 (including connections establishing)
tps = 8949.431980 (excluding connections establishing)
statement latencies in milliseconds:
        0.892056        select * from f_elsif(10000);


差别不明显, 可能更复杂的场景会有比较明显的差别.

5. PostgreSQL 9.2 在错误输出中输出函数名以及函数的参数信息, 以前函数调用错误时只输出函数的名称而没有参数, 所以当存在同名的函数时无法判断是哪个函数造成的错误.
例如 : 
PostgreSQL 9.1

pgdba2000@db-172-16-3-33-> psql test test
psql (9.1.3)
Type "help" for help.
test=> create or replace function f_test() returns void as $$
test$> declare
test$> begin
test$> select 1;
test$> return;     
test$> end;
test$> $$ language plpgsql;
CREATE FUNCTION
test=> select * from f_test();
ERROR:  query has no destination for result data
HINT:  If you want to discard the results of a SELECT, use PERFORM instead.
CONTEXT:  PL/pgSQL function "f_test" line 4 at SQL statement
-- 错误输出中只包含了函数名f_test, 并不知道是几个参数的f_test函数.



PostgreSQL 9.2

pg92@db-172-16-3-33-> psql digoal postgres
psql (9.2beta1)
Type "help" for help.
digoal=# create or replace function f_test() returns void as $$
declare
begin
select 1;
return;     
end;
$$ language plpgsql;
CREATE FUNCTION
digoal=# select * from f_test();
ERROR:  query has no destination for result data
HINT:  If you want to discard the results of a SELECT, use PERFORM instead.
CONTEXT:  PL/pgSQL function f_test() line 4 at SQL statement
-- 错误输出中包含了函数名和参数结构, 这里是f_test(), 也就是无参数的f_test函数. 所以可以清晰的定位到出错的函数是哪个函数.


【参考】
http://www.postgresql.org/docs/9.2/static/plpgsql.html
