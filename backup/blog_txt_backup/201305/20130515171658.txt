PostgreSQL research

PostgreSQL complex unique index performance tuning case

2013-05-15 17:16:58   查看原文>>

在应用场景中可能会遇到多个字段唯一约束的情况, 在字段数非常多的情况下, 数据的插入, 更新, 删除的效率会受到索引更新的影响.
下面举一个例子 : 
-- 测试表 : 

postgres=# create unlogged table uk_comp(c1 serial, c2 int8 default 1, c3 int default 1, c4 int8 default 1, unique (c1,c2,c3,c4));
CREATE TABLE
postgres=# alter sequence uk_comp_c1_seq cache 1000000;
ALTER SEQUENCE


-- 测试脚本

pg93@db-172-16-3-33-> vi ins.sql
insert into uk_comp(c1,c2,c3,c4) values (default,default,default,default);


-- 测试结果.

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 4 -T 60 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 4740316
tps = 78990.016328 (including connections establishing)
tps = 79019.393688 (excluding connections establishing)
statement latencies in milliseconds:
        0.201243        insert into uk_comp(c1,c2,c3,c4) values (default,default,default,default);


-- 10分钟测试结果, 70658每秒.

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 4 -T 600 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 600 s
number of transactions actually processed: 42396416
tps = 70656.447352 (including connections establishing)
tps = 70658.833711 (excluding connections establishing)
statement latencies in milliseconds:
        0.225237        insert into uk_comp(c1,c2,c3,c4) values (default,default,default,default);


-- 在没有约束的情况下的插入速度84260每秒 : 

postgres=# alter table uk_comp drop constraint uk_comp_c1_c2_c3_c4_key;
ALTER TABLE
postgres=# truncate uk_comp;
TRUNCATE TABLE

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 4 -T 60 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 5055190
tps = 84230.801985 (including connections establishing)
tps = 84260.262434 (excluding connections establishing)
statement latencies in milliseconds:
        0.188626        insert into uk_comp(c1,c2,c3,c4) values (default,default,default,default);


-- 优化手段之一, 想办法将多个字段合成1个字段, 当然内容也要压缩. 
-- 例如本例的int, int8, int, int8 压缩成1个int8. 
-- 具体的一对一的算法可以在应用层实现. 以下测试使用序列替代.

postgres=# create unlogged table uk_comp(c1 int default 1, c2 int8 default 1, c3 int default 1, c4 int8 default 1, c5 serial8, unique (c5));
postgres=# alter sequence uk_comp_c5_seq cache 1000000;
ALTER SEQUENCE


-- 测试结果79935每秒.

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 4 -T 60 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 4795369
tps = 79909.509070 (including connections establishing)
tps = 79935.601034 (excluding connections establishing)
statement latencies in milliseconds:
        0.198900        insert into uk_comp(c1,c2,c3,c4) values (default,default,default,default);


-- 10分钟测试结果72976每秒.

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 4 -T 600 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 600 s
number of transactions actually processed: 43787284
tps = 72973.568137 (including connections establishing)
tps = 72976.972725 (excluding connections establishing)
statement latencies in milliseconds:
        0.218037        insert into uk_comp(c1,c2,c3,c4) values (default,default,default,default);


-- 使用复合类型没有任何提高. 不推荐使用.

postgres=# create type uk as (c1 int, c2 int8, c3 int, c4 int8);
CREATE TYPE
postgres=# create unlogged table uk_comp (v_uk uk, unique (v_uk));
CREATE TABLE
postgres=# create sequence seq_uk cache 1000000;
CREATE SEQUENCE

vi ins.sql
insert into uk_comp values ((nextval('seq_uk'),1,1,1));

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 4 -T 60 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 4443296
tps = 74029.967960 (including connections establishing)
tps = 74057.619465 (excluding connections establishing)
statement latencies in milliseconds:
        0.214818        insert into uk_comp values ((nextval('seq_uk'),1,1,1));

pg93@db-172-16-3-33-> pgbench -M prepared -r -n -f ./ins.sql -c 16 -j 4 -T 600 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 600 s
number of transactions actually processed: 38043646
tps = 63396.318811 (including connections establishing)
tps = 63398.452369 (excluding connections establishing)
statement latencies in milliseconds:
        0.251134        insert into uk_comp values ((nextval('seq_uk'),1,1,1));



[其他]
1. 使用1对1的数据压缩算法后, 会新增1个字段, 如果原有的(部分)字段还需要经常作为查询条件的话, 那么查询字段可能还要做索引.
    优化效果一般, 如果是全部字段作为查询条件, 那么原有的字段就不需要做索引了, 在应用层解决对应关系就可以 ,.
2. 算法考虑, 不要使用离散度太高的算法.
例如UUID不适合作为索引列, 原因如下 : 
http://blog.163.com/digoal@126/blog/static/16387704020129249646421/
3. 如果字段类型非int,int8类型, 优化效果会更明显.

Flag Counter
