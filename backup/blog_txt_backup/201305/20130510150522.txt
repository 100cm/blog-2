PostgreSQL research

PostgreSQL 9.3 JSON type improve

2013-05-10 15:05:22   查看原文>>

E.1.3.5.1. JSON
Add operators and functions to extract values from JSON data strings (Andrew Dunstan)
Allow JSON data strings to be converted into records (Andrew Dunstan)
Add functions to convert values, records, and hstore data to JSON (Andrew Dunstan)


[测试]
JSON 操作符 : 
┌────────┬──────────────────┬──────────────────────────────────────────┬────────────────────────────────────────────┐
│Operator│Right Operand Type│               Description                │                  Example                   │
├────────┼──────────────────┼──────────────────────────────────────────┼────────────────────────────────────────────┤
│->      │int               │Get JSON array element                    │'[1,2,3]'::json->2                          │
├────────┼──────────────────┼──────────────────────────────────────────┼────────────────────────────────────────────┤
│->      │text              │Get JSON object field                     │'{"a":1,"b":2}'::json->'b'                  │
├────────┼──────────────────┼──────────────────────────────────────────┼────────────────────────────────────────────┤
│->>     │int               │Get JSON array element as text            │'[1,2,3]'::json->>2                         │
├────────┼──────────────────┼──────────────────────────────────────────┼────────────────────────────────────────────┤
│->>     │text              │Get JSON object field as text             │'{"a":1,"b":2}'::json->>'b'                 │
├────────┼──────────────────┼──────────────────────────────────────────┼────────────────────────────────────────────┤
│#>      │array of text     │Get JSON object at specified path         │'{"a":[1,2,3],"b":[4,5,6]}'::json#>'{a,2}'  │
├────────┼──────────────────┼──────────────────────────────────────────┼────────────────────────────────────────────┤
│#>>     │array of text     │Get JSON object at specified path as text │'{"a":[1,2,3],"b":[4,5,6]}'::json#>>'{a,2}' │
└────────┴──────────────────┴──────────────────────────────────────────┴────────────────────────────────────────────┘
验证 : 

digoal=# select oprname,oprcode,oprleft::regtype,oprright::regtype,oprresult::regtype from pg_operator where oprleft='json'::regtype or oprright='json'::regtype;
 oprname |          oprcode          | oprleft | oprright | oprresult
---------+---------------------------+---------+----------+-----------
 ->      | json_object_field         | json    | text     | json  -- 从json中取json对象, 返回json
 ->>     | json_object_field_text    | json    | text     | text  -- 从json中取json对象, 返回text
 ->      | json_array_element        | json    | integer  | json  -- 从json array中取元素, 返回json
 ->>     | json_array_element_text   | json    | integer  | text  -- 从json array中取元素, 返回text
 #>      | json_extract_path_op      | json    | text[]   | json  -- 从json中根据指定路径取元素, 返回json
 #>>     | json_extract_path_text_op | json    | text[]   | text  -- 从json中根据指定路径取元素, 返回text
(6 rows)


例如 : 

digoal=# select '{"a":1,"b":2,"c":3}'::json->'a';
 ?column?
----------
 1
(1 row)
digoal=# select '{"a":1,"b":2,"c":3}'::json->>'a';
 ?column?
----------
 1
(1 row)
digoal=# select '[[1,2],[3]]'::json->0;
 ?column?
----------
 [1,2]
(1 row)
digoal=# select '[[1,2],[3]]'::json->>1;
 ?column?
----------
 [3]
(1 row)
digoal=# select '[[1,2],[3]]'::json#>'{0,0}';
 ?column?
----------
 1
(1 row)

digoal=# select '[[1,2],[3]]'::json#>'{0,1}';
 ?column?
----------
 2
(1 row)

digoal=# select '[[1,2],[3]]'::json#>'{1}';
 ?column?
----------
 [3]
(1 row)

digoal=# select '[[1,2],[3]]'::json#>'{1,0}';
 ?column?
----------
 3
(1 row)

digoal=# select '[[1,2],[3]]'::json#>'{1,0,0}';
 ?column?
----------

(1 row)


json函数 : 
┌────────────────────────────────────────────────────┬───────────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬──────────────────────────────────────────────┬────────────────────┐
│                      Function                      │  Return Type  │                                                                                    Description                                                                                     │                   Example                    │   Example Result   │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│array_to_json(anyarray [, pretty_bool])             │json           │Returns the array as JSON. A PostgreSQL multidimensional array becomes a JSON array of arrays. Line feeds will be added between dimension 1 elements ifpretty_bool is true.         │array_to_json('{{1,5},{99,100}}'::int[])      │[[1,5],[99,100]]    │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│row_to_json(record [, pretty_bool])                 │json           │Returns the row as JSON. Line feeds will be added between level 1 elements ifpretty_bool is true.                                                                                   │row_to_json(row(1,'foo'))                     │{"f1":1,"f2":"foo"} │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│to_json(anyelement)                                 │json           │Returns the value as JSON. If the data type is not builtin, and there is a cast from the type to json, the cast function will be used to perform the conversion. Otherwise, for any │to_json('Fred said "Hi."'::text)              │"Fred said \"Hi.\"" │
│                                                    │               │value other than a number, a boolean or NULL, the text representation will be used, escaped and quoted so that it is legal JSON.                                                    │                                              │                    │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│json_array_length(json)                             │int            │Returns the number of elements in the outermost json array.                                                                                                                         │json_array_length('[1,2,3,{"f1":1,"f2":       │5                   │
│                                                    │               │                                                                                                                                                                                    │[5,6]},4]')                                   │                    │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│                                                    │               │                                                                                                                                                                                    │                                              │ key | value        │
│                                                    │SETOF key text,│                                                                                                                                                                                    │select * from json_each('{"a":"foo",          │-----+-------       │
│json_each(json)                                     │value json     │Expands the outermost json object into a set of key/value pairs.                                                                                                                    │"b":"bar"}')                                  │ a   | "foo"        │
│                                                    │               │                                                                                                                                                                                    │                                              │ b   | "bar"        │
│                                                    │               │                                                                                                                                                                                    │                                              │                    │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│                                                    │               │                                                                                                                                                                                    │                                              │ key | value        │
│                                                    │SETOF key text,│                                                                                                                                                                                    │select * from json_each_text('{"a":"foo",     │-----+-------       │
│json_each_text(from_json json)                      │value text     │Expands the outermost json object into a set of key/value pairs. The returned value will be of type text.                                                                           │"b":"bar"}')                                  │ a   | foo          │
│                                                    │               │                                                                                                                                                                                    │                                              │ b   | bar          │
│                                                    │               │                                                                                                                                                                                    │                                              │                    │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│json_extract_path(from_json json, VARIADIC          │json           │Returns json object pointed to by path_elems.                                                                                                                                       │json_extract_path('{"f2":{"f3":1},"f4":       │{"f5":99,"f6":"foo"}│
│path_elems text[])                                  │               │                                                                                                                                                                                    │{"f5":99,"f6":"foo"}}','f4')                  │                    │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│json_extract_path_text(from_json json, VARIADIC     │text           │Returns json object pointed to by path_elems.                                                                                                                                       │json_extract_path_text('{"f2":{"f3":1},"f4":  │foo                 │
│path_elems text[])                                  │               │                                                                                                                                                                                    │{"f5":99,"f6":"foo"}}','f4', 'f6')            │                    │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│                                                    │               │                                                                                                                                                                                    │                                              │ json_object_keys   │
│json_object_keys(json)                              │SETOF text     │Returns set of keys in the json object. Only the "outer" object will be displayed.                                                                                                  │json_object_keys('{"f1":"abc","f2":{"f3":"a", │------------------  │
│                                                    │               │                                                                                                                                                                                    │"f4":"b"}}')                                  │ f1                 │
│                                                    │               │                                                                                                                                                                                    │                                              │ f2                 │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│json_populate_record(base anyelement, from_json     │               │Expands the object in from_json to a row whose columns match the record type defined by base. Conversion will be best effort; columns in base with no corresponding key in from_json│select * from json_populate_record(null::x, ' │ a | b              │
│json, [, use_json_as_text bool=false]               │anyelement     │will be left null. A column may only be specified once.                                                                                                                             │{"a":1,"b":2}')                               │---+---             │
│                                                    │               │                                                                                                                                                                                    │                                              │ 1 | 2              │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│                                                    │               │                                                                                                                                                                                    │                                              │ a | b              │
│json_populate_recordset(base anyelement, from_json  │SETOF          │Expands the outermost set of objects in from_json to a set whose columns match the record type defined by base. Conversion will be best effort; columns in base with no             │select * from json_populate_recordset(null::x,│---+---             │
│json, [, use_json_as_text bool=false]               │anyelement     │corresponding key in from_json will be left null. A column may only be specified once.                                                                                              │'[{"a":1,"b":2},{"a":3,"b":4}]')              │ 1 | 2              │
│                                                    │               │                                                                                                                                                                                    │                                              │ 3 | 4              │
│                                                    │               │                                                                                                                                                                                    │                                              │                    │
├────────────────────────────────────────────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┼────────────────────┤
│                                                    │               │                                                                                                                                                                                    │                                              │   value            │
│                                                    │               │                                                                                                                                                                                    │                                              │-----------         │
│json_array_elements(json)                           │SETOF json     │Expands a json array to a set of json elements.                                                                                                                                     │json_array_elements('[1,true, [2,false]]')    │ 1                  │
│                                                    │               │                                                                                                                                                                                    │                                              │ true               │
│                                                    │               │                                                                                                                                                                                    │                                              │ [2,false]          │
└────────────────────────────────────────────────────┴───────────────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────┴────────────────────┘
测试 : 

digoal=# select array_to_json('{{1,5},{99,100}}'::int[]);
  array_to_json
------------------
 [[1,5],[99,100]]
(1 row)
digoal=# select row_to_json(row(1,'foo'));
     row_to_json
---------------------
 {"f1":1,"f2":"foo"}
(1 row)

digoal=# select to_json('Fred said "Hi."'::text);
       to_json
---------------------
 "Fred said \"Hi.\""
(1 row)
digoal=# select json_array_length('[1,2,3,{"f1":1,"f2":[5,6]},4]');
 json_array_length
-------------------
                 5
(1 row)
digoal=# select * from json_each('{"a":"foo", "b":"bar"}');
 key | value
-----+-------
 a   | "foo"
 b   | "bar"
(2 rows)
digoal=# select * from json_each_text('{"a":"foo", "b":"bar"}');
 key | value
-----+-------
 a   | foo
 b   | bar
(2 rows)
digoal=# select json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"foo"}}','f4');
  json_extract_path
----------------------
 {"f5":99,"f6":"foo"}
(1 row)
digoal=# select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"foo"}}','f4', 'f6');
 json_extract_path_text
------------------------
 foo
(1 row)
digoal=# select json_array_elements('[1,true, [2,false]]');
 json_array_elements
---------------------
 1
 true
 [2,false]
(3 rows)
digoal=# create table test(c1 int,c2 int);
CREATE TABLE
digoal=# select * from json_populate_record(null::test, '{"c1":1,"b":2,"c2":3}');
 c1 | c2
----+----
  1 |  3
(1 row)
digoal=# select * from json_populate_record(null::test, '{"c1":1,"b":2, "c1":3}');
 c1 | c2
----+----
  3 |
(1 row)
digoal=# select * from json_populate_recordset(null::test, '[{"c2":1,"c1":2},{"c1":3,"c2":4}]');
 c1 | c2
----+----
  2 |  1
  3 |  4
(2 rows)


聚合 : 

digoal=# select json_agg(i) from generate_series(1,10) i;
            json_agg             
---------------------------------
 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1 row)
digoal=# create table t(id int,info text,crt_time timestamp);
CREATE TABLE
digoal=# insert into t select generate_series(1,10),md5(random()::text),clock_timestamp();
INSERT 0 10
digoal=# select json_agg(t) from t;
                                           json_agg
-----------------------------------------------------------------------------------------------
 [{"id":1,"info":"bad22715a0520d0fd5ffc64a3046cf05","crt_time":"2013-05-10 15:02:55.664282"}, +
  {"id":2,"info":"6763f180faa87b86a000c03651501bc7","crt_time":"2013-05-10 15:02:55.664368"}, +
  {"id":3,"info":"ed5007fde04fd057e40f8bd4441df77a","crt_time":"2013-05-10 15:02:55.664375"}, +
  {"id":4,"info":"af95492cf049f3a77554dc5915263481","crt_time":"2013-05-10 15:02:55.664379"}, +
  {"id":5,"info":"b36b1226ded0e742624adace84b6ca43","crt_time":"2013-05-10 15:02:55.664384"}, +
  {"id":6,"info":"311907aeef14ca1cef4119d1af167106","crt_time":"2013-05-10 15:02:55.664388"}, +
  {"id":7,"info":"e718e389fee41b6964d20eba8616c8af","crt_time":"2013-05-10 15:02:55.664398"}, +
  {"id":8,"info":"fc2eaf4b8572671cd1f0374286f547d2","crt_time":"2013-05-10 15:02:55.664402"}, +
  {"id":9,"info":"23ed8cd9615cf31fffe9e5d429f11447","crt_time":"2013-05-10 15:02:55.66441"},  +
  {"id":10,"info":"04bdd6c8279750fdf00d1da2de4f6fb8","crt_time":"2013-05-10 15:02:55.664414"}]
(1 row)


HSTORE : 
┌──────────────────────────┬────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────────────────────────────┬───────────────────────────────────────────────────────────────────────────────────────┐
│hstore_to_json(hstore)    │json│get hstore as a json value                                                                                    │hstore_to_json('"a key"=>1, b=>t, c=>null, d=>12345, e=>012345, f=>1.234, g=>         │{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g":    │
│                          │    │                                                                                                              │2.345e+4')                                                                            │"2.345e+4"}                                                                            │
├──────────────────────────┼────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│hstore_to_json_loose      │json│get hstore as a json value, but attempting to distinguish numerical and boolean values so they are unquoted in│hstore_to_json_loose('"a key"=>1, b=>t, c=>null, d=>12345, e=>012345, f=>1.234, g=>   │{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g":         │
│(hstore)                  │    │the json                                                                                                      │2.345e+4')                                                                            │2.345e+4}                                                                              │
└──────────────────────────┴────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────────┴───────────────────────────────────────────────────────────────────────────────────────┘
测试 : 

digoal=# create extension hstore;
CREATE EXTENSION
digoal=# select hstore_to_json('"a key"=>1, b=>t, c=>null, d=>12345, e=>012345, f=>1.234, g=>2.345e+4');
                                         hstore_to_json                                          
-------------------------------------------------------------------------------------------------
 {"b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4", "a key": "1"}
(1 row)
digoal=# select hstore_to_json_loose('"a key"=>1, b=>t, c=>null, d=>12345, e=>012345, f=>1.234, g=>2.345e+4');
                                   hstore_to_json_loose                                   
------------------------------------------------------------------------------------------
 {"b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4, "a key": 1}
(1 row)



[参考]
1. PostgreSQL 9.3 JSON function enhanced
http://blog.163.com/digoal@126/blog/static/163877040201321333759270/
2. mongoDB javascript TO PostgreSQL DO language
http://blog.163.com/digoal@126/blog/static/163877040201293082737559/
3. PostgreSQL json_accessors
http://blog.163.com/digoal@126/blog/static/1638770402012112832614918/
4. PostgreSQL JSON json_in and json_validate_cstring performance test
http://blog.163.com/digoal@126/blog/static/16387704020130165241651/
5. Loading Useful Modules in PostgreSQL PLV8 lang
http://blog.163.com/digoal@126/blog/static/16387704020132143340793/
6. PostgreSQL pl/v8 language (use google v8 javascript engine)
http://blog.163.com/digoal@126/blog/static/1638770402013045395446/
7. pg-json extension
http://blog.163.com/digoal@126/blog/static/16387704020120182349667/
8. migrate Data From PostgreSQL to mongoDB using PG's copy AND mongoimport
http://blog.163.com/digoal@126/blog/static/1638770402011076252545/
9. PostgreSQL 9.2devel add JSON type and some functions
http://blog.163.com/digoal@126/blog/static/16387704020121150212379/
10. http://www.postgresql.org/docs/devel/static/functions-json.html
11. http://www.postgresql.org/docs/devel/static/hstore.html
12. http://www.postgresql.org/docs/devel/static/functions-aggregate.html
