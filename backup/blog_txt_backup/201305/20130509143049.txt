PostgreSQL research

PostgreSQL 9.3 Make simple views auto-updatable

2013-05-09 14:30:49   查看原文>>

Support automatically-updatable views.

This patch makes "simple" views automatically updatable, without the need
to create either INSTEAD OF triggers or INSTEAD rules.  "Simple" views
are those classified as updatable according to SQL-92 rules.  The rewriter
transforms INSERT/UPDATE/DELETE commands on such views directly into an
equivalent command on the underlying table, which will generally have
noticeably better performance than is possible with either triggers or
user-written rules.  A view that has INSTEAD OF triggers or INSTEAD rules
continues to operate the same as before.

For the moment, security_barrier views are not considered simple.
Also, we do not support WITH CHECK OPTION.  These features may be
added in future.

Dean Rasheed, reviewed by Amit Kapila


PostgreSQL 9.3 增加了对简单视图的自动可更新功能, 性能超越使用规则或触发器实现的视图更新.
简单视图的定义遵循SQL92标准.
目前不支持security_barrier视图或者with check option.

使用方法截取自 : 
http://www.postgresql.org/docs/devel/static/sql-createview.html#SQL-CREATEVIEW-UPDATABLE-VIEWS

Updatable Views
Simple views are automatically updatable: the system will allow INSERT, UPDATE and DELETE statements to be used on the view in the same way as on a regular table. A view is automatically updatable if it satisfies all of the following conditions:

The view must have exactly one entry in its FROM list, which must be a table or another updatable view.

The view definition must not contain WITH, DISTINCT, GROUP BY, HAVING, LIMIT, or OFFSET clauses at the top level.

The view definition must not contain set operations (UNION, INTERSECT or EXCEPT) at the top level.

All columns in the view's select list must be simple references to columns of the underlying relation. They cannot be expressions, literals or functions. System columns cannot be referenced, either.

No column of the underlying relation can appear more than once in the view's select list.

The view must not have the security_barrier property.

If the view is automatically updatable the system will convert any INSERT, UPDATE or DELETE statement on the view into the corresponding statement on the underlying base relation.

If an automatically updatable view contains a WHERE condition, the condition restricts which rows of the base relation are available to be modified by UPDATE and DELETE statements on the view. However, an UPDATE is allowed to change a row so that it no longer satisfies the WHERE condition, and thus is no longer visible through the view. Similarly, an INSERT command can potentially insert base-relation rows that do not satisfy the WHERE condition and thus are not visible through the view.

A more complex view that does not satisfy all these conditions is read-only by default: the system will not allow an insert, update, or delete on the view. You can get the effect of an updatable view by creating INSTEAD OF triggers on the view, which must convert attempted inserts, etc. on the view into appropriate actions on other tables. For more information see CREATE TRIGGER. Another possibility is to create rules (see CREATE RULE), but in practice triggers are easier to understand and use correctly.

Note that the user performing the insert, update or delete on the view must have the corresponding insert, update or delete privilege on the view. In addition the view's owner must have the relevant privileges on the underlying base relations, but the user performing the update does not need any permissions on the underlying base relations (see Section 38.5).


[测试]

digoal=# create table tbl (id int, info text);
CREATE TABLE
digoal=# insert into tbl select generate_series(1,10),md5(random()::text);
INSERT 0 10
digoal=# create view v_tbl as select * from tbl;
CREATE VIEW
digoal=# \d+ v_tbl
                  View "public.v_tbl"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 id     | integer |           | plain    | 
 info   | text    |           | extended | 
View definition:
 SELECT tbl.id, 
    tbl.info
   FROM tbl;

digoal=# insert into v_tbl values (100,'test'),(200,'test');
INSERT 0 2
digoal=# update v_tbl set id=id+1;
UPDATE 12
digoal=# delete from v_tbl where id<6;
DELETE 4
digoal=# select * from v_tbl;
 id  |               info               
-----+----------------------------------
   6 | c808dc1b1c4ad7dab3418a427c82c82f
   7 | 866d50ea140881c72b810e108975a1ab
   8 | 9b5a0e01420c6309d1c1a7114607c53e
   9 | 7da7e4aa0d5c7629e795ab789dee127c
  10 | 8fde1bb6961d0a6562812f3c33c3c875
  11 | f0b9e5217b43a568b2816746154eaae1
 101 | test
 201 | test
(8 rows)

digoal=# select * from tbl;
 id  |               info               
-----+----------------------------------
   6 | c808dc1b1c4ad7dab3418a427c82c82f
   7 | 866d50ea140881c72b810e108975a1ab
   8 | 9b5a0e01420c6309d1c1a7114607c53e
   9 | 7da7e4aa0d5c7629e795ab789dee127c
  10 | 8fde1bb6961d0a6562812f3c33c3c875
  11 | f0b9e5217b43a568b2816746154eaae1
 101 | test
 201 | test
(8 rows)


详细的测试可参考
src/test/regress/sql/updatable_views.sql

[参考]
1. http://www.postgresql.org/docs/devel/static/sql-createview.html#SQL-CREATEVIEW-UPDATABLE-VIEWS
2. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=a99c42f291421572aef2b0a9360294c7d89b8bc7
