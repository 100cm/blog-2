PostgreSQL research

PostgreSQL 9.3 Allow the statistics collector to operate properly in cases where the system clock goes backwards

2013-05-08 8:38:43   查看原文>>

Allow the statistics collector to operate properly in cases where the system clock goes backwards (Tom Lane)
Previously statistics collection would stop until the time again reached the previously-stored latest time.
Fix stats collector to recover nicely when system clock goes backwards.

Formerly, if the system clock went backwards, the stats collector would
fail to update the stats file any more until the clock reading again
exceeds whatever timestamp was last written into the stats file.  Such
glitches in the clock's behavior are not terribly unlikely on machines
not using NTP.  Such a scenario has been observed to cause regression test
failures in the buildfarm, and it could have bad effects on the behavior
of autovacuum, so it seems prudent to install some defenses.

We could directly detect the clock going backwards by adding
GetCurrentTimestamp calls in the stats collector's main loop, but that
would hurt performance on platforms where GetCurrentTimestamp is expensive.
To minimize the performance hit in normal cases, adopt a more complicated
scheme wherein backends check for clock skew when reading the stats file,
and if they see it, signal the stats collector by sending an extra stats
inquiry message.  The stats collector does an extra GetCurrentTimestamp
only when it receives an inquiry with an apparently out-of-order
timestamp.

To avoid unnecessary GetCurrentTimestamp calls, expand the inquiry messages
to carry the backend's current clock reading as well as its stats cutoff
time.  The latter, being intentionally slightly in-the-past, would trigger
more clock rechecks than we need if it were used for this purpose.

We might want to backpatch this change at some point, but let's let it
shake out in the buildfarm for awhile first.



[测试]
PostgreSQL 9.3 : 

[pg93@db-172-16-3-33 pg_stat_tmp]$ psql
psql (9.3devel)
Type "help" for help.
digoal=# \set VERBOSITY verbose
digoal=# set client_min_messages='log';
digoal=# vacuum test;
VACUUM


-- 当前库统计信息文件状态

cd $PGDATA/pg_stat_tmp/
pg93@db-172-16-3-33-> stat db_12815.stat 
  File: `db_12815.stat'
  Size: 14708           Blocks: 32         IO Block: 4096   regular file
Device: fd00h/64768d    Inode: 918401      Links: 1
Access: (0600/-rw-------)  Uid: (  511/    pg93)   Gid: (  511/    pg93)
Access: 2013-05-08 08:25:08.970408501 +0800
Modify: 2013-05-08 08:25:08.960408501 +0800
Change: 2013-05-08 08:25:08.960408501 +0800


-- 修改系统时间

[root@db-172-16-3-33 ~]# date -s "2012-01-01 00:00:00"
Sun Jan  1 00:00:00 CST 2012


-- 再次vacuum, 有一个日志输出.

digoal=# vacuum test;
LOG:  stats collector's time 2013-05-08 08:25:08.960954+08 is later than backend local time 2012-01-01 00:00:10.655758+08
LOCATION:  backend_read_statsfile, pgstat.c:4307
VACUUM


-- 但是注意时间戳, stat文件也更新了. 所以9.3不依赖系统时间. 即使时间跳跃也可以正常收集和更新统计信息.

pg93@db-172-16-3-33-> cd pg_stat_tmp/
pg93@db-172-16-3-33-> ll
total 24K
-rw------- 1 pg93 pg93 2.2K May  6  2013 db_0.stat
-rw------- 1 pg93 pg93  15K Jan  1 00:01 db_12815.stat
-rw------- 1 pg93 pg93  471 Jan  1 00:01 global.stat
pg93@db-172-16-3-33-> stat db_12815.stat 
  File: `db_12815.stat'
  Size: 14708           Blocks: 32         IO Block: 4096   regular file
Device: fd00h/64768d    Inode: 918397      Links: 1
Access: (0600/-rw-------)  Uid: (  511/    pg93)   Gid: (  511/    pg93)
Access: 2012-01-01 00:00:03.158373485 +0800
Modify: 2012-01-01 00:00:03.158373485 +0800
Change: 2012-01-01 00:00:03.158373485 +0800


最后调回正常时间

/usr/sbin/ntpdate asia.pool.ntp.org && /sbin/hwclock --systohc



PostgreSQL 9.2 : 
-- 修改系统当前时间

[root@db-172-16-3-33 ~]# date -s "2014-01-01 00:00:00"


-- 执行vacuum

pg92@db-172-16-3-33-> psql
psql (9.2.4)
Type "help" for help.
digoal=# set client_min_messages='log';
SET
digoal=# \set VERBOSITY verbose
digoal=# vacuum test;
VACUUM


-- 再次修改系统时间

[root@db-172-16-3-33 ~]# /usr/sbin/ntpdate asia.pool.ntp.org && /sbin/hwclock --systohc
 8 May 08:28:20 ntpdate[10301]: step time server 59.106.180.168 offset 42625559.504544 sec


-- 再次vacuum

digoal=# vacuum test;
VACUUM


-- # 只要系统时间早于pgstat的时间戳, 就不会更新pgstat.stat了.

pg92@db-172-16-3-33-> stat pgstat.stat 
  File: `pgstat.stat'
  Size: 14484           Blocks: 32         IO Block: 4096   regular file
Device: fd00h/64768d    Inode: 131847      Links: 1
Access: (0600/-rw-------)  Uid: (  501/    pg92)   Gid: (  501/    pg92)
Access: 2013-05-08 08:28:39.385911187 +0800
Modify: 2014-01-01 00:00:01.674048473 +0800
Change: 2014-01-01 00:00:01.674048473 +0800


-- 将时间再调到未来

[root@db-172-16-3-33 ~]# date -s "2014-01-01 00:01:00"
Wed Jan  1 00:01:00 CST 2014


-- 可以正常更新stat文件

pg92@db-172-16-3-33-> psql
psql (9.2.4)
Type "help" for help.
digoal=# vacuum test;
VACUUM
digoal=# \q
pg92@db-172-16-3-33-> stat pgstat.stat 
  File: `pgstat.stat'
  Size: 14484           Blocks: 32         IO Block: 4096   regular file
Device: fd00h/64768d    Inode: 131106      Links: 1
Access: (0600/-rw-------)  Uid: (  501/    pg92)   Gid: (  501/    pg92)
Access: 2014-01-01 00:01:04.853129363 +0800
Modify: 2014-01-01 00:01:04.843129363 +0800
Change: 2014-01-01 00:01:04.843129363 +0800



PostgreSQL 9.3以下的版本遇到此问题怎么办呢?
将系统时间修正后, touch stat文件即可.

[root@db-172-16-3-33 ~]# /usr/sbin/ntpdate asia.pool.ntp.org && /sbin/hwclock --systohc
 8 May 08:36:12 ntpdate[10328]: step time server 211.233.84.186 offset -20532610.162256 sec
pg92@db-172-16-3-33-> touch pgstat.stat 
pg92@db-172-16-3-33-> stat pgstat.stat 
  File: `pgstat.stat'
  Size: 14484           Blocks: 32         IO Block: 4096   regular file
Device: fd00h/64768d    Inode: 131106      Links: 1
Access: (0600/-rw-------)  Uid: (  501/    pg92)   Gid: (  501/    pg92)
Access: 2013-05-08 08:36:15.313867694 +0800
Modify: 2013-05-08 08:36:15.313867694 +0800
Change: 2013-05-08 08:36:15.313867694 +0800


如果有遇到有规律的时钟跳跃那就没有好的办法了, 还是升级到9.3吧.
例如我们一起有一台IBM X3950的堆叠, 堆叠时时钟就会跳跃, 拆除堆叠就没有问题了.

[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=9e18eacbdff2ae2abd5ff38eee725e6399e39b41


+           if (file_ts >= TimestampTzPlusMilliseconds(cur_ts, 1000))
+           {
+               char       *filetime;
+               char       *mytime;
+
+               /* Copy because timestamptz_to_str returns a static buffer */
+               filetime = pstrdup(timestamptz_to_str(file_ts));
+               mytime = pstrdup(timestamptz_to_str(cur_ts));
+               elog(LOG, "stats collector's time %s is later than backend local time %s",
+                    filetime, mytime);
+               pfree(filetime);
+               pfree(mytime);
+           }



