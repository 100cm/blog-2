PostgreSQL research

PostgreSQL 9.3 psql backslash commands improve

2013-05-16 8:39:22   查看原文>>

E.1.3.8.1.1. Backslash Commands
Add psql \watch command to repeatedly execute commands (Will Leinweber)
Add psql command \gset to store query results in psql variables (Pavel Stehule)
Add SSL information to psql's \conninfo command (Alastair Turner)
Add "Security" label to psql \df+ output (Jon Erdman)
Allow psql \l to accept a database name pattern (Peter Eisentraut)
In psql, do not allow \connect to use defaults if there is no active connection (Bruce Momjian)
This might be the case if the server had crashed.
Properly reset state if the SQL command executed with psql's "\g file" fails (Tom Lane)
Previously, the output from subsequent SQL commands would unexpectedly continue to go to the same file.



举例 : 
1. PostgreSQL 9.3 psql 新增\watch命令, 可以重复执行query buffer中的指令.
例如当前的buffer如下

postgres=# select query from pg_stat_activity where state<>'idle';
                          query                          
---------------------------------------------------------
 select query from pg_stat_activity where state<>'idle';
(1 row)
-- 查看当前query buffer
postgres=# \p
select query from pg_stat_activity where state<>'idle';


单次执行 : 

postgres=# \g
                          query                          
---------------------------------------------------------
 select query from pg_stat_activity where state<>'idle';
(1 row)


每隔2秒重复执行 : 

postgres=# \watch 2
        Watch every 2s  Thu May 16 08:25:29 2013

                          query                          
---------------------------------------------------------
 select query from pg_stat_activity where state<>'idle';
(1 row)

        Watch every 2s  Thu May 16 08:25:31 2013

                          query                          
---------------------------------------------------------
 select query from pg_stat_activity where state<>'idle';
(1 row)

        Watch every 2s  Thu May 16 08:25:33 2013

                          query                          
---------------------------------------------------------
 select query from pg_stat_activity where state<>'idle';
(1 row)


CTRL+C退出, 同时清除当前的query buffer.

2. \gset 用来将单行查询结果存储到psql变量中.
执行步骤是先\g, 然后\set, 所以会执行一次buffer中的sql.

       \gset [ prefix ]
           Sends the current query input buffer to the server and stores the query's output into psql variables (see
           Variables). The query to be executed must return exactly one row. Each column of the row is stored into a
           separate variable, named the same as the column. For example:

               => SELECT 'hello' AS var1, 10 AS var2
               -> \gset
               => \echo :var1 :var2
               hello 10

           If you specify a prefix, that string is prepended to the query's column names to create the variable names
           to use:

               => SELECT 'hello' AS var1, 10 AS var2
               -> \gset result_
               => \echo :result_var1 :result_var2
               hello 10

           If a column result is NULL, the corresponding variable is unset rather than being set.

           If the query fails or does not return one row, no variables are changed.


例如 : 

postgres=# select clock_timestamp() as time, i from generate_series(1,10) i limit 1;
             time              | i 
-------------------------------+---
 2013-05-16 08:29:57.662355+08 | 1
(1 row)


查看当前buffer:

postgres=# \p
select clock_timestamp() as time, i from generate_series(1,10) i limit 1;


单行结果, 先执行\g, 然后\set, 注意不是直接把前面的执行结果设置到变量中, 而是先执行, 然后设置成功.

postgres=# \gset
postgres=# \echo :time :i
2013-05-16 08:30:00.387705+08 1
postgres=# \gset prefix_
postgres=# \echo :time :i
2013-05-16 08:30:00.387705+08 1
postgres=# \echo :prefix_time :prefix_i
2013-05-16 08:31:09.343173+08 1


多行将报错 : 

postgres=# select clock_timestamp() as time, i from generate_series(1,10) i;
             time              | i  
-------------------------------+----
 2013-05-16 08:29:37.038693+08 |  1
 2013-05-16 08:29:37.038699+08 |  2
 2013-05-16 08:29:37.038702+08 |  3
 2013-05-16 08:29:37.038704+08 |  4
 2013-05-16 08:29:37.038706+08 |  5
 2013-05-16 08:29:37.038708+08 |  6
 2013-05-16 08:29:37.03871+08  |  7
 2013-05-16 08:29:37.038712+08 |  8
 2013-05-16 08:29:37.038715+08 |  9
 2013-05-16 08:29:37.038722+08 | 10
(10 rows)


查看当前buffer

postgres=# \p
select clock_timestamp() as time, i from generate_series(1,10) i;
postgres=# \gset 
more than one row returned for \gset



3. query buffer
\e进行编辑, 注意只保留最后1条完整的sql, 不管是否换行. 

\e
select
clock_timestamp() as time, i from generate_series(1,10) i limit 1
;
select now() as now,
1 as id
;


:x 退出
"/tmp/psql.edit.3040.sql" 6L, 107C written

             time              | i 
-------------------------------+---
 2013-05-16 08:38:36.324295+08 | 1
(1 row)

              now              | id 
-------------------------------+----
 2013-05-16 08:38:36.324422+08 |  1
(1 row)


-- query buffer中保留了第二条sql : 

postgres=# \p
select now() as now,
1 as id
;
postgres=# \g
              now              | id 
-------------------------------+----
 2013-05-16 08:38:41.003493+08 |  1
(1 row)



[参考]
1. man psql
