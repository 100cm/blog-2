PostgreSQL research

ecryptfs Encryption directory in linux

2013-05-24 17:13:44   查看原文>>

前面介绍过使用cryptsetup-luks加密文件系统. 性能下降较为严重.
http://blog.163.com/digoal@126/blog/static/1638770402013423384517/
本文将介绍使用ecryptfs包加密目录, 并且看看性能如何.
使用的环境与上面这篇BLOG一致.
需要的包如下 : 

[root@db-172-16-3-33 ca-certificates]# rpm -qf /usr/bin/ecryptfsd
ecryptfs-utils-75-5.el5


包含如下文件 : 

[root@db-172-16-3-33 ca-certificates]# rpm -ql ecryptfs-utils-75-5.el5
/lib64/security/pam_ecryptfs.so
/sbin/mount.ecryptfs
/sbin/mount.ecryptfs_private
/sbin/umount.ecryptfs
/sbin/umount.ecryptfs_private
/usr/bin/ecryptfs-add-passphrase
/usr/bin/ecryptfs-dot-private
/usr/bin/ecryptfs-generate-tpm-key
/usr/bin/ecryptfs-insert-wrapped-passphrase-into-keyring
/usr/bin/ecryptfs-manager
/usr/bin/ecryptfs-mount-private
/usr/bin/ecryptfs-rewrap-passphrase
/usr/bin/ecryptfs-rewrite-file
/usr/bin/ecryptfs-setup-private
/usr/bin/ecryptfs-setup-swap
/usr/bin/ecryptfs-stat
/usr/bin/ecryptfs-umount-private
/usr/bin/ecryptfs-unwrap-passphrase
/usr/bin/ecryptfs-wrap-passphrase
/usr/bin/ecryptfsd
/usr/lib64/ecryptfs
/usr/lib64/ecryptfs/libecryptfs_key_mod_openssl.so
/usr/lib64/ecryptfs/libecryptfs_key_mod_passphrase.so
/usr/lib64/ecryptfs/libecryptfs_key_mod_tspi.so
/usr/lib64/libecryptfs.so.0
/usr/lib64/libecryptfs.so.0.0.0
/usr/share/doc/ecryptfs-utils-75
/usr/share/doc/ecryptfs-utils-75/AUTHORS
/usr/share/doc/ecryptfs-utils-75/COPYING
/usr/share/doc/ecryptfs-utils-75/NEWS
/usr/share/doc/ecryptfs-utils-75/README
/usr/share/doc/ecryptfs-utils-75/THANKS
/usr/share/doc/ecryptfs-utils-75/ecryptfs-faq.html
/usr/share/doc/ecryptfs-utils-75/ecryptfs-pam-doc.txt
/usr/share/ecryptfs-utils
/usr/share/ecryptfs-utils/ecryptfs-mount-private.desktop
/usr/share/ecryptfs-utils/ecryptfs-mount-private.txt
/usr/share/ecryptfs-utils/ecryptfs-setup-private.desktop
/usr/share/ecryptfs-utils/ecryptfs-utils.png
/usr/share/man/man1/ecryptfs-add-passphrase.1.gz
/usr/share/man/man1/ecryptfs-generate-tpm-key.1.gz
/usr/share/man/man1/ecryptfs-insert-wrapped-passphrase-into-keyring.1.gz
/usr/share/man/man1/ecryptfs-mount-private.1.gz
/usr/share/man/man1/ecryptfs-rewrap-passphrase.1.gz
/usr/share/man/man1/ecryptfs-rewrite-file.1.gz
/usr/share/man/man1/ecryptfs-setup-private.1.gz
/usr/share/man/man1/ecryptfs-umount-private.1.gz
/usr/share/man/man1/ecryptfs-unwrap-passphrase.1.gz
/usr/share/man/man1/ecryptfs-wrap-passphrase.1.gz
/usr/share/man/man1/mount.ecryptfs_private.1.gz
/usr/share/man/man1/umount.ecryptfs_private.1.gz
/usr/share/man/man7/ecryptfs.7.gz
/usr/share/man/man8/ecryptfs-manager.8.gz
/usr/share/man/man8/ecryptfsd.8.gz
/usr/share/man/man8/mount.ecryptfs.8.gz
/usr/share/man/man8/pam_ecryptfs.8.gz



[使用举例]
1. 查看要加密的目录信息.

[root@db-172-16-3-33 ~]# df -h
/dev/mapper/vgdata01-lv06
                       98G  188M   93G   1% /mnt
[root@db-172-16-3-33 ~]# mount
/dev/mapper/vgdata01-lv06 on /mnt type ext4 (rw)


新建将要加密的目录

[root@db-172-16-3-33 ~]# cd /mnt
[root@db-172-16-3-33 mnt]# mkdir enc_dir


使用ecryptfs加载enc_dir目录

[root@db-172-16-3-33 mnt]# mount -t ecryptfs /mnt/enc_dir /mnt/enc_dir
Select key type to use for newly created files: 
 1) openssl
 2) passphrase
 3) tspi
选择2
Selection: 2
输入passphrase, 这里为 digoal
Passphrase: 
Select cipher: 
 1) aes: blocksize = 16; min keysize = 16; max keysize = 32 (loaded)
 2) blowfish: blocksize = 8; min keysize = 4; max keysize = 56 (loaded)
 3) des3_ede: blocksize = 8; min keysize = 24; max keysize = 24 (not loaded)
 4) twofish: blocksize = 16; min keysize = 16; max keysize = 32 (not loaded)
 5) cast6: blocksize = 16; min keysize = 16; max keysize = 32 (not loaded)
 6) cast5: blocksize = 8; min keysize = 5; max keysize = 16 (not loaded)
选择blowfish加密暗语
Selection [aes]: 2
Select key bytes: 
 1) 16
 2) 32
选择key size, 32
Selection [16]: 32
不允许明文直通 : 
Enable plaintext passthrough (y/n) [n]: 
Attempting to mount with the following options:
  ecryptfs_unlink_sigs
  ecryptfs_key_bytes=32
  ecryptfs_cipher=blowfish
  ecryptfs_sig=3f929d58007626f7
WARNING: Based on the contents of [/root/.ecryptfs/sig-cache.txt],
it looks like you have never mounted with this key 
before. This could mean that you have typed your 
passphrase wrong.
这个警告是因为我前面测试过, 以及加载过一次并且密码与本次不一致. 
这里忽略掉.
Would you like to proceed with the mount (yes/no)? : yes
Would you like to append sig [3f929d58007626f7] to
[/root/.ecryptfs/sig-cache.txt] 
#输入yes 忽略告警.
in order to avoid this warning in the future (yes/no)? : yes
Successfully appended new sig to user sig cache file
Mounted eCryptfs


查看加载信息

[root@db-172-16-3-33 mnt]# mount
/dev/mapper/vgdata01-lv06 on /mnt type ext4 (rw)
/mnt/enc_dir on /mnt/enc_dir type ecryptfs (rw,ecryptfs_sig=3f929d58007626f7,ecryptfs_cipher=blowfish,ecryptfs_key_bytes=32,ecryptfs_unlink_sigs)



拷贝一个文本文件到加密目录中

[root@db-172-16-3-33 mnt]# cd /mnt/enc_dir/
[root@db-172-16-3-33 enc_dir]# ll
total 0
[root@db-172-16-3-33 enc_dir]# cp /var/log/messages ./


查看加密文件内容, 正常

[root@db-172-16-3-33 enc_dir]# head -n 1 messages 
May 19 04:02:02 db-172-16-3-33 syslogd 1.4.1: restart.



测试IO能力, 加密后不支持open_sync函数.

[root@db-172-16-3-33 enc_dir]# mkdir pg92
[root@db-172-16-3-33 enc_dir]# chown pg92:pg92 pg92
[root@db-172-16-3-33 enc_dir]# su - pg92
pg92@db-172-16-3-33-> cd /mnt/enc_dir/pg92/
pg92@db-172-16-3-33-> pg_test_fsync 
2 seconds per test
O_DIRECT supported on this platform for open_datasync and open_sync.

Compare file sync methods using one 16kB write:
(in wal_sync_method preference order, except fdatasync
is Linux's default)
        open_datasync                                 n/a
        fdatasync                        3986.130 ops/sec
        fsync                            2397.359 ops/sec
        fsync_writethrough                            n/a
        open_sync                                    n/a*
* This file system and its mount options do not support direct
I/O, e.g. ext4 in journaled mode.

Compare file sync methods using two 16kB writes:
(in wal_sync_method preference order, except fdatasync
is Linux's default)
        open_datasync                                 n/a
        fdatasync                        2001.979 ops/sec
        fsync                            1225.326 ops/sec
        fsync_writethrough                            n/a
        open_sync                                    n/a*
* This file system and its mount options do not support direct
I/O, e.g. ext4 in journaled mode.

Compare open_sync with different write sizes:
(This is designed to compare the cost of writing 16kB
in different write open_sync sizes.)
         1 * 16kB open_sync write                    n/a*
         2 *  8kB open_sync writes                   n/a*
         4 *  4kB open_sync writes                   n/a*
         8 *  2kB open_sync writes                   n/a*
        16 *  1kB open_sync writes                   n/a*

Test if fsync on non-write file descriptor is honored:
(If the times are similar, fsync() can sync data written
on a different descriptor.)
        write, fsync, close              2360.739 ops/sec
        write, close, fsync              2391.995 ops/sec

Non-Sync'ed 16kB writes:
        write                            3958.411 ops/sec



卸载加密目录 : 

[root@db-172-16-3-33 enc_dir]# cd
[root@db-172-16-3-33 ~]# umount /mnt/enc_dir


卸载后文件无法查看 : 

[root@db-172-16-3-33 ~]# cd /mnt/enc_dir/
[root@db-172-16-3-33 enc_dir]# ll
total 380
-rw------- 1 root root 385024 May 24 16:44 messages
drwxr-xr-x 2 pg92 pg92   4096 May 24 16:45 pg92
[root@db-172-16-3-33 enc_dir]# less messages 
"messages" may be a binary file.  See it anyway? 


卸载后的io能力测试 : 

[root@db-172-16-3-33 enc_dir]# su - pg92
pg92@db-172-16-3-33-> cd /mnt/enc_dir/pg92/
pg92@db-172-16-3-33-> pg_test_fsync 
2 seconds per test
O_DIRECT supported on this platform for open_datasync and open_sync.

Compare file sync methods using one 16kB write:
(in wal_sync_method preference order, except fdatasync
is Linux's default)
        open_datasync                                 n/a
        fdatasync                        3082.643 ops/sec
        fsync                             114.960 ops/sec
        fsync_writethrough                            n/a
        open_sync                        3089.237 ops/sec

Compare file sync methods using two 16kB writes:
(in wal_sync_method preference order, except fdatasync
is Linux's default)
        open_datasync                                 n/a
        fdatasync                        2154.410 ops/sec
        fsync                             115.433 ops/sec
        fsync_writethrough                            n/a
        open_sync                          81.961 ops/sec

Compare open_sync with different write sizes:
(This is designed to compare the cost of writing 16kB
in different write open_sync sizes.)
         1 * 16kB open_sync write        3122.809 ops/sec
         2 *  8kB open_sync writes         83.105 ops/sec
         4 *  4kB open_sync writes         75.897 ops/sec
         8 *  2kB open_sync writes         75.738 ops/sec
        16 *  1kB open_sync writes         66.626 ops/sec

Test if fsync on non-write file descriptor is honored:
(If the times are similar, fsync() can sync data written
on a different descriptor.)
        write, fsync, close               128.490 ops/sec
        write, close, fsync               136.747 ops/sec

Non-Sync'ed 16kB writes:
        write                           152942.311 ops/sec


对比加密前后的数据, 加密后sync反而比加密前的iops要高, 但是加密后的non-sync却低得一塌糊涂, 几乎和sync相当.
猜测加密后sync做了cache处理, 并没有直接到达硬盘, 另外就是加密后确实性能差了很多, 因为non-sync的数字基本说明了加密后的iops瓶颈是cpu处理加密了.

[自动加载配置 : ]
1. 创建密码文件, 修改权限

[root@db-172-16-3-33 ~]# vi /root/.pwd1 
passphrase_passwd=digoal
[root@db-172-16-3-33 ~]# chmod 400 /root/.pwd1 


2. 配置profile

[root@db-172-16-3-33 ~]# vi ~/.ecryptfsrc
key=passphrase:passphrase_passwd_file=/root/.pwd1
ecryptfs_sig=3f929d58007626f7
ecryptfs_cipher=blowfish
ecryptfs_key_bytes=32
ecryptfs_passthrough=n
ecryptfs_enable_filename_crypto=n


其中这些配置取自创建ecryptfs时配置或生成的值. sig可以从~/.ecryptfs/sig-cache.txt中取到或者在创建时最后也会输出这个值.
3. 配置fstab

[root@db-172-16-3-33 ~]# vi /etc/fstab
/mnt/enc_dir /mnt/enc_dir ecryptfs defaults,noatime,nodiratime 0 0


4. 测试mount

[root@db-172-16-3-33 ~]# mount -a
Attempting to mount with the following options:
  ecryptfs_unlink_sigs
  ecryptfs_key_bytes=32
  ecryptfs_cipher=blowfish
  ecryptfs_sig=3f929d58007626f7
Mounted eCryptfs
[root@db-172-16-3-33 ~]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/cciss/c0d0p1      29G   16G   12G  56% /
tmpfs                 6.9G     0  6.9G   0% /dev/shm
/dev/mapper/vgdata01-lv03
                      135G   25G  104G  20% /pgdata/digoal/1921/data03
/dev/mapper/vgdata01-lv04
                      135G   69G   59G  54% /pgdata/digoal/1921/data04
/dev/mapper/vgdata01-lv05
                      135G   85G   44G  66% /pgdata/digoal/1921/data05
/dev/mapper/vgdata01-lv06
                       98G  189M   93G   1% /mnt
/mnt/enc_dir           98G  189M   93G   1% /mnt/enc_dir


加载成功.
注意保护好密码文件. 例如可以放在U盘中, 加载后把U盘拔掉.

[参考]
1. /usr/share/doc/ecryptfs-utils/ecryptfs-faq.html
2. man ecryptfs

