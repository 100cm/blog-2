PostgreSQL research

PostgreSQL partition table global constraint

2013-05-13 17:47:07   查看原文>>

PostgreSQL 中分表一般可以通过继承和触发器或者rule来实现. 
没有接触过的朋友可以先阅读以下文章 : 
PostgreSQL general public partition table trigger
http://blog.163.com/digoal@126/blog/static/16387704020128772037884/
execute plan difference between Oracle and PostgreSQL's partition table
http://blog.163.com/digoal@126/blog/static/163877040201212432441676/
PostgreSQL Partition Table Example
http://blog.163.com/digoal@126/blog/static/1638770402012325111528424/
PostgreSQL partition table or inherits table predict count and gap and privilege monitor
http://blog.163.com/digoal@126/blog/static/16387704020130433036377/
PostgreSQL partition table name convert to data type
http://blog.163.com/digoal@126/blog/static/16387704020130525628988/
PostgreSQL partition table or inherits table predict count and gap and privilege monitor
http://blog.163.com/digoal@126/blog/static/16387704020130433036377/
PostgreSQL partition table's arithmetic tuning example
http://blog.163.com/digoal@126/blog/static/1638770402011210114036419/
注意PostgreSQL 分区表的约束有一个问题, 是子表层面的约束, 而非全局约束.
例如唯一或主键的例子. 如果分区的字段不是约束字段, 那么这个约束就无法做到全局唯一.
例如按主键分区的例子 : 

create table t(id int primary key, info text, crt_time timestamp);
create table t1(like t including all) inherits(t);
create table t2(like t including all) inherits(t);


假设t为主表, t1, t2为子表.
如果要id全局唯一, 通常的做法是要对t1, t2都加约束, 例如hash取模, 或者t1和t2使用不同的值范围区间.
但是如果你使用的是crt_time这个字段作为分区字段的话, 抱歉, 你没有好的办法去约束t1.id和t2.id全局唯一. 
所以本文要解决的就是这个问题.
方法如下 : 
增加一个全局约束表, 同时给所有的表增加规则. 

create table test(id int, info text);
create table test_1 (like test including all) inherits(test);
create table test_2 (like test including all) inherits(test);
create table test_3 (like test including all) inherits(test);
create table test_4 (like test including all) inherits(test);
create table test_5 (like test including all) inherits(test);
create table test_6 (like test including all) inherits(test);
create table test_7 (like test including all) inherits(test);
create table test_8 (like test including all) inherits(test);
create table test_uk(id int primary key);

create or replace rule r_insert as on insert to test do also insert into test_uk(id) values (NEW.id);
create or replace rule r_insert as on insert to test_1 do also insert into test_uk(id) values (NEW.id);
create or replace rule r_insert as on insert to test_2 do also insert into test_uk(id) values (NEW.id);
create or replace rule r_insert as on insert to test_3 do also insert into test_uk(id) values (NEW.id);
create or replace rule r_insert as on insert to test_4 do also insert into test_uk(id) values (NEW.id);
create or replace rule r_insert as on insert to test_5 do also insert into test_uk(id) values (NEW.id);
create or replace rule r_insert as on insert to test_6 do also insert into test_uk(id) values (NEW.id);
create or replace rule r_insert as on insert to test_7 do also insert into test_uk(id) values (NEW.id);
create or replace rule r_insert as on insert to test_8 do also insert into test_uk(id) values (NEW.id);


注意到test, test_1到test_8都没有主键了, 因为确实不需要主键了, 他们的约束在test_uk全局完成.
如果对test, test_1到test_8的id字段有where条件查询需求, 那么可以加上索引即可. 不需要加pk.

对于更新和删除建立相应的rule即可.

create or replace rule r_update as on update to test do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;
create or replace rule r_update as on update to test_1 do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;
create or replace rule r_update as on update to test_2 do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;
create or replace rule r_update as on update to test_3 do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;
create or replace rule r_update as on update to test_4 do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;
create or replace rule r_update as on update to test_5 do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;
create or replace rule r_update as on update to test_6 do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;
create or replace rule r_update as on update to test_7 do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;
create or replace rule r_update as on update to test_8 do also update test_uk set id=NEW.id where id=OLD.id and NEW.id<>OLD.id;

create or replace rule r_delete as on delete to test do also delete from test_uk where id=OLD.id;
create or replace rule r_delete as on delete to test_1 do also delete from test_uk where id=OLD.id;
create or replace rule r_delete as on delete to test_2 do also delete from test_uk where id=OLD.id;
create or replace rule r_delete as on delete to test_3 do also delete from test_uk where id=OLD.id;
create or replace rule r_delete as on delete to test_4 do also delete from test_uk where id=OLD.id;
create or replace rule r_delete as on delete to test_5 do also delete from test_uk where id=OLD.id;
create or replace rule r_delete as on delete to test_6 do also delete from test_uk where id=OLD.id;
create or replace rule r_delete as on delete to test_7 do also delete from test_uk where id=OLD.id;
create or replace rule r_delete as on delete to test_8 do also delete from test_uk where id=OLD.id;



[压力测试]

将
create table test(id int, info text);
该为
create table test(id serial4, info text);


pgbench脚本
cat ins.sql

insert into test(info) values ('test');
insert into test_1(info) values ('test');
insert into test_2(info) values ('test');
insert into test_3(info) values ('test');
insert into test_4(info) values ('test');
insert into test_5(info) values ('test');
insert into test_6(info) values ('test');
insert into test_7(info) values ('test');
insert into test_8(info) values ('test');


测试结果 : 

pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./ins.sql -T 60 -c 16 -j 4
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 190070
tps = 3166.301318 (including connections establishing)
tps = 3167.459441 (excluding connections establishing)
statement latencies in milliseconds:
        0.620477        insert into test(info) values ('test');
        0.569200        insert into test_1(info) values ('test');
        0.547128        insert into test_2(info) values ('test');
        0.555751        insert into test_3(info) values ('test');
        0.565593        insert into test_4(info) values ('test');
        0.534713        insert into test_5(info) values ('test');
        0.544489        insert into test_6(info) values ('test');
        0.555604        insert into test_7(info) values ('test');
        0.548428        insert into test_8(info) values ('test');


相当于28503 insert tuples/s.
调整sequence cache后重新测试 : 

postgres=# alter sequence test_id_seq cache 100;
ALTER SEQUENCE
pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./ins.sql -T 60 -c 16 -j 4 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 247980
tps = 4131.280217 (including connections establishing)
tps = 4132.752414 (excluding connections establishing)
statement latencies in milliseconds:
        0.429888        insert into test(info) values ('test');
        0.428328        insert into test_1(info) values ('test');
        0.416872        insert into test_2(info) values ('test');
        0.426108        insert into test_3(info) values ('test');
        0.435344        insert into test_4(info) values ('test');
        0.426916        insert into test_5(info) values ('test');
        0.429839        insert into test_6(info) values ('test');
        0.436503        insert into test_7(info) values ('test');
        0.432641        insert into test_8(info) values ('test');


性能相当于37188 insert tuples/s.
数据约束准确.

postgres=# select count(distinct id) from test;
  count  
---------
 6420357
(1 row)
postgres=# select count(distinct id) from test_uk;
  count  
---------
 6420357
(1 row)


单子表测试性能 : 

pg93@db-172-16-3-33-> vi ins.sql
insert into test_1(info) values ('test');
pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./ins.sql -T 60 -c 16 -j 4 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 2221629
tps = 37014.441092 (including connections establishing)
tps = 37028.853944 (excluding connections establishing)
statement latencies in milliseconds:
        0.430538        insert into test_1(info) values ('test');


对比单表(无rule情况)测试结果 : 

create table t(id serial4 primary key, info text);
cat ins.sql


insert into t(info) values ('test');


测试结果

pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./ins.sql -T 60 -c 16 -j 4 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 2307961
tps = 38441.207992 (including connections establishing)
tps = 38453.498771 (excluding connections establishing)
statement latencies in milliseconds:
        0.414512        insert into t(info) values ('test');


调整sequence cache后重新测试 : 

postgres=# alter sequence t_id_seq cache 100;
ALTER SEQUENCE
pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./ins.sql -T 60 -c 16 -j 4 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 2477591
tps = 41288.409705 (including connections establishing)
tps = 41304.253390 (excluding connections establishing)
statement latencies in milliseconds:
        0.385917        insert into t(info) values ('test');


使用规则后性能略有下降, 约10%.

【本例触发器/rules性能比较】

postgres=# drop table test cascade;
NOTICE:  drop cascades to 8 other objects
DETAIL:  drop cascades to table test_1
drop cascades to table test_2
drop cascades to table test_3
drop cascades to table test_4
drop cascades to table test_5
drop cascades to table test_6
drop cascades to table test_7
drop cascades to table test_8
dDROP TABLE
postgres=# drop table test_uk ;
DROP TABLE

postgres=# create or replace function tg_delete() returns trigger as $$
declare
begin
  delete from test_uk where id = OLD.id;            
  return OLD;
end;
$$ language plpgsql strict;
CREATE FUNCTION

postgres=# create or replace function tg_update() returns trigger as $$
declare
begin
  update test_uk set id=NEW.id where NEW.id<>OLD.id and id=OLD.id;
  return NEW;
end;
$$ language plpgsql strict;
CREATE FUNCTION

postgres=# create or replace function tg_insert() returns trigger as $$
declare
begin
  insert into test_uk values(NEW.id);
  return NEW;
end;
$$ language plpgsql strict;
CREATE FUNCTION

create table test(id serial4, info text);
alter sequence test_id_seq cache 100;
create table test_1 (like test including all) inherits(test);
create table test_2 (like test including all) inherits(test);
create table test_3 (like test including all) inherits(test);
create table test_4 (like test including all) inherits(test);
create table test_5 (like test including all) inherits(test);
create table test_6 (like test including all) inherits(test);
create table test_7 (like test including all) inherits(test);
create table test_8 (like test including all) inherits(test);
create table test_uk(id int primary key);


create trigger tg1 before insert on test for each row execute procedure tg_insert();
create trigger tg2 before update on test for each row execute procedure tg_update();
create trigger tg3 before delete on test for each row execute procedure tg_delete();
create trigger tg1 before insert on test_1 for each row execute procedure tg_insert();
create trigger tg2 before update on test_1 for each row execute procedure tg_update();
create trigger tg3 before delete on test_1 for each row execute procedure tg_delete();
create trigger tg1 before insert on test_2 for each row execute procedure tg_insert();
create trigger tg2 before update on test_2 for each row execute procedure tg_update();
create trigger tg3 before delete on test_2 for each row execute procedure tg_delete();
create trigger tg1 before insert on test_3 for each row execute procedure tg_insert();
create trigger tg2 before update on test_3 for each row execute procedure tg_update();
create trigger tg3 before delete on test_3 for each row execute procedure tg_delete();
create trigger tg1 before insert on test_4 for each row execute procedure tg_insert();
create trigger tg2 before update on test_4 for each row execute procedure tg_update();
create trigger tg3 before delete on test_4 for each row execute procedure tg_delete();
create trigger tg1 before insert on test_5 for each row execute procedure tg_insert();
create trigger tg2 before update on test_5 for each row execute procedure tg_update();
create trigger tg3 before delete on test_5 for each row execute procedure tg_delete();
create trigger tg1 before insert on test_6 for each row execute procedure tg_insert();
create trigger tg2 before update on test_6 for each row execute procedure tg_update();
create trigger tg3 before delete on test_6 for each row execute procedure tg_delete();
create trigger tg1 before insert on test_7 for each row execute procedure tg_insert();
create trigger tg2 before update on test_7 for each row execute procedure tg_update();
create trigger tg3 before delete on test_7 for each row execute procedure tg_delete();
create trigger tg1 before insert on test_8 for each row execute procedure tg_insert();
create trigger tg2 before update on test_8 for each row execute procedure tg_update();
create trigger tg3 before delete on test_8 for each row execute procedure tg_delete();


单子表测试结果 : 

pg93@db-172-16-3-33-> cat ins.sql
insert into test_1(info) values ('test');
pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./ins.sql -T 60 -c 16 -j 4 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 2369510
tps = 39407.697898 (including connections establishing)
tps = 39421.790995 (excluding connections establishing)
statement latencies in milliseconds:
        0.404299        insert into test_1(info) values ('test');


数据校验 : 

postgres=# select count(distinct id) from test;
  count  
---------
 4415894
(1 row)
postgres=# select count(distinct id) from test_uk;
  count  
---------
 4415894
(1 row)



多表测试结果 : 
cat ins.sql

insert into test(info) values ('test');
insert into test_1(info) values ('test');
insert into test_2(info) values ('test');
insert into test_3(info) values ('test');
insert into test_4(info) values ('test');
insert into test_5(info) values ('test');
insert into test_6(info) values ('test');
insert into test_7(info) values ('test');
insert into test_8(info) values ('test');

pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./ins.sql -T 60 -c 16 -j 4 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 60 s
number of transactions actually processed: 227376
tps = 3781.428899 (including connections establishing)
tps = 3782.780356 (excluding connections establishing)
statement latencies in milliseconds:
        0.479270        insert into test(info) values ('test');
        0.443284        insert into test_1(info) values ('test');
        0.477760        insert into test_2(info) values ('test');
        0.472192        insert into test_3(info) values ('test');
        0.457428        insert into test_4(info) values ('test');
        0.463708        insert into test_5(info) values ('test');
        0.462552        insert into test_6(info) values ('test');
        0.489863        insert into test_7(info) values ('test');
        0.474460        insert into test_8(info) values ('test');


【其他】
1. 对于全局唯一表, 如果数据量太大依旧可以分区, 例如按hash取模分区.
这不影响全局唯一的约束, 因为分区键就是约束键.

评论

yyxh520 - 2015-01-13 16:19:06

CREATE TABLE student (student_id bigserial, name varchar(32), score smallint) ;
CREATE TABLE student_qualified (CHECK (score >= 60 )) INHERITS (student) ;
CREATE TABLE student_nqualified (CHECK (score < 60)) INHERITS (student) ;

CREATE OR REPLACE RULE insert_student_qualified
AS ON INSERT TO student
       WHERE score >= 60
       DO INSTEAD
       INSERT INTO student_qualified VALUES(NEW.*);
 
CREATE OR REPLACE RULE insert_student_nqualified
AS ON INSERT TO student
       WHERE score < 60
       DO INSTEAD
