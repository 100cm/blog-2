PostgreSQL research

PostgreSQL 9.3 Improve pl/pgsql to support composite-type expressions in RETURN.

2013-05-10 15:31:18   查看原文>>

Improve pl/pgsql to support composite-type expressions in RETURN.

For some reason lost in the mists of prehistory, RETURN was only coded to
allow a simple reference to a composite variable when the function's return
type is composite.  Allow an expression instead, while preserving the
efficiency of the original code path in the case where the expression is
indeed just a composite variable's name.  Likewise for RETURN NEXT.

As is true in various other places, the supplied expression must yield
exactly the number and data types of the required columns.  There was some
discussion of relaxing that for pl/pgsql, but no consensus yet, so this
patch doesn't address that.
Asif Rehman, reviewed by Pavel Stehule


PostgreSQL 9.3 允许record或复合类型的返回值为表达式, 而9.2以及以前的版本如果返回类型为record或复合类型, 那么返回值必须是变量名.

[测试]
PostgreSQL 9.2 : 

digoal=# create type footype as (x int, y varchar);
CREATE TYPE
-- 9.2不支持返回表达式复合类型.
digoal=# create or replace function foo() returns footype as $$
begin
  return (1, 'hello'::varchar);
end;
$$ language plpgsql;
ERROR:  42804: RETURN must specify a record or row variable in function returning row
LINE 3:   return (1, 'hello'::varchar);
                 ^
LOCATION:  make_return_stmt, gram.y:2899

digoal=# create or replace function foo() returns footype as $$
begin
  return (1, 'hello');
end;
$$ language plpgsql;
ERROR:  42804: RETURN must specify a record or row variable in function returning row
LINE 3:   return (1, 'hello');
                 ^
LOCATION:  make_return_stmt, gram.y:2899
-- 即使显性转义也会报错, 必须返回复合变量
digoal=# create or replace function foo() returns footype as $$
begin
  return (1, 'hello')::footype;
end;
$$ language plpgsql;
ERROR:  42804: RETURN must specify a record or row variable in function returning row
LINE 3:   return (1, 'hello')::footype;
                 ^
LOCATION:  make_return_stmt, gram.y:2899
-- record也如此
digoal=# create or replace function foorec() returns record as $$
begin
  return (1, 'hello');
end;
$$ language plpgsql;
ERROR:  42804: RETURN must specify a record or row variable in function returning row
LINE 3:   return (1, 'hello');
                 ^
LOCATION:  make_return_stmt, gram.y:2899

digoal=# create or replace function foo() returns setof footype as $$
begin
  for i in 1..3
  loop
    return next (1, 'hello'::varchar);
  end loop;
  return next null::footype;
  return next (2, 'goodbye')::footype;
end;
$$ language plpgsql;
ERROR:  42804: RETURN NEXT must specify a record or row variable in function returning row
LINE 5:     return next (1, 'hello'::varchar);
                        ^
LOCATION:  make_return_next_stmt, gram.y:2963



PostgreSQL 9.3 : 

digoal=# create type footype as (x int, y varchar);
CREATE TYPE
digoal=# create or replace function foo() returns footype as $$
digoal$# begin
digoal$#   return (1, 'hello'::varchar);
digoal$# end;
digoal$# $$ language plpgsql;
CREATE FUNCTION
digoal=# create or replace function foo() returns footype as $$
digoal$# begin
digoal$#   return (1, 'hello');
digoal$# end;
digoal$# $$ language plpgsql;
CREATE FUNCTION
digoal=# create or replace function foo() returns footype as $$
digoal$# begin
digoal$#   return (1, 'hello')::footype;
digoal$# end;
digoal$# $$ language plpgsql;
CREATE FUNCTION
digoal=# create or replace function foorec() returns record as $$
digoal$# begin
digoal$#   return (1, 'hello');
digoal$# end;
digoal$# $$ language plpgsql;
CREATE FUNCTION
digoal=# create or replace function foo() returns setof footype as $$
digoal$# begin
digoal$#   for i in 1..3
digoal$#   loop
digoal$#     return next (1, 'hello'::varchar);
digoal$#   end loop;
digoal$#   return next null::footype;
digoal$#   return next (2, 'goodbye')::footype;
digoal$# end;
digoal$# $$ language plpgsql;
ERROR:  cannot change return type of existing function
HINT:  Use DROP FUNCTION foo() first.
digoal=# drop function foo();
DROP FUNCTION
digoal=# create or replace function foo() returns setof footype as $$
begin
  for i in 1..3
  loop
    return next (1, 'hello'::varchar);
  end loop;
  return next null::footype;
  return next (2, 'goodbye')::footype;
end;
$$ language plpgsql;
CREATE FUNCTION
digoal=# create or replace function foo() returns footype as $$
digoal$# begin
digoal$#   return 1 + 1;
digoal$# end;
digoal$# $$ language plpgsql;
ERROR:  cannot change return type of existing function
HINT:  Use DROP FUNCTION foo() first.
digoal=# drop function foo();
DROP FUNCTION



[参考]
1. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=31a891857a128828d47d93c63e041f3b69cbab70
