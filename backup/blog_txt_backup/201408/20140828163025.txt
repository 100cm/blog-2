PostgreSQL research

PostgreSQL bug? function's variable type cached within session.

2014-08-28 16:30:25   查看原文>>

我在使用触发器来跟踪表时, 发现一个问题, 也许是一个BUG. 
在函数中使用表类型来作为变量类型的话, 如果这个表的定义发生了改变, 函数内的变量不能及时的反映这个变化, 必须要退出会话重新进入才可以反映这个变化.
当然这个问题很好解决, 不要在函数中使用表的变量即可.
(或者你可以选择hstore代替表类型)
参考 : 
http://blog.163.com/digoal@126/blog/static/163877040201252575529358/

可能是在ALTER TABLE后未及时释放变量造成.
可参考
pl/plpgsql/src/pl_funcs.c

/**********************************************************************
 * Release memory when a PL/pgSQL function is no longer needed
 *
 * The code for recursing through the function tree is really only
 * needed to locate PLpgSQL_expr nodes, which may contain references
 * to saved SPI Plans that must be freed.  The function tree itself,
 * along with subsidiary data, is freed in one swoop by freeing the
 * function's permanent memory context.
 **********************************************************************/
static void free_stmt(PLpgSQL_stmt *stmt);
static void free_block(PLpgSQL_stmt_block *block);
static void free_assign(PLpgSQL_stmt_assign *stmt);
static void free_if(PLpgSQL_stmt_if *stmt);
static void free_case(PLpgSQL_stmt_case *stmt);
static void free_loop(PLpgSQL_stmt_loop *stmt);
static void free_while(PLpgSQL_stmt_while *stmt);
static void free_fori(PLpgSQL_stmt_fori *stmt);
static void free_fors(PLpgSQL_stmt_fors *stmt);
static void free_forc(PLpgSQL_stmt_forc *stmt);
static void free_foreach_a(PLpgSQL_stmt_foreach_a *stmt);
static void free_exit(PLpgSQL_stmt_exit *stmt);
static void free_return(PLpgSQL_stmt_return *stmt);
static void free_return_next(PLpgSQL_stmt_return_next *stmt);
static void free_return_query(PLpgSQL_stmt_return_query *stmt);
static void free_raise(PLpgSQL_stmt_raise *stmt);
static void free_execsql(PLpgSQL_stmt_execsql *stmt);
static void free_dynexecute(PLpgSQL_stmt_dynexecute *stmt);
static void free_dynfors(PLpgSQL_stmt_dynfors *stmt);
static void free_getdiag(PLpgSQL_stmt_getdiag *stmt);
static void free_open(PLpgSQL_stmt_open *stmt);
static void free_fetch(PLpgSQL_stmt_fetch *stmt);
static void free_close(PLpgSQL_stmt_close *stmt);
static void free_perform(PLpgSQL_stmt_perform *stmt);
static void free_expr(PLpgSQL_expr *expr);

void
plpgsql_free_function_memory(PLpgSQL_function *func)
{
        int                     i;

        /* Better not call this on an in-use function */
        Assert(func->use_count == 0);

        /* Release plans associated with variable declarations */
        for (i = 0; i < func->ndatums; i++)
        {
                PLpgSQL_datum *d = func->datums[i];

                switch (d->dtype)
                {
                        case PLPGSQL_DTYPE_VAR:
                                {
                                        PLpgSQL_var *var = (PLpgSQL_var *) d;

                                        free_expr(var->default_val);
                                        free_expr(var->cursor_explicit_expr);
                                }
                                break;
                        case PLPGSQL_DTYPE_ROW:
                                break;
                        case PLPGSQL_DTYPE_REC:
                                break;
                        case PLPGSQL_DTYPE_RECFIELD:
                                break;
                        case PLPGSQL_DTYPE_ARRAYELEM:
                                free_expr(((PLpgSQL_arrayelem *) d)->subscript);
                                break;
                        default:
                                elog(ERROR, "unrecognized data type: %d", d->dtype);
                }
        }
        func->ndatums = 0;

        /* Release plans in statement tree */
        if (func->action)
                free_block(func->action);
        func->action = NULL;

        /*
         * And finally, release all memory except the PLpgSQL_function struct
         * itself (which has to be kept around because there may be multiple
         * fn_extra pointers to it).
         */
        if (func->fn_cxt)
                MemoryContextDelete(func->fn_cxt);
        func->fn_cxt = NULL;
}



例子如下 : 
PostgreSQL 9.3.4
创建一个测试表 : 

create table public.t (
  c1 int primary key,
  c2 text,
  crt_time timestamp
);


创建一个跟踪表, 使用表的类型来存储old_rec和new_rec.

CREATE TABLE public.undo_t (
  id serial8 primary key,
  xid int8,
  relid oid,
  table_schema text,
  table_name text,
  when_tg text,
  level text,
  op text,
  encoding name,
  old_rec public.t,  
  new_rec public.t,  
  crt_time timestamp without time zone DEFAULT now(),
  username text,
  client_addr inet,
  client_port int
);


创建一个触发器函数, 用于跟踪insert, update, delete, truncate.
注意declare里面的v_new_rec和v_old_rec, 就是问题所在.

CREATE OR REPLACE FUNCTION public.undo_t_trace()
RETURNS trigger
LANGUAGE plpgsql
AS $BODY$
DECLARE
  v_new_rec public.t;  -- type cached in session, don't modified when table t altered. must reopen an session.
  v_old_rec public.t;  -- type cached in session, don't modified when table t altered. must reopen an session.
  v_username text := session_user;
  v_client_addr inet := inet_client_addr();
  v_client_port int := inet_client_port();
  v_xid bigint := txid_current();
  v_encoding name := pg_client_encoding();
BEGIN
  case TG_OP
  when 'DELETE' then 
    v_old_rec := OLD;
    insert into public.undo_t (xid, relid, table_schema, table_name, when_tg, level, op, encoding, old_rec, username, client_addr, client_port)
      values (v_xid, tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_encoding, v_old_rec, v_username, v_client_addr, v_client_port);
  when 'INSERT' then 
    raise notice '%', NEW;  -- OK
    v_new_rec := NEW;
    raise notice '%', v_new_rec;  -- use cached type. not OK.
    insert into public.undo_t (xid, relid, table_schema, table_name, when_tg, level, op, encoding, new_rec, username, client_addr, client_port)
      values (v_xid, tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_encoding, v_new_rec, v_username, v_client_addr, v_client_port);
  when 'UPDATE' then 
    v_old_rec := OLD;
    v_new_rec := NEW;
    insert into public.undo_t (xid, relid, table_schema, table_name, when_tg, level, op, encoding, old_rec, new_rec, username, client_addr, client_port)
      values (v_xid, tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_encoding, v_old_rec, v_new_rec, v_username, v_client_addr, v_client_port);
    when 'TRUNCATE' then 
    insert into public.undo_t (xid, relid, table_schema, table_name, when_tg, level, op, encoding, old_rec, username, client_addr, client_port)
      select v_xid, tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_encoding, t, v_username, v_client_addr, v_client_port from public.t;
  else
    return null;
  end case;
    RETURN null;
END;
$BODY$ strict volatile;


创建触发器 : 

CREATE TRIGGER tg1 AFTER DELETE or INSERT or UPDATE ON public.t FOR EACH ROW EXECUTE PROCEDURE undo_t_trace();
CREATE TRIGGER tg2 BEFORE TRUNCATE ON public.t FOR EACH STATEMENT EXECUTE PROCEDURE undo_t_trace();



插入测试数据

insert into public.t values (1,'test',now());
insert into public.t values (2,'test',now());



可以看到跟踪正常

postgres=# select * from public.t;
 c1 |  c2  |          crt_time          
----+------+----------------------------
  1 | test | 2014-08-28 16:14:34.548555
  2 | test | 2014-08-28 16:14:35.194634
(2 rows)

postgres=# select new_rec from public.undo_t;
                new_rec                
---------------------------------------
 (1,test,"2014-08-28 16:14:34.548555")
 (2,test,"2014-08-28 16:14:35.194634")
(2 rows)



接下来修改表的定义

postgres=# alter table public.t add column c3 int;
ALTER TABLE


再次插入数据, 我们发现输出变量存储的NEW和NEW是不一样的, 变量存储的NEW没有新增的列, 而直接输出的NEW有刚刚新增的列.

postgres=# insert into public.t values (3,'test',now(),1);
NOTICE:  (3,test,"2014-08-28 16:15:58.394688",1)
NOTICE:  (3,test,"2014-08-28 16:15:58.394688",)
INSERT 0 1
postgres=# select * from public.t;
 c1 |  c2  |          crt_time          | c3 
----+------+----------------------------+----
  1 | test | 2014-08-28 16:14:34.548555 |   
  2 | test | 2014-08-28 16:14:35.194634 |   
  3 | test | 2014-08-28 16:15:58.394688 |  1
(3 rows)


跟踪插入的数据并没有新增的列.

postgres=# select new_rec from public.undo_t;
                new_rec                 
----------------------------------------
 (1,test,"2014-08-28 16:14:34.548555",)
 (2,test,"2014-08-28 16:14:35.194634",)
 (3,test,"2014-08-28 16:15:58.394688",)
(3 rows)



退出会话, 重新进入

postgres=# \q
postgres@192_168_173_203-> psql
psql (9.3.4)
Type "help" for help.
postgres=# select new_rec from public.undo_t;
                new_rec                 
----------------------------------------
 (1,test,"2014-08-28 16:14:34.548555",)
 (2,test,"2014-08-28 16:14:35.194634",)
 (3,test,"2014-08-28 16:15:58.394688",)
(3 rows)


再次插入数据, 我们看到新增列时正常. 说明函数刷新了变量的类型.

postgres=# insert into public.t values (4,'test',now(),1);
NOTICE:  (4,test,"2014-08-28 16:16:45.857712",1)
NOTICE:  (4,test,"2014-08-28 16:16:45.857712",1)
INSERT 0 1
postgres=# select new_rec from public.undo_t;
                 new_rec                 
-----------------------------------------
 (1,test,"2014-08-28 16:14:34.548555",)
 (2,test,"2014-08-28 16:14:35.194634",)
 (3,test,"2014-08-28 16:15:58.394688",)
 (4,test,"2014-08-28 16:16:45.857712",1)
(4 rows)


现在删掉一个列.

postgres=# alter table t drop column c2;
ALTER TABLE
postgres=# \set VERBOSITY verbose


再次插入, 问题又重现了, 

postgres=# insert into public.t values (5,now(),1);
NOTICE:  00000: (5,"2014-08-28 16:17:20.078688",1)
LOCATION:  exec_stmt_raise, pl_exec.c:3041
ERROR:  22007: invalid input syntax for type timestamp: "1"  这个报错出现在  v_new_rec := NEW;  因为v_new_rec的类型cache了, 
CONTEXT:  PL/pgSQL function undo_t_trace() line 18 at assignment
LOCATION:  DateTimeParseError, datetime.c:3567



现在的解决办法是不使用表变量, 直接使用NEW或OLD.

CREATE OR REPLACE FUNCTION public.undo_t_trace()
RETURNS trigger
LANGUAGE plpgsql
AS $BODY$
DECLARE
  v_username text := session_user;
  v_client_addr inet := inet_client_addr();
  v_client_port int := inet_client_port();
  v_xid bigint := txid_current();
  v_encoding name := pg_client_encoding();
BEGIN
  case TG_OP
  when 'DELETE' then 
    insert into public.undo_t (xid, relid, table_schema, table_name, when_tg, level, op, encoding, old_rec, username, client_addr, client_port)
      values (v_xid, tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_encoding, OLD, v_username, v_client_addr, v_client_port);
  when 'INSERT' then 
    insert into public.undo_t (xid, relid, table_schema, table_name, when_tg, level, op, encoding, new_rec, username, client_addr, client_port)
      values (v_xid, tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_encoding, NEW, v_username, v_client_addr, v_client_port);
  when 'UPDATE' then 
    insert into public.undo_t (xid, relid, table_schema, table_name, when_tg, level, op, encoding, old_rec, new_rec, username, client_addr, client_port)
      values (v_xid, tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_encoding, OLD, NEW, v_username, v_client_addr, v_client_port);
    when 'TRUNCATE' then 
    insert into public.undo_t (xid, relid, table_schema, table_name, when_tg, level, op, encoding, old_rec, username, client_addr, client_port)
      select v_xid, tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_encoding, t, v_username, v_client_addr, v_client_port from public.t;
  else
    return null;
  end case;
    RETURN null;
END;
$BODY$ strict volatile;

postgres=# alter table t add column c2 int;
ALTER TABLE
postgres=# insert into public.t values (6,now(),1,123);
INSERT 0 1
postgres=# select new_rec from undo_t;
                new_rec                 
----------------------------------------
 (1,"2014-08-28 16:14:34.548555",,)
 (2,"2014-08-28 16:14:35.194634",,)
 (3,"2014-08-28 16:15:58.394688",,)
 (4,"2014-08-28 16:16:45.857712",1,)
 (5,"2014-08-28 16:26:37.160691",1,)
 (6,"2014-08-28 16:27:44.045674",1,123)
(6 rows)
postgres=# alter table t drop column crt_time;
ALTER TABLE
postgres=# select new_rec from undo_t;
  new_rec  
-----------
 (1,,)
 (2,,)
 (3,,)
 (4,1,)
 (5,1,)
 (6,1,123)
(6 rows)

postgres=# insert into public.t values (7,1,123);
INSERT 0 1
postgres=# select new_rec from undo_t;
  new_rec  
-----------
 (1,,)
 (2,,)
 (3,,)
 (4,1,)
 (5,1,)
 (6,1,123)
 (7,1,123)
(7 rows)



Flag Counter
