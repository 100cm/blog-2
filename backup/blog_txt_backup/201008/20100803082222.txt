PostgreSQL research

PostgreSQL PITR simple practice-1

2010-08-03 8:22:22   查看原文>>

最近在带新人(有数据库基础但是以前没有接触过PG的)，我带新人的方法比较土，看书，做实验,写方案(曾经用到的或者将要用到的)，从方案上看出学习的进度和一些需要注意的地方,逐渐将已经确认可以干的活交给新人。提到PostgreSQL的备份，不得不提一下PITR。

要实现PostgreSQL的基于时间点的恢复，必须用到WAL。

简单方法：

1. 建目录

归档文件放到什么地方，需要目录结构来支撑。这里的话选择yyyymmdd,这样显得比较清晰。

备份文件放在什么地方，这里的话使用统一的目录，使用yyyymmdd来标记文件名。

注意目录写权限的赋予。

2. 写归档脚本

vi archive.sh

---------------

#!/bin/bash
. path_to_.bash_profile
DATE=`date +%Y%m%d`




test -d path_to_archive/$DATE || mkdir -p path_to_archive/$DATE 
cp $1 path_to_archive/$DATE/$2


---------------

chmod u+x archive.sh

3. 修改配置文件

archive_command = path_to_archive_shell_script/archive.sh %p %f'


4. 重启数据库

5. 写备份脚本

vi hotbak.sh

#!/bin/bash
. path_to/.bash_profile




# 因为在主库上备份还是有点影响的，所以这里弄了个简单的算法3天备份一次，从一号开始，如果最后一天是31号的话那就是连续备份的。（如果1号不想备份那就-ne 2或0）




EXE_DATE=`date +%j`
MOD=`echo $((${EXE_DATE}%3))`




if [ $MOD -ne 1 ]; then
echo -e "Today is not the backup day! \n"
exit 1
fi




DATE=`date +%Y%m%d`




echo -e "`date +%F%T` ----------- start backup datafile complete! \n "
echo -e "`date +%F%T` ----------- select pg_start_backup('hot_backup_$DATE'); \n "
psql -c "select pg_start_backup('hot_backup_$DATE');"
echo -e "`date +%F%T` ----------- tar -zcvf path_to_datafile_backup/$DATE.tar.gz path_to_PGDATA --exclude path_to_pg_xlog \n "
tar -zcvf path_to_datafile_backup/$DATE.tar.gz path_to_PGDATA --exclude path_to_pg_xlog
echo -e "`date +%F%T` ----------- select pg_stop_backup(); \n "
psql -c "select pg_stop_backup();"
echo -e "`date +%F%T` ----------- backup datafile complete! \n "




rm -rf path_to_arcihve/`date -d '-4 day' +%Y%m%d`
rm -rf path_to_arcihve/`date -d '-3 day' +%Y%m%d`
rm -rf path_to_arcihve/`date -d '-2 day' +%Y%m%d`
rm -rf path_to_arcihve/`date -d '-1 day' +%Y%m%d`




rm -f path_to_datafile_backup/`date -d '-4 day' +%Y%m%d`.tar.gz
rm -f path_to_datafile_backup/`date -d '-3 day' +%Y%m%d`.tar.gz
rm -f path_to_datafile_backup/`date -d '-2 day' +%Y%m%d`.tar.gz
rm -f path_to_datafile_backup/`date -d '-1 day' +%Y%m%d`.tar.gz


6. 写执行计划

32 2 * * * path_to_hotbak.sh >> path_to_hotbak.log 2>&1


非常简单，对吧，不过这里要注意的是备份的保留策略，太多的话可能把磁盘撑爆。

还有一点是这里并没有备份归档后的日志，如果觉得有必要的话可以再写一个备份归档的。

下次讲一下使用EMAJ(借助触发器)来实现类似ORACLE的flashback query的功能。

其实PostgreSQL自身的存储体系应该可以实现flashback query的功能（利用行标记和vacuum的延时），不需要借助触发器。

【深入】
http://blog.163.com/digoal@126/blog/static/163877040201303082942271/
http://blog.163.com/digoal@126/blog/static/163877040201302935435100/
http://blog.163.com/digoal@126/blog/static/16387704020131410250983/
http://blog.163.com/digoal@126/blog/static/1638770402013141100160/
http://blog.163.com/digoal@126/blog/static/16387704020131532522284/

评论

francs - 2010-08-10 17:42:07

呵呵，看仔细看了下，你的日志都通过crontab 记录在一个文件里了

francs - 2010-08-10 17:32:24

脚本值得学习，如果脚本处理过程记录日志，出问题时也方便查找；

