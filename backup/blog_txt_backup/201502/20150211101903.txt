PostgreSQL research

attention: use zfs clone filesystem for SOX audit use case.

2015-02-11 10:19:03   查看原文>>

在进行SOX审计时, 可能需要用到生产数据库进行审查操作, 一般我们可以用PostgreSQL流复制创建一个standby给审计人员使用.
如果线上本来用的就是master-slave模式的HA, 那么备机就可以直接给他们使用.
master-slave HA方案参考
https://github.com/digoal/PostgreSQL_HA_with_primary_standby_2vip
但是这里也有一个问题, standby仅仅支持只读, 不能写数据, 审计过程可能需要一些中间结果需要保存, 所以纯粹的standby可能不适用.
为什么standby连temp表都不能用呢?
这里解释得非常清楚, 因为standby不能申请新的XID, 显然和这一项相关的太多了, 包括临时表在内, 都是无法使用的.
http://www.postgresql.org/docs/9.4/static/hot-standby.html

Transactions started during hot standby will never be assigned a transaction ID and cannot write to the system write-ahead log. Therefore, the following actions will produce error messages:

Data Manipulation Language (DML) - INSERT, UPDATE, DELETE, COPY FROM, TRUNCATE. Note that there are no allowed actions that result in a trigger being executed during recovery. This restriction applies even to temporary tables, because table rows cannot be read or written without assigning a transaction ID, which is currently not possible in a Hot Standby environment.

Data Definition Language (DDL) - CREATE, DROP, ALTER, COMMENT. This restriction applies even to temporary tables, because carrying out these operations would require updating the system catalog tables.

SELECT ... FOR SHARE | UPDATE, because row locks cannot be taken without updating the underlying data files.

Rules on SELECT statements that generate DML commands.

LOCK that explicitly requests a mode higher than ROW EXCLUSIVE MODE.

LOCK in short default form, since it requests ACCESS EXCLUSIVE MODE.

Transaction management commands that explicitly set non-read-only state:

BEGIN READ WRITE, START TRANSACTION READ WRITE

SET TRANSACTION READ WRITE, SET SESSION CHARACTERISTICS AS TRANSACTION READ WRITE

SET transaction_read_only = off

Two-phase commit commands - PREPARE TRANSACTION, COMMIT PREPARED, ROLLBACK PREPARED because even read-only transactions need to write WAL in the prepare phase (the first phase of two phase commit).

Sequence updates - nextval(), setval()

LISTEN, UNLISTEN, NOTIFY

In normal operation, "read-only" transactions are allowed to update sequences and to use LISTEN, UNLISTEN, and NOTIFY, so Hot Standby sessions operate under slightly tighter restrictions than ordinary read-only sessions. It is possible that some of these restrictions might be loosened in a future release.


那么问题来了, 怎样能够快速的为审计提供环境呢?
假使我们的数据库存储用了ZFS的话, 一切就简单了.
我们只需要创建快照, 克隆, 修改一些参数和配置即可. 但是务必注意配置要调整对, 否则可能破坏原有的数据库.
1. 软链接
2. 归档, 日志, 端口等.

过程简介, 在一个STANDBY主机上克隆一个读写数据库.
首选停一下备库(不停也可以, 那么就先快照$PGDATA所在目录), 

$ pg_ctl stop -m fast


创建快照

# zfs snapshot zp1/data01@20150211
# zfs snapshot zp1/data02@20150211
# zfs snapshot zp1/data03@20150211


克隆

# zfs clone -o mountpoint=/aud_data01 zp1/data01@20150211 zp1/aud_data01
# zfs clone -o mountpoint=/aud_data02 zp1/data02@20150211 zp1/aud_data02
# zfs clone -o mountpoint=/aud_data03 zp1/data03@20150211 zp1/aud_data03


修改配置

$ cd /aud_data02/pgdata/digoal/pg_root/
$ vi postgresql.conf
port = 1922
wal_level = minimal
archive_mode = off
max_wal_senders = 0
log_directory = 'pg_log'


重命名recovery.conf

$ mv recovery.conf recovery.done


修改软链接

$ rm -f pg_xlog
$ ln -s /aud_data01/pgdata/pg_xlog ./pg_xlog
$ cd pg_tblspc/
$ rm -f *


$ 将克隆出来的表空间目录软链接至此
启动数据库

$ pg_ctl start -D /aud_data02/pgdata/pg_root


Flag Counter
