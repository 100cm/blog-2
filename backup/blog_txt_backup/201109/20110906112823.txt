PostgreSQL research

PostgreSQL length() and Oracle length() difference

2011-09-06 11:28:23   查看原文>>

今天群里一位兄弟纠结于oracle和postgresql 的length函数在char类型,同样的内容下面返回的值不一样。
现象:
Oracle:
SQL> create table char_test (info char(20));
Table created.
SQL> insert into char_test values ('abcdef');
1 row created.
SQL> select info,length(info) from char_test;
INFO                 LENGTH(INFO)
-------------------- ------------
abcdef                         20

PostgreSQL:
digoal=> create table char_test(info char(20));
CREATE TABLE
digoal=> insert into char_test  values ('abcdef');
INSERT 0 1
digoal=> select info,length(info) from char_test ;
         info         | length 
----------------------+--------
 abcdef               |      6
(1 row)

没错Oracle返回的是20，PostgreSQL返回的是6.
先不要惊讶，看看两个数据库的函数解释。
Oracle :
The LENGTH functions return the length of char. LENGTH calculates length using characters as defined by the input character set.
If char has datatype CHAR, then the length includes all trailing blanks. If char is null, then this function returns null.

PostgreSQL : 
length : Number of characters in string
显然PostgreSQL未计算blank字符的长度.
再看看PostgreSQL的HISTORY文件 : 确实有类似改动。
HISTORY:     * Add array_length() to return the length of an array for a specified
HISTORY:     * The length() function no longer counts trailing spaces in CHAR(n)
HISTORY:     * Make length() disregard trailing spaces in CHAR(n) (Gavin)
HISTORY:       counted by length().
HISTORY:     * The function "octet_length()" now returns the uncompressed data
HISTORY:     * New function bit_length() (Peter E)
HISTORY:     * Add pg_database_encoding_max_length() (Tatsuo)
HISTORY:Make char_length()/octet_length including trailing blanks (Tom)

另外在PostgreSQL 的SQL遵循表里面也有解释 : 
http://www.postgresql.org/docs/9.1/static/features-sql-standard.html
┌───────┬────┬──────────────────────────┬────────────────────────────────────────────────────────────┐
│E021-04│Core│CHARACTER_LENGTH function │trims trailing spaces from CHARACTER values before counting │
└───────┴────┴──────────────────────────┴────────────────────────────────────────────────────────────┘

那就不难理解为什么结果会不一样了。实际占用的长度是一样的。
如下，PostgreSQL char(20)和varchar(20)用来存储相同的字符，看看是不是占用空间不一样.
digoal=> create table char_test(info char(20));
CREATE TABLE
digoal=> insert into char_test  values ('abcdef');
INSERT 0 1
digoal=> select info,length(info) from char_test ;
         info         | length 
----------------------+--------
 abcdef               |      6
(1 row)
digoal=> create table varchar_test (info varchar(20));
CREATE TABLE
digoal=> insert into char_test select * from char_test ;
INSERT 0 1
digoal=> insert into char_test select * from char_test ;
INSERT 0 2
digoal=> insert into char_test select * from char_test ;
INSERT 0 4
digoal=> insert into char_test select * from char_test ;
INSERT 0 8
digoal=> insert into char_test select * from char_test ;
INSERT 0 16
digoal=> insert into char_test select * from char_test ;
INSERT 0 32
digoal=> insert into char_test select * from char_test ;
INSERT 0 64
digoal=> insert into char_test select * from char_test ;
INSERT 0 128
digoal=> insert into char_test select * from char_test ;
INSERT 0 256
digoal=> insert into char_test select * from char_test ;
INSERT 0 512
digoal=> insert into char_test select * from char_test ;
INSERT 0 1024
digoal=> insert into char_test select * from char_test ;
INSERT 0 2048
digoal=> insert into char_test select * from char_test ;
INSERT 0 4096
digoal=> insert into varchar_test select * from char_test ;
INSERT 0 8192
digoal=> select count(*) from char_test ;
 count 
-------
  8192
(1 row)

digoal=> select count(*) from varchar_test ;
 count 
-------
  8192
(1 row)

digoal=> select min(ctid),max(ctid) from char_test ;
  min  |   max   
-------+---------
 (0,1) | (52,28)
(1 row)

digoal=> select min(ctid),max(ctid) from varchar_test ;
  min  |   max   
-------+---------
 (0,1) | (36,56)
(1 row)

显然char(20)消耗了53个block,而varchar(20)仅仅消耗了37个block.

补充几个例子:
digoal=> truncate table char_test ;
TRUNCATE TABLE
digoal=> insert into char_test values ('abcdef      ');
INSERT 0 1
digoal=> insert into char_test values ('abcdef      a');
INSERT 0 1
digoal=> insert into char_test values ('abcdef      a ');
INSERT 0 1
digoal=> select *,length(info) from char_test l;
         info         | length 
----------------------+--------
 abcdef               |      6
 abcdef      a        |     13
 abcdef      a        |     13
(3 rows)
注意这个结果是12,   但是在表中返回的是6
digoal=> select length('abcdef      ');  
 length 
--------
     12
(1 row)
转换成char(x)则返回6.
postgres=# select length('abcdef      '::char(32));
 length 
--------
      6
(1 row)

digoal=> select length('abcdef      a');
 length 
--------
     13
(1 row)

digoal=> select length('abcdef      a ');
 length 
--------
     14
(1 row)
char(32)类型，使用length计算字符长度的时候末尾空格不计长度。

在varchar(32)，使用length计算字符长度的时候末尾空格计长度。
digoal=> truncate table varchar_test ;
TRUNCATE TABLE
digoal=> insert into varchar_test values ('abcdef      ');
INSERT 0 1
digoal=> select *,length(info) from varchar_test;
     info     | length 
--------------+--------
 abcdef       |     12
(1 row)
