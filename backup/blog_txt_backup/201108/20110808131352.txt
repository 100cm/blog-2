PostgreSQL research

pg_reorg doesn't break your DML,but don't forget it's performance influence.

2011-08-08 13:13:52   查看原文>>

 这几天在做一个从Oracle迁移到PostgreSQL数据库环境的业务压力测试。
目前该业务在Oracle里面压力最大的部分是两个表的频繁UPDATE。
迁移到PostgreSQL的话，势必也面临这方面得挑战。
在大压力下测试1天下来（每分钟产生4.6GB的XLOG），平均的更新SQL QPS约9000每秒. 平均响应时间约2ms 。这个数字已经远远超过业务的需求。
但是从1天的性能趋势图来看，性能程下降趋势，原因是索引在大量的更新后膨胀了。表的话因为开启了AUTOVACUUM基本上保持在一个SIZE。
需要解决性能下降的问题，就要解决索引的膨胀问题。
处理方法可以是重建索引，reindex不提供concurrency的选项。新建索引提供concurrency的选项。
因此想到了一个pg_reorg的开源软件，这个软件提供在线重组数据的功能，使用的方法是在源表新建触发器，然后用WORK TABLE来完成数据的重组，重组完后更改系统的CATALOG，用WORK TABLE 替换源表。
可以说pg_reorg解决了一个数据库层面锁等待的问题。使得重组的过程中不中断DML操作。这个用REINDEX是做不到的。
但是不够是用reindex或者是reindex来重组索引，都会带来一个问题，对数据库存储的IO开销的增加。这个是我们必须考虑的。
特别是pg_reorg concurrency的情况下，如果系统本来就处于高度繁忙的状态，执行pg_reorg会带来严重的性能压力。

下面是我在一个高度压力下面做pg_reorg的结果,对一个3.8GB(索引12.5GB)的表进行重组。同时使用pgbench不停的更新这个表的记录,开3个数据库连接, 重组耗时约20分钟。
做PG_REORG之前的业务性能:
QPS=2728 , 平均响应时间1.1毫秒
做pg_reorg时的业务性能:
QPS=2101 , 平均响应时间1.4毫秒
性能下降 23%

做完pg_reorg之后,表变成3.4GB,索引6.3GB
业务性能达到QPS=4523 , 平均响应时间0.7毫秒
性能提升 66%，提升明显。

pg_reorg重组开始和结束的时候，需要对表加一个ACCESS EXCLUSIVE MODE锁，开始的时候是要在表上加触发器，结束的时候是要将工作表切换到源表。
如果这两次加载锁的时间超过了软件设置的时间，将会杀掉冲突锁的BACKEND 进程。确保能拿到锁。
如：
重组开始时
LOG: (query) BEGIN ISOLATION LEVEL READ COMMITTED
LOG: (query) SET LOCAL statement_timeout = 1000
LOG: (query) LOCK TABLE cac_player_info.cac_player_info IN ACCESS EXCLUSIVE MODE
LOG: (query) ROLLBACK
LOG: (query) BEGIN ISOLATION LEVEL READ COMMITTED
WARNING: canceling conflicted backends
LOG: (query) SELECT pg_cancel_backend(pid) FROM pg_locks WHERE locktype = 'relation'   AND relation = $1 AND pid <> pg_backend_pid()
LOG:    (param:0) = 16432
LOG: (query) SET LOCAL statement_timeout = 1000
LOG: (query) LOCK TABLE cac_player_info.cac_player_info IN ACCESS EXCLUSIVE MODE
LOG: (query) RESET statement_timeout
LOG: (query) SELECT reorg.conflicted_triggers($1)
LOG:    (param:0) = 16432
LOG: (query) CREATE TYPE reorg.pk_16432 AS (player_info_id numeric(10,0))
LOG: (query) CREATE TABLE reorg.log_16432 (id bigserial PRIMARY KEY, pk reorg.pk_16432, row cac_player_info.cac_player_info)
LOG: (query) CREATE TRIGGER z_reorg_trigger BEFORE INSERT OR DELETE OR UPDATE ON cac_player_info.cac_player_info FOR EACH ROW EXECUTE PROCEDURE reorg.reorg_trigger('INSERT INTO reorg.log_16432(pk, row) VALUES( CASE WHEN $1 IS NULL THEN NULL ELSE (ROW($1.player_info_id)::reorg.pk_16432) END, $2)')
LOG: (query) SELECT reorg.disable_autovacuum('reorg.log_16432')
LOG: (query) COMMIT
LOG: (query) BEGIN ISOLATION LEVEL SERIALIZABLE
LOG: (query) SELECT set_config('work_mem', current_setting('maintenance_work_mem'), true)
LOG: (query) SET LOCAL synchronize_seqscans = off
LOG: (query) SELECT reorg.array_accum(virtualtransaction) FROM pg_locks WHERE locktype = 'virtualxid' AND pid <> pg_backend_pid()
LOG: (query) DELETE FROM reorg.log_16432
LOG: (query) CREATE TABLE reorg.table_16432 WITH (oids=false) TABLESPACE pg_default AS SELECT player_info_id,sky_id,nick_name,gender,head_bmp_id,account_status,chat_status,exp,level_num,next_level_exp,money,active_time,create_time,last_login_server_mod_id FROM ONLY cac_player_info.cac_player_info
LOG: (query) SELECT reorg.disable_autovacuum('reorg.table_16432')
LOG: (query) COMMIT
。。。。。。。。。。。。。。。。

重组结束时:
LOG: (query) BEGIN ISOLATION LEVEL READ COMMITTED
LOG: (query) SET LOCAL statement_timeout = 1000
LOG: (query) LOCK TABLE cac_player_info.cac_player_info IN ACCESS EXCLUSIVE MODE
LOG: (query) ROLLBACK
LOG: (query) BEGIN ISOLATION LEVEL READ COMMITTED
WARNING: canceling conflicted backends
LOG: (query) SELECT pg_cancel_backend(pid) FROM pg_locks WHERE locktype = 'relation'   AND relation = $1 AND pid <> pg_backend_pid()
LOG:    (param:0) = 16432
LOG: (query) SET LOCAL statement_timeout = 1000
LOG: (query) LOCK TABLE cac_player_info.cac_player_info IN ACCESS EXCLUSIVE MODE
LOG: (query) RESET statement_timeout
LOG: (query) SELECT reorg.reorg_apply($1, $2, $3, $4, $5, $6)
。。。。。。。。。。。。


对于使用pg_reorg进行表重组的建议 : 
1. 避开pg_reorg明文禁止的限制。
pg_reorg cannot reorganize temp tables.
pg_reorg cannot reorganize tables using GiST indexes.
You cannot do DDL commands except VACUUM and ANALYZE during pg_reorg. In many case pg_reorg would fail and rollback collectly, but there are some cases ending with data-corruption .
2. 避免表关联如reference，可能会带来一定的问题。
3. 避开业务高峰，最好在最低谷的时候执行。
4. 可能还需要考虑周边的影响，如使用了pgfincore的情况下，是否需要重新定义表的fincore属性。

【参考】
http://pgfoundry.org/projects/reorg/
