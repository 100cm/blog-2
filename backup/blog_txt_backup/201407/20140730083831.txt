PostgreSQL research

short & long connection performance between unix socket vs loopback vs IP

2014-07-30 8:38:31   查看原文>>

众所周知PostgreSQL是进程模式, 每个客户端连接, 都需要从服务端fork一个backend process来"对付"它.
所以短连接和长连接的并发性有极大的差别, 鉴于此, 对于短连接业务, 我们需要部署连接池, 例如pgbouncer连接池.
以下是一组测试数据.
测试SQL, select 1;

postgres@39-> cat test.sql
select 1;


测试结果汇总 : 
┌─────────────────────────────────────┬─────────────────────────────────────────────────────┬─────────────────────────────────────────────────────┬─────────────────────────────────────────────────────┬─────────────────────────────────────────────────────┐
│ conn mode \ tps                     │ 短连接, 单连接, 单进程                              │ 短连接, 多连接, 多进程                              │ 长连接, 单连接, 单进程                              │长连接, 多连接, 多进程                               │
├─────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┤
│ unix socket                         │ 337                                                 │ 1355                                                │ 26250                                               │ 166630                                              │
├─────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┤
│ loop back                           │ 310                                                 │ 1245                                                │ 17467                                               │ 114761                                              │
├─────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┼─────────────────────────────────────────────────────┤
│ eth0                                │ 309                                                 │ 464                                                 │ 17783                                               │ 118102                                              │
└─────────────────────────────────────┴─────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┘
从测试结果来看, 短连接相比长连接性能损失极其巨大, 不管是短连接还是长连接, unix socket和TCP连接方式的性能有较大的差别, 单连接计划没有差别, 多连接和ETH0(1GB)接口可以体现出较大的差别. 
所以如果数据库和业务在同一个服务器上的话, 建议使用unix socket连接.

测试详细结果.
长连接, 单连接, 单线程.

postgres@39-> pgbench -M prepared -n -r -f ./test.sql -h $PGDATA -c 1 -j 1 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 30 s
number of transactions actually processed: 787502
tps = 26249.961667 (including connections establishing)
tps = 26252.432011 (excluding connections establishing)
statement latencies in milliseconds:
        0.037277        select 1;

postgres@39-> pgbench -M prepared -n -r -f ./test.sql -h 127.0.0.1 -c 1 -j 1 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 30 s
number of transactions actually processed: 524007
tps = 17466.801604 (including connections establishing)
tps = 17468.668994 (excluding connections establishing)
statement latencies in milliseconds:
        0.056171        select 1;

postgres@39-> pgbench -M prepared -n -r -f ./test.sql -h 172.16.3.39 -c 1 -j 1 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
duration: 30 s
number of transactions actually processed: 533505
tps = 17783.407526 (including connections establishing)
tps = 17785.230503 (excluding connections establishing)
statement latencies in milliseconds:
        0.055167        select 1;



长连接, 多连接, 多线程.

postgres@39-> pgbench -M prepared -n -r -f ./test.sql -h $PGDATA -c 12 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 12
number of threads: 4
duration: 30 s
number of transactions actually processed: 4998931
tps = 166630.372366 (including connections establishing)
tps = 166682.288137 (excluding connections establishing)
statement latencies in milliseconds:
        0.071148        select 1;

postgres@39-> pgbench -M prepared -n -r -f ./test.sql -h 127.0.0.1 -c 12 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 12
number of threads: 4
duration: 30 s
number of transactions actually processed: 3442923
tps = 114760.829316 (including connections establishing)
tps = 114799.418041 (excluding connections establishing)
statement latencies in milliseconds:
        0.103285        select 1;

postgres@39-> pgbench -M prepared -n -r -f ./test.sql -h 172.16.3.39 -c 12 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 12
number of threads: 4
duration: 30 s
number of transactions actually processed: 3543119
tps = 118102.116400 (including connections establishing)
tps = 118140.332230 (excluding connections establishing)
statement latencies in milliseconds:
        0.100409        select 1;



短连接, 单连接, 单线程

postgres@39-> pgbench -M extended -n -r -f ./test.sql -C -h $PGDATA -T 30
transaction type: Custom query
scaling factor: 1
query mode: extended
number of clients: 1
number of threads: 1
duration: 30 s
number of transactions actually processed: 10113
tps = 337.067113 (including connections establishing)
tps = 2185.829436 (excluding connections establishing)
statement latencies in milliseconds:
        0.439708        select 1;

postgres@39-> pgbench -M extended -n -r -f ./test.sql -C -h 127.0.0.1 -T 30
transaction type: Custom query
scaling factor: 1
query mode: extended
number of clients: 1
number of threads: 1
duration: 30 s
number of transactions actually processed: 9290
tps = 309.649636 (including connections establishing)
tps = 1926.787069 (excluding connections establishing)
statement latencies in milliseconds:
        0.478594        select 1;

postgres@39-> pgbench -M extended -n -r -f ./test.sql -C -h 172.16.3.39 -T 30
transaction type: Custom query
scaling factor: 1
query mode: extended
number of clients: 1
number of threads: 1
duration: 30 s
number of transactions actually processed: 9266
tps = 308.858276 (including connections establishing)
tps = 1948.086624 (excluding connections establishing)
statement latencies in milliseconds:
        0.472647        select 1;



短连接, 多连接, 多线程

postgres@39-> pgbench -M extended -n -r -f ./test.sql -C -h $PGDATA -c 12 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: extended
number of clients: 12
number of threads: 4
duration: 30 s
number of transactions actually processed: 40660
tps = 1355.155356 (including connections establishing)
tps = 105398.087748 (excluding connections establishing)
statement latencies in milliseconds:
        5.923797        select 1;

postgres@39-> pgbench -M extended -n -r -f ./test.sql -C -h 127.0.0.1 -c 12 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: extended
number of clients: 12
number of threads: 4
duration: 30 s
number of transactions actually processed: 37356
tps = 1244.968975 (including connections establishing)
tps = 63769.612728 (excluding connections establishing)
statement latencies in milliseconds:
        6.454358        select 1;

postgres@39-> pgbench -M extended -n -r -f ./test.sql -C -h 172.16.3.39 -c 12 -j 4 -T 30
transaction type: Custom query
scaling factor: 1
query mode: extended
number of clients: 12
number of threads: 4
duration: 30 s
number of transactions actually processed: 28165
tps = 464.333385 (including connections establishing)
tps = 4954.486537 (excluding connections establishing)
statement latencies in milliseconds:
        15.765824       select 1;




Flag Counter
