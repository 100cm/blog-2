PostgreSQL research

PostgreSQL or greenplum pg_attribute table bloat case

2014-07-16 11:39:07   查看原文>>

群里一位兄弟问到的一个问题, 他们的GreenPlum数据库的pg_attribute表达到了4TB的大小.
这个表的膨胀原因是业务程序频繁的建表和删表导致的, 因为业务可能使用了大量的临时表, 临时表是会话级别的, 在其他会话看不到, 或者重连后也需要重建临时表.
PG的临时表和ORACLE不太一样, ORACLE临时表结构建好的话, 不需要重建. 数据各会话不同而已.
但是PG的临时表, 每个会话都要重建, 所以如果大量的建立和删除临时表, 会导致PG的catalog 产生大量的垃圾.
例如pg_attribute表就是其中一个例子, 

digoal=# create temp table t(id int);
CREATE TABLE
digoal=# \dt
                         List of relations
  Schema   |                Name                 | Type  |  Owner   
-----------+-------------------------------------+-------+----------
 pg_temp_2 | t                                   | table | postgres
 public    | tbl_android_collect_run_info_201407 | table | postgres
 public    | tbl_android_terminal_info_201407    | table | postgres
 public    | test                                | table | postgres
(4 rows)

digoal=# select * from pg_attribute where attrelid='t'::regclass;
 attrelid | attname  | atttypid | attstattarget | attlen | attnum | attndims | attcacheoff | atttypmod | attbyval | attstorage | att
align | attnotnull | atthasdef | attisdropped | attislocal | attinhcount | attcollation | attacl | attoptions | attfdwoptions 
----------+----------+----------+---------------+--------+--------+----------+-------------+-----------+----------+------------+----
------+------------+-----------+--------------+------------+-------------+--------------+--------+------------+---------------
    38439 | id       |       23 |            -1 |      4 |      1 |        0 |          -1 |        -1 | t        | p          | i  
      | f          | f         | f            | t          |           0 |            0 |        |            | 
    38439 | ctid     |       27 |             0 |      6 |     -1 |        0 |          -1 |        -1 | f        | p          | s  
      | t          | f         | f            | t          |           0 |            0 |        |            | 
    38439 | xmin     |       28 |             0 |      4 |     -3 |        0 |          -1 |        -1 | t        | p          | i  
      | t          | f         | f            | t          |           0 |            0 |        |            | 
    38439 | cmin     |       29 |             0 |      4 |     -4 |        0 |          -1 |        -1 | t        | p          | i  
      | t          | f         | f            | t          |           0 |            0 |        |            | 
    38439 | xmax     |       28 |             0 |      4 |     -5 |        0 |          -1 |        -1 | t        | p          | i  
      | t          | f         | f            | t          |           0 |            0 |        |            | 
    38439 | cmax     |       29 |             0 |      4 |     -6 |        0 |          -1 |        -1 | t        | p          | i  
      | t          | f         | f            | t          |           0 |            0 |        |            | 
    38439 | tableoid |       26 |             0 |      4 |     -7 |        0 |          -1 |        -1 | t        | p          | i  
      | t          | f         | f            | t          |           0 |            0 |        |            | 
(7 rows)
digoal=# drop table t;
DROP TABLE
digoal=# select * from pg_attribute where attrelid='t'::regclass;
ERROR:  relation "t" does not exist
LINE 1: select * from pg_attribute where attrelid='t'::regclass;
                                                  ^


这样就产生了7条垃圾记录, 如果不及时vacuum , 这些记录就膨胀了.
greenplum使用的是8.2的postgresql, 垃圾回收也比较烂, 因为没有fsm, vm文件, 需要固定内存跟踪relation的垃圾数据.
所以比较容易产生大量的垃圾, 除非内存区域分配得比较大.

These parameters control the size of the shared free space map, which tracks the locations of unused space in the database. An undersized free space map may cause the database to consume increasing amounts of disk space over time, because free space that is not in the map cannot be re-used; instead PostgreSQL will request more disk space from the operating system when it needs to store new data. The last few lines displayed by a database-wide VACUUM VERBOSE command can help in determining if the current settings are adequate. A NOTICE message is also printed during such an operation if the current settings are too low.

Increasing these parameters may cause PostgreSQL to request more System V shared memory than your operating system's default configuration allows. See Section 16.4.1 for information on how to adjust those parameters, if necessary.

max_fsm_pages (integer)
Sets the maximum number of disk pages for which free space will be tracked in the shared free-space map. Six bytes of shared memory are consumed for each page slot. This setting must be at least 16 * max_fsm_relations. The default is chosen by initdb depending on the amount of available memory, and can range from 20k to 200k pages. This parameter can only be set at server start.

max_fsm_relations (integer)
Sets the maximum number of relations (tables and indexes) for which free space will be tracked in the shared free-space map. Roughly seventy bytes of shared memory are consumed for each slot. The default is one thousand relations. This parameter can only be set at server start.



如果要回收这部分空间, 可以cluster这个表.
8.2 的vacuum full不建议使用, 因为索引不会重建. 所以即使表变小了, 索引还是那么大.
例子 : 

vi postgresql.conf
allow_system_table_mods=on
pg_ctl restart -m fast
digoal=# create index CONCURRENTLY idx_1 on pg_attribute(ctid);
digoal=# cluster pg_attribute using idx_1;


或者直接使用已有的索引pg_attribute_relid_attnam_index, pg_attribute_relid_attnum_index.

cluster pg_attribute using pg_attribute_relid_attnam_index;



[参考]
1. http://www.postgresql.org/docs/8.2/static/runtime-config-resource.html#RUNTIME-CONFIG-RESOURCE-FSM
Flag Counter
