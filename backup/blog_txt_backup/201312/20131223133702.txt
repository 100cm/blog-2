PostgreSQL research

PostgreSQL 9.4 add EXTENSION pg_prewarm like pgfincore

2013-12-23 13:37:02   查看原文>>

PostgreSQL 9.4 新增了一个扩展插件, pg_prewarm, 和pgfincore类似, 但是不完全类似.
因为pgfincore的目的是改变文件的posix属性, 从而改变数据在OS CACHE中的存活属性, 例如让数据在OS CACHE中呆就一点, 或者不呆在OS CACHE中.
而pg_prewarm做的是把数据读入OS CACHE或者数据库的shared buffer. 同时不会改变文件的posix属性.
所以pg_prewarm是拿来预热数据的, 而不是"持久化"到CACHE.
当内存不够的情况下, 已经在内存里面的数据会被排挤出去.


postgres=# create extension pg_prewarm;
CREATE EXTENSION


读入shared buffer.

postgres=# select * from pg_prewarm('t'::regclass,'buffer');
 pg_prewarm 
------------
          1
(1 row)
调用ReadBufferExtended
/*
 * ReadBufferExtended -- returns a buffer containing the requested
 *              block of the requested relation.  If the blknum
 *              requested is P_NEW, extend the relation file and
 *              allocate a new block.  (Caller is responsible for
 *              ensuring that only one backend tries to extend a
 *              relation at the same time!)
 *
 * Returns: the buffer number for the buffer containing
 *              the block read.  The returned buffer has been pinned.
 *              Does not return on error --- elog's instead.
 *
 * Assume when this function is called, that reln has been opened already.
 *
 * In RBM_NORMAL mode, the page is read from disk, and the page header is
 * validated. An error is thrown if the page header is not valid.
 *
 * RBM_ZERO_ON_ERROR is like the normal mode, but if the page header is not
 * valid, the page is zeroed instead of throwing an error. This is intended
 * for non-critical data, where the caller is prepared to repair errors.
 *
 * In RBM_ZERO mode, if the page isn't in buffer cache already, it's filled
 * with zeros instead of reading it from disk.  Useful when the caller is
 * going to fill the page from scratch, since this saves I/O and avoids
 * unnecessary failure if the page-on-disk has corrupt page headers.
 * Caution: do not use this mode to read a page that is beyond the relation's
 * current physical EOF; that is likely to cause problems in md.c when
 * the page is modified and written out. P_NEW is OK, though.
 *
 * If strategy is not NULL, a nondefault buffer access strategy is used.
 * See buffer/README for details.
 */
Buffer
ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
                                   ReadBufferMode mode, BufferAccessStrategy strategy)



异步读入os cache.

postgres=# select * from pg_prewarm('t'::regclass,'prefetch');
 pg_prewarm 
------------
          1
(1 row)
相当于调用PrefetchBuffer
/*
 * PrefetchBuffer -- initiate asynchronous read of a block of a relation
 *
 * This is named by analogy to ReadBuffer but doesn't actually allocate a
 * buffer.      Instead it tries to ensure that a future ReadBuffer for the given
 * block will not be delayed by the I/O.  Prefetching is optional.
 * No-op if prefetching isn't compiled in.
 */
void
PrefetchBuffer(Relation reln, ForkNumber forkNum, BlockNumber blockNum)
{



同步读入os cache.

postgres=# select * from pg_prewarm('t'::regclass,'read');
 pg_prewarm 
------------
          1
(1 row)
相当于调用smgrread
/*
 *      smgrread() -- read a particular block from a relation into the supplied
 *                                buffer.
 *
 *              This routine is called from the buffer manager in order to
 *              instantiate pages in the shared buffer cache.  All storage managers
 *              return pages in the format that POSTGRES expects.
 */
void
smgrread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
                 char *buffer)



[参考]
1. http://www.postgresql.org/docs/devel/static/pgprewarm.html
2. src/backend/storage/buffer/bufmgr.c
3. src/backend/storage/smgr/smgr.c
