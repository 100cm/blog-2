PostgreSQL research

PostgreSQL use domain type constraint application logical, or use check constraint

2014-04-12 0:04:52   查看原文>>

stackoverflow里一位朋友问到的一个问题, 在rails中的一个应用, 原来存储的不是数组, 现在是数组, 存储的值为邮件地址.
但是使用数组后, 如果邮件格式不正确, 也会存储一个空的元素, 而这位朋友想得到的效果是, 如果格式不对就报错.
我这里举个例子 : 
创建一个domain, 使用check限定它的存储值

digoal=# create domain email as text constraint ck check (value ~ '^.+@.+\..+$');
CREATE DOMAIN
digoal=# select 'digoal'::email;
ERROR:  value for domain email violates check constraint "ck"
digoal=# select 'digoal@1'::email;
ERROR:  value for domain email violates check constraint "ck"
digoal=# select 'digoal@126.com'::email;
     email      
----------------
 digoal@126.com
(1 row)


但是domain不适合数组, 因为没有办法简单的创建email[]类型.

digoal=# create table t_email(id int , email email[]);
ERROR:  type "email[]" does not exist



所以更有效的方法是使用数组的约束.

digoal=# create or replace function ck_email(i_email text[]) returns boolean as $$
declare
  v text;
begin
  foreach v in array i_email loop
    if substring(v from '.+@.+\..+') is not null then
      continue;
    else
      return false;
    end if;
  end loop; 
  return true;
end;
$$ language plpgsql strict;
CREATE FUNCTION

digoal=# create table t_email(id int, email text[] check (ck_email(email)));
CREATE TABLE
digoal=# insert into t_email values (1, array['digoal@126.com','a@e']::text[]);
ERROR:  new row for relation "t_email" violates check constraint "t_email_email_check"
DETAIL:  Failing row contains (1, {digoal@126.com,a@e}).
digoal=# insert into t_email values (1, array['digoal@126.com','a@e.com']::text[]);
INSERT 0 1


数组支持直接使用ops any|all (array)这种操作, 所以也可以这样写.

digoal=# create table t_email(id int, email text[] check ('_%@_%._%' like all (email)));
CREATE TABLE


但是需要注意, 

digoal=# select '_%@_%._%' like all (array['digoal@126.com']);
 ?column? 
----------
 f
(1 row)
digoal=# select '_%@_%._%' like 'digoal@126.com';
 ?column? 
----------
 f
(1 row)
digoal=# select 'digoal@126.com' like '_%@_%._%';
 ?column? 
----------
 t
(1 row)


位置调换结果是不一样的，like操作不像等于号这样的操作符，两个操作数互换后结果是不一样的。
所以要实现这个目的，我们需要自定义一个操作符，并且替换顺序。

postgres=# create or replace function u_textregexeq(text,text) returns boolean as $$
             select textregexeq($2,$1);
           $$ language sql strict;
CREATE FUNCTION
postgres=# select u_textregexeq('digoal@126.com','^.+@.+\..+$');
-[ RECORD 1 ]-+--
u_textregexeq | f

postgres=# select textregexeq('digoal@126.com','^.+@.+\..+$');
-[ RECORD 1 ]--
textregexeq | t

postgres=# select u_textregexeq('^.+@.+\..+$','digoal@126.com');
-[ RECORD 1 ]-+--
u_textregexeq | t
postgres=# CREATE OPERATOR ~~~~ (procedure = u_textregexeq, leftarg=text,rightarg=text);
CREATE OPERATOR
postgres=# select 'digoal@126.com' ~~~~ '^.+@.+\..+$';
-[ RECORD 1 ]
?column? | f

postgres=# select '^.+@.+\..+$' ~~~~ 'digoal@126.com';
-[ RECORD 1 ]
?column? | t


现在可以使用新的操作符实现我们的目的了。

postgres=# drop table t_email;
DROP TABLE
postgres=# create table t_email(id int, email text[] check ('^.+@.+\..+$' ~~~~ all (email)));
CREATE TABLE
postgres=# insert into t_email values (1, array['digoal@126.com','a@e.com']::text[]);
INSERT 0 1
postgres=# insert into t_email values (1, array['digoal@126.com','a@e']::text[]);
ERROR:  new row for relation "t_email" violates check constraint "t_email_email_check"
DETAIL:  Failing row contains (1, {digoal@126.com,a@e}).



Flag Counter
