PostgreSQL research

PostgreSQL custome collect cluster's statstics and analyze for Trend info

2014-04-25 10:48:33   查看原文>>

为了方便统计数据库的运行状态, 我们可以把数据库的统计信息视图定时做snapshot, 大多数的数据库报告分析工具都是这么做的, 例如oracle 的statspack, PostgreSQL的pg_statsinfo, pg_top等.
其实如果用户不想安装过多的插件, 也可以自定义一些snapshot脚本.
例如, 下面是一个定时收集数据库状态的脚本, 把pg_stat_database的信息每隔一段时间收集到stat_pg_stat_database表里面.
用户可以从stat_pg_stat_database取出某时间段的数据库状态, 例如数据库的平均事务响应.
每120秒收集一次. 如果240秒内日志文件没有变更则从crontab重启脚本.
注意pg_stat_database中, 只统计了分配事务号的事务, 并未统计未分配事务号的事务. 例如查询事务不分配事务号.

digoal=# select xact_commit,xact_rollback from pg_stat_database where datname='digoal';
 xact_commit | xact_rollback 
-------------+---------------
        6874 |            20
(1 row)

digoal=# begin;
BEGIN
digoal=# select 1;
 ?column? 
----------
        1
(1 row)

digoal=# end;
COMMIT
digoal=# select xact_commit,xact_rollback from pg_stat_database where datname='digoal';
 xact_commit | xact_rollback 
-------------+---------------
        6874 |            20
(1 row)


所以, 对于读多, 写少的数据库, 不能真实的反映数据库的tps情况.

统计脚本如下 : 
$ vi ~/script/stat_db.sh 

#!/bin/bash
# .bash_profile
# Get the aliases and functions
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi
# User specific environment and startup programs
PATH=$PATH:$HOME/bin
export PATH

export LANG=en_US.utf8
export PGHOME=/home/pg93/pgsql
export PATH=$PGHOME/bin:$PATH:.
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH

export PGDATA=/ssd4/pg93/pg_root
export PGHOST=$PGDATA
export PGPORT=1921
export PGUSER=postgres
export PGDATABASE=digoal

LOGFILE=/tmp/stat_db.log
SLEEPTIME=120
MMIN=$((($SLEEPTIME+120)/60))

sql="
do language plpgsql \$\$
declare
begin
  if (not pg_is_in_recovery()) then
    perform 1 from pg_class where relname='stat_pg_stat_database' and relkind='r';
    if not found then
      create table stat_pg_stat_database as select *,now() as crt_time from pg_stat_database where false;
    end if;
    insert into stat_pg_stat_database select *,now() from pg_stat_database;
  end if;
end;
\$\$;
"

FILE=`find $LOGFILE -type f -mmin -$MMIN`

if [ "$FILE" == "$LOGFILE" ]; then
  echo -e "this script executed already?"
  exit 0
fi


echo "execute now."

for ((i=1;i>0;i=1)) do
  date +%F%T >>$LOGFILE 2>&1
  echo "$sql"|psql -f - >>$LOGFILE 2>&1
  sleep $SLEEPTIME
done


更改权限.

chmod 500 stat_db.sh


测试一下是否运行正常, 例如是否需要输入密码, 如果需要输入密码的话, 可以调整pg_hba.conf把unix sock连接的认证改为trust.

$ ./stat_db.sh 
2014-04-2509:20:32
DO


把这个脚本放到定时任务, 如果因某种原因脚本关闭了会自动起来. 

$ crontab -e
* * * * * /home/lsd_report/script/stat_db.sh >>/tmp/stat_db.log 2>&1


或者可以效仿这篇收集SAR报告的思想, 把数据库的统计信息都收集到一个集中的环境.
http://blog.163.com/digoal@126/blog/static/163877040201211354145701

建议将此类统计信息存放到$PGDATA以外的其他表空间, 假设一个集群有30个数据库, 每2分钟采集一次的话, 一年以后也有几百万条记录, 加上其他的统计信息表的snapshot, 数据增长也是很快的. 

报告的输出举例 : 
1. 根据时间范围, 输出整个集群在这个时间段内的每个采集点的tps.
PostgreSQL支持窗口函数, 很方便实现类似的统计.

select crt_time,(xact-xact1)/extract(epoch from (crt_time-crt_time1)) as tps from (
  select crt_time,crt_time1,xact,xact1 from (
    select crt_time,
           xact,
           lag(xact,1) over(order by crt_time) as xact1, 
           lag(crt_time,1) over(order by crt_time) as crt_time1, 
           row_number() over(order by crt_time) as rn from (
             select sum(xact_commit+xact_rollback) xact,
                    crt_time from stat_pg_stat_database 
                    where crt_time between '2014-04-25 09:20:32.922151' and '2014-04-25 10:29:01.192273' group by 2
             ) t
  ) t where rn<>1
) t;


输出举例 : 

          crt_time          |       tps        
----------------------------+------------------
 2014-04-25 09:30:01.598892 | 13.8760730500845
 2014-04-25 09:40:01.240861 | 12.8259868348208
 2014-04-25 09:50:01.630746 | 13.0115449896362
 2014-04-25 10:00:01.742404 | 11.6861585781758
 2014-04-25 10:10:01.309044 | 12.3489192127167
 2014-04-25 10:20:01.286129 |  13.927198569592
 2014-04-25 10:25:01.482055 | 12.0021615483216
 2014-04-25 10:26:01.674895 | 13.5564296351526
 2014-04-25 10:27:01.662968 | 12.8358848933187
 2014-04-25 10:28:01.818626 | 14.7284566316272
 2014-04-25 10:29:01.192273 | 11.3181526477563
(11 rows)




[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201211354145701
2. http://www.postgresql.org/docs/9.3/static/functions-window.html

Flag Counter
