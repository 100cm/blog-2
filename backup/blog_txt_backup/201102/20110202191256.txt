PostgreSQL research

Passing Patameters to PL/SQL Subprograms

2011-02-02 19:12:56   查看原文>>


SUBPROGRAM调用流程:
Passing Patameters to PL/SQL Subprograms - 德哥@Digoal - The Heart,The World.
 

形参和实参举例:

DECLARE
  emp_num NUMBER(6) := 120;
  bonus   NUMBER(6) := 100;
  merit   NUMBER(4) := 50;
  PROCEDURE raise_salary (emp_id NUMBER, amount NUMBER) IS
    BEGIN
      UPDATE employees SET salary = salary + amount WHERE employee_id = emp_id;
  END raise_salary;
BEGIN
  raise_salary(emp_num, bonus); -- procedure call specifies actual parameters
  raise_salary(emp_num, merit + bonus); -- expressions can be used as parameters
END;
/

位置调用，名字调用和混合调用举例：
DECLARE
  emp_num NUMBER(6) := 120;
  bonus   NUMBER(6) := 50;
  PROCEDURE raise_salary (emp_id NUMBER, amount NUMBER) IS
    BEGIN
      UPDATE employees SET salary = salary + amount WHERE employee_id = emp_id;
  END raise_salary;
BEGIN
  raise_salary(emp_num, bonus); -- positional procedure call for actual parameters
  raise_salary(amount => bonus, emp_id => emp_num); -- named parameters
  raise_salary(emp_num, amount => bonus); -- mixed parameters
END;
/

参数模式：
参数分三种模式,IN (默认),OUT,IN OUT
这三种模式适用任何subprogram,但是在使用当中最好不要在函数中使用OUT和IN OUT模式，函数使用中应该尽量避免返回多个值，同时函数对端
影响应该是自由的。换句话说不要改变非本地变量（相对subprogram）。

IN模式介绍：
不指定模式的话默认是IN模式，IN模式的形参，一般用在传输值给被调用的SUBPROGRAM，在subprogram内部，IN形参类似常量，不可以指派值给
它。
可以传输常量，文字，已经被初始化的变量，或者表达式给IN形参数。
IN形参可以设置初始化默认值，当调用带有默认值的形参SUBPROGRAM时，忘记传输值给这些参数的话讲使用默认值。

OUT模式介绍：
OUT模式的参数在SUBPROGRAM中类似变量，在SUBPROGRAM中可以改变OUT模式的形参值，修改的值将影响调用这个SUBPROGRAM的程序的实参的值。
使用举例：
DECLARE
  emp_num       NUMBER(6) := 120;
  bonus         NUMBER(6) := 50;
  emp_last_name VARCHAR2(25);
  PROCEDURE raise_salary (emp_id IN NUMBER, amount IN NUMBER,
                          emp_name OUT VARCHAR2) IS
    BEGIN
      UPDATE employees SET salary = salary + amount WHERE employee_id = emp_id;
      SELECT last_name INTO emp_name FROM employees WHERE employee_id = emp_id;
  END raise_salary;
BEGIN
  raise_salary(emp_num, bonus, emp_last_name);
  DBMS_OUTPUT.PUT_LINE('Salary has been updated for: ' || emp_last_name);
END;
/

必须传输变量给OUT形参，不能传输常量或表达式。调用时OUT形参对应的实参值将丢失，除非使用了NOCOPY或者SUBPROGRAM退出时遇到unhandled
exception.
和变量类似，OUT形参被初始为NULL，因此OUT形参的数据类型不能为定义为NOT NULL的类型，如NATURALN , POSITIVEN。否则调用SUBPROGRAM
时将遭遇VALUE_ERROR异常。
退出SUBPROGRAM前，务必指派有意义的值给OUT 形参数。否则成功退出SUBPROGRAM后，对应的实参将变成NULL。成功退出SUBPROGRAM后，OUT形参
的值将赋予给实参。如果遭遇unhandled exception，OUT形参的值不会赋予给对应的实参。

IN OUT模式举例：
IN OUT模式的形参用于传输初始值，并且返回修改过的值的SUBPROGRAM的调用者。IN OUT形参的对应实参必须是变量，不能是常量或者表达式。
成功退出SUBPROGRAM后，IN OUT形参的值将赋予给实参。如果遭遇unhandled exception，IN OUT形参的值不会赋予给对应的实参。

三种模式对比：

┌─────────────────────────────────────────────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ IN                                                                                      │ OUT                                                                                                         │ IN OUT                                                                                                              │
├─────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ The default                                                                             │ Must be specified                                                                                           │ Must be specified                                                                                                   │
├─────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ Passes values to a subprogram                                                           │ Returns values to the caller                                                                                │ Passes initial values to a subprogram and returns updated values to the caller                                      │
├─────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ Formal parameter acts like a constant                                                   │ Formal parameter acts like an uninitialized variable                                                        │ Formal parameter acts like an initialized variable                                                                  │
├─────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ Formal parameter cannot be assigned a value                                             │ Formal parameter must be assigned a value                                                                   │ Formal parameter should be assigned a value                                                                         │
├─────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ Actual parameter can be a constant, initialized variable, literal, or expression        │ Actual parameter must be a variable                                                                         │ Actual parameter must be a variable                                                                                 │
├─────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ Actual parameter is passed by reference (a pointer to the value is passed in)           │ Actual parameter is passed by value (a copy of the value is passed out) unless NOCOPY is specified          │ Actual parameter is passed by value (a copy of the value is passed in and out) unless NOCOPY is specified           │
└─────────────────────────────────────────────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘


NOCOPY举例：
The optional NOCOPY keyword speeds up processing of large OUT or IN OUT parameters.
The NOCOPY compiler hint increases the possibility of aliasing
 (that is, having two different names refer to the same memory location). This can occur when a global variable appears as an actual
parameter in a subprogram call and then is referenced within the subprogram. The result is indeterminate because it depends on the method
 of parameter passing chosen by the compiler.

DECLARE
   TYPE Definition IS RECORD (
      word    VARCHAR2(20),
      meaning VARCHAR2(200));
   TYPE Dictionary IS VARRAY(2000) OF Definition;
   lexicon Dictionary := Dictionary();
   PROCEDURE add_entry (word_list IN OUT NOCOPY Dictionary) IS
   BEGIN
     word_list(1).word := 'aardvark';
     lexicon(1).word := 'aardwolf';
   END;
BEGIN
   lexicon.EXTEND;
   add_entry(lexicon);
   DBMS_OUTPUT.PUT_LINE(lexicon(1).word);
END;
/

