PostgreSQL research

Lua varidict function

2014-01-02 15:51:52   查看原文>>

Lua 的函数参数允许使用变参, 即参数个数和参数类型都不确定的情况.
这种变量用三个点 ...替代, 并且只能作为最后一个参数项.
例如 : 
以下函数为计算传入值的总和.

function add(...)
  local s = 0
  for i, v in ipairs{...} do  
    s = s+ v
  end
  return s
end
> print(add(1,2,3,4,5))
15


{...}把变参...作为table类型构造器的一个参数, 所以可以用于ipairs.
还有一种用法是把...用于多变量赋值表达式, 例如 : 
local a,b,c = ...
前面我们讲过, 对于这种表达式赋值, 缺失的值赋予nil, 多的丢掉. 所以不会报错.
例如 : 

function foo(...)
  local a,b,c = ...
等同于
function foo(a,b,c)


可变参数...如何和定参一起使用时, 必须放在最后.
例如

function fwrite(fmt, ...)
  return io.write(string.format(fmt,...))
end


第一个参数为fmt, 后面为可变参数.
fwrite()  -- fmt = nil , 可变参数没有
fwrite("a")  -- fmt = "a", 可变参数没有
fwrite("%d%d", 4, 5)   -- fmt = "%d%d", 可变参数没有

判断可变参数里面有没有nil, 可以通过table.pack(...)来判断, 使用table.pack()后, 把多个参数转化成一个表类型, 同时会增加一个n值, 存储表里面的元素个数(不包括n本身).
例如 : 

> x = table.pack(1,2,3,4,5,6,nil,nil)
> print(x.n)
8
> for i=1,#x do
  print(x[i])
end
1
2
3
4
5
6
-- 这个表的长度#x=6, 所以print未打印两个nil. 而使用x.n则打印出8个元素. 这在我们讲table的诡异时讲过.
> for i=1,x.n do
  print(x[i])
end
1
2
3
4
5
6
nil
nil


判断可变参数中有没有nil值的函数举例 : 

> function nonils(...)
>>   local arg = table.pack(...)
>>   for i = 1, arg.n do
>>     if arg[i] == nil then return false end
>>   end
>>   return true
>> end
> print(nonils(2,3,nil))
false
> print(nonils(2,3))
true
> print(nonils())  -- 这里相当于for i=1,0 do 所以就不会循环
true
> print(nonils(nil))
false


