PostgreSQL research

PostgreSQL modify pg_authid's rolname and rolpassword simulate "ALTER ROLE rename to"

2014-01-13 16:50:43   查看原文>>

PostgreSQL 的角色名不能使用SQL语句来修改, 因为它没有修改角色名的语法.

实际上用户的角色信息是存储在pg_authid这个信息表里面的.
postgres=# \d pg_authid
             Table "pg_catalog.pg_authid"
     Column     |           Type           | Modifiers 
----------------+--------------------------+-----------
 rolname        | name                     | not null
 rolsuper       | boolean                  | not null
 rolinherit     | boolean                  | not null
 rolcreaterole  | boolean                  | not null
 rolcreatedb    | boolean                  | not null
 rolcatupdate   | boolean                  | not null
 rolcanlogin    | boolean                  | not null
 rolreplication | boolean                  | not null
 rolconnlimit   | integer                  | not null
 rolpassword    | text                     | 
 rolvaliduntil  | timestamp with time zone | 
Indexes:
    "pg_authid_oid_index" UNIQUE, btree (oid), tablespace "pg_global"
    "pg_authid_rolname_index" UNIQUE, btree (rolname), tablespace "pg_global"
Tablespace: "pg_global"


通过修改这个系统表的数据, 就可以达到修改用户名的目的.
这里还设计密码的修改, 因为md5码是密码和用户名的组合字符串的md5值. 所以用户名修改后, 存储的密码md5值也要修改, 否则是无法验证通过的.
实际例子 : 
创建一个名为TEST的角色, 数据库中区分大小写.

digoal=# create role "TEST" login encrypted password '123';
CREATE ROLE


查询这个角色对应的pg_authid中的信息.

digoal=# select * from pg_authid where rolname='TEST';
-[ RECORD 1 ]--+------------------------------------
rolname        | TEST
rolsuper       | f
rolinherit     | t
rolcreaterole  | f
rolcreatedb    | f
rolcatupdate   | f
rolcanlogin    | t
rolreplication | f
rolconnlimit   | -1
rolpassword    | md5d672445f6a09456ec3e8df468fb34d3b
rolvaliduntil  | 


登录测试 : 

postgres@db-172-16-3-33-> psql -h 172.16.3.150 -p 1921 -U TEST postgres
Password for user TEST: 输入密码123
psql (9.3.2, server 9.3.1)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.
postgres=> 



如果要把用户改成其他名字, 修改pg_authid的两个字段, rolname和rolpassword.
例如我要把用户名从 TEST改成hello, 密码保持123不变.

先要算出123和hello的组合md5值, 用于更新pg_authid.rolpassword
digoal=# select md5('123hello');
-[ RECORD 1 ]-------------------------
md5 | 86fcb4c0551ea48ede7df5ed9626eee7
更新pg_authid.
digoal=# update pg_authid set rolname='hello', rolpassword='md586fcb4c0551ea48ede7df5ed9626eee7' where rolname='TEST';
UPDATE 1


更新后查看用户信息是hello了.

postgres=> \du
                                       List of roles
    Role name    |                   Attributes                   |        Member of        
-----------------+------------------------------------------------+-------------------------
 hello           |                                                | {}



使用新老用户进行远程登录测试 : 

使用原来的TEST用户就无法登录了.
postgres@db-172-16-3-33-> psql -h 172.16.3.150 -p 1921 -U TEST postgres
Password for user TEST: 
psql: FATAL:  password authentication failed for user "TEST"
FATAL:  password authentication failed for user "TEST"
使用hello和密码123可以登录.
postgres@db-172-16-3-33-> psql -h 172.16.3.150 -p 1921 -U hello postgres
Password for user hello: 
psql (9.3.2, server 9.3.1)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.
postgres=> 



注意密码的md5一定也要记得修改, 否则是无法登录的.
