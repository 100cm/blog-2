PostgreSQL research

Lua Proper Tail Calls

2014-01-09 9:54:18   查看原文>>

Lua 函数的一个强大特性之一: 
某些tail calls的结果可以穿透上层函数, 直接返回给客户端.
例如 : 
function f(x) 
  return g(x) 
end
g(x)的结果可以穿透f(x)函数, 直接返回给客户端, 所以在调用g(x)时, 在stack中不需要保存f(x)的信息.
这样做的好处是, 这样的嵌套循环函数即使无限循环, 而不会导致stack溢出.
例如 : 
function foo(n)
  if n>0 then return foo(n-1) end
end
支持穿透的tail call : 
In Lua, only a call with the form return func(args) is a tail call. However, both
func and its arguments can be complex expressions, because Lua evaluates them
before the call. 
For instance, the next call is a tail call:
return x[i].foo(x[j] + a*b, i+j)

以下不能穿透的call举例 : 
return g(x) + 1  -- 在g(x)调用完后还需要在上层函数中执行一个加法 , 所以上层函数还必须在stack中.
return x or g(x)  -- 因为要调整为1个结果, 所以上层函数也必须保留在stack中.
return (g(x))  -- 同上, 因为要调整为1个结果, 所以上层函数也必须保留在stack中.
