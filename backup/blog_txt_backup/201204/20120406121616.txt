PostgreSQL research

pg_xlog_location_diff function is coming from PostgreSQL 9.2

2012-04-06 12:16:16   查看原文>>

pg_xlog_location_diff 这个函数在9.2里面添加的, 用来计算两个transaction log location之间产生了多少xlog, 单位bytes.
例如 : 
创建测试表 : 

postgres=# create table test(id int);
CREATE TABLE


查看当前transaction log location.

postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/C7136F0
(1 row)


插入测试数据

postgres=# insert into test select generate_series(1,1000000);
INSERT 0 1000000


查看当前transaction log location.

postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/1045B1C0
(1 row)


比较两个transaction log location之间产生了多少xlog.

postgres=# select pg_xlog_location_diff('0/1045B1C0','0/C7136F0')/1024/1024;
      ?column?       
---------------------
 61.2799835205078125
(1 row)


查看表的大小

postgres=# select pg_total_relation_size('test')/1024/1024;
 ?column? 
----------
       34
(1 row)


更新测试:

postgres=# update test set id=1;
LOG:  checkpoints are occurring too frequently (1 second apart)
HINT:  Consider increasing the configuration parameter "checkpoint_segments".
UPDATE 1000000


查看当前transaction log location.

postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/1A94E728
(1 row)


比较两个transaction log location之间产生了多少xlog.

postgres=# select pg_xlog_location_diff('0/1A94E728','0/141B6680')/1024/1024;
       ?column?       
----------------------
 103.5939102172851563
(1 row)


以上测试的wal_level=hot_standby.
修改为minimal后重启数据库再次测试如下 :

postgres=# drop table test;
DROP TABLE
postgres=# create table test(id int);
CREATE TABLE
postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/1AF3AB48
(1 row)

postgres=# insert into test select generate_series(1,1000000);
INSERT 0 1000000
postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/1EC81CC0
(1 row)

postgres=# select pg_xlog_location_diff('0/1EC81CC0','0/1AF3AB48')/1024/1024;
      ?column?       
---------------------
 61.2777023315429688
(1 row)

postgres=# update test set id=1;
LOG:  checkpoints are occurring too frequently (2 seconds apart)
HINT:  Consider increasing the configuration parameter "checkpoint_segments".
UPDATE 1000000
postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/25419450
(1 row)

postgres=# select pg_xlog_location_diff('0/25419450','0/1EC81CC0')/1024/1024;
       ?column?       
----------------------
 103.5916900634765625
(1 row)


以上测试checkpoint_segments = 3, 修改为32然后reload数据库重新测试

postgres=# drop table test;
DROP TABLE
postgres=# checkpoint;
CHECKPOINT
postgres=# create table test(id int);
CREATE TABLE
postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/2977C148
(1 row)

postgres=# insert into test select generate_series(1,1000000);
INSERT 0 1000000
postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/2D4C25C0
(1 row)

postgres=# select pg_xlog_location_diff('0/2D4C25C0','0/2977C148')/1024/1024;
      ?column?       
---------------------
 61.2745285034179688
(1 row)

postgres=# update test set id = 1;
UPDATE 1000000
postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/319983F0
(1 row)

postgres=# select pg_xlog_location_diff('0/319983F0','0/2D4C25C0')/1024/1024;
      ?column?       
---------------------
 68.8354949951171875
(1 row)


测试CREATE TABLE AS语句产生多少xlog

postgres=# drop table test2;
DROP TABLE
postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/3AC5C9B0
(1 row)

postgres=# create table test2 as select * from test;
SELECT 1000000
postgres=# select * from pg_current_xlog_insert_location();
 pg_current_xlog_insert_location 
---------------------------------
 0/3AC6C948
(1 row)

postgres=# select pg_xlog_location_diff('0/3AC6C948','0/3AC5C9B0')/1024/1024;
        ?column?        
------------------------
 0.06240081787109375000
(1 row)
postgres=# select pg_total_relation_size('test2')/1024/1024;
 ?column?
----------
       34
(1 row)



【小结】
1. wal_level = minimal对某些操作可以减少WAL的写入. 具体如下

In minimal level, WAL-logging of some bulk operations can be safely skipped, which can make those operations much faster (see Section 14.4.7). Operations in which this optimization can be applied include:

CREATE TABLE AS
CREATE INDEX
CLUSTER
COPY into tables that were created or truncated in the same transaction

2. 使用大的checkpoint_segments可以有效的减少WAL的写入量, 原因是full_page_writes, 每次checkpoint之后第一次改变的page都要写FULL PAGE以便可以从WAL获取完整的恢复页面.


【参考】
https://commitfest.postgresql.org/action/patch_view?id=776
http://www.postgresql.org/docs/devel/static/functions-admin.html
