PostgreSQL research

Use pgbench test Your PostgreSQL DBSystem performace

2011-06-15 16:10:19   查看原文>>

pgbench，可用于模拟真实应用调用数据库SQL的场景。也可用于进行简单的压力测试。
参数如下

postgres@db5-> pgbench --help
pgbench is a benchmarking tool for PostgreSQL.

Usage:
  pgbench [OPTIONS]... [DBNAME]

Initialization options:
  -i           invokes initialization mode
  -F NUM       fill factor
  -s NUM       scaling factor

Benchmarking options:
  -c NUM       number of concurrent database clients (default: 1)
  -C           establish new connection for each transaction
  -D VARNAME=VALUE
               define variable for use by custom script
  -f FILENAME  read transaction script from FILENAME
  -j NUM       number of threads (default: 1)
  -l           write transaction times to log file
  -M {simple|extended|prepared}
               protocol for submitting queries to server (default: simple)
  -n           do not run VACUUM before tests
  -N           do not update tables "pgbench_tellers" and "pgbench_branches"
  -r           report average latency per command
  -s NUM       report this scale factor in output
  -S           perform SELECT-only transactions
  -t NUM       number of transactions each client runs (default: 10)
  -T NUM       duration of benchmark test in seconds
  -v           vacuum all four standard tables before tests

Common options:
  -d           print debugging output
  -h HOSTNAME  database server host or socket directory
  -p PORT      database server port number
  -U USERNAME  connect as specified database user
  --help       show this help, then exit
  --version    output version information, then exit



下面以PostgreSQL 9.0.4带的pgbench版本进行测试。9.1多了一个打印每句SQL的执行时间的功能。
为了模拟比较真实,开启了服务器autovacuum，测试时不使用pgbench的vacuum(使用-n参数)来预先进行垃圾回收。
在进行R:W=1:4的测试时，瓶颈最有可能出现在存储上。

测试环境：

PostgreSQL Database Server : 
CPU : 8核 2GHZ
MEM : 24GB

Storage : 
HP EVA6400 : 71 * 300GB FC 15K
RAID 1/0

pgbench Server 1 : 
CPU : 8核 2GHZ

pgbench Server 2 : 
CPU : 8核 2GHZ



# 数据库参数配置,

listen_addresses = '*'          # what IP address(es) to listen on;
port = 1921                             # (change requires restart)
max_connections = 2000                  # (change requires restart)
superuser_reserved_connections = 13     # (change requires restart)
unix_socket_directory = '/database/pgdata/1921/pg_root'         # (change requires restart)
unix_socket_permissions = 0700          # begin with 0 to use octal notation
password_encryption = on
tcp_keepalives_idle = 60                # TCP_KEEPIDLE, in seconds;
tcp_keepalives_interval = 30            # TCP_KEEPINTVL, in seconds;
tcp_keepalives_count = 9                # TCP_KEEPCNT;
shared_buffers = 2048MB                 # min 128kB
maintenance_work_mem = 2048MB           # min 1MB
max_stack_depth = 8MB                   # min 100kB
max_files_per_process = 10000           # min 25
vacuum_cost_delay = 10ms                # 0-100 milliseconds
wal_level = hot_standby                 # minimal, archive, or hot_standby
synchronous_commit = off                # immediate fsync at commit
wal_buffers = 65536kB                   # min 32kB
wal_writer_delay = 10ms         # 1-10000 milliseconds
checkpoint_segments = 32                # in logfile segments, min 1, 16MB each
checkpoint_timeout = 10min              # range 30s-1h
archive_mode = on               # allows archiving to be done
archive_command = '/bin/date'           # command to use to archive a logfile segment
max_wal_senders = 32            # max number of walsender processes
wal_keep_segments = 100         # in logfile segments, 16MB each; 0 disables
random_page_cost = 2.0                  # same scale as above
effective_cache_size = 20480MB
constraint_exclusion = partition        # on, off, or partition
log_destination = 'csvlog'              # Valid values are combinations of
logging_collector = on          # Enable capturing of stderr and csvlog
log_directory = '/var/applog/pg_log'            # directory where log files are written,
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,
log_truncate_on_rotation = on           # If on, an existing log file of the
log_rotation_age = 1d                   # Automatic rotation of logfiles will
log_rotation_size = 10MB                # Automatic rotation of logfiles will 
log_min_duration_statement = 1000ms     # -1 is disabled, 0 logs all statements
log_checkpoints = on
log_lock_waits = on                     # log lock waits >= deadlock_timeout
log_statement = 'ddl'                   # none, ddl, mod, all
track_activity_query_size = 2048        # (change requires restart)
autovacuum = on                 # Enable autovacuum subprocess?  'on' 
log_autovacuum_min_duration = 0 # -1 disables, 0 logs all actions and
datestyle = 'iso, mdy'
lc_messages = 'C'                       # locale for system error message
lc_monetary = 'C'                       # locale for monetary formatting
lc_numeric = 'C'                        # locale for number formatting
lc_time = 'C'                           # locale for time formatting
default_text_search_config = 'pg_catalog.english'
deadlock_timeout = 1s
# 开启SQL跟踪
shared_preload_libraries = 'pg_stat_statements'
custom_variable_classes = 'pg_stat_statements'          # list of custom variable class names
pg_stat_statements.max = 10000
pg_stat_statements.track = all



# 本次测试模型使用pgbench自带的,如果是用的自己的模板,需要自己造测试数据.
# 初始化数据

pgbench -i -F 100 -s 500 -h 127.0.0.1 -U digoal digoal


创建4个表，大小分别如下

pgbench_accounts
50000000
pgbench_branches
500
pgbench_tellers
5000
pgbench_history


表结构如下

digoal=> \d pgbench_accounts
   Table "digoal.pgbench_accounts"
  Column  |     Type      | Modifiers 
----------+---------------+-----------
 aid      | integer       | not null
 bid      | integer       | 
 abalance | integer       | 
 filler   | character(84) | 
Indexes:
    "pgbench_accounts_pkey" PRIMARY KEY, btree (aid)

digoal=> \d pgbench_branches
   Table "digoal.pgbench_branches"
  Column  |     Type      | Modifiers 
----------+---------------+-----------
 bid      | integer       | not null
 bbalance | integer       | 
 filler   | character(88) | 
Indexes:
    "pgbench_branches_pkey" PRIMARY KEY, btree (bid)

digoal=> \d pgbench_tellers
    Table "digoal.pgbench_tellers"
  Column  |     Type      | Modifiers 
----------+---------------+-----------
 tid      | integer       | not null
 bid      | integer       | 
 tbalance | integer       | 
 filler   | character(84) | 
Indexes:
    "pgbench_tellers_pkey" PRIMARY KEY, btree (tid)

digoal=> \d pgbench_history
          Table "digoal.pgbench_history"
 Column |            Type             | Modifiers 
--------+-----------------------------+-----------
 tid    | integer                     | 
 bid    | integer                     | 
 aid    | integer                     | 
 delta  | integer                     | 
 mtime  | timestamp without time zone | 
 filler | character(22)               | 


# 数据库大小

digoal=> select pg_database_size('digoal')/1024/1024/1024||' GB';
 ?column? 
----------
 7 GB
(1 row)



测试前使用pgfincore将除历史表以外的表放入内存。

digoal=> select * from pgmincore('pgbench_accounts');
                    relpath                     | block_size | block_disk | block_mem | group_mem 
------------------------------------------------+------------+------------+-----------+-----------
 pg_tblspc/16386/PG_9.0_201008051/16387/16401   |       4096 |    1048576 |    949382 |     44941
 pg_tblspc/16386/PG_9.0_201008051/16387/16401.1 |       4096 |     618108 |    581867 |     16723
(2 rows)

digoal=> select * from pgmincore('pgbench_branches');
                   relpath                    | block_size | block_disk | block_mem | group_mem 
----------------------------------------------+------------+------------+-----------+-----------
 pg_tblspc/16386/PG_9.0_201008051/16387/16389 |       4096 |        718 |       718 |         1
(1 row)

digoal=> select * from pgmincore('pgbench_tellers');
                   relpath                    | block_size | block_disk | block_mem | group_mem 
----------------------------------------------+------------+------------+-----------+-----------
 pg_tblspc/16386/PG_9.0_201008051/16387/16392 |       4096 |        938 |       938 |         1
(1 row)



测试时使用pgbench调用外部脚本的选项。
注意 : 
这里初始化的时候scale使用了500，也就是创建了5000W条account记录.
压力测试时,为了避免update 冲突, -c 参数应该小于500。（越小，冲突可能性越小）
-j  参数必须是可被 -c 参数整除 . (例如 -c 15 -j 10 不允许,因为15/10不能整除. -c 15 -j 3是允许的)

分别测试了3个脚本：(只读，读写，读写(函数))
只读测试结果 :    tps : 57296   LOAD : 9.06
读写测试结果 :    tps : 7841     LOAD : 6.43
读写(函数)测试结果 :    tps : 8968   LOAD :  4.37

下面是具体的测试数据：

1. 只读测试

# 首先清空SQL统计信息,方便后面统计
digoal=# select pg_stat_statements_reset();

# 脚本内容
\set naccounts 100000 * :scale
\setrandom aid 1 :naccounts
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;

# 测试时间段内的数据库负载
top - 14:47:08 up 7 days, 23:59,  2 users,  load average: 9.06, 8.74, 6.61
Tasks: 229 total,  19 running, 210 sleeping,   0 stopped,   0 zombie
Cpu(s): 54.5%us, 12.0%sy,  0.0%ni, 22.9%id,  0.0%wa,  0.4%hi, 10.2%si,  0.0%st
Mem:  24682088k total, 23569324k used,  1112764k free,    20116k buffers
Swap: 16779884k total,      296k used, 16779588k free, 21832984k cached

# pgbench Server 1 的测试结果
postgres@db-192-168-xx-> pgbench -c 25 -j 25 -M prepared -n -s 500 -T 60 -f ./pgbench.sql -h 192.168.173.66 -p 1921 -U digoal digoal
transaction type: Custom query
scaling factor: 500
query mode: prepared
number of clients: 25
number of threads: 25
duration: 60 s
number of transactions actually processed: 1722341
tps = 28642.093113 (including connections establishing)
tps = 28654.758879 (excluding connections establishing)

# pgbench Server 2 的测试结果
postgres@db-bak-192-168-xx-> pgbench -c 25 -j 25 -M prepared -n -s 500 -T 60 -f ./pgbench.sql -h 192.168.173.66 -p 1921 -U digoal digoal
transaction type: Custom query
scaling factor: 500
query mode: prepared
number of clients: 25
number of threads: 25
duration: 60 s
number of transactions actually processed: 1724716
tps = 28654.279301 (including connections establishing)
tps = 28662.002556 (excluding connections establishing)

# 查看数据库中SQL的统计结果,与上面的测试结果一致。
digoal=# SELECT query, calls, total_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
                                    query                                    |  calls  |    total_time    |  rows   |     hit_percen
t     
-----------------------------------------------------------------------------+---------+------------------+---------+---------------
------
 SELECT abalance FROM pgbench_accounts WHERE aid = $1;                       | 3447057 | 1896.21127399291 | 3447057 | 95.40027515756
15473



2. 读写测试

# 首先清空SQL统计信息,方便后面统计
digoal=# select pg_stat_statements_reset();

# 脚本内容
\set nbranches :scale
\set ntellers 10 * :scale
\set naccounts 100000 * :scale
\setrandom aid 1 :naccounts
\setrandom bid 1 :nbranches
\setrandom tid 1 :ntellers
\setrandom delta -5000 5000
BEGIN;
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CLOCK_TIMESTAMP());
END;

# 测试时间段内的数据库负载
top - 14:50:55 up 8 days, 2 min,  2 users,  load average: 6.43, 5.94, 5.83
Tasks: 209 total,   2 running, 207 sleeping,   0 stopped,   0 zombie
Cpu(s):  0.1%us,  1.7%sy,  0.0%ni, 86.0%id,  9.7%wa,  0.0%hi,  2.5%si,  0.0%st
Mem:  24682088k total, 24609248k used,    72840k free,    22900k buffers
Swap: 16779884k total,      328k used, 16779556k free, 23244488k cached

# pgbench Server 1 的测试结果
postgres@db-192-168-xx-> pgbench -c 15 -j 15 -M prepared -n -s 500 -T 60 -f ./pgbench.sql -h 192.168.173.66 -p 1921 -U digoal digoal
transaction type: Custom query
scaling factor: 500
query mode: prepared
number of clients: 15
number of threads: 15
duration: 60 s
number of transactions actually processed: 298054
tps = 4962.600179 (including connections establishing)
tps = 4963.328133 (excluding connections establishing)

# pgbench Server 2 的测试结果
postgres@db-bak-192-168-xx-> pgbench -c 15 -j 15 -M prepared -n -s 500 -T 60 -f ./pgbench.sql -h 192.168.173.66 -p 1921 -U digoal digoal
transaction type: Custom query
scaling factor: 500
query mode: prepared
number of clients: 15
number of threads: 15
duration: 60 s
number of transactions actually processed: 172939
tps = 2879.138242 (including connections establishing)
tps = 2880.133417 (excluding connections establishing)

# 查看数据库中SQL的统计结果,与上面的测试结果一致。
digoal=# SELECT query, calls, total_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
                                                 query                                                 | calls  |    total_time    |
  rows  |     hit_percent      
-------------------------------------------------------------------------------------------------------+--------+------------------+
--------+----------------------
 UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2;                                  | 470993 | 728.671936000011 |
 470993 |  82.1983131773130262
 UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2;                                  | 470993 | 30.2564640000121 |
 470993 |  99.9948907810998778
 UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2;                                   | 470993 | 28.5014480000199 |
 470993 |  99.9802910232559609
 INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CLOCK_TIMESTAMP()); | 470993 | 19.9543690000304 |
 470993 |  99.3704301893951686
 SELECT abalance FROM pgbench_accounts WHERE aid = $1;                                                 | 470993 |  7.6473580000007 |
 470993 | 100.0000000000000000
(5 rows)



3. 读写测试(函数)

# 主要是为了对比调用函数和直接使用SQL做同样的事情的性能差别
# 创建如下函数
digoal=> create or replace function pgbench(i_aid int,i_bid int,i_tid int,i_delta int) returns setof int as $BODY$
declare
begin          
UPDATE pgbench_accounts SET abalance = abalance + i_delta WHERE aid = i_aid;
UPDATE pgbench_tellers SET tbalance = tbalance + i_delta WHERE tid = i_tid; 
UPDATE pgbench_branches SET bbalance = bbalance + i_delta WHERE bid = i_bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (i_tid, i_bid, i_aid, i_delta, CURRENT_TIMESTAMP);
return query SELECT abalance FROM pgbench_accounts WHERE aid = i_aid;                                              
end;                                                                 
$BODY$ language plpgsql;

# 清空SQL统计信息,方便后面统计
digoal=# select pg_stat_statements_reset();

# 脚本内容
\set nbranches :scale
\set ntellers 10 * :scale
\set naccounts 100000 * :scale
\setrandom aid 1 :naccounts
\setrandom bid 1 :nbranches
\setrandom tid 1 :ntellers
\setrandom delta -5000 5000
select pgbench(:aid,:bid,:tid,:delta);

# 测试时间段内的数据库负载
top - 15:44:13 up 8 days, 56 min,  2 users,  load average: 4.37, 2.11, 1.58
Tasks: 209 total,  10 running, 199 sleeping,   0 stopped,   0 zombie
Cpu(s): 53.9%us,  8.7%sy,  0.0%ni, 28.2%id,  4.9%wa,  0.2%hi,  4.0%si,  0.0%st
Mem:  24682088k total, 24611580k used,    70508k free,    18344k buffers
Swap: 16779884k total,      208k used, 16779676k free, 23313096k cached

# pgbench Server 1 的测试结果
postgres@db-192-168-173-82-> pgbench -c 15 -j 15 -M prepared -n -s 500 -T 60 -f ./pgbench.sql -h 192.168.173.66 -p 1921 -U digoal digoal
transaction type: Custom query
scaling factor: 500
query mode: prepared
number of clients: 15
number of threads: 15
duration: 60 s
number of transactions actually processed: 265757
tps = 4425.763818 (including connections establishing)
tps = 4427.260370 (excluding connections establishing)

# pgbench Server 2 的测试结果
postgres@db-bak-192-168-173-95-> pgbench -c 15 -j 15 -M prepared -n -s 500 -T 60 -f ./pgbench.sql -h 192.168.173.66 -p 1921 -U digoal digoal
transaction type: Custom query
scaling factor: 500
query mode: prepared
number of clients: 15
number of threads: 15
duration: 60 s
number of transactions actually processed: 272930
tps = 4543.256940 (including connections establishing)
tps = 4544.110079 (excluding connections establishing)



[脚本语法参考]
http://www.postgresql.org/docs/9.1/static/pgbench.html
