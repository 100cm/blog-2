PostgreSQL research

Oracle funciton convert to PostgreSQL plpgsql funciton example - 1

2012-11-09 13:45:11   查看原文>>

在日常使用中可能经常用到Oracle到PostgreSQL之间的函数转换. 下面举几个例子, 可以作为参考.

1. Oracle : 

CREATE OR REPLACE FUNCTION func_1 ( digoal_no    IN VARCHAR2,  --卡号
                                                  cardPwd   IN VARCHAR2, --密码
                                                  digoal_oid   IN VARCHAR2  --订单号
                                                                       )
   RETURN SYS_REFCURSOR
IS
   result         SYS_REFCURSOR;                                -- 输出的游标
   v_result       NUMBER;                                       -- 销卡结果
   v_digoal_pamount    NUMBER;                                       -- 卡实际面额
   v_sign         VARCHAR2 (256);
   v_digoal_no       VARCHAR2 (50);
   v_userPwd      VARCHAR2 (50);
   v_digoal_oid      VARCHAR2 (50);
   v_cardPwd      VARCHAR2 (50);
   v_digoal_amount   NUMBER;
   v_status       CHAR (1);
   v_expriydate   DATE;
   v_row          NUMBER;
BEGIN
   v_result := 200;
   v_digoal_pamount := 0;
   v_digoal_no := digoal_no;
   v_userPwd := cardPwd;
   v_digoal_oid := digoal_oid;
   v_row := 0;
   --根据卡号获取记录
   SELECT cardpwd,
          digoal_amount,
          status,
          expiretime,
          verifystring
     INTO v_cardPwd,
          v_digoal_amount,
          v_status,
          v_expriydate,
          v_sign
     FROM TBL_CARD_INFO
    WHERE digoal_no = v_digoal_no;
   --密码匹配
   IF (v_cardPwd <> v_userPwd)
   THEN
      v_result := 140002;
   ELSE
      IF (v_expriydate IS NULL)
      THEN
         v_result := 140001;
      --过期时间判断
      ELSE
         IF (SYSDATE >= v_expriydate)
         THEN
            v_result := 140003;
         ELSE
            --卡状态判断
            IF (v_status = '0')
            THEN
               --初始状态
               v_result := 140001;
            ELSIF (v_status = '2')
            THEN
               --封停状态
               v_result := 140010;
            ELSIF (v_status = '3')
            THEN
               --过期状态
               v_result := 140003;
            ELSIF (v_status = '4')
            THEN
               --已使用状态
               v_result := 140004;
            ELSE
               --正常状态
               UPDATE TBL_CARD_INFO
                  SET status = '4',
                      usetime = SYSDATE,
                      updatetime = SYSDATE,
                      remark = v_digoal_oid
                WHERE digoal_no = v_digoal_no AND status <> '4';
               v_row := SQL%ROWCOUNT;
               IF (v_row = 1)
               THEN
                  --判断影响行,如果为一行则表示成功消卡
                  v_digoal_pamount := v_digoal_amount;
               ELSE
                  --判断影响行,如果为零行，则表示卡状态已经被改变
                  v_digoal_pamount := 0;
                  v_result := 140004;
               END IF;
            END IF;
         END IF;
      END IF;
   END IF;
   COMMIT;
   OPEN result FOR
      SELECT v_result AS result, v_digoal_pamount AS digoal_pamount, v_sign AS signStr
        FROM DUAL;
   RETURN result;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      v_result := 140001;
      OPEN result FOR
         SELECT v_result AS result,
                v_digoal_pamount AS digoal_pamount,
                v_sign AS signStr
           FROM DUAL;
      RETURN result;
   WHEN OTHERS
   THEN
      ROLLBACK;
      v_result := 140009;
      OPEN result FOR
         SELECT v_result AS result,
                v_digoal_pamount AS digoal_pamount,
                v_sign AS signStr
           FROM DUAL;
      RETURN result;
END func_1;


 
1. PostgreSQL : 
修改几处, 
1. 输入变量名与表内字段重名, 所以需要修改输入变量名.
2. 游标输出改成record输出.
3. 增加exception信息捕获和输出.
RAISE notice 'SQLSTATE:%, SQLERRM:%.', SQLSTATE, SQLERRM;
4. if else end if;太多, 其中一个改成CASE END CASE;
5. 字段类型名修改, 这里使用text, 以后如果表的字段长度扩充的, 不需要修改这个函数.
6. sysdate对应now().
7. 获取行数v_row := SQL%ROWCOUNT;对应 GET DIAGNOSTICS v_row = ROW_COUNT;

CREATE OR REPLACE FUNCTION func_1 
(i_digoal_no  IN text,  -- 卡号
 i_cardpwd   IN text,  -- 密码
 i_digoal_oid   IN text,  -- 订单号
 v_result  OUT numeric,  -- 销卡结果
 v_digoal_pamount  OUT numeric,  -- 卡实际面额
 v_sign    OUT  text
) returns record as $_$
DECLARE
   v_digoal_no       text;
   v_userpwd      text;
   v_digoal_oid      text;
   v_cardpwd      text;
   v_digoal_amount   numeric;
   v_status       char(1);
   v_expriydate   timestamp without time zone;
   v_row          INT8;
BEGIN
   v_result := 200;
   v_digoal_pamount := 0;
   v_digoal_no := i_digoal_no;
   v_userpwd := i_cardPwd;
   v_digoal_oid := i_digoal_oid;
   v_row := 0;
   -- 根据卡号获取记录
   SELECT cardpwd,
          digoal_amount,
          status,
          expiretime,
          verifystring
     INTO v_cardpwd,
          v_digoal_amount,
          v_status,
          v_expriydate,
          v_sign
     FROM TBL_CARD_INFO
    WHERE digoal_no = v_digoal_no limit 1;
   IF NOT FOUND THEN
      v_result := 140001;
      RETURN;
   END IF;
   -- 密码匹配
   IF (v_cardpwd <> v_userpwd) THEN
      v_result := 140002;
   ELSE
      IF (v_expriydate IS NULL) THEN
         v_result := 140001;
      -- 过期时间判断
      ELSE
         IF (now() >= v_expriydate) THEN
            v_result := 140003;
         ELSE
            --卡状态判断
            CASE v_status
     WHEN '0' THEN
        --初始状态
               v_result := 140001;
            WHEN '2' THEN
               --封停状态
               v_result := 140010;
            WHEN '3' THEN
               --过期状态
               v_result := 140003;
            WHEN '4' THEN
               --已使用状态
               v_result := 140004;
            ELSE
               --正常状态
               UPDATE TBL_CARD_INFO
                  SET status = '4',
                      usetime = now(),
                      updatetime = now(),
                      remark = v_digoal_oid
                WHERE digoal_no = v_digoal_no AND status <> '4';
               GET DIAGNOSTICS v_row = ROW_COUNT;
               IF (v_row = 1) THEN
                  --判断影响行,如果为一行则表示成功消卡
                  v_digoal_pamount := v_digoal_amount;
               ELSE
                  --判断影响行, 如果为零行，则表示卡状态已经被改变
                  v_digoal_pamount := 0;
                  v_result := 140004;
               END IF;
/* 这里也可以使用FOUND变量来进行判断, 代替上面的IF ... THEN ... ELSE ... END IF;
               IF FOUND THEN
                 v_digoal_pamount := v_digoal_amount;
               ELSE
                 v_digoal_pamount := 0;
                 v_result := 140004;
               END IF;
*/
            END CASE;
         END IF;
      END IF;
   END IF;
   RETURN;
EXCEPTION 
  WHEN OTHERS THEN
    v_result := 140009;
    RAISE notice 'SQLSTATE:%, SQLERRM:%.', SQLSTATE, SQLERRM;
    RETURN;
END;
$_$ language plpgsql;



2. Oracle : 

CREATE OR REPLACE FUNCTION func_2 (
   dealerId       IN NUMBER,                                            --商户编号
   skyId          IN NUMBER,                                             --密码
   digoal_oid        IN VARCHAR2,                                           --订单号
   paydigoal_oid     IN VARCHAR2,                                         --支付订单号
   orderMoney     IN NUMBER,                                      --订单金额，单位：分
   digoal       IN NUMBER,                                      --支付金额，单位：分
   status         IN VARCHAR2,                                            --状态
   failureCause   IN VARCHAR2,                                          --失败原因
   terminalIp     IN VARCHAR2,                                          --终端IP
   requestIp      IN VARCHAR2,                                          --请求IP
   serverId       IN VARCHAR2,                                          --服务编号
   areaId         IN VARCHAR2                                           --区域编号
                             )
   RETURN SYS_REFCURSOR
IS
   result         SYS_REFCURSOR;
   v_result           INTEGER;                                            --输出的值
   v_dealerId       NUMBER (8);                                         --商户编号
   v_skyId          NUMBER (10);                                          --密码
   v_digoal_oid        VARCHAR2 (50);                                       --订单号
   v_paydigoal_oid     VARCHAR2 (50);                                     --支付订单号
   v_orderMoney     NUMBER (8);                                    --订单金额，单位：分
   v_digoal       NUMBER (8);                                    --支付金额，单位：分
   v_status         VARCHAR2 (1);                                         --状态
   v_failureCause   VARCHAR2 (6);                                       --失败原因
   v_terminalIp     VARCHAR2 (15);                                      --终端IP
   v_requestIp      VARCHAR2 (15);                                      --请求IP
   v_serverId       VARCHAR2 (6);                                       --服务编号
   v_areaId         VARCHAR2 (6);                                       --区域编号
   v_b_digoal        NUMBER (10);
   v_remindAmount   NUMBER (10);
   v_dealerStatus   VARCHAR2 (1);
BEGIN
   v_result := 200;
   v_b_digoal := 0;
   v_dealerId := dealerId;
   v_skyId := skyId;
   v_digoal_oid := digoal_oid;
   v_paydigoal_oid := paydigoal_oid;
   v_orderMoney := orderMoney;
   v_digoal := digoal;
   v_status := status;
   v_failureCause := failureCause;
   v_terminalIp := terminalIp;
   v_requestIp := requestIp;
   v_serverId := serverId;
   v_areaId := areaId;
   --获取经销商记录
   SELECT b_digoal, remindamount, status
     INTO v_b_digoal, v_remindAmount, v_dealerStatus
     FROM TBL_DIRECT_DEALER_INFO
    WHERE dealerId = v_dealerId
   FOR UPDATE;
   IF (v_status = '0')
   THEN
      --充值成功
      --更新余额
      v_b_digoal := v_b_digoal - v_digoal;
      IF (v_b_digoal <= v_remindAmount)
      THEN
         --如果余额小于提醒金额,更改经销商状态
         v_dealerStatus := '2';
      END IF;
      UPDATE TBL_DIRECT_DEALER_INFO
         SET b_digoal = b_digoal - v_digoal, status = v_dealerStatus
       WHERE dealerId = v_dealerId;
      --插入直充记录
      INSERT INTO tbl_direct_pay_info (ID,
                                       DEALERID,
                                       SKYID,
                                       digoal_oid,
                                       PAYdigoal_oid,
                                       ORDERMONEY,
                                       digoal,
                                       STATUS,
                                       FAILURECAUSE,
                                       digoal_time,
                                       TERMINALIP,
                                       b_digoal,
                                       REQUESTIP,
                                       SERVERID,
                                       AREAID)
           VALUES (SEQ_DIRECT_PAY_INFO.NEXTVAL,
                   v_dealerId,
                   v_skyId,
                   v_digoal_oid,
                   v_paydigoal_oid,
                   v_orderMoney,
                   v_digoal,
                   v_status,
                   v_failureCause,
                   SYSDATE,
                   v_terminalIp,
                   v_b_digoal,
                   v_requestIp,
                   v_serverId,
                   v_areaId);
   ELSIF (v_status = '1')
   THEN
      --充值失败
      INSERT INTO tbl_direct_pay_info (ID,
                                       DEALERID,
                                       SKYID,
                                       digoal_oid,
                                       PAYdigoal_oid,
                                       ORDERMONEY,
                                       digoal,
                                       STATUS,
                                       FAILURECAUSE,
                                       digoal_time,
                                       TERMINALIP,
                                       b_digoal,
                                       REQUESTIP,
                                       SERVERID,
                                       AREAID)
           VALUES (SEQ_DIRECT_PAY_INFO.NEXTVAL,
                   v_dealerId,
                   v_skyId,
                   v_digoal_oid,
                   v_paydigoal_oid,
                   v_orderMoney,
                   0,
                   v_status,
                   v_failureCause,
                   SYSDATE,
                   v_terminalIp,
                   v_b_digoal,
                   v_requestIp,
                   v_serverId,
                   v_areaId);
   END IF;
   COMMIT;
   OPEN result FOR
         SELECT v_result AS result,
                v_b_digoal AS b_digoal
           FROM DUAL;
   RETURN result;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      v_result := 150007;
      OPEN result FOR
         SELECT v_result AS result,
                v_b_digoal AS b_digoal
           FROM DUAL;
      RETURN result;
   WHEN OTHERS
   THEN
      ROLLBACK;
      v_result := 150012;
      OPEN result FOR
         SELECT v_result AS result,
                v_b_digoal AS b_digoal
           FROM DUAL;
      RETURN result;
END func_2;



2. PostgreSQL : 
1. 序列如果不在优先路径的话, 可以使用'schema.seq_name'::regclass . 

CREATE OR REPLACE FUNCTION func_2 
(
   i_dealerId       IN numeric,                                            --商户编号
   i_skyId          IN numeric,                                             --密码
   i_digoal_oid        IN text,                                           --订单号
   i_paydigoal_oid     IN text,                                         --支付订单号
   i_orderMoney     IN numeric,                                      --订单金额，单位：分
   i_digoal       IN numeric,                                      --支付金额，单位：分
   i_status         IN text,                                            --状态
   i_failureCause   IN text,                                          --失败原因
   i_terminalIp     IN text,                                          --终端IP
   i_requestIp      IN text,                                          --请求IP
   i_serverId       IN text,                                          --服务编号
   i_areaId         IN text,                                           --区域编号
   v_result       OUT    INT,                                           --输出的值
   v_b_digoal      OUT  numeric (10)
)
AS $_$
DECLARE
   v_dealerId       numeric (8);                                         --商户编号
   v_skyId          numeric (10);                                          --密码
   v_digoal_oid        text;                                       --订单号
   v_paydigoal_oid     text;                                     --支付订单号
   v_orderMoney     numeric (8);                                    --订单金额，单位：分
   v_digoal       numeric (8);                                    --支付金额，单位：分
   v_status         text;                                         --状态
   v_failureCause   text;                                       --失败原因
   v_terminalIp     text;                                      --终端IP
   v_requestIp      text;                                      --请求IP
   v_serverId       text;                                       --服务编号
   v_areaId         text;                                       --区域编号
   v_remindAmount   numeric (10);
   v_dealerStatus   text;
BEGIN
   v_result := 200;
   v_b_digoal := 0;
   v_dealerId := i_dealerId;
   v_skyId := i_skyId;
   v_digoal_oid := i_digoal_oid;
   v_paydigoal_oid := i_paydigoal_oid;
   v_orderMoney := i_orderMoney;
   v_digoal := i_digoal;
   v_status := i_status;
   v_failureCause := i_failureCause;
   v_terminalIp := i_terminalIp;
   v_requestIp := i_requestIp;
   v_serverId := i_serverId;
   v_areaId := i_areaId;
   --获取经销商记录
   SELECT b_digoal, remindamount, status
     INTO v_b_digoal, v_remindAmount, v_dealerStatus
     FROM TBL_DIRECT_DEALER_INFO
    WHERE dealerId = v_dealerId
   FOR UPDATE;
   IF NOT FOUND THEN
     v_result := 150007;
     RETURN;
   END IF;
   IF (v_status = '0')
   THEN
      --充值成功
      --更新余额
      v_b_digoal := v_b_digoal - v_digoal;
      IF (v_b_digoal <= v_remindAmount) THEN
         --如果余额小于提醒金额,更改经销商状态
         v_dealerStatus := '2';
      END IF;
      UPDATE TBL_DIRECT_DEALER_INFO
         SET b_digoal = b_digoal - v_digoal, status = v_dealerStatus
       WHERE dealerId = v_dealerId;
      --插入直充记录
      INSERT INTO tbl_direct_pay_info (ID,
                                       DEALERID,
                                       SKYID,
                                       digoal_oid,
                                       PAYdigoal_oid,
                                       ORDERMONEY,
                                       digoal,
                                       STATUS,
                                       FAILURECAUSE,
                                       digoal_time,
                                       TERMINALIP,
                                       b_digoal,
                                       REQUESTIP,
                                       SERVERID,
                                       AREAID)
           VALUES (nextval('seq_direct_pay_info'::regclass),
                   v_dealerId,
                   v_skyId,
                   v_digoal_oid,
                   v_paydigoal_oid,
                   v_orderMoney,
                   v_digoal,
                   v_status,
                   v_failureCause,
                   now(),
                   v_terminalIp,
                   v_b_digoal,
                   v_requestIp,
                   v_serverId,
                   v_areaId);
   ELSIF (v_status = '1') THEN
      --充值失败
      INSERT INTO tbl_direct_pay_info (ID,
                                       DEALERID,
                                       SKYID,
                                       digoal_oid,
                                       PAYdigoal_oid,
                                       ORDERMONEY,
                                       digoal,
                                       STATUS,
                                       FAILURECAUSE,
                                       digoal_time,
                                       TERMINALIP,
                                       b_digoal,
                                       REQUESTIP,
                                       SERVERID,
                                       AREAID)
           VALUES (nextval('seq_direct_pay_info'::regclass),
                   v_dealerId,
                   v_skyId,
                   v_digoal_oid,
                   v_paydigoal_oid,
                   v_orderMoney,
                   0,
                   v_status,
                   v_failureCause,
                   now(),
                   v_terminalIp,
                   v_b_digoal,
                   v_requestIp,
                   v_serverId,
                   v_areaId);
   END IF;
   RETURN;
EXCEPTION
   WHEN OTHERS THEN
      v_result := 150012;
      RAISE notice 'SQLSTATE:%, SQLERRM:%.', SQLSTATE, SQLERRM;
      RETURN;
END;
$_$ language plpgsql;



【参考】
1. http://www.postgresql.org/docs/9.2/static/plpgsql.html
2. http://www.postgresql.org/docs/9.2/static/plpgsql-statements.html
3. src/pl/plpgsql/src/plerrcodes.h
4. src/backend/utils/errcodes.txt
5.
The second method to determine the effects of a command is to check the special variable named FOUND, which is of type boolean. FOUND starts out false within each PL/pgSQL function call. It is set by each of the following types of statements:

1. A SELECT INTO statement sets FOUND true if a row is assigned, false if no row is returned.
2. A PERFORM statement sets FOUND true if it produces (and discards) one or more rows, false if no row is produced.
3. UPDATE, INSERT, and DELETE statements set FOUND true if at least one row is affected, false if no row is affected.
4. A FETCH statement sets FOUND true if it returns a row, false if no row is returned.
5. A MOVE statement sets FOUND true if it successfully repositions the cursor, false otherwise.
6. A FOR or FOREACH statement sets FOUND true if it iterates one or more times, else false. FOUND is set this way when the loop exits; inside the execution of the loop, FOUND is not modified by the loop statement, although it might be changed by the execution of other statements within the loop body.
7. RETURN QUERY and RETURN QUERY EXECUTE statements set FOUND true if the query returns at least one row, false if no row is returned.
8. Other PL/pgSQL statements do not change the state of FOUND. Note in particular that EXECUTE changes the output of GET DIAGNOSTICS, but does not change FOUND.
9. FOUND is a local variable within each PL/pgSQL function; any changes to it affect only the current function.


