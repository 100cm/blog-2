PostgreSQL research

timestamptz_out and EncodeDateTime modified, no timezone and BC output.

2012-10-09 11:24:13   查看原文>>

前段时间一位兄弟问到的问题, 他们需要从GreenPlum中抽取数据到Oracle数据库, 对于timestamptz类型, 导出的数据可能带了时区和公元前的信息, 在导入Oracle前需要做文本处理。所以显得比较麻烦.
那么有没有参数可以关闭时区和公元前的显示呢?
datestyle是一个时间格式的显示参数, 但是没有关闭时区和公元前的显示的效果.
比较通用的解决办法是使用to_char进行格式化输出. 但是当你的表很多的时候, 编辑起来就非常麻烦了.
所以能不能有其他办法呢?
下面是通过修改源码, 来实现这个目的, 
1. 去除timetz或者timestamptz的时区以及公元前标示的显示.
2. 去除date类型的公元前标示的显示.
3. 仅仅改变显示, 不改变数据存储.
涉及的修改如下 : 
1. 
src/backend/utils/adt/timestamp.c

00484 timestamptz_out(PG_FUNCTION_ARGS)
00485 {
00486     TimestampTz dt = PG_GETARG_TIMESTAMPTZ(0);
00487     char       *result;
00488     int         tz;
00489     struct pg_tm tt,
00490                *tm = &tt;
00491     fsec_t      fsec;
00492     const char *tzn;
00493     char        buf[MAXDATELEN + 1];
00494 
00495     if (TIMESTAMP_NOT_FINITE(dt))
00496         EncodeSpecialTimestamp(dt, buf);
00497     else if (timestamp2tm(dt, &tz, tm, &fsec, &tzn, NULL) == 0)
            // old src // EncodeDateTime(tm, fsec, true, tz, tzn, DateStyle, buf); 
            // modified by digoal , 不打印时区
     EncodeDateTime(tm, fsec, false, 0, NULL, DateStyle, buf);
            // end modified by digoal
00499     else
00500         ereport(ERROR,
00501                 (errcode(ERRCODE_DATETIME_VALUE_OUT_OF_RANGE),
00502                  errmsg("timestamp out of range")));
00503 
00504     result = pstrdup(buf);
00505     PG_RETURN_CSTRING(result);
00506 }



2. 
src/backend/utils/adt/datetime.c

03637 /* EncodeDateOnly()
03638  * Encode date as local time.
03639  */
03640 void
03641 EncodeDateOnly(struct pg_tm * tm, int style, char *str)
03642 {
03643     Assert(tm->tm_mon >= 1 && tm->tm_mon <= MONTHS_PER_YEAR);
03644 
03645     switch (style)
03646     {
03647         case USE_ISO_DATES:
03648         case USE_XSD_DATES:
03649             /* compatible with ISO date formats */
03650             if (tm->tm_year > 0)
03651                 sprintf(str, "%04d-%02d-%02d",
03652                         tm->tm_year, tm->tm_mon, tm->tm_mday);
03653             else
/* modified by digoal , old
                                sprintf(str, "%04d-%02d-%02d %s",
                                                -(tm->tm_year - 1), tm->tm_mon, tm->tm_mday, "BC");
*/
// modified by digoal , new , date类型, 当DateStyle=USE_ISO_DATES或USE_XSD_DATES时不打印公元前标示
                                sprintf(str, "%04d-%02d-%02d",
                                                -(tm->tm_year - 1), tm->tm_mon, tm->tm_mday);
// end modified by digoal , new
03656             break;

03679         case USE_POSTGRES_DATES:
03680         default:
03681             /* traditional date-only style for Postgres */
03682             if (DateOrder == DATEORDER_DMY)
03683                 sprintf(str, "%02d-%02d", tm->tm_mday, tm->tm_mon);
03684             else
03685                 sprintf(str, "%02d-%02d", tm->tm_mon, tm->tm_mday);
03686             if (tm->tm_year > 0)
03687                 sprintf(str + 5, "-%04d", tm->tm_year);
03688             else
/* modified by digoal, old
                                sprintf(str + 5, "-%04d %s", -(tm->tm_year - 1), "BC");
*/
// modified by digoal, new
                                sprintf(str + 5, "-%04d", -(tm->tm_year - 1));
// end modified by digoal, new
03690             break;

03716 /* EncodeDateTime()
03717  * Encode date and time interpreted as local time.
03718  *
03719  * tm and fsec are the value to encode, print_tz determines whether to include
03720  * a time zone (the difference between timestamp and timestamptz types), tz is
03721  * the numeric time zone offset, tzn is the textual time zone, which if
03722  * specified will be used instead of tz by some styles, style is the date
03723  * style, str is where to write the output.
03724  *
03725  * Supported date styles:
03726  *  Postgres - day mon hh:mm:ss yyyy tz
03727  *  SQL - mm/dd/yyyy hh:mm:ss.ss tz
03728  *  ISO - yyyy-mm-dd hh:mm:ss+/-tz
03729  *  German - dd.mm.yyyy hh:mm:ss tz
03730  *  XSD - yyyy-mm-ddThh:mm:ss.ss+/-tz
03731  */
03732 void
03733 EncodeDateTime(struct pg_tm * tm, fsec_t fsec, bool print_tz, int tz, const char *tzn, int style, char *str)
03734 {
03735     int         day;
03736 
03737     Assert(tm->tm_mon >= 1 && tm->tm_mon <= MONTHS_PER_YEAR);
03738 
03739     /*
03740      * Negative tm_isdst means we have no valid time zone translation.
03741      */
03742     if (tm->tm_isdst < 0)
03743         print_tz = false;
03744 
03745     switch (style)
03746     {
03747         case USE_ISO_DATES:
03748         case USE_XSD_DATES:
03749             /* Compatible with ISO-8601 date formats */
03750 
03751             if (style == USE_ISO_DATES)
03752                 sprintf(str, "%04d-%02d-%02d %02d:%02d:",
03753                         (tm->tm_year > 0) ? tm->tm_year : -(tm->tm_year - 1),
03754                         tm->tm_mon, tm->tm_mday, tm->tm_hour, tm->tm_min);
03755             else
03756                 sprintf(str, "%04d-%02d-%02dT%02d:%02d:",
03757                         (tm->tm_year > 0) ? tm->tm_year : -(tm->tm_year - 1),
03758                         tm->tm_mon, tm->tm_mday, tm->tm_hour, tm->tm_min);
03759 
03760             AppendTimestampSeconds(str + strlen(str), tm, fsec);
03761 
03762             if (print_tz)
03763                 EncodeTimezone(str, tz, style);
03764 
/*            // modified by digoal , 当DateStyle=USE_ISO_DATES或USE_XSD_DATES时不打印公元前标示
03765             if (tm->tm_year <= 0)
03766                 sprintf(str + strlen(str), " BC");
*/

03824         case USE_POSTGRES_DATES:
03825         default:
03826             /* Backward-compatible with traditional Postgres abstime dates */
03827 
03828             day = date2j(tm->tm_year, tm->tm_mon, tm->tm_mday);
03829             tm->tm_wday = j2day(day);
03830 
03831             strncpy(str, days[tm->tm_wday], 3);
03832             strcpy(str + 3, " ");
03833 
03834             if (DateOrder == DATEORDER_DMY)
03835                 sprintf(str + 4, "%02d %3s", tm->tm_mday, months[tm->tm_mon - 1]);
03836             else
03837                 sprintf(str + 4, "%3s %02d", months[tm->tm_mon - 1], tm->tm_mday);
03838 
03839             sprintf(str + 10, " %02d:%02d:", tm->tm_hour, tm->tm_min);
03840 
03841             AppendTimestampSeconds(str + strlen(str), tm, fsec);
03842 
03843             sprintf(str + strlen(str), " %04d",
03844                     (tm->tm_year > 0) ? tm->tm_year : -(tm->tm_year - 1));
03845 
03846             if (print_tz)
03847             {
03848                 if (tzn)
03849                     sprintf(str + strlen(str), " %.*s", MAXTZLEN, tzn);
03850                 else
03851                 {
03852                     /*
03853                      * We have a time zone, but no string version. Use the
03854                      * numeric form, but be sure to include a leading space to
03855                      * avoid formatting something which would be rejected by
03856                      * the date/time parser later. - thomas 2001-10-19
03857                      */
03858                     sprintf(str + strlen(str), " ");
03859                     EncodeTimezone(str, tz, style);
03860                 }
03861             }
03862 
/*            // modified by digoal, 当DateStyle=USE_POSTGRES_DATES时不打印公元前标示
03863             if (tm->tm_year <= 0)
03864                 sprintf(str + strlen(str), " BC");
*/



修改完后, 
1. 关闭数据库
2. 将老的bin目录重命名为其他名字. 
3. 重新编译修改后的源码文件
4. 使用新的BIN目录重启数据库
测试使用新的BIN目录连接数据库查看格式是否生效 : 

digoal=# show datestyle;
 DateStyle 
-----------
 ISO, MDY
(1 row)
digoal=# select date 'January 8, 99 BC +8';
    date    
------------
 0099-01-08
(1 row)

digoal=# select timestamptz 'January 8, 99 BC +8';
     timestamptz     
---------------------
 0099-01-08 00:05:52
(1 row)



修改datestyle后查看是否显示公元前标示 : 

digoal=# set datestyle='sql';
SET
digoal=# select timestamptz 'January 8, 99 BC +8';
      timestamptz       
------------------------
 01/08/0099 00:05:52 BC
(1 row)

digoal=# select date 'January 8, 99 BC +8';
     date      
---------------
 01/08/0099 BC
(1 row)



使用老的BIN目录重启数据库, 重新测试格式是否回到以前, 显示时区和公元前的信息 : 

digoal=> show datestyle;
 DateStyle 
-----------
 ISO, MDY
(1 row)
digoal=> select timestamptz 'January 8, 99 BC +8';
           timestamptz           
---------------------------------
 0099-01-08 00:05:52+08:05:52 BC
(1 row)

digoal=> select date 'January 8, 99 BC +8';
     date      
---------------
 0099-01-08 BC
(1 row)



测试数据存储是否正确, 是否存储了公元以及时区信息.
使用新的BIN目录创建的表和插入的数据, 在DateStyle='ISO' 时不显示时区和公元信息.

digoal=# create table t (tstz timestamptz, dt date);
CREATE TABLE
digoal=# insert into t values (timestamptz 'January 8, 99 BC', date 'January 8, 99 BC');
INSERT 0 1
digoal=# insert into t values (now(),current_date);
INSERT 0 1
digoal=# show datestyle;
 DateStyle 
-----------
 ISO, MDY
(1 row)
digoal=# select * from t;
            tstz            |     dt     
----------------------------+------------
 0099-01-08 00:00:00        | 0099-01-08
 2012-10-09 11:25:55.327655 | 2012-10-09
(2 rows)


修改DateStyle=‘SQL’后显示公元信息 : 

digoal=# set datestyle='SQL';
SET
digoal=# select * from t;
            tstz            |      dt       
----------------------------+---------------
 01/08/0099 00:00:00 BC     | 01/08/0099 BC
 10/09/2012 11:25:55.327655 | 10/09/2012
(2 rows)



将BIN文件替换为老的BIN文件, 重启数据库, DateStyle='ISO‘时将正确显示时区和公元信息.
所以数据存储是正常的.

pgdev@db-172-16-3-150-> mv pgsql9.3 pgsql9.3-notzbc
pgdev@db-172-16-3-150-> mv pgsql9.3-raw pgsql9.3
pgdev@db-172-16-3-150-> pg_ctl start
server starting
pgdev@db-172-16-3-150-> LOG:  database system was shut down at 2012-10-09 11:26:45 CST
LOG:  autovacuum launcher started
LOG:  database system is ready to accept connections

pgdev@db-172-16-3-150-> psql
psql (9.3devel)
Type "help" for help.

digoal=# select * from t;
              tstz               |      dt       
---------------------------------+---------------
 0099-01-08 00:00:00+08:05:52 BC | 0099-01-08 BC
 2012-10-09 11:25:55.327655+08   | 2012-10-09
(2 rows)

digoal=# show datestyle;
 DateStyle 
-----------
 ISO, MDY
(1 row)


测试pg_dump导出是否受到同样的影响 : 
1. 修改源码后的BIN

pgdev@db-172-16-3-150-> pg_ctl stop -m fast
waiting for server to shut down....LOG:  received fast shutdown request
LOG:  aborting any active transactions
LOG:  autovacuum launcher shutting down
LOG:  shutting down
LOG:  database system is shut down


 done
server stopped
pgdev@db-172-16-3-150-> 
pgdev@db-172-16-3-150-> 
pgdev@db-172-16-3-150-> mv pgsql9.3 pgsql9.3-raw
pgdev@db-172-16-3-150-> mv pgsql9.3-notzbc pgsql9.3
pgdev@db-172-16-3-150-> pg_ctl start
server starting
pgdev@db-172-16-3-150-> LOG:  database system was shut down at 2012-10-09 13:17:39 CST
LOG:  autovacuum launcher started
LOG:  database system is ready to accept connections

pgdev@db-172-16-3-150-> pg_dump -t t
--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: t; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE t (
    tstz timestamp with time zone,
    dt date
);


ALTER TABLE public.t OWNER TO postgres;

--
-- Data for Name: t; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY t (tstz, dt) FROM stdin;
0099-01-08 00:00:00     0099-01-08
2012-10-09 11:25:55.327655      2012-10-09
\.


--
-- PostgreSQL database dump complete
--


2. 修改源码前的BIN

pgdev@db-172-16-3-150-> pg_ctl stop -m fast
waiting for server to shut down...LOG:  received fast shutdown request
LOG:  aborting any active transactions
.LOG:  autovacuum launcher shutting down
LOG:  shutting down
LOG:  database system is shut down

 done
server stopped
pgdev@db-172-16-3-150-> 
pgdev@db-172-16-3-150-> mv pgsql9.3 pgsql9.3-notzbc
pgdev@db-172-16-3-150-> mv pgsql9.3-raw pgsql9.3
pgdev@db-172-16-3-150-> pg_ctl start
server starting
pgdev@db-172-16-3-150-> LOG:  database system was shut down at 2012-10-09 13:18:26 CST
LOG:  autovacuum launcher started
LOG:  database system is ready to accept connections

pgdev@db-172-16-3-150-> which psql
~/pgsql9.3/bin/psql
pgdev@db-172-16-3-150-> pg_dump -t t
--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: t; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE t (
    tstz timestamp with time zone,
    dt date
);


ALTER TABLE public.t OWNER TO postgres;

--
-- Data for Name: t; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY t (tstz, dt) FROM stdin;
0099-01-08 00:00:00+08:05:52 BC 0099-01-08 BC
2012-10-09 11:25:55.327655+08   2012-10-09
\.


--
-- PostgreSQL database dump complete
--



【参考】
1. http://doxygen.postgresql.org/
2. src/backend/utils/adt/timestamp.c
3. src/backend/utils/adt/datetime.c
4. 使用objdump或者nm查看到bin/postgres, lib/libpgtypes.a, lib/libpgtypes.so.3.4 包含了修改过的timestamptz_out和EncodeDateOnly 函数.
所以替换这几个文件也是可以的.
