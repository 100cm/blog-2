PostgreSQL research

pageinspect analyze index item migrated within btree pages

2012-10-26 11:16:36   查看原文>>

上一篇《Performance tuning case : primary key on uuid or text or int8 type column》提到离散的UUID值作为PK的话带来很大的索引写开销。
这里使用pageinspect来分析一下, 索引发生了些什么造成这么大的写操作。

1. 安装pageinspect参考《Use pageinspect EXTENSION view PostgreSQL Page's raw infomation》
2. 安装uuid-ossp参考《Performance tuning case : primary key on uuid or text or int8 type column》
3. 创建测试表
测试表1 : 

digoal=# \d digoal.test_text_pk 
Table "digoal.test_text_pk"
 Column | Type | Modifiers 
--------+------+-----------
 id     | text | not null
Indexes:
    "test_text_pk_pkey" PRIMARY KEY, btree (id), tablespace "tbs_digoal_idx"



测试表2 : 

digoal=# \d digoal.test_int8_pk 
 Table "digoal.test_int8_pk"
 Column |  Type  | Modifiers 
--------+--------+-----------
 id     | bigint | not null
Indexes:
    "test_int8_pk_pkey" PRIMARY KEY, btree (id), tablespace "tbs_digoal_idx"



4. 测试
4.1 测试使用序列生成的主键, 索引的离散度.

digoal=> truncate test_int8_pk;
TRUNCATE TABLE
digoal=> insert into test_int8_pk values (nextval('test_seq'::regclass));
INSERT 0 1
digoal=# select * from bt_page_items('digoal.test_int8_pk_pkey',1);
 itemoffset | ctid  | itemlen | nulls | vars |          data           
------------+-------+---------+-------+------+-------------------------
          1 | (0,1) |      16 | f     | f    | 51 08 79 01 00 00 00 00
(1 row)


这里itemoffset是btree block中的offset.  ctid指的是tuple的ctid, 也就是heap page里面的.


digoal=# insert into digoal.test_int8_pk values (nextval('digoal.test_seq'::regclass));
INSERT 0 1
略, 插入很多条后, 
digoal=# select * from bt_page_items('digoal.test_int8_pk_pkey',1);
 itemoffset | ctid  | itemlen | nulls | vars |          data           
------------+-------+---------+-------+------+-------------------------
          1 | (0,1) |      16 | f     | f    | 51 08 79 01 00 00 00 00
          2 | (0,2) |      16 | f     | f    | b5 08 79 01 00 00 00 00
          3 | (0,3) |      16 | f     | f    | b6 08 79 01 00 00 00 00
          4 | (0,4) |      16 | f     | f    | b7 08 79 01 00 00 00 00
          5 | (0,5) |      16 | f     | f    | b8 08 79 01 00 00 00 00
          6 | (0,6) |      16 | f     | f    | b9 08 79 01 00 00 00 00
          7 | (0,7) |      16 | f     | f    | ba 08 79 01 00 00 00 00
          8 | (0,8) |      16 | f     | f    | bb 08 79 01 00 00 00 00
          9 | (0,9) |      16 | f     | f    | bc 08 79 01 00 00 00 00
(9 rows)


从itemoffset和ctid来看, 是一一对应的, 索引中的排序和heap page中的排序一一对应. 后面我们会看到uuid就不是这样的了, 会产生不对应的情况.

使用pgbench, 插入大量数据. 注意这里用到了8个并发, sequece的cache为100, 所以会产生索引itemoffset和heap ctid的偏移.

pg9.2.0@db-172-16-3-150-> vi pgbench.sql 
insert into test_int8_pk (id) values (nextval('test_seq'::regclass));

pg9.2.0@db-172-16-3-150-> pgbench -M prepared -n -j 8 -c 8 -T 60 -f ./pgbench.sql -U digoal digoal 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 5128221
tps = 85469.341462 (including connections establishing)
tps = 85478.689693 (excluding connections establishing)



分析表, 得到索引的块数量. blockid 从0开始, 所以最后一个blickid应该是20107.

digoal=# analyze digoal.test_int8_pk ;
ANALYZE
digoal=# select relpages from pg_class where relname='test_int8_pk_pkey';
 relpages 
----------
    20108
(1 row)



从data='51 08 79 01 00 00 00 00'来看, 它还存在于btree page的1号块中. 没有变化到其他块中. 后面测试uuid时, 我们会发现数据发生了迁移, 变到其他块去了.

digoal=# select * from (select i blockno,(bt_page_items('digoal.test_int8_pk_pkey',i)).* from (select generate_series(1,20107) i ) t) t where data='51 08 79 01 00 00 00 00';
 blockno | itemoffset | ctid  | itemlen | nulls | vars |          data           
---------+------------+-------+---------+-------+------+-------------------------
       1 |          2 | (0,1) |      16 | f     | f    | 51 08 79 01 00 00 00 00
(1 row)


离散度 : 
(平均每个btree数据块中含有多少个heap块的信息, 这个值越大说明越离散)

digoal=# select count(*) from (select blockno,regexp_matches(ctid::text,'(\d+,)') heapblockno,count(*) from (select i blockno,(bt_page_items('digoal.test_int8_pk_pkey',i)).* from (select generate_series(1,20107) i ) t) t group by blockno,regexp_matches(ctid::text,'(\d+,)') order by blockno,regexp_matches(ctid::text,'(\d+,)')) t;
 count  
--------
 113757
(1 row)
digoal=# select 113757/20107.0;
      ?column?      
--------------------
 5.6575819366389814
(1 row)


离散度是5.7. 

4.2 测试使用UUID生成的主键, 索引的离散度.
插入测试数据 : 

digoal=> truncate test_text_pk ;
TRUNCATE TABLE
digoal=> insert into test_text_pk values (uuid_generate_v4());
INSERT 0 1
digoal=> select ctid,* from test_text_pk ;
 ctid  |                  id                  
-------+--------------------------------------
 (0,1) | 3c50fa12-0fde-49cd-81b0-1fa02650cadf
(1 row)


查看0号块, root块的信息 : 

digoal=> \c digoal postgres
You are now connected to database "digoal" as user "postgres".
digoal=# select * from bt_metap('digoal.test_text_pk_pkey');
 magic  | version | root | level | fastroot | fastlevel 
--------+---------+------+-------+----------+-----------
 340322 |       2 |    1 |     0 |        1 |         0
(1 row)


查看0号块的头信息 : 

digoal=# select * from page_header(get_raw_page('digoal.test_text_pk_pkey',0));
     lsn     | tli | flags | lower | upper | special | pagesize | version | prune_xid 
-------------+-----+-------+-------+-------+---------+----------+---------+-----------
 22/4F0295F0 |   3 |     0 |    48 |  8176 |    8176 |     8192 |       4 |         0
(1 row)


从这里可以看出, 指向HEAP PAGE(0,1)的索引在第一个btree 数据块的offset=1.

digoal=# select * from bt_page_stats('digoal.test_text_pk_pkey',1);
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags 
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------
     1 | l    |          1 |          0 |            48 |      8192 |      8096 |         0 |         0 |    0 |          3
(1 row)
digoal=# select * from bt_page_items('digoal.test_text_pk_pkey',1);
-[ RECORD 1 ]-----------------------------------------------------------------------------------------------------------------------
itemoffset | 1
ctid       | (0,1)
itemlen    | 48
nulls      | f
vars       | t
data       | 4b 33 63 35 30 66 61 31 32 2d 30 66 64 65 2d 34 39 63 64 2d 38 31 62 30 2d 31 66 61 30 32 36 35 30 63 61 64 66 00 00 00


多插几条后, 你会发现itemoffset变化了. 变成了7, 因为uuid是离散的, 后插入的值可能跳跃到前面去.

digoal=# select * from bt_page_items('digoal.test_text_pk_pkey',1) where ctid='(0,1)';
-[ RECORD 1 ]-----------------------------------------------------------------------------------------------------------------------
itemoffset | 7
ctid       | (0,1)
itemlen    | 48
nulls      | f
vars       | t
data       | 4b 33 63 35 30 66 61 31 32 2d 30 66 64 65 2d 34 39 63 64 2d 38 31 62 30 2d 31 66 61 30 32 36 35 30 63 61 64 66 00 00 00


使用pgbench插入大量数据.

pg9.2.0@db-172-16-3-150-> vi pgbench.sql 
insert into test_text_pk (id) values (uuid_generate_v4());
pg9.2.0@db-172-16-3-150-> pgbench -M prepared -n -j 8 -c 8 -T 60 -f ./pgbench.sql -U digoal digoal 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 8
duration: 60 s
number of transactions actually processed: 2071981
tps = 33795.029537 (including connections establishing)
tps = 33798.602881 (excluding connections establishing)


为了比较两个场景(uuid和sequence)的离散度, 我们要把两个表的记录数弄成一样的.

digoal=> select count(*) from test_text_pk ;
  count  
---------
 2071985
(1 row)

digoal=> select count(*) from test_int8_pk ;
  count  
---------
 5128230
(1 row)

digoal=> select 5128230-2071985;
 ?column? 
----------
  3056245
(1 row)

digoal=> select 3056245/5;
 ?column? 
----------
   611249
(1 row)


使用5个连接, 分别插入611249条.

pg9.2.0@db-172-16-3-150-> pgbench -M prepared -n -j 5 -c 5 -t 611249 -f ./pgbench.sql -U digoal digoal 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 5
number of threads: 5
number of transactions per client: 611249
number of transactions actually processed: 3056245/3056245
tps = 8481.444009 (including connections establishing)
tps = 8481.569374 (excluding connections establishing)
pg9.2.0@db-172-16-3-150-> psql digoal postgres
psql (9.2.0)
Type "help" for help.


数据一致 : 

digoal=# select count(*) from digoal.test_text_pk ;
  count  
---------
 5128230
(1 row)


分析表 : 

digoal=# analyze digoal.test_text_pk ;
ANALYZE
digoal=# select relpages from pg_class where relname='test_text_pk_pkey';
 relpages 
----------
    48232
(1 row)


离散度 : 
(平均每个btree数据块中含有多少个heap块的信息, 这个值越大说明越离散)

digoal=# select count(*) from (select blockno,regexp_matches(ctid::text,'(\d+,)') heapblockno,count(*) from (select i blockno,(bt_page_items('digoal.test_text_pk_pkey',i)).* from (select generate_series(1,48231) i ) t) t group by blockno,regexp_matches(ctid::text,'(\d+,)') order by blockno,regexp_matches(ctid::text,'(\d+,)')) t;
  count  
---------
 5218063
(1 row)
digoal=# select 5218063/48231.0;
       ?column?       
----------------------
 108.1889863365885012
(1 row)


离散度是108

4.3 引起前面我们插入test_int8_pk时使用了8个并发连接, 所以出现了跳跃, 现在我们使用pgbench 只用1个连接测试索引离散度.

pg9.2.0@db-172-16-3-150-> vi pgbench.sql 
insert into test_int8_pk (id) values (nextval('test_seq'::regclass));
pg9.2.0@db-172-16-3-150-> pgbench -M prepared -n -j 1 -c 1 -t 5128230 -f ./pgbench.sql -U digoal digoal 
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 1
number of threads: 1
number of transactions per client: 5128230
number of transactions actually processed: 5128230/5128230
tps = 12315.105527 (including connections establishing)
tps = 12315.179462 (excluding connections establishing)


分析表 : 

digoal=# analyze digoal.test_int8_pk ;
ANALYZE
digoal=# select relpages from pg_class where relname='test_int8_pk_pkey';
 relpages 
----------
    14063
(1 row)

digoal=# select 50812/14062.0;
      ?column?      
--------------------
 3.6134262551557389
(1 row)


使用1个连接后, 离散度是3.6. 相比5.6有所下降. 为什么不是1呢? 因为索引的一个PAGE可以存储更多的tuple 信息. 所以1个page中包含了多个heap page也是可能的.

5. 其实离散度还可以从pg_stats系统表的顺性来看.
test_int8_pk的id字段的correlation=1, 说明值的顺序和物理存储顺序完全匹配.

digoal=> select * from pg_stats where tablename='test_int8_pk';
schemaname             | digoal
tablename              | test_int8_pk
attname                | id
inherited              | f
null_frac              | 0
avg_width              | 8
n_distinct             | -1
most_common_vals       | 
most_common_freqs      | 
histogram_bounds       | {29838052,29889587,29941829,29996284,30049067,30095481,30149949,30199948,30246714,30304418,30357875,30405713,30454170,30504240,30554509,30606207,30663743,30713746,30764653,30817283,30867810,30917521,30965820,31018596,31065487,31115505,31167375,31220204,31270240,31320584,31372567,31428657,31480074,31530250,31585782,31638403,31685544,31735385,31790844,31844458,31893300,31939775,31988146,32035610,32086224,32135423,32181071,32233532,32287654,32339198,32394747,32447665,32503537,32552850,32603287,32659275,32712525,32762516,32813792,32870698,32928363,32980064,33028329,33080209,33132552,33183973,33231771,33278461,33331777,33376457,33426189,33477025,33529585,33579216,33633518,33681080,33728169,33782771,33837889,33892593,33946049,33993313,34044390,34096964,34148166,34196726,34244527,34298765,34348191,34396274,34445661,34502817,34551819,34601492,34645170,34692006,34748476,34805448,34859143,34914579,34965884}
correlation            | 1
most_common_elems      | 
most_common_elem_freqs | 
elem_count_histogram   | 


test_text_pk的id字段的correlation=0.00300677, 说明值的顺序和物理存储顺序非常不匹配.

digoal=> select * from pg_stats where tablename='test_text_pk';
schemaname             | digoal
tablename              | test_text_pk
attname                | id
inherited              | f
null_frac              | 0
avg_width              | 37
n_distinct             | -1
most_common_vals       | 
most_common_freqs      | 
histogram_bounds       | {0000d039-b245-4089-bd8c-df39fb345578,02ab35ea-058c-4cc2-9d05-54c1a2751084,05687dad-ec92-47cd-bcb7-3de1e1cf6bc5,07fdaef2-b706-4f8e-b5ff-e24fe5093f87,0a7a9b8b-9573-4157-a532-c59410551945,0d13918b-b0fb-4120-b8ab-332015a742c2,0fbadae7-9aea-470c-91ca-a61e09969209,1232fde0-bba5-4bae-9d3b-554b1b6f6d6c,14d2ae28-966f-49ae-8784-ec33e5673c09,17435d86-ae41-4b8a-b3ac-3ddfe40c4e44,19c8139c-7fa8-4d95-ad24-e2e4a82a41fb,1c1bba44-108b-40de-9944-23c6fe3728b4,1eaf4461-2a06-48f0-89d5-334fc51b8056,2157ae47-16f3-4c8c-a9c2-f7e1de74e82e,23d97345-2a12-4292-b8bc-33a73a1d009a,265d4824-1889-47fb-b8b6-b892461c2727,28e65b66-daa2-486c-8103-d66fadaee942,2b5784dd-2028-4322-8e68-d0e24dc0728a,2df704f9-10a8-4079-b11e-13fb4a13daa0,306cc06e-b187-490e-9288-18969f1a0729,331f46cd-07eb-43ee-b122-d03bf96376ea,3573fd99-d2ae-42ad-96b7-63ea8e552c6f,382dffad-10a4-4bbe-bd20-c8bd568d9779,3ab53d66-fe00-437e-8245-e56ae9cd9355,3d78287a-ba2d-49c3-90b5-65a71cf4af57,4008476a-9510-4d3b-8e8c-f8d9289f03da,428792c1-8307-48d2-968c-d24e5f7e781b,455177d6-64ac-4b06-b064-f8eea33b8d02,4802d47b-4d04-4a45-a019-2ad1cd5697b9,4aa8693f-dfac-44a4-8e27-a05f84d3cedf,4d583891-fa5b-4954-a47a-aa8f268b28d8,4fdfaa6b-4886-4de1-a595-fdbfb4114b77,523f2bed-8c87-4b42-85a6-0e499867e760,54ac54ea-a8eb-4a63-97ab-6c165b3896a9,570cd8ef-42da-42da-923d-e5d802971fba,59989dc1-f0c2-4dab-a473-6058faa53d88,5c2dc2b8-e740-4867-9f4b-e3170ae267bf,5ed6341c-ce8f-4d02-b55a-3467c36bc650,6185be67-31d7-4a37-8456-975ff028d6ab,644bcce6-02a4-4858-b507-b56d702339ce,66d2c2c1-d93a-4da4-b73e-6c7b4756ebfa,697a389c-833a-4e86-8fc7-81b73d3a0005,6c5e448b-600f-43c6-8e5f-dfd4d88e0bca,6eb7a41c-b86f-4d71-b025-1624f4227c0e,7143bc97-3832-4794-9f9a-1fea607b498f,73eafcdb-6254-4f73-9e96-110d3ed4d5fe,76ace179-60b6-48eb-aa23-9d6da47e4b3b,793c0997-5946-4127-8a6f-489463052ef5,7bda0775-6658-4d01-9c1a-bdc98f86d81c,7e78dd32-e6a0-4b3f-97b5-2eaee658e230,8103c47e-0469-457a-9868-a827ebb5d3dd,837b49c1-3059-4639-9875-a24bafa60e02,86295ae9-a8d2-4ab6-ac3a-a275afca167e,8887e22b-a30f-439c-a13d-19c4cd887852,8b0188a3-a452-4348-a011-8668cdc9ab7a,8d9cd2ce-43ab-4c65-8ecf-3ce0850cf248,90476f28-16c4-4c63-bdce-94f8dd491250,92e2a199-2567-4f7f-bd50-9412dc912a40,9552f44c-0480-47c1-97a1-8b3f8ab37506,97b597f4-02fe-4f3d-9670-1745fa2b66c1,99fd177c-90bc-429b-bdac-97d7c1c772be,9cc27b6c-7e56-45dc-a768-436377cf5e93,9ef468e0-21ba-426a-8dcb-97ea2b68a08b,a18318c5-da32-4716-afca-ad69c8d453fe,a3d75218-ce68-42d7-89de-620d884c71d5,a69b6aaa-40a3-45b9-963f-ee33534c9e45,a9646ef0-d393-4a92-b404-8cae735592e8,abff4cb9-715e-412a-89da-6612f6a3fdcd,ae8373ed-f163-4ee9-879b-aa826041a93f,b100b5bf-49ff-4e82-a2dc-abb8c8c0691c,b3bb63fe-1d91-417d-bc3e-7423fb246de4,b64bbaf8-d6c1-4455-a997-3c5bdfa475ca,b8bb88b9-465c-4acc-9be2-533a10ce8cf9,bb32f984-c74e-4be0-9bbc-b995df5ee7d3,bdd577a4-aff4-4dc9-9a04-b07cb820a8ea,c04752b0-0ff2-469e-8acb-3197e6b7ef39,c2b17891-5730-447d-bc90-e4281f1ea2f0,c5870234-1711-4f5d-9ff3-f84d572a934d,c80120e8-80f5-4f3c-8d54-654d44c2f419,caaf2a6f-4f45-49f7-967e-98d1c08aab0f,cd60f042-2459-40ca-b664-574c0445b151,d021dc5e-4b8b-46e2-957f-1b8ba27040b5,d286a760-985c-4516-a94b-cd212282cb44,d4df4fb3-6651-46e6-beee-db3df25d6c63,d7869f83-5f6d-4919-84ce-20df7f7c101e,da0b96b3-0dd5-464b-85b3-d70e6cea09f6,dc573abd-a038-4507-885d-b8740e003645,dee38ade-31bd-43e6-8052-9247e1423173,e15ede6a-3265-4e17-b2f7-d0865c8a3cbd,e3f1ad07-cd1d-4e9f-a528-323014936b41,e668ca79-e598-4193-845b-dcd5448f64eb,e92e9a22-a577-4cd2-ba3f-4006c56e26a6,ebd81613-d6b3-45db-9195-1dc92ff42e87,ee6b723a-0f8e-4db6-93b4-191cbced6de1,f12bd7aa-fc34-4714-9a78-cd42c40fdda2,f380016e-a0e3-4b88-91ce-1288349087b5,f626900a-d37d-445b-98c7-c5710b1d05c8,f89476a3-4dc6-499f-a905-d1b507dd6d00,fb17f787-963c-4f89-a92e-1aecd1bf1424,fd9daa6e-781d-4278-bf0a-0ac9d06f5682,ffffd925-5d1c-4b6c-bc5f-bb7304d5705b}
correlation            | 0.00300677
most_common_elems      | 
most_common_elem_freqs | 
elem_count_histogram   | 




【其他】
1. btree 索引的0号BLOCK是meta节点, 不存储item信息.
2. btree 索引数据库末尾几位有特殊通途, 所以tuple信息从(blocksize-special)开始, 这个与HEAP数据块是不一样的, HEAP数据块的special=0;

【参考】
1. http://www.postgresql.org/docs/9.2/static/pageinspect.html
2. Performance tuning case : primary key on uuid or text or int8 type column
http://blog.163.com/digoal@126/blog/static/16387704020129249646421/
3. Use pageinspect EXTENSION view PostgreSQL Page's raw infomation
http://blog.163.com/digoal@126/blog/static/16387704020114273265960/
4. src/include/access/nbtree.h

/*
 * Macros to test whether a page is leftmost or rightmost on its tree level,
 * as well as other state info kept in the opaque data.
 */
#define P_LEFTMOST(opaque)              ((opaque)->btpo_prev == P_NONE)
#define P_RIGHTMOST(opaque)             ((opaque)->btpo_next == P_NONE)
#define P_ISLEAF(opaque)                ((opaque)->btpo_flags & BTP_LEAF)
#define P_ISROOT(opaque)                ((opaque)->btpo_flags & BTP_ROOT)
#define P_ISDELETED(opaque)             ((opaque)->btpo_flags & BTP_DELETED)
#define P_ISHALFDEAD(opaque)    ((opaque)->btpo_flags & BTP_HALF_DEAD)
#define P_IGNORE(opaque)                ((opaque)->btpo_flags & (BTP_DELETED|BTP_HALF_DEAD))
#define P_HAS_GARBAGE(opaque)   ((opaque)->btpo_flags & BTP_HAS_GARBAGE)


5. contrib/pageinspect/btreefuncs.c

 /* page type (flags) */
        if (P_ISDELETED(opaque))
        {
                stat->type = 'd';
                stat->btpo.xact = opaque->btpo.xact;
                return;
        }
        else if (P_IGNORE(opaque))
                stat->type = 'e';
        else if (P_ISLEAF(opaque))
                stat->type = 'l';
        else if (P_ISROOT(opaque))
                stat->type = 'r';
        else
                stat->type = 'i';


6. PostgreSQL Statistics and Query Explain Introduction
http://blog.163.com/digoal@126/blog/static/163877040201041111454178/
