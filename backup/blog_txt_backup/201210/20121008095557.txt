PostgreSQL research

table or row variable

2012-10-08 9:55:57   查看原文>>

某些场景中可能会用到行类型或者表类型变量. 例如构造行类型的数组. 
以下是简单的展示 : 

$psql
psql (9.2beta4)
Type "help" for help.


-- 创建测试表

digoal=> create table user_info (id int, firstname text, lastname text, crt_time timestamp(0));
CREATE TABLE


-- 插入测试数据

digoal=> insert into user_info select generate_series(1,10000), 'zhou', 'digoal', now();
INSERT 0 10000


-- 返回行变量, t在这里是user_info 的alias.

digoal=> select t from user_info t limit 2;
                   t                   
---------------------------------------
 (1,zhou,digoal,"2012-10-08 09:36:07")
 (2,zhou,digoal,"2012-10-08 09:36:07")
(2 rows)


-- 而非系统中存在的表名对应的type. 此处报错

digoal=> select user_info from user_info t limit 2;
ERROR:  column "user_info" does not exist
LINE 1: select user_info from user_info t limit 2;
               ^


-- 这样写就对了, 所以它是在当前QUERY中的table 或 table alias.

digoal=> select user_info from user_info limit 2;
               user_info               
---------------------------------------
 (1,zhou,digoal,"2012-10-08 09:36:07")
 (2,zhou,digoal,"2012-10-08 09:36:07")
(2 rows)


-- row variable可以使用row-variable.*来转成row对应的composite type的嵌套类型输出.

digoal=> select user_info.* from user_info limit 2;
 id | firstname | lastname |      crt_time       
----+-----------+----------+---------------------
  1 | zhou      | digoal   | 2012-10-08 09:36:07
  2 | zhou      | digoal   | 2012-10-08 09:36:07
(2 rows)


-- 这里同样正确.

digoal=> select t.* from user_info t limit 2;
 id | firstname | lastname |      crt_time       
----+-----------+----------+---------------------
  1 | zhou      | digoal   | 2012-10-08 09:36:07
  2 | zhou      | digoal   | 2012-10-08 09:36:07
(2 rows)


-- 下面是一个行构造方法实例

postgres=# select row(1,2,3);
   row   
---------
 (1,2,3)
(1 row)


-- 以下方法构造出来的行没有对应的record type, 所以使用(row-variable).*时会报错.

postgres=# select (row(1,2,3)).*;
ERROR:  record type has not been registered


-- 要如何将以上方法构造的row-variable转换成对应的record type呢? 手册里有实例, 我这里就不举例了:


CREATE TABLE mytable(f1 int, f2 float, f3 text);

CREATE FUNCTION getf1(mytable) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;

-- No cast needed since only one getf1() exists
SELECT getf1(ROW(1,2.5,'this is a test'));
 getf1
-------
     1
(1 row)

CREATE TYPE myrowtype AS (f1 int, f2 text, f3 numeric);

CREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;

-- Now we need a cast to indicate which function to call:
SELECT getf1(ROW(1,2.5,'this is a test'));
ERROR:  function getf1(record) is not unique

SELECT getf1(ROW(1,2.5,'this is a test')::mytable);
 getf1
-------
     1
(1 row)

SELECT getf1(CAST(ROW(11,'this is a test',2.5) AS myrowtype));
 getf1
-------
    11
(1 row)
digoal=> select cast(row(1,'a',1.1) as myrowtype);
    row
-----------
 (1,a,1.1)
(1 row)
digoal=> select (cast(row(1,'a',1.1) as myrowtype)).*;
 f1 | f2 | f3
----+----+-----
  1 | a  | 1.1
(1 row)



-- 以下是array构造的一种方法. 用来构造row-variable的 array.

digoal=> select array(select t from user_info t limit 10) ;
                                                                                                                                    
                                                                             array                                                  
                                                                                                                                    
                            
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
----------------------------
 {"(1,zhou,digoal,\"2012-10-08 09:36:07\")","(2,zhou,digoal,\"2012-10-08 09:36:07\")","(3,zhou,digoal,\"2012-10-08 09:36:07\")","(4,
zhou,digoal,\"2012-10-08 09:36:07\")","(5,zhou,digoal,\"2012-10-08 09:36:07\")","(6,zhou,digoal,\"2012-10-08 09:36:07\")","(7,zhou,d
igoal,\"2012-10-08 09:36:07\")","(8,zhou,digoal,\"2012-10-08 09:36:07\")","(9,zhou,digoal,\"2012-10-08 09:36:07\")","(10,zhou,digoal
,\"2012-10-08 09:36:07\")"}
(1 row)


-- 使用unnest可以将array转换成多行输出.

digoal=> select unnest(array(select t from user_info t limit 10)) ;
                 unnest                 
----------------------------------------
 (1,zhou,digoal,"2012-10-08 09:36:07")
 (2,zhou,digoal,"2012-10-08 09:36:07")
 (3,zhou,digoal,"2012-10-08 09:36:07")
 (4,zhou,digoal,"2012-10-08 09:36:07")
 (5,zhou,digoal,"2012-10-08 09:36:07")
 (6,zhou,digoal,"2012-10-08 09:36:07")
 (7,zhou,digoal,"2012-10-08 09:36:07")
 (8,zhou,digoal,"2012-10-08 09:36:07")
 (9,zhou,digoal,"2012-10-08 09:36:07")
 (10,zhou,digoal,"2012-10-08 09:36:07")
(10 rows)


-- 因为是row-variable, 所以这里也可以使用(row-variable).* 输出.

digoal=> select (unnest(array(select t from user_info t limit 10))).* ;
 id | firstname | lastname |      crt_time       
----+-----------+----------+---------------------
  1 | zhou      | digoal   | 2012-10-08 09:36:07
  2 | zhou      | digoal   | 2012-10-08 09:36:07
  3 | zhou      | digoal   | 2012-10-08 09:36:07
  4 | zhou      | digoal   | 2012-10-08 09:36:07
  5 | zhou      | digoal   | 2012-10-08 09:36:07
  6 | zhou      | digoal   | 2012-10-08 09:36:07
  7 | zhou      | digoal   | 2012-10-08 09:36:07
  8 | zhou      | digoal   | 2012-10-08 09:36:07
  9 | zhou      | digoal   | 2012-10-08 09:36:07
 10 | zhou      | digoal   | 2012-10-08 09:36:07
(10 rows)



【参考】
1. unnest : http://www.postgresql.org/docs/9.2/static/functions-array.html

digoal=> \df unnest
                           List of functions
   Schema   |  Name  | Result data type | Argument data types |  Type  
------------+--------+------------------+---------------------+--------
 pg_catalog | unnest | SETOF anyelement | anyarray            | normal
(1 row)


2. row and array constructor : http://www.postgresql.org/docs/9.2/static/sql-expressions.html
