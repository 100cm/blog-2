PostgreSQL research

linux rescue edit grub init=/bin/bash

2012-08-30 11:00:07   查看原文>>

某机器的分区异常, 并且这个分区在/etc/fstab条目里面, 所以导致系统无法启动. 
启动界面提升敲ROOT密码进入修复, 但是root密码过于复杂, 或者root密码忘记的话(这里即使使用单用户也无法绕过输入root密码), 就苦逼了.
一般来说这个时候需要找到引导光盘或者通过网络引导, 进入rescue模式修改root密码或直接进行修复.
这里介绍一个更加快捷的解决方法, 不需要借助外界来引导, 不需要root密码直接进入.
我们知道进单用户模式, 在选择界面编辑如下 : 
        kernel /boot/vmlinuz-2.6.18-194.el5 ro root=LABEL=/ rhgb quiet
改成
        kernel /boot/vmlinuz-2.6.18-194.el5 ro root=LABEL=/ rhgb quiet 1
然后按b引导.

这里我们需要改成
        kernel /boot/vmlinuz-2.6.18-194.el5 rw root=LABEL=/ init=/bin/bash
然后按b引导.
这样就进入了挂载了/的一个bash环境, 可以使用passwd root修改密码. 执行/sbin/fsck等.

下面摘录几篇相关的文章 : 
【Reset forgotten root password on linux boxes】
I had an old computer with linux installed and had forgotten the root password for it. Unfortunately, I did not have my favourite handy-dany knoppix cd around but did remember that I could get a shell access by appending "init=/bin/bash" to the lilo/grub boot loader, which should be enough to get in and reset the root
password.

DISCLAIMER -- I do not take any responsibility for your actions if you go and try this on your friends machine!!

Press Ctrl-Alt-Del to shut down the system in an orderly fashion.
Reboot the system and when lilo/grub boot loader get to the point where you select the various installed kernels on the system, type the letter "a" for "append".
You will get a prompt like this to add boot options to the boot string found in your lilo/grub conf file:

grub append> ro root=LABEL=/


Append "init=/bin/bash" to it to look like this.

grub append> ro root=LABEL=/ init=/bin/bash


This tells the kernel to drop to a root prompt bash shell instead of starting the "/sbin/init" process.

The root filesystem is currently mounted read only which needs to be changed to read/write prior to resetting the password.

# mount -o remount,rw /


Now that the file-system is remounted read-write, go ahead and type `passwd` to change the root password.

# passwd


Since "init" isn't running to safely take down the system, remount the system to read only prior to shutting down the system.

# mount -o remount,ro /


You can now safely press on the power button to shutdown the sytem.

【Why does Linux allow ‘init=/bin/bash’?】
I recently found out that if I edit GRUB before booting and I add rw init=/bin/bash I end up with a root shell.

Being in a condition that I want to understand everything I would like to know why this happens. I mean is it a bug? is it a feature? is it there to help admins to fix things as it only works if you have physical access to a computer?

Is it provided by GRUB or the actual kernel?

linux boot grub

Answer1 : 

This is a feature, and is used for system maintainance: it allows a sysadmin to recover a system from messed-up initialization files or change a forgotten password.

This post in the Red Hat mailing list explains some things:

    In Unix-like systems, init is the first process to be run, and the ultimate ancestor of all processes ever run. It's responsible for running all the init scripts.

    You're telling the Linux kernel to run /bin/bash as init, rather than the system init. [...]

Thus, you are not exploiting anything, you are just using a standard kernel feature.

Besides, as noted in a comment, the rw flag is separate from init=, it just tells the system to mount the root file system as read-write (so you can e.g. edit the misconfigured file or change a password).

Also, rw is completely separate from init=. The former just tells the kernel to mount the root filesystem read-write.

Answer2 : 

When the computer starts, it runs a program called "init", usually found at /bin/init or /sbin/init. This program is responsible for all the system startup and creating a usable environment.

Specifying init=/bin/bash tells the kernel to run /bin/bash instead (which is a shell). Specifyingrw tells the kernel to boot with the hard disk in read-write mode instead of read-only mode. Traditionally the kernel starts with the disk in read-only mode and a process later on checks the integrity of the disk before
switching to read-write.

Answer3 : 

Pieced together from http://kernel.org/doc/Documentation/kernel-parameters.txt

KNL     Is a kernel start-up parameter.  init=   [KNL]         Format: <full_path>         Run specified binary instead of /sbin/init as init         process.  rw      [KNL] Mount root device read-write on boot


【Linux不能正常启动---BASH应对】
如果您确实碰巧发现系统因为 init 脚本或 /sbin/init 本身的问题而不能引导，就可以使用这个紧急引导过程。

启动时，在LILO或GRUB中向内核传递以下参数：init=/bin/bash


 
紧急 bash 救援


在下篇文章中，我们将更改 Linux 系统中对启动至关重要的部分。既然完全可能因某个错误而使您偶尔搞糟引导过程，我将在本文首先讲述：如何用紧急 bash shell 命令启动和运行系统。如果您确实碰巧发现系统因为 init 脚本或 /sbin/init 本身的问题而不能引导，就可以使用这个紧急引导过程。

进行紧急引导最简单的方法是：在引导时刻使用 GRUB 或 LILO 把 init=/bin/bash 选项传递给内核。如果使用 GRUB，您应该能够通过点击 e 来实时地编辑当前菜单项，从而在需要时交互地传递该选项。如果使用 LILO，则确保在继续下一步之前，您已知道如何向内核传递启动选项，必要时，还要创建一个新的"紧急"LILO 启动选项。

过程
这样，基本的"救援"过程如下。首先，将 init=/bin/bash 作为一个内核引导选项传递给内核。当内核引导时，它将以 /bin/bash 而不是通常的 /sbin/init 作为第一个进程启动。您不会被提示进行登录就看到一个 root 用户 bash 提示符：

#

然而，尽管您看到一个 root bash 提示符，实际上只安装了根文件系统，而且仅以只读的形式安装。下面介绍在这之后如何启动和运行您的系统。如果文件系统没有卸装干净的话，应该首先对它们进行 fsck。首先对根文件系统执行 fsck -a，然后 fsck -R -A -a 就会负责处理所有其它的文件系统：

# fsck -a /dev/hda1
# fsck -R -A -a

既然文件系统已经一致（或者，如果文件系统在系统重引导时已经卸装干净，并且您跳过了上一步骤），我们可以简单地以可读写方式重新安装根文件系统并且安装 /proc，如下所示：

# mount / -o remount,rw
# mount /proc

然后，安装可能位于其它分区中的所有重要的文件系统树。例如，如果在另一个分区上有 /usr，则还要输入：

# mount /usr

如果您想做的不仅仅只是打开一个编辑器的话，则最好是激活交换分区。如果您使用 emacs，您可能会需要它:)

# swapon -a

现在，您应该能够使用您喜爱的编辑器来编辑任何需要编辑的文件，以便修复现有的引导问题。一旦完成，只需按安装时的顺序，以只读方式重新安装分区即可。例如，如果有一个单独的 /usr 分区，为使所有的文件系统处于一致的状态（准备重新引导），可以输入：

# mount /usr -o remount,ro
# mount / -o remount,ro

现在，您可以安全地重新引导了。但愿现在已经解决了引导问题，并且可以使用正常的 LILO 或 GRUB 选项启动和运行系统。

# /sbin/reboot -nfi

【参考】
http://kernel.org/doc/Documentation/kernel-parameters.txt
