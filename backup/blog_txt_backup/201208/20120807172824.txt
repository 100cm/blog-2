PostgreSQL research

flex length type in struct

2012-08-07 17:28:24   查看原文>>

结构体的长度是定长的, 也就是说结构体内部每个元素应该都是固定长度的, 像char a[]这种不定长度的类型, 按理说不应该放在结构体内.
但是很奇怪的是, C中允许把char a[]这样的类型定义在结构体中, 只是它只能放在结构体元素的末端.
例如 : 

[root@db-172-16-3-150 zzz]# cat d.c
struct fish {
  int a;
  char b[];
  float c;
};

int main() {
  return 0;
}
编译时将报错 : 
[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./d.c -o d
./d.c:3: error: flexible array member not at end of struct



把char b[]改成定长的char b[10]; 就可以了。

[root@db-172-16-3-150 zzz]# cat d.c
struct fish {
  int a;
  char b[10];
  float c;
};

int main() {
  return 0;
}
[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./d.c -o d



或者把char b[]放在末端, 也可以, 只是用法会比较特别。

[root@db-172-16-3-150 zzz]# cat d.c
struct fish {
  int a;
  float c;
  char b[];
};

int main() {
  return 0;
}
编译正常
[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./d.c -o d



例子 : 

[root@db-172-16-3-150 zzz]# cat b.c
#include <stdio.h>
#include <string.h>

struct fish {
  int b;
  float c;
  char a[];
};

struct monkey {
  int b;
  float c;
  char a[100];
};

int main() {
  struct fish f1;
  struct monkey m1 = {100, 9.9, "ddabc"};
  f1.b=100;
  f1.c=9.9;
  f1.a[0]='a';
  f1.a[1]='b';
  fprintf(stdout, "fish:%lu, monkey:%lu, float:%lu, int:%lu\n", sizeof(struct fish), sizeof(struct monkey), sizeof(float), sizeof(int));
  fprintf(stdout, "f1.b:%i, f1.c:%f, f1.a:%s\n", f1.b, f1.c, (char *) &f1.a);
  fprintf(stdout, "m1.b:%i, m1.c:%f, m1.a:%s\n", m1.b, m1.c, (char *) &m1.a);
  fprintf(stdout, "f1:%p, f1.b:%p, f1.c:%p, f1.a:%p\n", &f1, &f1.b, &f1.c, &f1.a);
  fprintf(stdout, "m1:%p, m1.b:%p, m1.c:%p, m1.a:%p\n", &m1, &m1.b, &m1.c, &m1.a);
  fprintf(stdout, "f1:%lu, m1:%lu\n", sizeof(f1), sizeof(m1));
  return 0;
}

结果 : 
[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./b.c -o b && ./b
fish:8, monkey:108, float:4, int:4
f1.b:100, f1.c:9.900000, f1.a:ab?_4
m1.b:100, m1.c:9.900000, m1.a:ddabc
f1:0x7fff166ff610, f1.b:0x7fff166ff610, f1.c:0x7fff166ff614, f1.a:0x7fff166ff618
m1:0x7fff166ff5a0, m1.b:0x7fff166ff5a0, m1.c:0x7fff166ff5a4, m1.a:0x7fff166ff5a8
f1:8, m1:108



从长度上看, f1 只占用了8字节, 没有留出空间用于存放a[], 所以可能会导致溢出, 或改到其他重要数据, 因为这块内存没有被声明.

评论

hgj1995 - 2015-01-09 11:13:34

这个好像叫灵活数组成员
