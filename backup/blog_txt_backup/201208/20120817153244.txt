PostgreSQL research

pipe and fifo(first-in first-out special file, named pipe)

2012-08-17 15:32:44   查看原文>>

详细介绍参考man手册.
这篇blog主要
1. 验证write的原子操作情况.
2. 验证pipe只读一遍

例如 : 

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

// 定义fork多少个子进程. 预编译过程将代码中的MAX_P替换成2.
#define MAX_P 2

char * path = "/tmp/test.fifo";
char msg[] = "digoalhelloworldxxxxxxxxxxxxxxxxxxxx";
int i;
int fd_fifo;
pid_t p[MAX_P];
int status[MAX_P];
char out[2000];
ssize_t read_sz;

int main() {
  // 打印flag数值
  fprintf(stdout, "flag O_RDWR:%i, O_NONBLOCK:%i\n", O_RDWR, O_NONBLOCK);
  // 检测要创建的pipe文件是否已经存在, 不存在则创建
  if ( access(path, 0) != -1 ) {
    fprintf(stdout, "file %s exists, it will not revoke mkfifo().\n", path);
  }
  else if ( mkfifo(path, 0644) == -1 ) {
    fprintf(stdout, "error: %s\n", strerror(errno));
    exit(1);
  }
  // 在主进程以读写方式打开这个fifo pipe文件. 主进程只有读的需求, 可以使用O_RDONLY.
  // 这里使用O_RDWR 只是为了验证fifo pipe只占用一个fd table条目, 在/proc/$pid/fd/里面可以看到.
  // 多个flag可以使用+(数学运算加)或者|(位运算或), 位运算比数学运算快, 推荐使用.
  // 并且数学运算的加减还要考虑溢出和正负的问题. 不推荐使用
  fd_fifo = open(path, O_RDWR|O_NONBLOCK, 0644);
  if (fd_fifo == -1) {
    fprintf(stdout, "error: %s\n", strerror(errno));
    exit(1);
  }
  // fork子进程
  for(i=0; i<MAX_P; i++) {
    if ( (p[i] = fork()) == -1) {
      fprintf(stdout, "error: %s\n", strerror(errno));
      exit(1);
    }
    // 如果是子进程, 则跳出fork循环, 如果没有break子进程会继续这个循环, 继续fork, 这样会造成不可预估的后果.
    if (!p[i]) {
      break;
    }
  }
  // 子进程执行如下代码
  if(!p[i]) {
    // 修改flag 使用fcntl  ( int fcntl(int fd, int cmd, long arg) ). 子进程这里选择O_WRONLY, 只写.
    if ( fcntl(fd_fifo, F_SETFD, O_WRONLY|O_NONBLOCK) == -1 ) {
      fprintf(stdout, "modify child process's pipe flag error: %s\n", strerror(errno));
      exit(1);
    }
    // 从msg这个地址开始往pipe里面写入长sizeof(msg)的数据(byte stream), 原子操作参见man 7 pipe, 
    // 原子操作确保多进程同时写入pipe的数据不会被相互混淆, 例如两个进程都写了digoal, 那不会出现类似ddigoigoalal这样的情况.
    // 如果写入的长度小于pipe所剩空间并且大于PIPE_BUF(Linux下为4096字节), 则这次写操作将变成非原子操作(partial write).
    // 由于pipe写入是byte stream, 所以一次写入的最小单位是字节.
    // 因此非原子操作的情况下, 大于1字节的数据类型如int型的数据写入可能会导致数据混淆无法正确读取. 暂无测试.
    // 如0x98765432 这个int类型数据, 可能被拆成0x98 0x76 0x54 0x32 在入pipe的过程中, 可能被其他进程穿插写入, 那么就会造成这个int数据被拆散
    if (write(fd_fifo, msg, sizeof(msg)) == -1) {
      fprintf(stdout, "error: %s\n", strerror(errno));
    }
    // pipe用完记得关闭.
    if ( close(fd_fifo) == -1 ) {
      fprintf(stdout, "error: %s\n", strerror(errno));
    }
    // 子进程执行完直接从main函数return, 后面的代码将不会执行.
    return 0;
  }
// 指主进程要不要等待所有的子进程运行结束再继续执行后面的代码,
// 这里如果主进程选择等待, 很有可能前面fork出来的子进程在write时会报错.
// 因为这个fifo pipe到此还没有被read, 有溢出的可能.(Linux下pipe的容量是64KB, 超出的话write会出错)
/*
  for(i=0; i<MAX_P; i++) {
    waitpid(p[i], &status[i], 0);
  }
*/
  // 主进程循环从pipe里读取数据, 并打印到stdout.
  // 读取的数据将从pipe out出去.
  while (1) {
    // read_sz记录read读取的字节数, 如果=0则表示数据读完了
    read_sz = read(fd_fifo, out, sizeof(msg));
    if ( read_sz == 0 ) {
      if ( close(fd_fifo) == -1) {
        fprintf(stdout, "error: %s\n", strerror(errno));
      }
      fprintf(stdout, "no any data leave in fd_fifo.\n");
      break;
    }
    else if( read_sz == -1 ) {
      fprintf(stdout, "parent proc, error: %s\n", strerror(errno));
      break;
    }
    else {
      fprintf(stdout, "read size:%i, %s\n", (int) read_sz, out);
    }
  }
  // 因为读取的数据已经out了, 所以其他进程再也读不到pipe里的数据.
  // 也就是说pipe里的数据只能被读取到一次.
  if(! fork()) {
      while (1) {
      read_sz = read(fd_fifo, out, sizeof(msg));
      if ( read_sz == 0 ) {
        if ( close(fd_fifo) == -1) {
          fprintf(stdout, "error: %s\n", strerror(errno));
        }
        fprintf(stdout, "no any data leave in fd_fifo.\n");
        break;
      }
      else if( read_sz == -1 ) {
        fprintf(stdout, "child proc, error: %s\n", strerror(errno));
        break;
      }
      else {
        fprintf(stdout, "read size:%i, %s\n", (int) read_sz, out);
      }
    }
    // 一般子进程代码中末尾都加上return, 以免执行到主进程的代码段.
    return 0;
  }
  //sleep(100);
  return 0;
}


结果 : 

[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -Werror -g ./a.c -o abcd && ./abcd
flag O_RDWR:2, O_NONBLOCK:2048
file /tmp/test.fifo exists, it will not revoke mkfifo().
read size:37, digoalhelloworldxxxxxxxxxxxxxxxxxxxx
read size:37, digoalhelloworldxxxxxxxxxxxxxxxxxxxx
parent proc, error: Resource temporarily unavailable
child proc, error: Resource temporarily unavailable


关于非原子操作, Linux下pipe_buf = 4096 字节 : 

       O_NONBLOCK enabled, n > PIPE_BUF
              If the pipe is full, then write(2) fails, with errno set to EAGAIN.  Otherwise, from 1 to n bytes may be
              written (i.e., a "partial write" may occur; the caller should check the return value  from  write(2)  to
              see  how many bytes were actually written), and these bytes may be interleaved with writes by other pro-
              cesses.


将以上代码修改一下, 把char msg[] 改成 long double msg[] 存入超过4096字节的数据, 
同时分两批子进程, 一批往pipe里面写入单个超过4096字节的数据, 另一批写入单个1字节的数据, 再次测试会发现问题, 代码如下 : 

[root@db-172-16-3-150 zzz]# cat a.c
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

// 定义fork多少个子进程. 预编译过程将代码中的MAX_P替换成2.
#define MAX_P 200

int pt=1;
char * path = "/tmp/test.fifo";
int m;
long double msg[] = {987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456, 987654321000123456789.123456};
int i;
int fd_fifo;
pid_t p[MAX_P];
int status[MAX_P];
unsigned char out[99999999];
ssize_t read_sz;

int main() {
  // 检测要创建的pipe文件是否已经存在, 不存在则创建
  if ( access(path, 0) != -1 ) {
    fprintf(stderr, "file %s exists, it will not revoke mkfifo().\n", path);
  }
  else if ( mkfifo(path, 0644) == -1 ) {
    fprintf(stderr, "error: %s\n", strerror(errno));
    exit(1);
  }
  fd_fifo = open(path, O_RDWR|O_NONBLOCK, 0644);
  if (fd_fifo == -1) {
    fprintf(stderr, "error: %s\n", strerror(errno));
    exit(1);
  }
  for(i=0; i<MAX_P; i++) {
    if ( (p[i] = fork()) == -1) {
      fprintf(stderr, "error: %s\n", strerror(errno));
      exit(1);
    }
    if (!p[i]) {
      break;
    }
  }
  if(!p[i]) {
    int x;
    char n = 'A';
    switch(i%2) {
      case 0:
        for(x=0; x<50000; x++) {
          if (write(fd_fifo, &n, 1) == -1) {
            fprintf(stderr, "child error: %s\n", strerror(errno));
          }
        }
        break;
      case 1:
        for(x=0; x<500; x++) {
          if (write(fd_fifo, msg, sizeof(msg)) == -1) {
            fprintf(stderr, "child error: %s\n", strerror(errno));
          }
        }
        break;
    }
    if ( close(fd_fifo) == -1 ) {
      fprintf(stderr, "child error: %s\n", strerror(errno));
    }
    return 0;
  }

  while (1) {
    read_sz = read(fd_fifo, out, 1);
    if( read_sz == -1 ) {
      fprintf(stderr, "parent proc, error: %s\n", strerror(errno));
      return 1;
    }
    else if (read_sz != 0) {
      if( (pt != 0) && ((pt%16) == 0) ) {
        fprintf(stdout, "%02x\n", *out );
      }
      else {
        fprintf(stdout, "%02x", *out );
      }
    }
    else {
      return 1;
    }
    pt++;
  }
  return 0;
}


结果如下 : 

[root@db-172-16-3-150 zzz]# gcc -O3 -Wall -Wextra -g ./a.c -o abcd && ./abcd >/tmp/test.log 2>/dev/null
[root@db-172-16-3-150 zzz]# cat /tmp/test.log |sort|uniq
4000000000000000f0ef8710d429d644
40000000000000414141414141414141
4141414141414100f0ef8710d429d644
4141414141414141414141
414141414141414141414100f0ef8710
41414141414141414141414141414141
d429d6444000000000000000f0ef8710
d429d644400000000000004141414141


从/tmp/test.log的数据来看, msg已经被截断成了多段小于等于4096字节的内容, 但是单个long double元素(占用16字节)还是完整的(41 都是出现在msg中的两个long double值之间, 并没有截断long double). 
这个可能跟pipe的处理有关, 估计每次保证提交的原子操作数据是16的倍数(猜测.未经证实)
但是如果你的元素大于16字节, 比如struct, 那必然元素也会遭到破坏.

【参考】
man 7 pipe

NAME
       pipe - overview of pipes and FIFOs

DESCRIPTION
       Pipes  and  FIFOs  (also  known as named pipes) provide a unidirectional interprocess communication channel.  A
       pipe has a read end and a write end.  Data written to the write end of a pipe can be read from the read end  of
       the pipe.

       A  pipe  is  created using pipe(2), which creates a new pipe and returns two file descriptors, one referring to
       the read end of the pipe, the other referring to the write end.  Pipes can be used to  create  a  communication
       channel between related processes; see pipe(2) for an example.

       A  FIFO  (short  for  First  In  First Out) has a name within the file system (created using mkfifo(3)), and is
       opened using open(2).  Any process may open a FIFO, assuming the file permissions allow it.  The  read  end  is
       opened  using  the  O_RDONLY  flag;  the  write end is opened using the O_WRONLY flag.  See fifo(7) for further
       details.  Note: although FIFOs have a pathname in the file system, I/O on FIFOs does not involve operations  on
       the underlying device (if there is one).

   I/O on Pipes and FIFOs
       The  only  difference  between  pipes and FIFOs is the manner in which they are created and opened.  Once these
       tasks have been accomplished, I/O on pipes and FIFOs has exactly the same semantics.

       If a process attempts to read from an empty pipe, then read(2) will block until data is available.  If  a  pro-
       cess  attempts  to  write  to a full pipe (see below), then write(2) blocks until sufficient data has been read
       from the pipe to allow the write to complete.  Non-blocking I/O is possible by using the fcntl(2) F_SETFL oper-
       ation to enable the O_NONBLOCK open file status flag.

       The communication channel provided by a pipe is a byte stream: there is no concept of message boundaries.

       If  all file descriptors referring to the write end of a pipe have been closed, then an attempt to read(2) from
       the pipe will see end-of-file (read(2) will return 0).  If all file descriptors referring to the read end of  a
       pipe have been closed, then a write(2) will cause a SIGPIPE signal to be generated for the calling process.  If
       the calling process is ignoring this signal, then write(2) fails with the error  EPIPE.   An  application  that
       uses  pipe(2)  and  fork(2) should use suitable close(2) calls to close unnecessary duplicate file descriptors;
       this ensures that end-of-file and SIGPIPE/EPIPE are delivered when appropriate.

       It is not possible to apply lseek(2) to a pipe.

   Pipe Capacity
       A pipe has a limited capacity.  If the pipe is full, then a write(2) will block or fail, depending  on  whether
       the O_NONBLOCK flag is set (see below).  Different implementations have different limits for the pipe capacity.
       Applications should not rely on a particular capacity: an application should be designed so that a reading pro-
       cess consumes data as soon as it is available, so that a writing process does not remain blocked.

       In  Linux versions before 2.6.11, the capacity of a pipe was the same as the system page size (e.g., 4096 bytes
       on x86).  Since Linux 2.6.11, the pipe capacity is 65536 bytes.

   PIPE_BUF
       POSIX.1-2001 says that write(2)s of less than PIPE_BUF bytes must be atomic: the output data is written to  the
       pipe as a contiguous sequence.  Writes of more than PIPE_BUF bytes may be non-atomic: the kernel may interleave
       the data with data written by other processes.  POSIX.1-2001 requires PIPE_BUF to be at least 512  bytes.   (On
       Linux,  PIPE_BUF  is  4096 bytes.)  The precise semantics depend on whether the file descriptor is non-blocking
       (O_NONBLOCK), whether there are multiple writers to the pipe, and on n, the number of bytes to be written:

       O_NONBLOCK disabled, n <= PIPE_BUF
              All n bytes are written atomically; write(2) may block if there is not room for n bytes  to  be  written
              immediately

       O_NONBLOCK enabled, n <= PIPE_BUF
              If  there is room to write n bytes to the pipe, then write(2) succeeds immediately, writing all n bytes;
              otherwise write(2) fails, with errno set to EAGAIN.

       O_NONBLOCK disabled, n > PIPE_BUF
              The write is non-atomic: the data given to write(2) may be interleaved with write(2)s by other  process;
              the write(2) blocks until n bytes have been written.

       O_NONBLOCK enabled, n > PIPE_BUF
              If the pipe is full, then write(2) fails, with errno set to EAGAIN.  Otherwise, from 1 to n bytes may be
              written (i.e., a "partial write" may occur; the caller should check the return value  from  write(2)  to
              see  how many bytes were actually written), and these bytes may be interleaved with writes by other pro-
              cesses.

   Open File Status Flags
       The only open file status flags that can be meaningfully applied to a pipe or FIFO are O_NONBLOCK and  O_ASYNC.

       Setting the O_ASYNC flag for the read end of a pipe causes a signal (SIGIO by default) to be generated when new
       input becomes available on the pipe (see fcntl(2) for details).  On Linux, O_ASYNC is supported for  pipes  and
       FIFOs only since kernel 2.6.

   Portability notes
       On  some  systems  (but not Linux), pipes are bidirectional: data can be transmitted in both directions between
       the pipe ends.  According to POSIX.1-2001, pipes only need to be unidirectional.  Portable applications  should
       avoid reliance on bidirectional pipe semantics.

SEE ALSO
       dup(2), fcntl(2), open(2), pipe(2), poll(2), select(2), socketpair(2), stat(2), mkfifo(3), epoll(7), fifo(7)



man 7 fifo

NAME
       fifo - first-in first-out special file, named pipe

DESCRIPTION
       A FIFO special file (a named pipe) is similar to a pipe, except that it is accessed as part of the file system.
       It can be opened by multiple processes for reading or writing. When processes are exchanging data via the FIFO,
       the kernel passes all data internally without writing it to the file system. Thus, the FIFO special file has no
       contents on the file system, the file system entry merely serves as a reference point  so  that  processes  can
       access the pipe using a name in the file system.

       The kernel maintains exactly one pipe object for each FIFO special file that is opened by at least one process.
       The FIFO must be opened on both ends (reading and writing) before data can be  passed.  Normally,  opening  the
       FIFO blocks until the other end is opened also.

       A process can open a FIFO in non-blocking mode. In this case, opening for read only will succeed even if no-one
       has opened on the write side yet; opening for write only will fail with  ENXIO  (no  such  device  or  address)
       unless the other end has already been opened.

       Under  Linux,  opening  a  FIFO  for  read and write will succeed both in blocking and non-blocking mode. POSIX
       leaves this behaviour undefined. This can be used to open a FIFO for writing while there are no readers  avail-
       able.  A process that uses both ends of the connection in order to communicate with itself should be very care-
       ful to avoid deadlocks.

NOTES
       When a process tries to write to a FIFO that is not opened for read on the other side, the process  is  sent  a
       SIGPIPE signal.

       FIFO special files can be created by mkfifo(3), and are specially indicated in ls -l.

SEE ALSO
       mkfifo(1), open(2), pipe(2), sigaction(2), signal(2), socketpair(2), mkfifo(3), pipe(7)


pipe, mkfifo, open, read, write

