PostgreSQL research

bit-field

2012-08-09 11:02:29   查看原文>>

在struct中, 如果定义了几个元素,分别代表性别, 星期, 月份, 几号.
其中性别只有2种值, 
星期只有7种值,
月份只有12种值,
几号只需要31种值.
怎么样做到这个struct长度最小呢.
在C中占用一个字节的是char, short 2字节, int 4字节. 
显然如果使用char和short的话这么定义.

struct test {
  char sex;
  short week;
  short month;
  short day;
};


看看多长?

[root@db-172-16-3-150 ~]# cat g.c
#include <stdio.h>

int main() {
  typedef struct test {
    char sex;
    short week;
    short month;
    short day;
  } test;
  fprintf(stdout, "sizeof(test):%lu\n", sizeof(test));
  return 0;
}
结果
[root@db-172-16-3-150 ~]# gcc -O3 -Wall -Wextra -Werror -g ./g.c -o g && ./g
sizeof(test):8
注意1+2+2+2应该等于7字节, 怎么test会占用8字节呢, 这里发生了alignment;


来看看每个元素的地址 : 

[root@db-172-16-3-150 ~]# cat g.c
#include <stdio.h>

int main() {
  typedef struct test {
    char sex;
    short week;
    short month;
    short day;
  } test;
  test t1 = {'m', 1, 12, 31};
  fprintf(stdout, "sizeof(t1):%lu\n", sizeof(t1));
  fprintf(stdout, "&t1:%p, &(t1.sex):%p, &(t1.week):%p, &(t1.month):%p, &(t1.day):%p\n", &t1, &(t1.sex), &(t1.week), &(t1.month), &(t1.day));
  return 0;
}
结果
[root@db-172-16-3-150 ~]# gcc -O3 -Wall -Wextra -Werror -g ./g.c -o g && ./g
sizeof(t1):8
&t1:0x7fffda4c68f0, &(t1.sex):0x7fffda4c68f0, &(t1.week):0x7fffda4c68f2, &(t1.month):0x7fffda4c68f4, &(t1.day):0x7fffda4c68f6
// 显然char sex在这里占用了2字节. 它和short week一样大.



如果把short week 改成int week会怎么样呢?

  typedef struct test {
    char sex;
    int week;
    short month;
    short day;
  } test;


结果如下 : 

[root@db-172-16-3-150 ~]# gcc -O3 -Wall -Wextra -Werror -g ./g.c -o g && ./g
sizeof(t1):12
&t1:0x7fff37b19a80, &(t1.sex):0x7fff37b19a80, &(t1.week):0x7fff37b19a84, &(t1.month):0x7fff37b19a88, &(t1.day):0x7fff37b19a8a
// 此时char sex占用4字节了, 这说明补齐和后面的元素类型有关.



把short day改成int day看看会怎么样?

  typedef struct test {
    char sex;
    int week;
    short month;
    int day;
  } test;
结果如下 : 
[root@db-172-16-3-150 ~]# gcc -O3 -Wall -Wextra -Werror -g ./g.c -o g && ./g
sizeof(t1):16
&t1:0x7fffc9fe0180, &(t1.sex):0x7fffc9fe0180, &(t1.week):0x7fffc9fe0184, &(t1.month):0x7fffc9fe0188, &(t1.day):0x7fffc9fe018c
// 此时short month变成了4字节.



不改类型, 重新排列一下, 把int都放在前面, 小的放后面. 看看结果如何?
结果如下 : 

[root@db-172-16-3-150 ~]# cat g.c
#include <stdio.h>

int main() {
  typedef struct test {
    int week;  // 4字节
    int day;  // 4字节
    short month;  // 2字节
    char sex;  // 2字节
  } test;
  test t1 = {.sex='m', .week=1, .month=12, .day=31};
  fprintf(stdout, "sizeof(t1):%lu\n", sizeof(t1));
  fprintf(stdout, "&t1:%p, &(t1.week):%p, &(t1.day):%p, &(t1.month):%p, &(t1.sex):%p\n", &t1, &(t1.week), &(t1.day), &(t1.month), &(t1.sex));
  return 0;
}
[root@db-172-16-3-150 ~]# gcc -O3 -Wall -Wextra -Werror -g ./g.c -o g && ./g
sizeof(t1):12
&t1:0x7fffd3d455d0, &(t1.week):0x7fffd3d455d0, &(t1.day):0x7fffd3d455d4, &(t1.month):0x7fffd3d455d8, &(t1.sex):0x7fffd3d455da
// 总长度变成了12字节.



好了下面切入正题, week, sex, day, month 如果用比特位来表示的话。

week 3个bit
sex 1个bit
day 5个bit
month 4个bit 


这些就能够表示了. 总共加起来13个比特, 也就是2个字节（16bit）就可以表示。
注意, 由于用到了bit, 带符号的数字类型就不合适了, 如int, 第一个比特位表示正负, 所以要使用unsigned来定义数字类型来存储bit信息.
(unsigned int, unsigned char, unsigned short 等等都可以)
如下 : 

[root@db-172-16-3-150 ~]# cat g.c
#include <stdio.h>

int main() {
  typedef struct test {
    unsigned short week:3;
    unsigned short day:5;
    unsigned short month:4;
    unsigned short sex:1;
  } test;
  test t1 = {.sex=1, .week=1, .month=12, .day=31};  // 此时sex也必须用数字(0和1)来表示
  fprintf(stdout, "sizeof(t1):%lu\n", sizeof(t1));
  fprintf(stdout, "&t1:%p, &(t1.week):%p, &(t1.day):%p, &(t1.month):%p, &(t1.sex):%p\n", &t1, &(t1.week), &(t1.day), &(t1.month), &(t1.sex));
  return 0;
}
结果, 因为没有办法获取bit-field的地址(地址最小单位是1字节, 1字节内已经没法获取了.)
[root@db-172-16-3-150 ~]# gcc -O3 -Wall -Wextra -Werror -g ./g.c -o g && ./g
cc1: warnings being treated as errors
./g.c: In function ‘main’:
./g.c:10: warning: large integer implicitly truncated to unsigned type
./g.c:12: error: cannot take address of bit-field ‘week’
./g.c:12: error: cannot take address of bit-field ‘day’
./g.c:12: error: cannot take address of bit-field ‘month’
./g.c:12: error: cannot take address of bit-field ‘sex’


下面看看这个struct占用了多少空间.

// 注释掉fprintf(stdout, "&t1:%p, &(t1.week):%p, &(t1.day):%p, &(t1.month):%p, &(t1.sex):%p\n", &t1, &(t1.week), &(t1.day), &(t1.month), &(t1.sex));
结果 : 
[root@db-172-16-3-150 ~]# gcc -O3 -Wall -Wextra -Werror -g ./g.c -o g && ./g
sizeof(t1):2
// 现在struct test 只占用了2字节, 显然大大节约了空间.



但是又有要注意的问题来了, 前面已经提到了alignment, 如果这些bit-field不是连续存储的, 中间穿插了其他类型如int, 那么占用空间又不一样了.
因此要节约空间, 设计结构的时候要考虑到这些点.

[root@db-172-16-3-150 ~]# cat g.c
#include <stdio.h>

int main() {
  typedef struct test {
    unsigned short week:3;  
    unsigned short day:5;  // day+week 占用4字节
    int age;  // 4字节
    unsigned short month:4;
    unsigned short sex:1;  // sex+month占用4字节, 这里为什么不是2字节? 因为这个结构中 最大的元素 int age 这个元素单独占用了4字节, 所以整个结构体必须占用4的倍数字节. 如果改成long int age, 那么这个结构将占用24字节, 也就是8的倍数.
  } test;
  test t1 = {.age=10, .sex=1, .week=1, .month=12, .day=31};
  fprintf(stdout, "sizeof(t1):%lu\n", sizeof(t1));
//  fprintf(stdout, "&t1:%p, &(t1.week):%p, &(t1.day):%p, &(t1.month):%p, &(t1.sex):%p\n", &t1, &(t1.week), &(t1.day), &(t1.month), &(t1.sex));
  return 0;
}
结果 : 
[root@db-172-16-3-150 ~]# gcc -O3 -Wall -Wextra -Werror -g ./g.c -o g && ./g
sizeof(t1):12


