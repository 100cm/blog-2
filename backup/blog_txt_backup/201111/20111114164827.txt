PostgreSQL research

Database -- 隐患

2011-11-14 16:48:27   查看原文>>

非常严重的隐患，可能由--引发。
请看 : 
-- 在SQL语句中常作为注释来使用。
下面来看一个PostgreSQL的测试 : 
postgres=# create table comment_test(userid int8 primary key,nickname text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "comment_test_pkey" for table "comment_test"
CREATE TABLE
postgres=# insert into comment_test select generate_series(1,100),'digoal'||generate_series(1,100);
INSERT 0 100
假如我们的程序需要修改userid=1的用户昵称为 new'-- 。
看看下面的SQL发生了什么。
postgres=# update comment_test set nickname='new'--' where userid=1;
然后进入换行了。说明;分号没起作用。为啥呢, --在这里变成注释符了。
postgres-# ;
这里如果输入一个分号的话，完蛋了。所有记录被更新了。
UPDATE 100
postgres=# select distinct nickname from comment_test ;
 nickname 
----------
 new
(1 row)


下面来看看Oracle的测试 : 
SQL> create table comment_test (userid int primary key,nickname varchar2(32));
Table created.
SQL> insert into comment_test select rownum,'digoal'||rownum from(select rownum from  dual connect by level<=100);
100 rows created.
执行与PostgreSQL同样的SQL，看看发生了什么。
SQL> update comment_test set nickname='new'--' where userid=1;

100 rows updated.
SQL> select distinct nickname from comment_test;

NICKNAME
--------------------------------
new
Oracle没有等待分号结束符。直接就执行了。而且也是更新了所有记录。
看样子-- 不会注释Oracle的结束符。

接下来看看如何避免PostgreSQL中发生这种情况 : 
1. 修改连接数据库的驱动，禁止自动加入SQL结束符。(这个可能对ORACLE无效), 这样的话上面的SQL应该会处于等待状态，而不会提交。
2. 禁止使用--作为昵称。
3. 使用函数来操作。
4. 单引号注释。
5. 程序中加载SQL注入检测模块, 过滤类似的字符.

单引号注释比较容易实现 : 
PostgreSQL方法很多 : 
postgres=# update comment_test set nickname=E'new\'--' where userid=1;
UPDATE 1
postgres=# update comment_test set nickname='new''--' where userid=1;
UPDATE 1

Oracle : 
SQL> update comment_test set nickname='new''--' where userid=1;
1 row updated.




