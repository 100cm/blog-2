PostgreSQL research

classic case: expired consume

2011-11-03 16:28:11   查看原文>>

大多数运营商对话费的做了有效期的限制。如30元话费冲到手机卡里，有效期是3个月。100元是10个月。更多的话最长可以达到18个月。
可能是为了促进消费。
还有一种情况是，分了两种有效期的钱，比如1种收入来自点击广告，有效期是1个月。另一种收入来自充值，有效期是3个月。
在消费的时候，优先消费将要过期的钱。每天都有一笔钱将要过期（一个月前的）。
用户每次登陆账号的时候都要显示当前可用余额是多少（在有效期内的钱），每次点击广告增加的钱要实时的显示出来。
可能要用到pgmemcached提高效率。
下面是一个例子 : 
用户账户表,
create table user_balance(userid int8,balance numeric check (balance>=0),expired date,constraint pk_user_balance primary key (userid,expired));

充值函数,
create or replace function charge (i_userid int8,i_balance numeric,i_expired date) returns int as $BODY$
declare
begin
perform 1 from user_balance where userid=i_userid and expired=i_expired;
if found then
update user_balance set balance=balance+i_balance where userid=i_userid and expired=i_expired;
else
insert into user_balance (userid,balance,expired) values (i_userid,i_balance,i_expired);
end if;
return 0;
exception
when others then
return 1;
end;
$BODY$ language plpgsql;

消费函数,
create or replace function consume (i_userid int8,i_balance numeric) returns int as $BODY$
declare
v_balance1 numeric;
v_balance2 numeric;
v_userid int8;
v_expired date;
v_cursor1 refcursor;
begin
perform sum(balance) from user_balance where userid=i_userid and expired >= current_date and balance>0 having sum(balance)>=i_balance;
if found then
v_balance1 = i_balance;
-- raise notice 'v_balance1: %',v_balance1;
open v_cursor1 for select userid,balance,expired from user_balance where userid=i_userid and expired >= current_date and balance>0 order by expired for update;
while v_balance1>0 LOOP
fetch from v_cursor1 into v_userid,v_balance2,v_expired;
update user_balance set balance=(case when balance<=v_balance1 then 0 else balance-v_balance1 end) where current of v_cursor1;
v_balance1=v_balance1-v_balance2;
-- raise notice 'v_balance1: %',v_balance1;
-- raise notice 'v_balance2: %',v_balance2;
END LOOP;
CLOSE v_cursor1;
else
return 1;
end if;
if v_balance1>0 then
raise EXCEPTION 'USER: % consume failed.', user_id;
return 3;
end if;
return 0;
exception
when others then
return 2;
end;
$BODY$ language plpgsql;

这里今天是11月3号, 测试,
插入测试数据, 部分是过期的充值, 为了测试效果.
digoal=> select * from charge(1,2,'2011-11-04');
 charge 
--------
      0
digoal=> select * from charge(1,2,'2011-11-03');
 charge 
--------
      0
digoal=> select * from charge(1,5,'2011-12-03');
 charge 
--------
      0
digoal=> select * from charge(1,5,'2011-10-03');
 charge 
--------
      0
digoal=> select * from charge(1,5,'2011-10-03');
 charge 
--------
      0
digoal=> select * from charge(1,5,'2011-10-04');
 charge 
--------
      0
digoal=> select * from charge(1,500,'2011-12-01');
 charge 
--------
      0
充值测试最终结果如下 : 
digoal=> select * from user_balance order by expired ;
 userid | balance |  expired   
--------+---------+------------
      1 |      10 | 2011-10-03
      1 |       5 | 2011-10-04
      1 |       2 | 2011-11-03
      1 |       2 | 2011-11-04
      1 |     500 | 2011-12-01
      1 |       5 | 2011-12-03

消费测试 : 
消费10元。
digoal=> select * from consume(1,10);
 consume 
---------
       0
(1 row)

Time: 1.791 ms
digoal=> select * from user_balance order by expired ;
 userid | balance |  expired   
--------+---------+------------
      1 |      10 | 2011-10-03
      1 |       5 | 2011-10-04
      1 |       0 | 2011-11-03
      1 |       0 | 2011-11-04
      1 |     494 | 2011-12-01
      1 |       5 | 2011-12-03
(6 rows)

Time: 0.349 ms
符合预期，从先过期的钱币开始消费，过期的钱币无法使用。

超额消费测试，符合预期，无法超额消费。
digoal=> select * from consume(1,1000);
 consume 
---------
       1
(1 row)

Time: 0.648 ms
digoal=> select * from user_balance order by expired ;
 userid | balance |  expired   
--------+---------+------------
      1 |      10 | 2011-10-03
      1 |       5 | 2011-10-04
      1 |       0 | 2011-11-03
      1 |       0 | 2011-11-04
      1 |     494 | 2011-12-01
      1 |       5 | 2011-12-03
(6 rows)

Time: 0.359 ms

【错误的改进】
千万不要不用FOR UPDATE。
原因在这篇BLOG指出,
http://blog.163.com/digoal@126/blog/static/1638770402011102521151980/

前面的消费函数每次消费都要FOR UPDATE , 以免别的进程对这些记录做DML操作.
下面换一种方法, 可以不需要FOR UPDATE. 提高并发性.这让我想起一种应用场景,悲观锁和乐观锁.（但是这里请别这么用)
create or replace function consume (i_userid int8,i_balance numeric) returns int as $BODY$
declare
v_balance1 numeric;
v_balance2 numeric;
v_userid int8;
v_expired date;
v_cursor1 refcursor;
begin
perform sum(balance) from user_balance where userid=i_userid and expired >= current_date and balance>0 having sum(balance)>=i_balance;
if found then
v_balance1 = i_balance;
-- raise notice 'v_balance1: %',v_balance1;
open v_cursor1 for select userid,balance,expired from user_balance where userid=i_userid and expired >= current_date and balance>0 order by expired;
while v_balance1>0 LOOP
fetch from v_cursor1 into v_userid,v_balance2,v_expired;
update user_balance set balance=(case when v_balance2<=v_balance1 then balance-v_balance2 else balance-v_balance1 end) where current of v_cursor1;
v_balance1=v_balance1-v_balance2;
-- raise notice 'v_balance1: %',v_balance1;
-- raise notice 'v_balance2: %',v_balance2;
END LOOP;
CLOSE v_cursor1;
else
return 1;
end if;
if v_balance1>0 then
raise EXCEPTION 'USER: % consume failed.', user_id;
return 3;
end if;
return 0;
exception
when others then
return 2;
end;
$BODY$ language plpgsql;
 
[改进1]
怎么提高同一个用户消费的并发能力。因为都是从最快到期的记录开始更新，所以并发性就比较差了。
我记得PostgreSQL源码在讲FSM的部分有提到过提高块并发的处理方法。(binary tree结构存储剩余空间)
    4
 4     2
3 4   0 2    <- This level represents heap pages
(有一定的借鉴意义)
如果能智能选择每次更新的记录，那就不存在行锁冲突的问题了。
比如
userid , balance , expired
1 , 10 , '2011-11-04'
1 , 5 , '2011-11-05'
1 , 15 , '2011-11-06'
如果有两个进程同时对用户1进行扣费，其中一个扣费12元，另一个扣费10元。
按照前面的函数，只能等一个处理完了再处理另外一个。（行锁等待）
其中一个进程1
update user_balance set balance=balance-10 where id=1 and expired='2011-11-04';
update user_balance set balance=balance-2 where id=1 and expired='2011-11-05';
另外一个进程2
update user_balance set balance=balance-10 where id=1 and expired='2011-11-04';
等待进程1，并报错，因为balance已经=0了.-10就是负了。
 
但是如果能智能选择的话，这个过程可以变成 :
其中一个进程1
update user_balance set balance=balance-10 where id=1 and expired='2011-11-04';
update user_balance set balance=balance-2 where id=1 and expired='2011-11-05';
另外一个进程2
update user_balance set balance=balance-10 where id=1 and expired='2011-11-06';
无须等待进程1.
有点缺陷是
balance=3 where id=1 and expired='2011-11-05'; 按照规则这笔资金应该在进程2中先消费掉。但是提高了并发能力。
所以有利有弊。
 
【注意事项】
1. 由于每次消费都需要从记录表获取当前额度，所以开销会比较大。需要提防恶意攻击。期待9.2的INDEX ONLY SCAN.
2. 更新指针无法使用returning返货结果。但是可以先fetch出来老的数据，后更新这个指针。



