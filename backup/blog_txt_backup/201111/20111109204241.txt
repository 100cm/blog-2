PostgreSQL research

UPDATE parent TABLE where current of cursor instead Dynamic TABLENAME

2011-11-09 20:42:41   查看原文>>

前几天写的关于帐号的货币到期的案例。业务逻辑可以参考我之前写的相关BLOG(在本文末尾)。

其中消费函数，里面只涉及了单BALANCE表的更新。

今天业务开发人员找到我，可能存在多表更新的情况。而且要按照特定的顺序来更新，来说说背景，用户的账户分赠与的和自己充值的。

赠与的金钱有效期较短，用user_balance_give来表示。

自己充值的金钱有效期较长，用user_balance_charge来表示。

user_balance_give和user_balance_charge都做了分区，按YYYYMM来分，这样对于DBA来说会比较好维护历史数据，不影响业务。

所以消费的时候更新的其实是按月分区的子表如user_balance_give_201111。但是在消费函数中就可能要使用动态SQL来拼写表名进行更新。

这样一方面是加大了函数的复杂度，动态SQL本身也使得性能极度下降，性能降低多少可以参考我上一篇BLOG(在本文末尾)。

于是想了一个办法，巧妙的使用PostgreSQL继承的功能，达成了业务的需求。

涉及到一个表同时继承多个表（允许表结构不一样，只要有重叠部分）。

一个父表被多个不同表结构的子表继承。

例如 :

以下为充值表的父表，为管理便利而创建。 

digoal=> create table user_balance_charge (userid bigint,balance numeric check(balance >= 0),expired date,c1 text,c2 text,primary key (userid,expired));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_balance_charge_pkey" for table "user_balance_charge"
CREATE TABLE


以下为赠与表的父表，为管理便利而创建。

digoal=> create table user_balance_give (userid bigint,balance numeric check(balance >= 0),expired date,g1 int,g2 text,g3 text,primary key (userid,expired));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_balance_give_pkey" for table "user_balance_give"
CREATE TABLE


以下为用于消费更新的父表，为简化消费函数的逻辑而创建。

digoal=> create table user_balance_update (userid bigint,balance numeric,expired date);
CREATE TABLE


下面创建充值表的子表。

digoal=> create table user_balance_charge_201111 (like user_balance_charge including all) inherits(user_balance_charge,user_balance_update);
NOTICE:  merging multiple inherited definitions of column "userid"
NOTICE:  merging multiple inherited definitions of column "balance"
NOTICE:  merging multiple inherited definitions of column "expired"
NOTICE:  merging column "userid" with inherited definition
NOTICE:  merging column "balance" with inherited definition
NOTICE:  merging column "expired" with inherited definition
NOTICE:  merging column "c1" with inherited definition
NOTICE:  merging column "c2" with inherited definition
NOTICE:  merging constraint "user_balance_charge_balance_check" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_balance_charge_201111_pkey" for table "user_balance_charge_201111"
CREATE TABLE




digoal=> create table user_balance_charge_201112 (like user_balance_charge including all) inherits(user_balance_charge,user_balance_update);
NOTICE:  merging multiple inherited definitions of column "userid"
NOTICE:  merging multiple inherited definitions of column "balance"
NOTICE:  merging multiple inherited definitions of column "expired"
NOTICE:  merging column "userid" with inherited definition
NOTICE:  merging column "balance" with inherited definition
NOTICE:  merging column "expired" with inherited definition
NOTICE:  merging column "c1" with inherited definition
NOTICE:  merging column "c2" with inherited definition
NOTICE:  merging constraint "user_balance_charge_balance_check" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_balance_charge_201112_pkey" for table "user_balance_charge_201112"
CREATE TABLE


从子表的显示可以看出这个表继承了两个父表。

digoal=> \d+ user_balance_charge_201111
       Table "digoal.user_balance_charge_201111"
 Column  |  Type   | Modifiers | Storage  | Description
---------+---------+-----------+----------+-------------
 userid  | bigint  | not null  | plain    |
 balance | numeric |           | main     |
 expired | date    | not null  | plain    |
 c1      | text    |           | extended |
 c2      | text    |           | extended |
Indexes:
    "user_balance_charge_201111_pkey" PRIMARY KEY, btree (userid, expired)
Check constraints:
    "user_balance_charge_balance_check" CHECK (balance >= 0::numeric)
Inherits: user_balance_charge,
          user_balance_update
Has OIDs: no


下面创建赠与表的子表。

digoal=> create table user_balance_give_201111 (like user_balance_give including all) inherits(user_balance_give,user_balance_update);
NOTICE:  merging multiple inherited definitions of column "userid"
NOTICE:  merging multiple inherited definitions of column "balance"
NOTICE:  merging multiple inherited definitions of column "expired"
NOTICE:  merging column "userid" with inherited definition
NOTICE:  merging column "balance" with inherited definition
NOTICE:  merging column "expired" with inherited definition
NOTICE:  merging column "g1" with inherited definition
NOTICE:  merging column "g2" with inherited definition
NOTICE:  merging column "g3" with inherited definition
NOTICE:  merging constraint "user_balance_give_balance_check" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_balance_give_201111_pkey" for table "user_balance_give_201111"
CREATE TABLE




digoal=> create table user_balance_give_201112 (like user_balance_give including all) inherits(user_balance_give,user_balance_update);
NOTICE:  merging multiple inherited definitions of column "userid"
NOTICE:  merging multiple inherited definitions of column "balance"
NOTICE:  merging multiple inherited definitions of column "expired"
NOTICE:  merging column "userid" with inherited definition
NOTICE:  merging column "balance" with inherited definition
NOTICE:  merging column "expired" with inherited definition
NOTICE:  merging column "g1" with inherited definition
NOTICE:  merging column "g2" with inherited definition
NOTICE:  merging column "g3" with inherited definition
NOTICE:  merging constraint "user_balance_give_balance_check" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_balance_give_201112_pkey" for table "user_balance_give_201112"
CREATE TABLE


从子表的显示可以看出这个表继承了两个父表。

digoal=> \d+ user_balance_give_201111
        Table "digoal.user_balance_give_201111"
 Column  |  Type   | Modifiers | Storage  | Description
---------+---------+-----------+----------+-------------
 userid  | bigint  | not null  | plain    |
 balance | numeric |           | main     |
 expired | date    | not null  | plain    |
 g1      | integer |           | plain    |
 g2      | text    |           | extended |
 g3      | text    |           | extended |
Indexes:
    "user_balance_give_201111_pkey" PRIMARY KEY, btree (userid, expired)
Check constraints:
    "user_balance_give_balance_check" CHECK (balance >= 0::numeric)
Inherits: user_balance_give,
          user_balance_update
Has OIDs: no


接下来创建消费函数：

digoal=> \sf consume
CREATE OR REPLACE FUNCTION digoal.consume_father(i_userid bigint, i_balance numeric)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
v_balance1 numeric;
v_balance2 numeric;
v_userid int8;
v_expired date;
v_cursor1 refcursor;
begin
perform sum(balance) from user_balance_update where userid=i_userid and expired >= current_date and balance>0 having sum(balance)>=i_balance;
if found then
v_balance1 = i_balance;
-- raise notice 'v_balance1: %',v_balance1;
open v_cursor1 for select userid,balance,expired from user_balance_update where userid=i_userid and expired >= current_date and balance>0 order by expired for update;
while v_balance1>0 LOOP
fetch from v_cursor1 into v_userid,v_balance2,v_expired;
update user_balance_update set balance=(case when balance<=v_balance1 then 0 else balance-v_balance1 end) where current of v_cursor1;
v_balance1=v_balance1-v_balance2;
-- raise notice 'v_balance1: %',v_balance1;
-- raise notice 'v_balance2: %',v_balance2;
END LOOP;
CLOSE v_cursor1;
else
return 1;
end if;
if v_balance1>0 then
raise EXCEPTION 'USER: % consume failed.', user_id;
return 3;
end if;
return 0;
exception
when others then
return 2;
end;
$function$



然后往4个子表分别插入一些充值和赠与的记录。

digoal=> select current_date,* from user_balance_charge_201111 order by expired;
    date    | userid | balance |  expired   |   c1   |  c2 
------------+--------+---------+------------+--------+------
 2011-11-09 |      1 |       2 | 2011-11-07 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-08 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-09 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-11 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-13 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-14 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-15 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-17 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-19 | digoal | zhou
(9 rows)




digoal=> select current_date,* from user_balance_charge_201112 order by expired;
    date    | userid | balance |  expired   |   c1   |  c2 
------------+--------+---------+------------+--------+------
 2011-11-09 |      1 |       2 | 2011-11-07 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-08 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-09 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-11 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-12 | digoal | zhou
 2011-11-09 |      1 |       2 | 2011-11-13 | digoal | zhou
(6 rows)




digoal=> select current_date,* from user_balance_give_201111 order by expired;
    date    | userid | balance |  expired   | g1 |  g2  |  g3 
------------+--------+---------+------------+----+------+------
 2011-11-09 |      1 |       2 | 2011-11-06 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-09 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-10 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-12 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-14 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-16 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-18 |  1 | zhou | test
(7 rows)




digoal=> select current_date,* from user_balance_give_201112 order by expired;
    date    | userid | balance |  expired   | g1 |  g2  |  g3 
------------+--------+---------+------------+----+------+------
 2011-11-09 |      1 |       2 | 2011-11-05 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-09 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-10 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-12 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-13 |  1 | zhou | test
 2011-11-09 |      1 |       2 | 2011-11-18 |  1 | zhou | test
(6 rows)



通过user_balance_update这个父表来查看这些数据。

digoal=> select current_date,* from user_balance_update order by expired;
    date    | userid | balance |  expired  
------------+--------+---------+------------
 2011-11-09 |      1 |       2 | 2011-11-05
 2011-11-09 |      1 |       2 | 2011-11-06
 2011-11-09 |      1 |       2 | 2011-11-07
 2011-11-09 |      1 |       2 | 2011-11-07
 2011-11-09 |      1 |       2 | 2011-11-08
 2011-11-09 |      1 |       2 | 2011-11-08
 2011-11-09 |      1 |       2 | 2011-11-09
 2011-11-09 |      1 |       2 | 2011-11-09
 2011-11-09 |      1 |       2 | 2011-11-09
 2011-11-09 |      1 |       2 | 2011-11-09
 2011-11-09 |      1 |       2 | 2011-11-10
 2011-11-09 |      1 |       2 | 2011-11-10
 2011-11-09 |      1 |       2 | 2011-11-11
 2011-11-09 |      1 |       2 | 2011-11-11
 2011-11-09 |      1 |       2 | 2011-11-12
 2011-11-09 |      1 |       2 | 2011-11-12
 2011-11-09 |      1 |       2 | 2011-11-12
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-14
 2011-11-09 |      1 |       2 | 2011-11-14
 2011-11-09 |      1 |       2 | 2011-11-15
 2011-11-09 |      1 |       2 | 2011-11-16
 2011-11-09 |      1 |       2 | 2011-11-17
 2011-11-09 |      1 |       2 | 2011-11-18
 2011-11-09 |      1 |       2 | 2011-11-18
 2011-11-09 |      1 |       2 | 2011-11-19
(28 rows)


接下来消费测试一下，看看能不能满足需求。

digoal=> select * from consume_father(1,16);
 consume_father
----------------
              0
(1 row)


看看是不是满足需求，结果满足。

digoal=> select current_date,* from user_balance_update order by expired;
    date    | userid | balance |  expired  
------------+--------+---------+------------
 2011-11-09 |      1 |       2 | 2011-11-05
 2011-11-09 |      1 |       2 | 2011-11-06
 2011-11-09 |      1 |       2 | 2011-11-07
 2011-11-09 |      1 |       2 | 2011-11-07
 2011-11-09 |      1 |       2 | 2011-11-08
 2011-11-09 |      1 |       2 | 2011-11-08
 2011-11-09 |      1 |       0 | 2011-11-09
 2011-11-09 |      1 |       0 | 2011-11-09
 2011-11-09 |      1 |       0 | 2011-11-09
 2011-11-09 |      1 |       0 | 2011-11-09
 2011-11-09 |      1 |       0 | 2011-11-10
 2011-11-09 |      1 |       0 | 2011-11-10
 2011-11-09 |      1 |       0 | 2011-11-11
 2011-11-09 |      1 |       0 | 2011-11-11
 2011-11-09 |      1 |       2 | 2011-11-12
 2011-11-09 |      1 |       2 | 2011-11-12
 2011-11-09 |      1 |       2 | 2011-11-12
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-14
 2011-11-09 |      1 |       2 | 2011-11-14
 2011-11-09 |      1 |       2 | 2011-11-15
 2011-11-09 |      1 |       2 | 2011-11-16
 2011-11-09 |      1 |       2 | 2011-11-17
 2011-11-09 |      1 |       2 | 2011-11-18
 2011-11-09 |      1 |       2 | 2011-11-18
 2011-11-09 |      1 |       2 | 2011-11-19
(28 rows)


再消费一笔 :

digoal=> select * from consume_father(1,5);
 consume_father
----------------
              0
(1 row)


得到预期的结果。

digoal=> select current_date,* from user_balance_update order by expired;
    date    | userid | balance |  expired  
------------+--------+---------+------------
 2011-11-09 |      1 |       2 | 2011-11-05
 2011-11-09 |      1 |       2 | 2011-11-06
 2011-11-09 |      1 |       2 | 2011-11-07
 2011-11-09 |      1 |       2 | 2011-11-07
 2011-11-09 |      1 |       2 | 2011-11-08
 2011-11-09 |      1 |       2 | 2011-11-08
 2011-11-09 |      1 |       0 | 2011-11-09
 2011-11-09 |      1 |       0 | 2011-11-09
 2011-11-09 |      1 |       0 | 2011-11-09
 2011-11-09 |      1 |       0 | 2011-11-09
 2011-11-09 |      1 |       0 | 2011-11-10
 2011-11-09 |      1 |       0 | 2011-11-10
 2011-11-09 |      1 |       0 | 2011-11-11
 2011-11-09 |      1 |       0 | 2011-11-11
 2011-11-09 |      1 |       0 | 2011-11-12
 2011-11-09 |      1 |       0 | 2011-11-12
 2011-11-09 |      1 |       1 | 2011-11-12
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-13
 2011-11-09 |      1 |       2 | 2011-11-14
 2011-11-09 |      1 |       2 | 2011-11-14
 2011-11-09 |      1 |       2 | 2011-11-15
 2011-11-09 |      1 |       2 | 2011-11-16
 2011-11-09 |      1 |       2 | 2011-11-17
 2011-11-09 |      1 |       2 | 2011-11-18
 2011-11-09 |      1 |       2 | 2011-11-18
 2011-11-09 |      1 |       2 | 2011-11-19
(28 rows)


这里巧妙的使用了继承的特性，达成了业务的需求，并且处理逻辑比较简单。

因为游标返回的是个链接，真正更新的是子表，并且使用父表还节约了代码，结合9.1.1的新性能改进处order by child table，无需合并结果再order by ，效率非常高。

【讨论】

问题: 

就以你这个应用为例，设计上的事情再问问：

1、我看了没有oid和timestamp ,实际应用中，加了没有。对于逻辑主键和业务主键取舍能否给点意见。

2、虽然做了分表，但是随着时间的增长，子表会越来越多，查询也会越来越慢，，如何处理历史数据：1、过期记录，，3 早期的表。


回答: 

HI，

1. 本文内容主要针对的是UPDATE parent TABLE where current of cursor instead execute with Dynamic TABLENAME应用场景。字段方面省掉了实际应用不方便细化，请见谅。

2. 过期金币子表可以脱离继承(业务逻辑参考我之前写的BLOGhttp://blog.163.com/digoal@126/blog/static/163877040201110314133817)，实际是不影响的。


[参考]

http://blog.163.com/digoal@126/blog/static/1638770402011109103953350/

http://blog.163.com/digoal@126/blog/static/163877040201110314133817/

 

 

