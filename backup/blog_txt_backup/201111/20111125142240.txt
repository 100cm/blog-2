PostgreSQL research

attention : update TABLE use WHERE CURRENT OF

2011-11-25 14:22:40   查看原文>>

当需要按ROW来处理数据时，游标会比较适合。
例如前段时间提到的案例 : 
http://blog.163.com/digoal@126/blog/static/163877040201110314133817/
http://blog.163.com/digoal@126/blog/static/163877040201110982243362/

语法 : 
[ WITH [ RECURSIVE ] with_query [, ...] ]
UPDATE [ ONLY ] table [ [ AS ] alias ]
    SET { column = { expression | DEFAULT } |
          ( column [, ...] ) = ( { expression | DEFAULT } [, ...] ) } [, ...]
    [ FROM from_list ]
    [ WHERE condition | WHERE CURRENT OF cursor_name ]
    [ RETURNING * | output_expression [ [ AS ] output_name ] [, ...] ]

游标定位行使用的是tuple_tableoid和tuple_tid。

如果需要更新游标定位到的记录，有一个需要注意的问题。
1. 定义游标的SQL 带了 FOR UPDATE .
2. 定义游标的SQL 没有带 FOR UPDATE . 
在更新这两种游标的时候数据库处理是不一样的 : 
  当更新没有for update打开的游标时，更新可能会报这样的错误 : 
  "cursor \"%s\" is not a simply updatable scan of table \"%s\"",cursor_name, table_name

原因是,
以下摘自src/backend/executor/execCurrent.c
/*
 * execCurrentOf
 *
 * Given a CURRENT OF expression and the OID of a table, determine which row
 * of the table is currently being scanned by the cursor named by CURRENT OF,
 * and return the row's TID into *current_tid.
 *
 * Returns TRUE if a row was identified.  Returns FALSE if the cursor is valid
 * for the table but is not currently scanning a row of the table (this is a
 * legal situation in inheritance cases).  Raises error if cursor is not a
 * valid updatable scan of the specified table.
 */
        /*
         * We have two different strategies depending on whether the cursor uses
         * FOR UPDATE/SHARE or not.  The reason for supporting both is that the
         * FOR UPDATE code is able to identify a target table in many cases where
         * the other code can't, while the non-FOR-UPDATE case allows use of WHERE
         * CURRENT OF with an insensitive cursor.
         */
                /*
                 * Without FOR UPDATE, we dig through the cursor's plan to find the
                 * scan node.  Fail if it's not there or buried underneath
                 * aggregation.
                 */
                scanstate = search_plan_tree(queryDesc->planstate, table_oid);
                if (!scanstate)
                        ereport(ERROR,
                                        (errcode(ERRCODE_INVALID_CURSOR_STATE),
                                         errmsg("cursor \"%s\" is not a simply updatable scan of table \"%s\"",
                                                        cursor_name, table_name)));
/*
 * search_plan_tree
 *
 * Search through a PlanState tree for a scan node on the specified table.
 * Return NULL if not found or multiple candidates.
 */
static ScanState *
search_plan_tree(PlanState *node, Oid table_oid)
{
        if (node == NULL)
                return NULL;
        switch (nodeTag(node))
        {
                        /*
                         * scan nodes can all be treated alike
                         */
                case T_SeqScanState:
                case T_IndexScanState:
                case T_BitmapHeapScanState:
                case T_TidScanState:
                        {
                                ScanState  *sstate = (ScanState *) node;

                                if (RelationGetRelid(sstate->ss_currentRelation) == table_oid)
                                        return sstate;
                                break;
                        }

                        /*
                         * For Append, we must look through the members; watch out for
                         * multiple matches (possible if it was from UNION ALL)
                         */
                case T_AppendState:
                        {
                                AppendState *astate = (AppendState *) node;
                                ScanState  *result = NULL;
                                int                     i;

                                for (i = 0; i < astate->as_nplans; i++)
                                {
                                        ScanState  *elem = search_plan_tree(astate->appendplans[i],
                                                                                                                table_oid);

                                        if (!elem)
                                                continue;
                                        if (result)
                                                return NULL;    /* multiple matches */
                                        result = elem;
                                }
                                return result;
                        }

                        /*
                         * Similarly for MergeAppend
                         */
                case T_MergeAppendState:
                        {
                                MergeAppendState *mstate = (MergeAppendState *) node;
                                ScanState  *result = NULL;
                                int                     i;

                                for (i = 0; i < mstate->ms_nplans; i++)
                                {
                                        ScanState  *elem = search_plan_tree(mstate->mergeplans[i],
                                                                                                                table_oid);

                                        if (!elem)
                                                continue;
                                        if (result)
                                                return NULL;    /* multiple matches */
                                        result = elem;
                                }
                                return result;
                        }

                        /*
                         * Result and Limit can be descended through (these are safe
                         * because they always return their input's current row)
                         */
                case T_ResultState:
                case T_LimitState:
                        return search_plan_tree(node->lefttree, table_oid);

                        /*
                         * SubqueryScan too, but it keeps the child in a different place
                         */
                case T_SubqueryScanState:
                        return search_plan_tree(((SubqueryScanState *) node)->subplan,
                                                                        table_oid);

                default:
                        /* Otherwise, assume we can't descend through it */
                        break;
        }
        return NULL;
}
以下摘自src/backend/commands/explain.c
/*
 * ExplainNode -
 *        Appends a description of a plan tree to es->str
 *
 * planstate points to the executor state node for the current plan node.
 * We need to work from a PlanState node, not just a Plan node, in order to
 * get at the instrumentation data (if any) as well as the list of subplans.
 *
 * ancestors is a list of parent PlanState nodes, most-closely-nested first.
 * These are needed in order to interpret PARAM_EXEC Params.
 *
 * relationship describes the relationship of this plan node to its parent
 * (eg, "Outer", "Inner"); it can be null at top level.  plan_name is an
 * optional name to be attached to the node.
 *
 * In text format, es->indent is controlled in this function since we only
 * want it to change at plan-node boundaries.  In non-text formats, es->indent
 * corresponds to the nesting depth of logical output groups, and therefore
 * is controlled by ExplainOpenGroup/ExplainCloseGroup.
 */

这个问题TOM LANE在PG nabble也做过解释，如下 : 
http://postgresql.1045698.n5.nabble.com/quot-ORDER-BY-quot-clause-prevents-quot-UPDATE-WHERE-CURRENT-OF-quot-td1994821.html

After playing around with this for awhile I realized that there really 
would be a functional loss if we remove support for WHERE CURRENT OF 
with non-FOR-UPDATE cursors.  Namely, that a non-FOR-UPDATE cursor is 
insensitive to subsequent updates, which sometimes is handy.  There are 
examples of both cases in the portals.sql regression test. 

So what I now propose is: 

1. If the cursor includes FOR UPDATE/FOR SHARE, use the ExecRowMark 
technique to get the target row identity.  In this path we fail if there 
is not exactly one FOR UPDATE reference to the UPDATE's target table. 
(An interesting property here is that you can update from a self-join, 
if you mark only one arm of the join as FOR UPDATE.  See example in 
attached regression test additions.) 

2. If the cursor doesn't have FOR UPDATE/SHARE, use the existing code. 
In this path we fail if the plan is "too complicated".  However, it 
shouldn't fail for any case that is simply updatable according to the 
SQL spec. 

We should revise the documentation to make it very clear that FOR UPDATE 
is the preferred way, but that sometimes you might need the other. 

Attached is a draft patch that is code-complete but lacks documentation. 
The patch is against CVS HEAD, ie, it assumes the SELECT FOR UPDATE 
inheritance fixes I made earlier today. 

所以在有需求使用where current of来更新ROW记录时，最好是用for update 来定义游标.

【参考】
http://blog.163.com/digoal@126/blog/static/163877040201110314133817/
http://blog.163.com/digoal@126/blog/static/163877040201110982243362/
src/backend/executor/execCurrent.c
src/backend/commands/explain.c
