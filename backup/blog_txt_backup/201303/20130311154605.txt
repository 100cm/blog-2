PostgreSQL research

PostgreSQL postmaster.pid removed cause database cann't startup case

2013-03-11 15:46:05   查看原文>>

群里一位兄弟因为postmaster.pid文件被删除, 导致数据库无法启动. 
原因是数据库还在, 并且端口被占用, 当然是没有办法起来的.
下面是模拟这个过程 : 
1. 删除一个已经启动的数据库的postmaster.pid文件

ocz@db-172-16-3-150-> rm $PGDATA/postmaster.pid
rm: remove regular file `/data05/ocz/pg_root/postmaster.pid'? y


2. 关闭数据库失败, 由于关闭数据库需要读postmaster.pid文件. 当然后面有方法关闭.

ocz@db-172-16-3-150-> pg_ctl stop -m fast
pg_ctl: PID file "/data05/ocz/pg_root/postmaster.pid" does not exist
Is server running?


3. 启动数据库失败, 因为端口已经被占用

ocz@db-172-16-3-150-> pg_ctl start
server starting
ocz@db-172-16-3-150-> LOG:  XX000: could not bind IPv4 socket: Address already in use
HINT:  Is another postmaster already running on port 9201? If not, wait a few seconds and retry.
LOCATION:  StreamServerPort, pqcomm.c:438
WARNING:  01000: could not create listen socket for "0.0.0.0"
LOCATION:  PostmasterMain, postmaster.c:892
FATAL:  XX000: could not create any TCP/IP sockets
LOCATION:  PostmasterMain, postmaster.c:897


4. 查看ipcs可以看到数据库占用的共享内存.

ocz@db-172-16-3-150-> ipcs

------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status      
0x008c6569 10878980   ocz       600        8814436352 4                       

------ Semaphore Arrays --------
key        semid      owner      perms      nsems     
0x008c6569 47710215   ocz       600        17        
0x008c656a 47742984   ocz       600        17        
0x008c656b 47775753   ocz       600        17        
0x008c656c 47808522   ocz       600        17        
0x008c656d 47841291   ocz       600        17        
0x008c656e 47874060   ocz       600        17        
0x008c656f 47906829   ocz       600        17        

------ Message Queues --------
key        msqid      owner      perms      used-bytes   messages 



5. 实际上使用pg_ctl关闭数据库也是给postmaster进程发信号, 信号本文末尾已经指出.

ocz@db-172-16-3-150-> ps -ewf|grep ocz
root      3022     1  0 Feb03 ?        00:00:00 /home/ocz/postgresql-9.2.1/contrib/postgresqlfs-b5b1a25/postgresqlfs /mnt
root     24903 24868  0 08:11 pts/1    00:00:00 su - ocz
ocz      24904 24903  0 08:11 pts/1    00:00:00 -bash
ocz      24939 24904  0 08:11 pts/1    00:00:00 psql
root     25608 25580  0 09:24 pts/4    00:00:00 su - ocz
ocz      25609 25608  0 09:24 pts/4    00:00:00 -bash
root     28549 28482  0 14:38 pts/5    00:00:00 su - ocz
ocz      28550 28549  0 14:38 pts/5    00:00:00 -bash
ocz      29296     1  0 15:39 pts/5    00:00:00 /home/ocz/pgsql9.2.1/bin/postgres
ocz      29297 29296  0 15:39 ?        00:00:00 postgres: logger process         
ocz      29299 29296  0 15:39 ?        00:00:00 postgres: checkpointer process   
ocz      29300 29296  0 15:39 ?        00:00:00 postgres: writer process         
ocz      29301 29296  0 15:39 ?        00:00:00 postgres: wal writer process     
ocz      29302 29296  0 15:39 ?        00:00:00 postgres: archiver process       
ocz      29303 29296  0 15:39 ?        00:00:00 postgres: stats collector process   
ocz      29318 28550  0 15:40 pts/5    00:00:00 ps -ewf
ocz      29319 28550  0 15:40 pts/5    00:00:00 grep ocz



6. 手动给postmaster进程发关闭信号.

ocz@db-172-16-3-150-> kill -15 29296


关闭后ipcs看不到数据库占用的共享内存区域了

ocz@db-172-16-3-150-> ipcs

------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status      

------ Semaphore Arrays --------
key        semid      owner      perms      nsems     

------ Message Queues --------
key        msqid      owner      perms      used-bytes   messages 


7. 现在启动数据库就可以了

ocz@db-172-16-3-150-> pg_ctl start
server starting
ocz@db-172-16-3-150-> 
ocz@db-172-16-3-150-> ipcs

------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status      
0x008c6569 10911748   ocz       600        8814436352 4                       

------ Semaphore Arrays --------
key        semid      owner      perms      nsems     
0x008c6569 47939591   ocz       600        17        
0x008c656a 47972360   ocz       600        17        
0x008c656b 48005129   ocz       600        17        
0x008c656c 48037898   ocz       600        17        
0x008c656d 48070667   ocz       600        17        
0x008c656e 48103436   ocz       600        17        
0x008c656f 48136205   ocz       600        17        

------ Message Queues --------
key        msqid      owner      perms      used-bytes   messages


8. 启动数据库后除了监听端口以外, 如果是*unix系统还有unix socket的占用 : 

srwxrwxrwx  1 ocz ocz    0 Mar 11 15:41 .s.PGSQL.9201
-rw-------  1 ocz ocz   44 Mar 11 15:41 .s.PGSQL.9201.lock



【参考】
1. man 7 signal

       Signal     Value     Action   Comment
       -------------------------------------------------------------------------
       SIGHUP        1       Term    Hangup detected on controlling terminal
                                     or death of controlling process
       SIGINT        2       Term    Interrupt from keyboard
       SIGQUIT       3       Core    Quit from keyboard
       SIGILL        4       Core    Illegal Instruction
       SIGABRT       6       Core    Abort signal from abort(3)
       SIGFPE        8       Core    Floating point exception
       SIGKILL       9       Term    Kill signal
       SIGSEGV      11       Core    Invalid memory reference
       SIGPIPE      13       Term    Broken pipe: write to pipe with no readers
       SIGALRM      14       Term    Timer signal from alarm(2)
       SIGTERM      15       Term    Termination signal
       SIGUSR1   30,10,16    Term    User-defined signal 1
       SIGUSR2   31,12,17    Term    User-defined signal 2
       SIGCHLD   20,17,18    Ign     Child stopped or terminated
       SIGCONT   19,18,25    Cont    Continue if stopped
       SIGSTOP   17,19,23    Stop    Stop process
       SIGTSTP   18,20,24    Stop    Stop typed at tty
       SIGTTIN   21,21,26    Stop    tty input for background process
       SIGTTOU   22,22,27    Stop    tty output for background process



2. src/bin/pg_ctl/pg_ctl.c
三种关库模式对应信号是SIGTERM, SIGINT, SIGQUIT.
smart : 需要等待已有连接断开, 
fast : 主动回滚事务, 断开已有连接, 
immediate : 强制关库

static void
set_mode(char *modeopt)
{
        if (strcmp(modeopt, "s") == 0 || strcmp(modeopt, "smart") == 0)
        {
                shutdown_mode = SMART_MODE;
                sig = SIGTERM;
        }
        else if (strcmp(modeopt, "f") == 0 || strcmp(modeopt, "fast") == 0)
        {
                shutdown_mode = FAST_MODE;
                sig = SIGINT;
        }
        else if (strcmp(modeopt, "i") == 0 || strcmp(modeopt, "immediate") == 0)
        {
                shutdown_mode = IMMEDIATE_MODE;
                sig = SIGQUIT;
        }
        else
        {
                write_stderr(_("%s: unrecognized shutdown mode \"%s\"\n"), progname, modeopt);
                do_advice();
                exit(1);
        }
}


Flag Counter
