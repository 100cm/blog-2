PostgreSQL research

PostgreSQL timestamp value attention 'now' IS timestamp constant or text constant

2013-03-14 9:51:37   查看原文>>

时间类型timestamp或者timestamptz有一个特殊值, now;
在使用时需要注意, 它到底是常量还是变量, 和它使用的场景有关系.
最好不要使用, 建议使用now()函数代替之.

-- 'now'每次调用时先转换成时间再传入$1, 所以每次是变化的.

remote=> prepare a(timestamp) as select $1;
PREPARE
remote=> execute a('now');
 2013-03-14 09:05:34.562312
remote=> execute a('now');
 2013-03-14 09:05:35.6413


-- 'now'每次调用时先转换成text再传入$1, 然后再转换成timestamp类型. 

remote=> prepare b(text) as select $1::timestamp;
PREPARE
remote=> execute b('now');
 2013-03-14 09:05:54.894175
remote=> execute b('now');
 2013-03-14 09:05:55.541578


-- 'now'是个常量, 但是是text常量, 每次执行时将这个常量转换成timestamp类型.

remote=> prepare d as select 'now'::text::timestamp;
PREPARE
remote=> execute d;
 2013-03-14 09:12:23.128624
remote=> execute d;
 2013-03-14 09:12:23.783772


-- 'now'是个常量, 但是是text常量, 每次执行时将这个常量转换成timestamp类型.

remote=> prepare e as select (text 'now')::timestamp;
PREPARE
remote=> execute e;
 2013-03-14 09:12:58.697479
remote=> execute e;
 2013-03-14 09:12:59.524841


-- 'now' 是个timestamp常量, 在prepare时已经解析掉, 所以每次调用值不变. 

remote=> prepare c as select 'now'::timestamp;
PREPARE
remote=> execute c;
 2013-03-14 09:06:27.695022
remote=> execute c;
 2013-03-14 09:06:27.695022


-- 同上

remote=> prepare g as select timestamp 'now';
PREPARE
remote=> execute g;
 2013-03-14 09:27:51.799889
remote=> execute g;
 2013-03-14 09:27:51.799889


-- 同上

remote=> prepare h as select timestamptz 'now';
PREPARE
remote=> execute h;
 2013-03-14 09:27:59.942468+08
remote=> execute h;
 2013-03-14 09:27:59.942468+08



鉴于这个特性, 在plpgsql中使用时需要特别注意.
如下函数 : 

create table logtable(c1 text, c2 timestamp);


-- 因为c2是timestamp类型, 在赋值的位置已知它的类型的时候, 可以直接转换为常量. 如下第一个函数.

CREATE FUNCTION logfunc1(logtxt text) RETURNS void AS $$
    BEGIN
        INSERT INTO logtable VALUES (logtxt, 'now');
    END;
$$ LANGUAGE plpgsql;

select logfunc1('abc');
select logfunc1('abc');
remote=> select * from logtable ;
 c1  |             c2             
-----+----------------------------
 abc | 2013-03-14 09:40:46.879857
 abc | 2013-03-14 09:40:46.879857
(2 rows)


-- 以上两次调用插入的时间值一样. 其实只要会话不退出, 以后调用logfunc1得到的时间值都一样.

-- 接下来的这个函数, 'now' 作为text常量, 而非timestamp常量.

CREATE FUNCTION logfunc2(logtxt text) RETURNS void AS $$
    DECLARE
        curtime timestamp;
    BEGIN
        curtime := 'now';
        INSERT INTO logtable VALUES (logtxt, curtime);
    END;
$$ LANGUAGE plpgsql;

select logfunc2('abc');
select logfunc2('abc');
remote=> select * from logtable ;
 c1  |             c2             
-----+----------------------------
 abc | 2013-03-14 09:40:46.879857
 abc | 2013-03-14 09:40:46.879857
 abc | 2013-03-14 09:41:39.626445
 abc | 2013-03-14 09:41:40.992602
(4 rows)


-- 使用logfunc2函数, 得到的时间值每次都在变化.

-- 接下来的函数timestamp 'now';是个时间常量

CREATE FUNCTION logfunc3(logtxt text) RETURNS void AS $$
    DECLARE
        curtime timestamp;
    BEGIN
        curtime := timestamp 'now';
        INSERT INTO logtable VALUES (logtxt, curtime);
    END;
$$ LANGUAGE plpgsql;

select logfunc3('abc3');
select logfunc3('abc3');
remote=> select * from logtable ;
  c1  |             c2             
------+----------------------------
 abc  | 2013-03-14 09:40:46.879857
 abc  | 2013-03-14 09:40:46.879857
 abc  | 2013-03-14 09:41:39.626445
 abc  | 2013-03-14 09:41:40.992602
 abc  | 2013-03-14 09:40:46.879857
 abc3 | 2013-03-14 09:44:06.354965
 abc3 | 2013-03-14 09:44:06.354965
(7 rows)



【小结】
1. 时间常量的正确用法是直接的类型提供, 而不要通过间接转换的方式.
例如 curtime := timestamp 'now'; 和 curtime := 'now'; 两者是存在差别的。
curtime := timestamp 'now'; 是直接的类型提供. timestamp 'now'是个时间常量.
curtime := 'now'; 提供的now是text类型, 最终用的时候是text_out('now') 和 timestamp_in(); 所以这里'now'不是时间常量. 而是个text常量.

