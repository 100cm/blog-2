PostgreSQL research

PostgreSQL 9.3 tuplesort memory usage: grow_memtuples

2013-03-13 12:53:56   查看原文>>

2012年3月份的一个SUBJECT, 减少排序的内存使用量.
测试 : 
打补丁前 : 

ocz@db-172-16-3-150-> psql
psql (9.2.1)
Type "help" for help.
postgres=# \timing
Timing is on.
postgres=# set work_mem=16384;
SET
Time: 0.281 ms
postgres=# set client_min_messages =log;
SET
Time: 0.131 ms
postgres=# set trace_sort = on;
SET
Time: 0.132 ms
postgres=# \set VERBOSITY verbose
postgres=# select count(distinct foo) from (select random() as foo from
generate_series(1,524200)) asdf;
LOG:  00000: begin datum sort: workMem = 16384, randomAccess = f
LOCATION:  tuplesort_begin_datum, tuplesort.c:809
LOG:  00000: performsort starting: CPU 0.01s/0.14u sec elapsed 0.15 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1232
LOG:  00000: performsort done: CPU 0.01s/0.58u sec elapsed 0.59 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1307
LOG:  00000: internal sort ended, 12289 KB used: CPU 0.01s/0.63u sec elapsed 0.64 sec
LOCATION:  tuplesort_end, tuplesort.c:923
 count  
--------
 524134
(1 row)
Time: 778.650 ms
postgres=# select count(distinct foo) from (select random() as foo from
generate_series(1,524300)) asdf;
LOG:  00000: begin datum sort: workMem = 16384, randomAccess = f
LOCATION:  tuplesort_begin_datum, tuplesort.c:809
LOG:  00000: switching to external sort with 59 tapes: CPU 0.01s/0.14u sec elapsed 0.15 sec
LOCATION:  inittapes, tuplesort.c:1683
LOG:  00000: performsort starting: CPU 0.01s/0.20u sec elapsed 0.22 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1232
LOG:  00000: finished writing final run 1 to tape 0: CPU 0.02s/1.14u sec elapsed 1.17 sec
LOCATION:  dumptuples, tuplesort.c:2227
LOG:  00000: performsort done: CPU 0.02s/1.14u sec elapsed 1.17 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1307
LOG:  00000: external sort ended, 769 disk blocks used: CPU 0.03s/1.21u sec elapsed 1.25 sec
LOCATION:  tuplesort_end, tuplesort.c:920
 count  
--------
 524243
(1 row)
Time: 1387.698 ms
-- 加大work_mem后, 使用内部排序, 但是可以看到消耗的内存上涨到24MB.
postgres=# set work_mem=1633333;
SET
Time: 0.219 ms
postgres=# select count(distinct foo) from (select random() as foo from
generate_series(1,524300)) asdf;
LOG:  00000: begin datum sort: workMem = 1633333, randomAccess = f
LOCATION:  tuplesort_begin_datum, tuplesort.c:809
LOG:  00000: performsort starting: CPU 0.00s/0.11u sec elapsed 0.12 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1232
LOG:  00000: performsort done: CPU 0.00s/0.54u sec elapsed 0.55 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1307
LOG:  00000: internal sort ended, 24577 KB used: CPU 0.00s/0.60u sec elapsed 0.61 sec
LOCATION:  tuplesort_end, tuplesort.c:923
 count
--------
 524232
(1 row)
Time: 716.238 ms



打补丁后 : 

pgdev@db-172-16-3-150-> psql
psql (9.3devel)
Type "help" for help.
digoal=# \timing
Timing is on.
digoal=# set work_mem=16384;
SET
Time: 0.781 ms
digoal=# set client_min_messages =log;
SET
Time: 0.587 ms
digoal=# set trace_sort = on;
LOG:  statement: set trace_sort = on;
SET
Time: 0.693 ms
digoal=# \set VERBOSITY verbose
digoal=# select count(distinct foo) from (select random() as foo from
digoal(# generate_series(1,524200)) asdf;
LOG:  00000: statement: select count(distinct foo) from (select random() as foo from
generate_series(1,524200)) asdf;
LOCATION:  exec_simple_query, postgres.c:890
LOG:  00000: begin datum sort: workMem = 16384, randomAccess = f
LOCATION:  tuplesort_begin_datum, tuplesort.c:819
LOG:  00000: performsort starting: CPU 0.01s/0.17u sec elapsed 0.18 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1319
LOG:  00000: performsort done: CPU 0.01s/0.59u sec elapsed 0.61 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1394
LOG:  00000: internal sort ended, 12289 KB used: CPU 0.01s/0.64u sec elapsed 0.66 sec
LOCATION:  tuplesort_end, tuplesort.c:932
 count  
--------
 524117
(1 row)
Time: 821.121 ms
-- grow work memory to power of 2 size. 16384 KB
digoal=# select count(distinct foo) from (select random() as foo from
digoal(# generate_series(1,524300)) asdf;
LOG:  00000: statement: select count(distinct foo) from (select random() as foo from
generate_series(1,524300)) asdf;
LOCATION:  exec_simple_query, postgres.c:890
LOG:  00000: begin datum sort: workMem = 16384, randomAccess = f
LOCATION:  tuplesort_begin_datum, tuplesort.c:819
LOG:  00000: performsort starting: CPU 0.00s/0.18u sec elapsed 0.19 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1319
LOG:  00000: performsort done: CPU 0.00s/0.60u sec elapsed 0.61 sec
LOCATION:  tuplesort_performsort, tuplesort.c:1394
LOG:  00000: internal sort ended, 16384 KB used: CPU 0.00s/0.65u sec elapsed 0.66 sec
LOCATION:  tuplesort_end, tuplesort.c:932
 count  
--------
 524236
(1 row)
Time: 825.702 ms



【参考】
1. http://www.postgresql.org/message-id/flat/CAEYLb_X4ofwU4UHQP=dXGWRqdB2AM1qU__wvuexRTBDh6NgHWg@mail.gmail.com#CAEYLb_X4ofwU4UHQP=dXGWRqdB2AM1qU__wvuexRTBDh6NgHWg@mail.gmail.com
2. PostgreSQL 9.3
src/backend/utils/sort/tuplesort.c

/*
 * Grow the memtuples[] array, if possible within our memory constraint.
 * Return TRUE if we were able to enlarge the array, FALSE if not.
 *
 * Normally, at each increment we double the size of the array.  When we no
 * longer have enough memory to do that, we attempt one last, smaller increase
 * (and then clear the growmemtuples flag so we don't try any more).  That
 * allows us to use allowedMem as fully as possible; sticking to the pure
 * doubling rule could result in almost half of allowedMem going unused.
 * Because availMem moves around with tuple addition/removal, we need some
 * rule to prevent making repeated small increases in memtupsize, which would
 * just be useless thrashing.  The growmemtuples flag accomplishes that and
 * also prevents useless recalculations in this function.
 */
static bool
grow_memtuples(Tuplesortstate *state)
{
        int                     newmemtupsize;
        int                     memtupsize = state->memtupsize;
        long            memNowUsed = state->allowedMem - state->availMem;

        /* Forget it if we've already maxed out memtuples, per comment above */
        if (!state->growmemtuples)
                return false;

        /* Select new value of memtupsize */
        if (memNowUsed <= state->availMem)
        {
                /*
                 * It is surely safe to double memtupsize if we've used no more than
                 * half of allowedMem.
                 *
                 * Note: it might seem that we need to worry about memtupsize * 2
                 * overflowing an int, but the MaxAllocSize clamp applied below
                 * ensures the existing memtupsize can't be large enough for that.
                 */
                newmemtupsize = memtupsize * 2;
        }
        else
        {
                /*
                 * This will be the last increment of memtupsize.  Abandon doubling
                 * strategy and instead increase as much as we safely can.
                 *
                 * To stay within allowedMem, we can't increase memtupsize by more
                 * than availMem / sizeof(SortTuple) elements.  In practice, we want
                 * to increase it by considerably less, because we need to leave some
                 * space for the tuples to which the new array slots will refer.  We
                 * assume the new tuples will be about the same size as the tuples
                 * we've already seen, and thus we can extrapolate from the space
                 * consumption so far to estimate an appropriate new size for the
                 * memtuples array.  The optimal value might be higher or lower than
                 * this estimate, but it's hard to know that in advance.
                 *
                 * This calculation is safe against enlarging the array so much that
                 * LACKMEM becomes true, because the memory currently used includes
                 * the present array; thus, there would be enough allowedMem for the
                 * new array elements even if no other memory were currently used.
                 *
                 * We do the arithmetic in float8, because otherwise the product of
                 * memtupsize and allowedMem could overflow.  (A little algebra shows
                 * that grow_ratio must be less than 2 here, so we are not risking
                 * integer overflow this way.)  Any inaccuracy in the result should be
                 * insignificant; but even if we computed a completely insane result,
                 * the checks below will prevent anything really bad from happening.
                 */
                double          grow_ratio;

                grow_ratio = (double) state->allowedMem / (double) memNowUsed;
                newmemtupsize = (int) (memtupsize * grow_ratio);

                /* We won't make any further enlargement attempts */
                state->growmemtuples = false;
        }

        /* Must enlarge array by at least one element, else report failure */
        if (newmemtupsize <= memtupsize)
                goto noalloc;

        /*
         * On a 64-bit machine, allowedMem could be more than MaxAllocSize.  Clamp
         * to ensure our request won't be rejected by palloc.
         */
        if ((Size) newmemtupsize >= MaxAllocSize / sizeof(SortTuple))
        {
                newmemtupsize = (int) (MaxAllocSize / sizeof(SortTuple));
                state->growmemtuples = false;   /* can't grow any more */
        }

        /*
         * We need to be sure that we do not cause LACKMEM to become true, else
         * the space management algorithm will go nuts.  The code above should
         * never generate a dangerous request, but to be safe, check explicitly
         * that the array growth fits within availMem.  (We could still cause
         * LACKMEM if the memory chunk overhead associated with the memtuples
         * array were to increase.      That shouldn't happen with any sane value of
         * allowedMem, because at any array size large enough to risk LACKMEM,
         * palloc would be treating both old and new arrays as separate chunks.
         * But we'll check LACKMEM explicitly below just in case.)
         */
        if (state->availMem < (long) ((newmemtupsize - memtupsize) * sizeof(SortTuple)))
                goto noalloc;

        /* OK, do it */
        FREEMEM(state, GetMemoryChunkSpace(state->memtuples));
        state->memtupsize = newmemtupsize;
        state->memtuples = (SortTuple *)
                repalloc(state->memtuples,
                                 state->memtupsize * sizeof(SortTuple));
        USEMEM(state, GetMemoryChunkSpace(state->memtuples));
        if (LACKMEM(state))
                elog(ERROR, "unexpected out-of-memory situation during sort");
        return true;
noalloc:
        /* If for any reason we didn't realloc, shut off future attempts */
        state->growmemtuples = false;
        return false;
}


3. PostgreSQL 9.2
src/backend/utils/sort/tuplesort.c

/*
 * Grow the memtuples[] array, if possible within our memory constraint.
 * Return TRUE if able to enlarge the array, FALSE if not.
 *
 * At each increment we double the size of the array.  When we are short
 * on memory we could consider smaller increases, but because availMem
 * moves around with tuple addition/removal, this might result in thrashing.
 * Small increases in the array size are likely to be pretty inefficient.
 */
static bool
grow_memtuples(Tuplesortstate *state)
{
        /*
         * We need to be sure that we do not cause LACKMEM to become true, else
         * the space management algorithm will go nuts.  We assume here that the
         * memory chunk overhead associated with the memtuples array is constant
         * and so there will be no unexpected addition to what we ask for.      (The
         * minimum array size established in tuplesort_begin_common is large
         * enough to force palloc to treat it as a separate chunk, so this
         * assumption should be good.  But let's check it.)
         */
        if (state->availMem <= (long) (state->memtupsize * sizeof(SortTuple)))
                return false;

        /*
         * On a 64-bit machine, allowedMem could be high enough to get us into
         * trouble with MaxAllocSize, too.
         */
        if ((Size) (state->memtupsize * 2) >= MaxAllocSize / sizeof(SortTuple))
                return false;

        FREEMEM(state, GetMemoryChunkSpace(state->memtuples));
        state->memtupsize *= 2;
        state->memtuples = (SortTuple *)
                repalloc(state->memtuples,
                                 state->memtupsize * sizeof(SortTuple));
        USEMEM(state, GetMemoryChunkSpace(state->memtuples));
        if (LACKMEM(state))
                elog(ERROR, "unexpected out-of-memory situation during sort");
        return true;
}


