PostgreSQL research

PostgreSQL sql language volatile status diff with plpgsql deal with optimizer

2014-11-11 16:04:42   查看原文>>

PostgreSQL 9.3.5
在使用SQL函数时, 发现一个古怪的问题, volatile不起作用.
例如 : 

digoal=# create table t (id int primary key, info text);
CREATE TABLE
digoal=# insert into t select generate_series(1,100000),'test';
INSERT 0 100000
digoal=# create or replace function f(int) returns int as $$
  select $1+1;
$$ language sql strict volatile;
digoal=# select f(1);
 f 
---
 2
(1 row)
digoal=# explain select * from t where id=f(1);
                           QUERY PLAN                           
----------------------------------------------------------------
 Index Scan using t_pkey on t  (cost=0.29..8.31 rows=1 width=9)
   Index Cond: (id = 2)
(2 rows)


按理,  volatile函数应该不能用于索引扫描. 但是却使用了index.

但是如果对这个SQL函数略做修改, 增加一条UPDATE.

digoal=# create or replace function f(int) returns int as $$   
 update t set info=info where id=$1; 
  select $1+1; 
$$ language sql strict volatile;
CREATE FUNCTION


此时貌似真正的volatile了.

digoal=# explain select * from t where id=f(20);
                     QUERY PLAN                      
-----------------------------------------------------
 Seq Scan on t  (cost=0.00..26385.00 rows=1 width=9)
   Filter: (id = f(20))
(2 rows)



内部的check还是正常的, 如下 : 

digoal=# alter function f(int) stable;
ALTER FUNCTION
digoal=# explain select * from t where id=f(20);
ERROR:  UPDATE is not allowed in a non-volatile function
CONTEXT:  SQL function "f" during startup



对于plpgsql函数, 则不会有这样的情况, 即使全SELECT, 优化器也是按照我们设置的volatile来处理.

digoal=# drop function f(int);
DROP FUNCTION
digoal=# create or replace function f(int) returns int as $$   
  declare 
    res int;
  begin  
    return $1+1;
  end;
$$ language plpgsql strict volatile;
CREATE FUNCTION


不走索引

digoal=# explain select * from t where id=f(20);
                     QUERY PLAN                      
-----------------------------------------------------
 Seq Scan on t  (cost=0.00..26385.00 rows=1 width=9)
   Filter: (id = f(20))
(2 rows)


走索引

digoal=# explain select * from t where id=f(20);
                           QUERY PLAN                           
----------------------------------------------------------------
 Index Scan using t_pkey on t  (cost=0.54..8.56 rows=1 width=9)
   Index Cond: (id = f(20))
(2 rows)



Flag Counter
