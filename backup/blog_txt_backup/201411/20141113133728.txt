PostgreSQL research

PostgreSQL oltp test benchmark for osc beijing

2014-11-13 13:37:28   查看原文>>

为北京源创会写的一个测试benchmark. 
参考模型
http://blog.163.com/digoal@126/blog/static/163877040201221382150858/
不太喜欢用sysbench, (开销太大).


测试环境 : 

DELL R610
$PGDATA  OCZ REVODRIVE3 240G
内存 96G
CPU E5504 2.0G 8核
系统 CentOS 6.5 x64
数据库 PostgreSQL 9.3.5
CONFIGURE = '--prefix=/opt/pgsql9.3.5' '--with-pgport=5432' '--with-perl' '--with-tcl' '--with-python' '--with-openssl' '--with-pam' '--with-ldap' '--with-libxml' '--with-libxslt' '--enable-thread-safety'
文件系统 EXT4




测试数据量 : 

用户信息记录1亿, 约15G.
用户会话记录1亿, 约6G.



数据库参数

listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;
max_connections = 100                   # (change requires restart)
superuser_reserved_connections = 13     # (change requires restart)
unix_socket_directories = '.'   # comma-separated list of directories
tcp_keepalives_idle = 70                # TCP_KEEPIDLE, in seconds;
tcp_keepalives_interval = 10            # TCP_KEEPINTVL, in seconds;
tcp_keepalives_count = 10               # TCP_KEEPCNT;
shared_buffers = 8192MB                 # min 128kB
maintenance_work_mem = 512MB            # min 1MB
vacuum_cost_delay = 10                  # 0-100 milliseconds
vacuum_cost_limit = 10000               # 1-10000 credits
bgwriter_delay = 10ms                   # 10-10000ms between rounds
wal_level = minimal                     # minimal, archive, or hot_standby
synchronous_commit = off                # synchronization level;
wal_buffers = 16384kB                   # min 32kB, -1 sets based on shared_buffers
wal_writer_delay = 10ms         # 1-10000 milliseconds
checkpoint_segments = 512               # in logfile segments, min 1, 16MB each
effective_cache_size = 128000MB
log_destination = 'csvlog'              # Valid values are combinations of
logging_collector = on          # Enable capturing of stderr and csvlog
log_directory = 'pg_log'                # directory where log files are written,
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,
log_file_mode = 0600                    # creation mode for log files,
log_truncate_on_rotation = on           # If on, an existing log file with the
log_checkpoints = on
log_connections = on
log_disconnections = on
log_error_verbosity = verbose           # terse, default, or verbose messages
log_lock_waits = on                     # log lock waits >= deadlock_timeout
log_statement = 'ddl'                   # none, ddl, mod, all
log_timezone = 'PRC'
log_autovacuum_min_duration = 0 # -1 disables, 0 logs all actions and
autovacuum_vacuum_cost_delay = 10ms     # default vacuum cost delay for
datestyle = 'iso, mdy'
timezone = 'PRC'
lc_messages = 'C'                       # locale for system error message
lc_monetary = 'C'                       # locale for monetary formatting
lc_numeric = 'C'                        # locale for number formatting
lc_time = 'C'                           # locale for time formatting
default_text_search_config = 'pg_catalog.english'



测试模型和测试数据生成 : 


create table user_info
(userid int,
engname text,
cnname text,
occupation text,
birthday date,
signname text,
email text,
qq numeric,
crt_time timestamp without time zone,
mod_time timestamp without time zone
);

create table user_session
(userid int,
logintime timestamp(0) without time zone,
login_count bigint default 0,
logouttime timestamp(0) without time zone,
online_interval interval default interval '0'
);

create unlogged table user_login_rec
(userid int,
login_time timestamp without time zone,
ip inet
);

create unlogged table user_logout_rec
(userid int,
logout_time timestamp without time zone,
ip inet
);

create table user_info_0 (like user_info including all);
create table user_info_1 (like user_info including all);
create table user_info_2 (like user_info including all);
create table user_info_3 (like user_info including all);
create table user_info_4 (like user_info including all);

create table user_session_0 (like user_session including all);
create table user_session_1 (like user_session including all);
create table user_session_2 (like user_session including all);
create table user_session_3 (like user_session including all);
create table user_session_4 (like user_session including all);

insert into user_info_0 (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)
select generate_series(1,20000000),
'digoal.zhou',
'德哥',
'DBA',
'1970-01-01'
,E'公益是一辈子的事, I\'m Digoal.Zhou, Just do it!',
'digoal@126.com',
276732431,
clock_timestamp(),
NULL;

insert into user_info_1 (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)
select generate_series(20000001,40000000),
'digoal.zhou',
'德哥',
'DBA',
'1970-01-01'
,E'公益是一辈子的事, I\'m Digoal.Zhou, Just do it!',
'digoal@126.com',
276732431,
clock_timestamp(),
NULL;

insert into user_info_2 (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)
select generate_series(40000001,60000000),
'digoal.zhou',
'德哥',
'DBA',
'1970-01-01'
,E'公益是一辈子的事, I\'m Digoal.Zhou, Just do it!',
'digoal@126.com',
276732431,
clock_timestamp(),
NULL;

insert into user_info_3 (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)
select generate_series(60000001,80000000),
'digoal.zhou',
'德哥',
'DBA',
'1970-01-01'
,E'公益是一辈子的事, I\'m Digoal.Zhou, Just do it!',
'digoal@126.com',
276732431,
clock_timestamp(),
NULL;

insert into user_info_4 (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)
select generate_series(80000001,100000000),
'digoal.zhou',
'德哥',
'DBA',
'1970-01-01'
,E'公益是一辈子的事, I\'m Digoal.Zhou, Just do it!',
'digoal@126.com',
276732431,
clock_timestamp(),
NULL;

insert into user_session_0 (userid) select generate_series(1,20000000);
insert into user_session_1 (userid) select generate_series(20000001,40000000);
insert into user_session_2 (userid) select generate_series(40000001,60000000);
insert into user_session_3 (userid) select generate_series(60000001,80000000);
insert into user_session_4 (userid) select generate_series(80000001,100000000);

set work_mem='4096MB';
set maintenance_work_mem='4096MB';
alter table user_info_0 add primary key (userid);
alter table user_info_1 add primary key (userid);
alter table user_info_2 add primary key (userid);
alter table user_info_3 add primary key (userid);
alter table user_info_4 add primary key (userid);
alter table user_session_0 add primary key (userid);
alter table user_session_1 add primary key (userid);
alter table user_session_2 add primary key (userid);
alter table user_session_3 add primary key (userid);
alter table user_session_4 add primary key (userid);




测试函数 

create or replace function f_user_login_0
(i_userid int,
OUT userid int,
OUT engname text,
OUT cnname text,
OUT occupation text,
OUT birthday date,
OUT signname text,
OUT email text,
OUT qq numeric
)
as $BODY$
  insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_0 set logintime=now(),login_count=login_count+1 where userid=i_userid;
  select userid,engname,cnname,occupation,birthday,signname,email,qq
    from user_info_0 where userid=i_userid;
$BODY$
language sql strict volatile;

create or replace function f_user_login_1
(i_userid int,
OUT userid int,
OUT engname text,
OUT cnname text,
OUT occupation text,
OUT birthday date,
OUT signname text,
OUT email text,
OUT qq numeric
)
as $BODY$
  insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_1 set logintime=now(),login_count=login_count+1 where userid=i_userid;
  select userid,engname,cnname,occupation,birthday,signname,email,qq
    from user_info_1 where userid=i_userid;
$BODY$
language sql strict volatile;

create or replace function f_user_login_2
(i_userid int,
OUT userid int,
OUT engname text,
OUT cnname text,
OUT occupation text,
OUT birthday date,
OUT signname text,
OUT email text,
OUT qq numeric
)
as $BODY$
  insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_2 set logintime=now(),login_count=login_count+1 where userid=i_userid;
  select userid,engname,cnname,occupation,birthday,signname,email,qq
    from user_info_2 where userid=i_userid;
$BODY$
language sql strict volatile;

create or replace function f_user_login_3
(i_userid int,
OUT userid int,
OUT engname text,
OUT cnname text,
OUT occupation text,
OUT birthday date,
OUT signname text,
OUT email text,
OUT qq numeric
)
as $BODY$
  insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_3 set logintime=now(),login_count=login_count+1 where userid=i_userid;
  select userid,engname,cnname,occupation,birthday,signname,email,qq
    from user_info_3 where userid=i_userid;
$BODY$
language sql strict volatile;

create or replace function f_user_login_4
(i_userid int,
OUT userid int,
OUT engname text,
OUT cnname text,
OUT occupation text,
OUT birthday date,
OUT signname text,
OUT email text,
OUT qq numeric
)
as $BODY$
  insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_4 set logintime=now(),login_count=login_count+1 where userid=i_userid;
  select userid,engname,cnname,occupation,birthday,signname,email,qq
    from user_info_4 where userid=i_userid;
$BODY$
language sql strict volatile;


create or replace function f_user_logout_0
(i_userid int
)
returns void
as $BODY$
  insert into user_logout_rec (userid,logout_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_0 set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=i_userid;
$BODY$
language sql strict volatile;

create or replace function f_user_logout_1
(i_userid int
)
returns void
as $BODY$
  insert into user_logout_rec (userid,logout_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_1 set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=i_userid;
$BODY$
language sql strict volatile;

create or replace function f_user_logout_2
(i_userid int
)
returns void
as $BODY$
  insert into user_logout_rec (userid,logout_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_2 set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=i_userid;
$BODY$
language sql strict volatile;

create or replace function f_user_logout_3
(i_userid int
)
returns void
as $BODY$
  insert into user_logout_rec (userid,logout_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_3 set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=i_userid;
$BODY$
language sql strict volatile;

create or replace function f_user_logout_4
(i_userid int
)
returns void
as $BODY$
  insert into user_logout_rec (userid,logout_time,ip) values (i_userid,now(),inet_client_addr());
  update user_session_4 set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=i_userid;
$BODY$
language sql strict volatile;



os缓存预热

create extension pgfincore;
select * from pgfadvise_willneed('user_info_0');
select * from pgfadvise_willneed('user_info_1');
select * from pgfadvise_willneed('user_info_2');
select * from pgfadvise_willneed('user_info_3');
select * from pgfadvise_willneed('user_info_4');
select * from pgfadvise_willneed('user_session_0');
select * from pgfadvise_willneed('user_session_1');
select * from pgfadvise_willneed('user_session_2');
select * from pgfadvise_willneed('user_session_3');
select * from pgfadvise_willneed('user_session_4');
select * from pgfadvise_willneed('user_info_0_pkey');
select * from pgfadvise_willneed('user_info_1_pkey');
select * from pgfadvise_willneed('user_info_2_pkey');
select * from pgfadvise_willneed('user_info_3_pkey');
select * from pgfadvise_willneed('user_info_4_pkey');
select * from pgfadvise_willneed('user_session_0_pkey');
select * from pgfadvise_willneed('user_session_1_pkey');
select * from pgfadvise_willneed('user_session_2_pkey');
select * from pgfadvise_willneed('user_session_3_pkey');
select * from pgfadvise_willneed('user_session_4_pkey');



数据消耗空间

postgres=# \dt+
                           List of relations
 Schema |      Name       | Type  |  Owner   |    Size    | Description 
--------+-----------------+-------+----------+------------+-------------
 public | user_info       | table | postgres | 8192 bytes | 
 public | user_info_0     | table | postgres | 3006 MB    | 
 public | user_info_1     | table | postgres | 3006 MB    | 
 public | user_info_2     | table | postgres | 3006 MB    | 
 public | user_info_3     | table | postgres | 3006 MB    | 
 public | user_info_4     | table | postgres | 3006 MB    | 
 public | user_login_rec  | table | postgres | 24 kB      | 
 public | user_logout_rec | table | postgres | 16 kB      | 
 public | user_session    | table | postgres | 0 bytes    | 
 public | user_session_0  | table | postgres | 1149 MB    | 
 public | user_session_1  | table | postgres | 1149 MB    | 
 public | user_session_2  | table | postgres | 1149 MB    | 
 public | user_session_3  | table | postgres | 1149 MB    | 
 public | user_session_4  | table | postgres | 1149 MB    | 
(14 rows)


postgres=# \di+
                                    List of relations
 Schema |        Name         | Type  |  Owner   |     Table      |  Size  | Description 
--------+---------------------+-------+----------+----------------+--------+-------------
 public | user_info_0_pkey    | index | postgres | user_info_0    | 428 MB | 
 public | user_info_1_pkey    | index | postgres | user_info_1    | 428 MB | 
 public | user_info_2_pkey    | index | postgres | user_info_2    | 428 MB | 
 public | user_info_3_pkey    | index | postgres | user_info_3    | 428 MB | 
 public | user_info_4_pkey    | index | postgres | user_info_4    | 428 MB | 
 public | user_session_0_pkey | index | postgres | user_session_0 | 428 MB | 
 public | user_session_1_pkey | index | postgres | user_session_1 | 428 MB | 
 public | user_session_2_pkey | index | postgres | user_session_2 | 428 MB | 
 public | user_session_3_pkey | index | postgres | user_session_3 | 428 MB | 
 public | user_session_4_pkey | index | postgres | user_session_4 | 428 MB | 
(10 rows)





1. 测试脚本

$ vi test0.sql
\setrandom userid 1 20000000
SELECT f_user_login_0(:userid);
SELECT f_user_logout_0(:userid);
$ vi test1.sql
\setrandom userid 20000001 40000000
SELECT f_user_login_1(:userid);
SELECT f_user_logout_1(:userid);
$ vi test2.sql
\setrandom userid 40000001 60000000
SELECT f_user_login_2(:userid);
SELECT f_user_logout_2(:userid);
$ vi test3.sql
\setrandom userid 60000001 80000000
SELECT f_user_login_3(:userid);
SELECT f_user_logout_3(:userid);
$ vi test4.sql
\setrandom userid 80000001 100000000
SELECT f_user_login_4(:userid);
SELECT f_user_logout_4(:userid);





2. 压力测试

pgbench -M prepared -n -r -f ./test0.sql -f ./test1.sql -f ./test2.sql -f ./test3.sql -f ./test4.sql -c 16 -j 4 -T 180 -h $PGDATA -p 5432 -U postgres postgres >./test.log



测试结果

postgres@150-> cat test.log
transaction type: Custom query
scaling factor: 1
query mode: prepared
number of clients: 16
number of threads: 4
duration: 180 s
number of transactions actually processed: 1730323
tps = 9611.129846 (including connections establishing)
tps = 9611.928556 (excluding connections establishing)
statement latencies in milliseconds, file 1:
        0.002554        \setrandom userid 1 20000000
        0.899903        SELECT f_user_login_0(:userid);
        0.758023        SELECT f_user_logout_0(:userid);
statement latencies in milliseconds, file 2:
        0.002608        \setrandom userid 20000001 40000000
        0.900919        SELECT f_user_login_1(:userid);
        0.756734        SELECT f_user_logout_1(:userid);
statement latencies in milliseconds, file 3:
        0.002611        \setrandom userid 40000001 60000000
        0.907649        SELECT f_user_login_2(:userid);
        0.758628        SELECT f_user_logout_2(:userid);
statement latencies in milliseconds, file 4:
        0.002633        \setrandom userid 60000001 80000000
        0.901050        SELECT f_user_login_3(:userid);
        0.757335        SELECT f_user_logout_3(:userid);
statement latencies in milliseconds, file 5:
        0.002649        \setrandom userid 80000001 100000000
        0.896310        SELECT f_user_login_4(:userid);
        0.758776        SELECT f_user_logout_4(:userid);



[参考]
1. http://blog.163.com/digoal@126/blog/static/163877040201221382150858/
2. http://blog.163.com/digoal@126/blog/static/163877040201221333411196/

Flag Counter
