PostgreSQL research

PostgreSQL as a data service application case

2013-02-21 16:35:10   查看原文>>

场景描述 : 
客户端定期上传安装和卸载APK的列表消息到服务端供数据分析.
数据结构如下 : 

-- apk name 字典
create table apk (id int8 primary key, apk_name text unique);

-- 测试数据, 生成10W个应用.
insert into apk select generate_series(1,100000), md5(clock_timestamp()::text);

-- 消息数据类型
create type msg as 
(apk_id int8, -- 应用ID
apk_ver int, -- 应用版本
apk_system boolean, -- 是否为预装应用
act_time timestamp without time zone -- 时间
);

-- 消息表
create table apk_info 
(dev_id int8, -- 设备ID
install_msg msg[], -- 应用安装信息列表
uninstall_msg msg[], -- 应用卸载信息列表
upload_time timestamp without time zone, -- 消息上传时间
other_info text -- 其他信息
);
create index idx_apk_info_time on apk_info(upload_time);

-- 合成消息表
create table apk_info_agg 
(dev_id int8 primary key, 
install_msg msg[], 
uninstall_msg msg[], 
upload_time timestamp without time zone[], 
other_info text[]);



-- 测试数据, 

do language plpgsql $$
declare
  v_dev_id int8; 
  v_apk_id int8; 
  v_install_msg msg[];
  v_uninstall_msg msg[];
  v_other_info text;
  i int;
  x int;
begin
i := 0;
v_other_info := 'test';
loop
  x := 0;
  -- 假设有10亿个设备ID
  v_dev_id := round(random()*100000000);
  -- 生成500000条上传消息
  if i>500000 then
    exit;
  end if;
  loop
    -- 假设每个消息包含的消息数组元素为20个.
    -- 也就是20条安装信息和20条卸载信息
    if x>20 then
      exit;
    end if;
    -- 假设有10W个应用ID, 随机生成安装的应用ID
    v_apk_id := round(random()*100000);
    if x=0 then
      v_install_msg := array[(v_apk_id, 0, false, clock_timestamp())]::msg[];
    else
      v_install_msg := array_cat(v_install_msg, array[(v_apk_id, 0, false, clock_timestamp())]::msg[]);
    end if;
    -- 假设有10W个应用ID, 随机生成卸载的应用ID
    v_apk_id := round(random()*100000);
    if x=0 then
      v_uninstall_msg := array[(v_apk_id, 0, false, clock_timestamp())]::msg[];
    else 
      v_uninstall_msg := array_cat(v_uninstall_msg, array[(v_apk_id, 0, false, clock_timestamp())]::msg[]);
    end if;
    x := x+1;
  end loop;
  insert into apk_info(dev_id, install_msg, uninstall_msg, upload_time, other_info)
    values (v_dev_id, v_install_msg, v_uninstall_msg, clock_timestamp(), v_other_info);
  i := i+1;
end loop;
end;
$$;



-- 数据样本

digoal=# select count(*) from apk;
 count  
--------
 100000
(1 row)

Time: 21.544 ms
digoal=# select count(*) from apk_info;
 count  
--------
 500001
(1 row)

Time: 105.652 ms

digoal=# select * from apk_info limit 1;
-[ RECORD 1 ]-
dev_id        | 53866103
install_msg   | {"(441356,0,f,\"2013-02-21 15:06:20.050831\")","(960322,0,f,\"2013-02-21 15:06:20.051149\")","(926606,0,f,\"2013-02-21 15:06:20.051268\")","(787820,0,f,\"2013-02-21 15:06:20.051286\")","(963924,0,f,\"2013-02-21 15:06:20.051302\")","(117365,0,f,\"2013-02-21 15:06:20.05132\")","(987175,0,f,\"2013-02-21 15:06:20.051335\")","(354263,0,f,\"2013-02-21 15:06:20.051351\")","(473302,0,f,\"2013-02-21 15:06:20.051368\")","(236770,0,f,\"2013-02-21 15:06:20.051384\")","(849336,0,f,\"2013-02-21 15:06:20.0514\")","(903571,0,f,\"2013-02-21 15:06:20.051416\")","(995056,0,f,\"2013-02-21 15:06:20.051432\")","(251080,0,f,\"2013-02-21 15:06:20.051449\")","(403374,0,f,\"2013-02-21 15:06:20.051465\")","(489233,0,f,\"2013-02-21 15:06:20.051481\")","(1125,0,f,\"2013-02-21 15:06:20.051497\")","(487261,0,f,\"2013-02-21 15:06:20.051514\")","(686854,0,f,\"2013-02-21 15:06:20.05153\")","(887800,0,f,\"2013-02-21 15:06:20.051546\")","(300390,0,f,\"2013-02-21 15:06:20.051562\")"}
uninstall_msg | {"(31827,0,f,\"2013-02-21 15:06:20.051009\")","(642531,0,f,\"2013-02-21 15:06:20.051252\")","(237298,0,f,\"2013-02-21 15:06:20.051277\")","(960070,0,f,\"2013-02-21 15:06:20.051294\")","(25309,0,f,\"2013-02-21 15:06:20.05131\")","(942065,0,f,\"2013-02-21 15:06:20.051327\")","(777628,0,f,\"2013-02-21 15:06:20.051343\")","(684844,0,f,\"2013-02-21 15:06:20.051359\")","(918857,0,f,\"2013-02-21 15:06:20.051375\")","(34467,0,f,\"2013-02-21 15:06:20.051391\")","(173178,0,f,\"2013-02-21 15:06:20.051407\")","(358861,0,f,\"2013-02-21 15:06:20.051423\")","(244461,0,f,\"2013-02-21 15:06:20.05144\")","(950572,0,f,\"2013-02-21 15:06:20.051456\")","(969297,0,f,\"2013-02-21 15:06:20.051473\")","(844730,0,f,\"2013-02-21 15:06:20.051489\")","(449556,0,f,\"2013-02-21 15:06:20.051505\")","(927730,0,f,\"2013-02-21 15:06:20.051521\")","(275081,0,f,\"2013-02-21 15:06:20.051537\")","(650777,0,f,\"2013-02-21 15:06:20.051554\")","(5165,0,f,\"2013-02-21 15:06:20.05157\")"}
upload_time   | 2013-02-21 15:06:20.051775
other_info    | test
Time: 0.664 ms



-- 将数据按照dev_id合成. 便于查询和分析 : 
-- 合成时需要排序, 因为所有字段的元素必须一一对应.
-- 合成举例 : 

begin;
-- 创建聚合表的临时表
drop table if exists tmp_apk_info_agg;
create table tmp_apk_info_agg (like apk_info_agg);
-- 聚合表的数据插入临时表
insert into tmp_apk_info_agg select * from apk_info_agg;
-- 清除聚合表的数据
truncate table apk_info_agg;
-- 整合信息表和聚合表的数据, 假设每天整合1次.
-- 当然粒度可以更细
insert into apk_info_agg (dev_id, install_msg, uninstall_msg, upload_time, other_info)
select 
dev_id, 
array_agg(ins order by upload_time), 
array_agg(unins order by upload_time), 
array_agg(upload_time order by upload_time), 
array_agg(other_info order by upload_time) 
from 
  (select 
   dev_id,
   unnest(install_msg) as ins,
   unnest(uninstall_msg) as unins , 
   upload_time, 
   other_info from apk_info
   where upload_time <= current_date
   union all
   select
   dev_id,
   unnest(install_msg) as ins,
   unnest(uninstall_msg) as unins,
   unnest(upload_time) as upload_time,
   unnest(other_info) as other_info
   from tmp_apk_info_agg
   ) as t 
group by dev_id;
-- 删除已整合的信息表的数据
delete from apk_info where upload_time <= current_date;
end;



-- 整合后记录数如下 : 

digoal=# select count(*) from apk_info_agg ;
 count  
--------
 498788
(1 row)
Time: 112.713 ms



-- 分析举例
1. 先安装a应用后安装b应用的用户有多少.

create or replace function install_time_comp (i_msg msg[], i_apk_id1 int8, i_apk_id2 int8) returns boolean as $$
declare
  v_msg msg;
  v_apk_id1_mintime timestamp without time zone;
  v_apk_id2_mintime timestamp without time zone;
begin
  foreach v_msg in array i_msg loop
    if v_msg.apk_id=i_apk_id1 then
      v_apk_id1_mintime := least(v_apk_id1_mintime, v_msg.act_time);
    elsif v_msg.apk_id=i_apk_id2 then
      v_apk_id2_mintime := least(v_apk_id2_mintime, v_msg.act_time);
    end if;
  end loop;
  return v_apk_id1_mintime > v_apk_id2_mintime;
end;
$$ language plpgsql;


-- 查询速度 : 
-- 50W用户, 每条用户的数组长度为20. 响应速度如下.

digoal=# select dev_id from apk_info_agg where install_time_comp(install_msg, 94466, 84721) is true;
 dev_id 
--------
     98
(1 row)
Time: 33435.329 ms


简单的推算出1亿用户, 平均每个用户的数组长度为2000的情况下该运算速度应该是660000秒约183小时.
测试机的CPU : 

Intel(R) Xeon(R) CPU           E5504  @ 2.00GHz



【瓶颈分析】
由于分析过程中, 每次都需要遍历整个msg数组, 当数组越来越大后, 性能还会下降.
可以考虑将分析移到程序端并行执行. 数据库只当数据存储用.
或者将数据转换成JSON存储到mongoDB中, 借助mongoDB来分析.

【参考】
1. http://www.postgresql.org/docs/devel/static/functions-array.html
2. http://blog.163.com/digoal@126/blog/static/163877040201201275922529/
3. http://blog.163.com/digoal@126/blog/static/163877040201201272718196/
4. http://blog.163.com/digoal@126/blog/static/1638770402013030104627983/
5. http://blog.163.com/digoal@126/blog/static/16387704020130682522480/
6. http://blog.163.com/digoal@126/blog/static/163877040201302410511382/
7. http://blog.163.com/digoal@126/blog/static/16387704020124180182088/
8. http://blog.163.com/digoal@126/blog/static/16387704020128594046594/
9. http://www.postgresql.org/docs/devel/static/functions-conditional.html#FUNCTIONS-GREATEST-LEAST

